
10-6-sine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myAudioFiles 0002dc76  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005204  08032c78  08032c78  00042c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  08037e7c  08037e7c  00047e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08037f60  08037f60  00050010  2**0
                  CONTENTS
  5 .ARM          00000008  08037f60  08037f60  00047f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08037f68  08037f68  00050010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08037f68  08037f68  00047f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08037f6c  08037f6c  00047f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20000000  08037f70  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00050010  2**0
                  CONTENTS
 11 .bss          0000022c  20000010  20000010  00050010  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000023c  2000023c  00050010  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00050010  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00050040  2**0
                  CONTENTS, READONLY
 15 .debug_info   000102b9  00000000  00000000  00050083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002784  00000000  00000000  0006033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fe8  00000000  00000000  00062ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c82  00000000  00000000  00063aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022014  00000000  00000000  0006472a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000147f2  00000000  00000000  0008673e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce4c4  00000000  00000000  0009af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004338  00000000  00000000  001693f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0016d72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08032c78 <__do_global_dtors_aux>:
 8032c78:	b510      	push	{r4, lr}
 8032c7a:	4c05      	ldr	r4, [pc, #20]	; (8032c90 <__do_global_dtors_aux+0x18>)
 8032c7c:	7823      	ldrb	r3, [r4, #0]
 8032c7e:	b933      	cbnz	r3, 8032c8e <__do_global_dtors_aux+0x16>
 8032c80:	4b04      	ldr	r3, [pc, #16]	; (8032c94 <__do_global_dtors_aux+0x1c>)
 8032c82:	b113      	cbz	r3, 8032c8a <__do_global_dtors_aux+0x12>
 8032c84:	4804      	ldr	r0, [pc, #16]	; (8032c98 <__do_global_dtors_aux+0x20>)
 8032c86:	f3af 8000 	nop.w
 8032c8a:	2301      	movs	r3, #1
 8032c8c:	7023      	strb	r3, [r4, #0]
 8032c8e:	bd10      	pop	{r4, pc}
 8032c90:	20000010 	.word	0x20000010
 8032c94:	00000000 	.word	0x00000000
 8032c98:	08037e64 	.word	0x08037e64

08032c9c <frame_dummy>:
 8032c9c:	b508      	push	{r3, lr}
 8032c9e:	4b03      	ldr	r3, [pc, #12]	; (8032cac <frame_dummy+0x10>)
 8032ca0:	b11b      	cbz	r3, 8032caa <frame_dummy+0xe>
 8032ca2:	4903      	ldr	r1, [pc, #12]	; (8032cb0 <frame_dummy+0x14>)
 8032ca4:	4803      	ldr	r0, [pc, #12]	; (8032cb4 <frame_dummy+0x18>)
 8032ca6:	f3af 8000 	nop.w
 8032caa:	bd08      	pop	{r3, pc}
 8032cac:	00000000 	.word	0x00000000
 8032cb0:	20000014 	.word	0x20000014
 8032cb4:	08037e64 	.word	0x08037e64

08032cb8 <__aeabi_uldivmod>:
 8032cb8:	b953      	cbnz	r3, 8032cd0 <__aeabi_uldivmod+0x18>
 8032cba:	b94a      	cbnz	r2, 8032cd0 <__aeabi_uldivmod+0x18>
 8032cbc:	2900      	cmp	r1, #0
 8032cbe:	bf08      	it	eq
 8032cc0:	2800      	cmpeq	r0, #0
 8032cc2:	bf1c      	itt	ne
 8032cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8032cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8032ccc:	f000 b970 	b.w	8032fb0 <__aeabi_idiv0>
 8032cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8032cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8032cd8:	f000 f806 	bl	8032ce8 <__udivmoddi4>
 8032cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8032ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8032ce4:	b004      	add	sp, #16
 8032ce6:	4770      	bx	lr

08032ce8 <__udivmoddi4>:
 8032ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8032cec:	9e08      	ldr	r6, [sp, #32]
 8032cee:	460d      	mov	r5, r1
 8032cf0:	4604      	mov	r4, r0
 8032cf2:	460f      	mov	r7, r1
 8032cf4:	2b00      	cmp	r3, #0
 8032cf6:	d14a      	bne.n	8032d8e <__udivmoddi4+0xa6>
 8032cf8:	428a      	cmp	r2, r1
 8032cfa:	4694      	mov	ip, r2
 8032cfc:	d965      	bls.n	8032dca <__udivmoddi4+0xe2>
 8032cfe:	fab2 f382 	clz	r3, r2
 8032d02:	b143      	cbz	r3, 8032d16 <__udivmoddi4+0x2e>
 8032d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8032d08:	f1c3 0220 	rsb	r2, r3, #32
 8032d0c:	409f      	lsls	r7, r3
 8032d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8032d12:	4317      	orrs	r7, r2
 8032d14:	409c      	lsls	r4, r3
 8032d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8032d1a:	fa1f f58c 	uxth.w	r5, ip
 8032d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8032d22:	0c22      	lsrs	r2, r4, #16
 8032d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8032d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8032d2c:	fb01 f005 	mul.w	r0, r1, r5
 8032d30:	4290      	cmp	r0, r2
 8032d32:	d90a      	bls.n	8032d4a <__udivmoddi4+0x62>
 8032d34:	eb1c 0202 	adds.w	r2, ip, r2
 8032d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8032d3c:	f080 811c 	bcs.w	8032f78 <__udivmoddi4+0x290>
 8032d40:	4290      	cmp	r0, r2
 8032d42:	f240 8119 	bls.w	8032f78 <__udivmoddi4+0x290>
 8032d46:	3902      	subs	r1, #2
 8032d48:	4462      	add	r2, ip
 8032d4a:	1a12      	subs	r2, r2, r0
 8032d4c:	b2a4      	uxth	r4, r4
 8032d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8032d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8032d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8032d5a:	fb00 f505 	mul.w	r5, r0, r5
 8032d5e:	42a5      	cmp	r5, r4
 8032d60:	d90a      	bls.n	8032d78 <__udivmoddi4+0x90>
 8032d62:	eb1c 0404 	adds.w	r4, ip, r4
 8032d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8032d6a:	f080 8107 	bcs.w	8032f7c <__udivmoddi4+0x294>
 8032d6e:	42a5      	cmp	r5, r4
 8032d70:	f240 8104 	bls.w	8032f7c <__udivmoddi4+0x294>
 8032d74:	4464      	add	r4, ip
 8032d76:	3802      	subs	r0, #2
 8032d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8032d7c:	1b64      	subs	r4, r4, r5
 8032d7e:	2100      	movs	r1, #0
 8032d80:	b11e      	cbz	r6, 8032d8a <__udivmoddi4+0xa2>
 8032d82:	40dc      	lsrs	r4, r3
 8032d84:	2300      	movs	r3, #0
 8032d86:	e9c6 4300 	strd	r4, r3, [r6]
 8032d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032d8e:	428b      	cmp	r3, r1
 8032d90:	d908      	bls.n	8032da4 <__udivmoddi4+0xbc>
 8032d92:	2e00      	cmp	r6, #0
 8032d94:	f000 80ed 	beq.w	8032f72 <__udivmoddi4+0x28a>
 8032d98:	2100      	movs	r1, #0
 8032d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8032d9e:	4608      	mov	r0, r1
 8032da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032da4:	fab3 f183 	clz	r1, r3
 8032da8:	2900      	cmp	r1, #0
 8032daa:	d149      	bne.n	8032e40 <__udivmoddi4+0x158>
 8032dac:	42ab      	cmp	r3, r5
 8032dae:	d302      	bcc.n	8032db6 <__udivmoddi4+0xce>
 8032db0:	4282      	cmp	r2, r0
 8032db2:	f200 80f8 	bhi.w	8032fa6 <__udivmoddi4+0x2be>
 8032db6:	1a84      	subs	r4, r0, r2
 8032db8:	eb65 0203 	sbc.w	r2, r5, r3
 8032dbc:	2001      	movs	r0, #1
 8032dbe:	4617      	mov	r7, r2
 8032dc0:	2e00      	cmp	r6, #0
 8032dc2:	d0e2      	beq.n	8032d8a <__udivmoddi4+0xa2>
 8032dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8032dc8:	e7df      	b.n	8032d8a <__udivmoddi4+0xa2>
 8032dca:	b902      	cbnz	r2, 8032dce <__udivmoddi4+0xe6>
 8032dcc:	deff      	udf	#255	; 0xff
 8032dce:	fab2 f382 	clz	r3, r2
 8032dd2:	2b00      	cmp	r3, #0
 8032dd4:	f040 8090 	bne.w	8032ef8 <__udivmoddi4+0x210>
 8032dd8:	1a8a      	subs	r2, r1, r2
 8032dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8032dde:	fa1f fe8c 	uxth.w	lr, ip
 8032de2:	2101      	movs	r1, #1
 8032de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8032de8:	fb07 2015 	mls	r0, r7, r5, r2
 8032dec:	0c22      	lsrs	r2, r4, #16
 8032dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8032df2:	fb0e f005 	mul.w	r0, lr, r5
 8032df6:	4290      	cmp	r0, r2
 8032df8:	d908      	bls.n	8032e0c <__udivmoddi4+0x124>
 8032dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8032dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8032e02:	d202      	bcs.n	8032e0a <__udivmoddi4+0x122>
 8032e04:	4290      	cmp	r0, r2
 8032e06:	f200 80cb 	bhi.w	8032fa0 <__udivmoddi4+0x2b8>
 8032e0a:	4645      	mov	r5, r8
 8032e0c:	1a12      	subs	r2, r2, r0
 8032e0e:	b2a4      	uxth	r4, r4
 8032e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8032e14:	fb07 2210 	mls	r2, r7, r0, r2
 8032e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8032e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8032e20:	45a6      	cmp	lr, r4
 8032e22:	d908      	bls.n	8032e36 <__udivmoddi4+0x14e>
 8032e24:	eb1c 0404 	adds.w	r4, ip, r4
 8032e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8032e2c:	d202      	bcs.n	8032e34 <__udivmoddi4+0x14c>
 8032e2e:	45a6      	cmp	lr, r4
 8032e30:	f200 80bb 	bhi.w	8032faa <__udivmoddi4+0x2c2>
 8032e34:	4610      	mov	r0, r2
 8032e36:	eba4 040e 	sub.w	r4, r4, lr
 8032e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8032e3e:	e79f      	b.n	8032d80 <__udivmoddi4+0x98>
 8032e40:	f1c1 0720 	rsb	r7, r1, #32
 8032e44:	408b      	lsls	r3, r1
 8032e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8032e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8032e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8032e52:	fa20 f307 	lsr.w	r3, r0, r7
 8032e56:	40fd      	lsrs	r5, r7
 8032e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8032e5c:	4323      	orrs	r3, r4
 8032e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8032e62:	fa1f fe8c 	uxth.w	lr, ip
 8032e66:	fb09 5518 	mls	r5, r9, r8, r5
 8032e6a:	0c1c      	lsrs	r4, r3, #16
 8032e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8032e70:	fb08 f50e 	mul.w	r5, r8, lr
 8032e74:	42a5      	cmp	r5, r4
 8032e76:	fa02 f201 	lsl.w	r2, r2, r1
 8032e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8032e7e:	d90b      	bls.n	8032e98 <__udivmoddi4+0x1b0>
 8032e80:	eb1c 0404 	adds.w	r4, ip, r4
 8032e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8032e88:	f080 8088 	bcs.w	8032f9c <__udivmoddi4+0x2b4>
 8032e8c:	42a5      	cmp	r5, r4
 8032e8e:	f240 8085 	bls.w	8032f9c <__udivmoddi4+0x2b4>
 8032e92:	f1a8 0802 	sub.w	r8, r8, #2
 8032e96:	4464      	add	r4, ip
 8032e98:	1b64      	subs	r4, r4, r5
 8032e9a:	b29d      	uxth	r5, r3
 8032e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8032ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8032ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8032ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8032eac:	45a6      	cmp	lr, r4
 8032eae:	d908      	bls.n	8032ec2 <__udivmoddi4+0x1da>
 8032eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8032eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8032eb8:	d26c      	bcs.n	8032f94 <__udivmoddi4+0x2ac>
 8032eba:	45a6      	cmp	lr, r4
 8032ebc:	d96a      	bls.n	8032f94 <__udivmoddi4+0x2ac>
 8032ebe:	3b02      	subs	r3, #2
 8032ec0:	4464      	add	r4, ip
 8032ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8032ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8032eca:	eba4 040e 	sub.w	r4, r4, lr
 8032ece:	42ac      	cmp	r4, r5
 8032ed0:	46c8      	mov	r8, r9
 8032ed2:	46ae      	mov	lr, r5
 8032ed4:	d356      	bcc.n	8032f84 <__udivmoddi4+0x29c>
 8032ed6:	d053      	beq.n	8032f80 <__udivmoddi4+0x298>
 8032ed8:	b156      	cbz	r6, 8032ef0 <__udivmoddi4+0x208>
 8032eda:	ebb0 0208 	subs.w	r2, r0, r8
 8032ede:	eb64 040e 	sbc.w	r4, r4, lr
 8032ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8032ee6:	40ca      	lsrs	r2, r1
 8032ee8:	40cc      	lsrs	r4, r1
 8032eea:	4317      	orrs	r7, r2
 8032eec:	e9c6 7400 	strd	r7, r4, [r6]
 8032ef0:	4618      	mov	r0, r3
 8032ef2:	2100      	movs	r1, #0
 8032ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032ef8:	f1c3 0120 	rsb	r1, r3, #32
 8032efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8032f00:	fa20 f201 	lsr.w	r2, r0, r1
 8032f04:	fa25 f101 	lsr.w	r1, r5, r1
 8032f08:	409d      	lsls	r5, r3
 8032f0a:	432a      	orrs	r2, r5
 8032f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8032f10:	fa1f fe8c 	uxth.w	lr, ip
 8032f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8032f18:	fb07 1510 	mls	r5, r7, r0, r1
 8032f1c:	0c11      	lsrs	r1, r2, #16
 8032f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8032f22:	fb00 f50e 	mul.w	r5, r0, lr
 8032f26:	428d      	cmp	r5, r1
 8032f28:	fa04 f403 	lsl.w	r4, r4, r3
 8032f2c:	d908      	bls.n	8032f40 <__udivmoddi4+0x258>
 8032f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8032f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8032f36:	d22f      	bcs.n	8032f98 <__udivmoddi4+0x2b0>
 8032f38:	428d      	cmp	r5, r1
 8032f3a:	d92d      	bls.n	8032f98 <__udivmoddi4+0x2b0>
 8032f3c:	3802      	subs	r0, #2
 8032f3e:	4461      	add	r1, ip
 8032f40:	1b49      	subs	r1, r1, r5
 8032f42:	b292      	uxth	r2, r2
 8032f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8032f48:	fb07 1115 	mls	r1, r7, r5, r1
 8032f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8032f50:	fb05 f10e 	mul.w	r1, r5, lr
 8032f54:	4291      	cmp	r1, r2
 8032f56:	d908      	bls.n	8032f6a <__udivmoddi4+0x282>
 8032f58:	eb1c 0202 	adds.w	r2, ip, r2
 8032f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8032f60:	d216      	bcs.n	8032f90 <__udivmoddi4+0x2a8>
 8032f62:	4291      	cmp	r1, r2
 8032f64:	d914      	bls.n	8032f90 <__udivmoddi4+0x2a8>
 8032f66:	3d02      	subs	r5, #2
 8032f68:	4462      	add	r2, ip
 8032f6a:	1a52      	subs	r2, r2, r1
 8032f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8032f70:	e738      	b.n	8032de4 <__udivmoddi4+0xfc>
 8032f72:	4631      	mov	r1, r6
 8032f74:	4630      	mov	r0, r6
 8032f76:	e708      	b.n	8032d8a <__udivmoddi4+0xa2>
 8032f78:	4639      	mov	r1, r7
 8032f7a:	e6e6      	b.n	8032d4a <__udivmoddi4+0x62>
 8032f7c:	4610      	mov	r0, r2
 8032f7e:	e6fb      	b.n	8032d78 <__udivmoddi4+0x90>
 8032f80:	4548      	cmp	r0, r9
 8032f82:	d2a9      	bcs.n	8032ed8 <__udivmoddi4+0x1f0>
 8032f84:	ebb9 0802 	subs.w	r8, r9, r2
 8032f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8032f8c:	3b01      	subs	r3, #1
 8032f8e:	e7a3      	b.n	8032ed8 <__udivmoddi4+0x1f0>
 8032f90:	4645      	mov	r5, r8
 8032f92:	e7ea      	b.n	8032f6a <__udivmoddi4+0x282>
 8032f94:	462b      	mov	r3, r5
 8032f96:	e794      	b.n	8032ec2 <__udivmoddi4+0x1da>
 8032f98:	4640      	mov	r0, r8
 8032f9a:	e7d1      	b.n	8032f40 <__udivmoddi4+0x258>
 8032f9c:	46d0      	mov	r8, sl
 8032f9e:	e77b      	b.n	8032e98 <__udivmoddi4+0x1b0>
 8032fa0:	3d02      	subs	r5, #2
 8032fa2:	4462      	add	r2, ip
 8032fa4:	e732      	b.n	8032e0c <__udivmoddi4+0x124>
 8032fa6:	4608      	mov	r0, r1
 8032fa8:	e70a      	b.n	8032dc0 <__udivmoddi4+0xd8>
 8032faa:	4464      	add	r4, ip
 8032fac:	3802      	subs	r0, #2
 8032fae:	e742      	b.n	8032e36 <__udivmoddi4+0x14e>

08032fb0 <__aeabi_idiv0>:
 8032fb0:	4770      	bx	lr
 8032fb2:	bf00      	nop

08032fb4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8032fb4:	b580      	push	{r7, lr}
 8032fb6:	b084      	sub	sp, #16
 8032fb8:	af02      	add	r7, sp, #8
 8032fba:	4603      	mov	r3, r0
 8032fbc:	6039      	str	r1, [r7, #0]
 8032fbe:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8032fc0:	4a09      	ldr	r2, [pc, #36]	; (8032fe8 <write_register+0x34>)
 8032fc2:	79fb      	ldrb	r3, [r7, #7]
 8032fc4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8032fc6:	683b      	ldr	r3, [r7, #0]
 8032fc8:	781a      	ldrb	r2, [r3, #0]
 8032fca:	4b07      	ldr	r3, [pc, #28]	; (8032fe8 <write_register+0x34>)
 8032fcc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8032fce:	2364      	movs	r3, #100	; 0x64
 8032fd0:	9300      	str	r3, [sp, #0]
 8032fd2:	2302      	movs	r3, #2
 8032fd4:	4a04      	ldr	r2, [pc, #16]	; (8032fe8 <write_register+0x34>)
 8032fd6:	2194      	movs	r1, #148	; 0x94
 8032fd8:	4804      	ldr	r0, [pc, #16]	; (8032fec <write_register+0x38>)
 8032fda:	f002 f8cb 	bl	8035174 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8032fde:	bf00      	nop
 8032fe0:	3708      	adds	r7, #8
 8032fe2:	46bd      	mov	sp, r7
 8032fe4:	bd80      	pop	{r7, pc}
 8032fe6:	bf00      	nop
 8032fe8:	2000002c 	.word	0x2000002c
 8032fec:	20000030 	.word	0x20000030

08032ff0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8032ff0:	b580      	push	{r7, lr}
 8032ff2:	b084      	sub	sp, #16
 8032ff4:	af02      	add	r7, sp, #8
 8032ff6:	4603      	mov	r3, r0
 8032ff8:	6039      	str	r1, [r7, #0]
 8032ffa:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8032ffc:	4a0b      	ldr	r2, [pc, #44]	; (803302c <read_register+0x3c>)
 8032ffe:	79fb      	ldrb	r3, [r7, #7]
 8033000:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8033002:	2364      	movs	r3, #100	; 0x64
 8033004:	9300      	str	r3, [sp, #0]
 8033006:	2301      	movs	r3, #1
 8033008:	4a08      	ldr	r2, [pc, #32]	; (803302c <read_register+0x3c>)
 803300a:	2194      	movs	r1, #148	; 0x94
 803300c:	4808      	ldr	r0, [pc, #32]	; (8033030 <read_register+0x40>)
 803300e:	f002 f8b1 	bl	8035174 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8033012:	2364      	movs	r3, #100	; 0x64
 8033014:	9300      	str	r3, [sp, #0]
 8033016:	2301      	movs	r3, #1
 8033018:	683a      	ldr	r2, [r7, #0]
 803301a:	2194      	movs	r1, #148	; 0x94
 803301c:	4804      	ldr	r0, [pc, #16]	; (8033030 <read_register+0x40>)
 803301e:	f002 f9a7 	bl	8035370 <HAL_I2C_Master_Receive>
}
 8033022:	bf00      	nop
 8033024:	3708      	adds	r7, #8
 8033026:	46bd      	mov	sp, r7
 8033028:	bd80      	pop	{r7, pc}
 803302a:	bf00      	nop
 803302c:	2000002c 	.word	0x2000002c
 8033030:	20000030 	.word	0x20000030

08033034 <CS43_Init>:
//-------------- Public Functions ----------------//
// Function(1): Initialisation
//

void CS43_Init(I2C_HandleTypeDef i2c_handle)//, CS43_MODE outputMode) //hardcode -db
{
 8033034:	b084      	sub	sp, #16
 8033036:	b580      	push	{r7, lr}
 8033038:	af00      	add	r7, sp, #0
 803303a:	f107 0c08 	add.w	ip, r7, #8
 803303e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8033042:	4b7b      	ldr	r3, [pc, #492]	; (8033230 <CS43_Init+0x1fc>)
 8033044:	2200      	movs	r2, #0
 8033046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 803304a:	4b79      	ldr	r3, [pc, #484]	; (8033230 <CS43_Init+0x1fc>)
 803304c:	681b      	ldr	r3, [r3, #0]
 803304e:	69da      	ldr	r2, [r3, #28]
 8033050:	4b77      	ldr	r3, [pc, #476]	; (8033230 <CS43_Init+0x1fc>)
 8033052:	681b      	ldr	r3, [r3, #0]
 8033054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8033058:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 803305a:	2201      	movs	r2, #1
 803305c:	2110      	movs	r1, #16
 803305e:	4875      	ldr	r0, [pc, #468]	; (8033234 <CS43_Init+0x200>)
 8033060:	f001 ff2a 	bl	8034eb8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8033064:	4b74      	ldr	r3, [pc, #464]	; (8033238 <CS43_Init+0x204>)
 8033066:	4618      	mov	r0, r3
 8033068:	f107 0308 	add.w	r3, r7, #8
 803306c:	2254      	movs	r2, #84	; 0x54
 803306e:	4619      	mov	r1, r3
 8033070:	f004 feea 	bl	8037e48 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8033074:	4b71      	ldr	r3, [pc, #452]	; (803323c <CS43_Init+0x208>)
 8033076:	2201      	movs	r2, #1
 8033078:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 803307a:	4970      	ldr	r1, [pc, #448]	; (803323c <CS43_Init+0x208>)
 803307c:	2002      	movs	r0, #2
 803307e:	f7ff ff99 	bl	8032fb4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8033082:	4b6e      	ldr	r3, [pc, #440]	; (803323c <CS43_Init+0x208>)
 8033084:	2280      	movs	r2, #128	; 0x80
 8033086:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8033088:	4b6c      	ldr	r3, [pc, #432]	; (803323c <CS43_Init+0x208>)
 803308a:	785b      	ldrb	r3, [r3, #1]
 803308c:	f043 0320 	orr.w	r3, r3, #32
 8033090:	b2da      	uxtb	r2, r3
 8033092:	4b6a      	ldr	r3, [pc, #424]	; (803323c <CS43_Init+0x208>)
 8033094:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8033096:	4b69      	ldr	r3, [pc, #420]	; (803323c <CS43_Init+0x208>)
 8033098:	785b      	ldrb	r3, [r3, #1]
 803309a:	f043 030c 	orr.w	r3, r3, #12
 803309e:	b2da      	uxtb	r2, r3
 80330a0:	4b66      	ldr	r3, [pc, #408]	; (803323c <CS43_Init+0x208>)
 80330a2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80330a4:	4b65      	ldr	r3, [pc, #404]	; (803323c <CS43_Init+0x208>)
 80330a6:	785b      	ldrb	r3, [r3, #1]
 80330a8:	f043 0303 	orr.w	r3, r3, #3
 80330ac:	b2da      	uxtb	r2, r3
 80330ae:	4b63      	ldr	r3, [pc, #396]	; (803323c <CS43_Init+0x208>)
 80330b0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80330b2:	4963      	ldr	r1, [pc, #396]	; (8033240 <CS43_Init+0x20c>)
 80330b4:	2004      	movs	r0, #4
 80330b6:	f7ff ff7d 	bl	8032fb4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80330ba:	4b60      	ldr	r3, [pc, #384]	; (803323c <CS43_Init+0x208>)
 80330bc:	2280      	movs	r2, #128	; 0x80
 80330be:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80330c0:	495f      	ldr	r1, [pc, #380]	; (8033240 <CS43_Init+0x20c>)
 80330c2:	2005      	movs	r0, #5
 80330c4:	f7ff ff76 	bl	8032fb4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80330c8:	495c      	ldr	r1, [pc, #368]	; (803323c <CS43_Init+0x208>)
 80330ca:	2006      	movs	r0, #6
 80330cc:	f7ff ff90 	bl	8032ff0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80330d0:	4b5a      	ldr	r3, [pc, #360]	; (803323c <CS43_Init+0x208>)
 80330d2:	785b      	ldrb	r3, [r3, #1]
 80330d4:	f003 0320 	and.w	r3, r3, #32
 80330d8:	b2da      	uxtb	r2, r3
 80330da:	4b58      	ldr	r3, [pc, #352]	; (803323c <CS43_Init+0x208>)
 80330dc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80330de:	4b57      	ldr	r3, [pc, #348]	; (803323c <CS43_Init+0x208>)
 80330e0:	785b      	ldrb	r3, [r3, #1]
 80330e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80330e6:	b2da      	uxtb	r2, r3
 80330e8:	4b54      	ldr	r3, [pc, #336]	; (803323c <CS43_Init+0x208>)
 80330ea:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80330ec:	4b53      	ldr	r3, [pc, #332]	; (803323c <CS43_Init+0x208>)
 80330ee:	785b      	ldrb	r3, [r3, #1]
 80330f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80330f4:	b2da      	uxtb	r2, r3
 80330f6:	4b51      	ldr	r3, [pc, #324]	; (803323c <CS43_Init+0x208>)
 80330f8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80330fa:	4b50      	ldr	r3, [pc, #320]	; (803323c <CS43_Init+0x208>)
 80330fc:	785b      	ldrb	r3, [r3, #1]
 80330fe:	f023 0310 	bic.w	r3, r3, #16
 8033102:	b2da      	uxtb	r2, r3
 8033104:	4b4d      	ldr	r3, [pc, #308]	; (803323c <CS43_Init+0x208>)
 8033106:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8033108:	4b4c      	ldr	r3, [pc, #304]	; (803323c <CS43_Init+0x208>)
 803310a:	785b      	ldrb	r3, [r3, #1]
 803310c:	f023 0304 	bic.w	r3, r3, #4
 8033110:	b2da      	uxtb	r2, r3
 8033112:	4b4a      	ldr	r3, [pc, #296]	; (803323c <CS43_Init+0x208>)
 8033114:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8033116:	4b49      	ldr	r3, [pc, #292]	; (803323c <CS43_Init+0x208>)
 8033118:	785b      	ldrb	r3, [r3, #1]
 803311a:	f043 0304 	orr.w	r3, r3, #4
 803311e:	b2da      	uxtb	r2, r3
 8033120:	4b46      	ldr	r3, [pc, #280]	; (803323c <CS43_Init+0x208>)
 8033122:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8033124:	4b45      	ldr	r3, [pc, #276]	; (803323c <CS43_Init+0x208>)
 8033126:	785b      	ldrb	r3, [r3, #1]
 8033128:	f043 0303 	orr.w	r3, r3, #3
 803312c:	b2da      	uxtb	r2, r3
 803312e:	4b43      	ldr	r3, [pc, #268]	; (803323c <CS43_Init+0x208>)
 8033130:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8033132:	4943      	ldr	r1, [pc, #268]	; (8033240 <CS43_Init+0x20c>)
 8033134:	2006      	movs	r0, #6
 8033136:	f7ff ff3d 	bl	8032fb4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 803313a:	4941      	ldr	r1, [pc, #260]	; (8033240 <CS43_Init+0x20c>)
 803313c:	2008      	movs	r0, #8
 803313e:	f7ff ff57 	bl	8032ff0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8033142:	4b3e      	ldr	r3, [pc, #248]	; (803323c <CS43_Init+0x208>)
 8033144:	785b      	ldrb	r3, [r3, #1]
 8033146:	f023 030f 	bic.w	r3, r3, #15
 803314a:	b2da      	uxtb	r2, r3
 803314c:	4b3b      	ldr	r3, [pc, #236]	; (803323c <CS43_Init+0x208>)
 803314e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8033150:	4b3a      	ldr	r3, [pc, #232]	; (803323c <CS43_Init+0x208>)
 8033152:	785b      	ldrb	r3, [r3, #1]
 8033154:	f043 0301 	orr.w	r3, r3, #1
 8033158:	b2da      	uxtb	r2, r3
 803315a:	4b38      	ldr	r3, [pc, #224]	; (803323c <CS43_Init+0x208>)
 803315c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 803315e:	4938      	ldr	r1, [pc, #224]	; (8033240 <CS43_Init+0x20c>)
 8033160:	2008      	movs	r0, #8
 8033162:	f7ff ff27 	bl	8032fb4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8033166:	4936      	ldr	r1, [pc, #216]	; (8033240 <CS43_Init+0x20c>)
 8033168:	2009      	movs	r0, #9
 803316a:	f7ff ff41 	bl	8032ff0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 803316e:	4b33      	ldr	r3, [pc, #204]	; (803323c <CS43_Init+0x208>)
 8033170:	785b      	ldrb	r3, [r3, #1]
 8033172:	f023 030f 	bic.w	r3, r3, #15
 8033176:	b2da      	uxtb	r2, r3
 8033178:	4b30      	ldr	r3, [pc, #192]	; (803323c <CS43_Init+0x208>)
 803317a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 803317c:	4b2f      	ldr	r3, [pc, #188]	; (803323c <CS43_Init+0x208>)
 803317e:	785b      	ldrb	r3, [r3, #1]
 8033180:	f043 0301 	orr.w	r3, r3, #1
 8033184:	b2da      	uxtb	r2, r3
 8033186:	4b2d      	ldr	r3, [pc, #180]	; (803323c <CS43_Init+0x208>)
 8033188:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 803318a:	492d      	ldr	r1, [pc, #180]	; (8033240 <CS43_Init+0x20c>)
 803318c:	2009      	movs	r0, #9
 803318e:	f7ff ff11 	bl	8032fb4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8033192:	492b      	ldr	r1, [pc, #172]	; (8033240 <CS43_Init+0x20c>)
 8033194:	200e      	movs	r0, #14
 8033196:	f7ff ff2b 	bl	8032ff0 <read_register>
//	if(outputMode == MODE_ANALOG) //hardcoding
//	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 803319a:	4b28      	ldr	r3, [pc, #160]	; (803323c <CS43_Init+0x208>)
 803319c:	785b      	ldrb	r3, [r3, #1]
 803319e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80331a2:	b2da      	uxtb	r2, r3
 80331a4:	4b25      	ldr	r3, [pc, #148]	; (803323c <CS43_Init+0x208>)
 80331a6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80331a8:	4b24      	ldr	r3, [pc, #144]	; (803323c <CS43_Init+0x208>)
 80331aa:	785b      	ldrb	r3, [r3, #1]
 80331ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80331b0:	b2da      	uxtb	r2, r3
 80331b2:	4b22      	ldr	r3, [pc, #136]	; (803323c <CS43_Init+0x208>)
 80331b4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80331b6:	4b21      	ldr	r3, [pc, #132]	; (803323c <CS43_Init+0x208>)
 80331b8:	785b      	ldrb	r3, [r3, #1]
 80331ba:	f023 0320 	bic.w	r3, r3, #32
 80331be:	b2da      	uxtb	r2, r3
 80331c0:	4b1e      	ldr	r3, [pc, #120]	; (803323c <CS43_Init+0x208>)
 80331c2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80331c4:	4b1d      	ldr	r3, [pc, #116]	; (803323c <CS43_Init+0x208>)
 80331c6:	785b      	ldrb	r3, [r3, #1]
 80331c8:	f023 0310 	bic.w	r3, r3, #16
 80331cc:	b2da      	uxtb	r2, r3
 80331ce:	4b1b      	ldr	r3, [pc, #108]	; (803323c <CS43_Init+0x208>)
 80331d0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80331d2:	4b1a      	ldr	r3, [pc, #104]	; (803323c <CS43_Init+0x208>)
 80331d4:	785b      	ldrb	r3, [r3, #1]
 80331d6:	f023 0308 	bic.w	r3, r3, #8
 80331da:	b2da      	uxtb	r2, r3
 80331dc:	4b17      	ldr	r3, [pc, #92]	; (803323c <CS43_Init+0x208>)
 80331de:	705a      	strb	r2, [r3, #1]
//	} //hardcoding -db
//	else if(outputMode == MODE_I2S)
//	{
//		iData[1] = 0x02;
//	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80331e0:	4917      	ldr	r1, [pc, #92]	; (8033240 <CS43_Init+0x20c>)
 80331e2:	200e      	movs	r0, #14
 80331e4:	f7ff fee6 	bl	8032fb4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80331e8:	4915      	ldr	r1, [pc, #84]	; (8033240 <CS43_Init+0x20c>)
 80331ea:	200f      	movs	r0, #15
 80331ec:	f7ff ff00 	bl	8032ff0 <read_register>
	iData[1] = 0x00;
 80331f0:	4b12      	ldr	r3, [pc, #72]	; (803323c <CS43_Init+0x208>)
 80331f2:	2200      	movs	r2, #0
 80331f4:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80331f6:	4912      	ldr	r1, [pc, #72]	; (8033240 <CS43_Init+0x20c>)
 80331f8:	200f      	movs	r0, #15
 80331fa:	f7ff fedb 	bl	8032fb4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 80331fe:	4b0f      	ldr	r3, [pc, #60]	; (803323c <CS43_Init+0x208>)
 8033200:	2200      	movs	r2, #0
 8033202:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8033204:	490e      	ldr	r1, [pc, #56]	; (8033240 <CS43_Init+0x20c>)
 8033206:	2014      	movs	r0, #20
 8033208:	f7ff fed4 	bl	8032fb4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 803320c:	490c      	ldr	r1, [pc, #48]	; (8033240 <CS43_Init+0x20c>)
 803320e:	2015      	movs	r0, #21
 8033210:	f7ff fed0 	bl	8032fb4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8033214:	490a      	ldr	r1, [pc, #40]	; (8033240 <CS43_Init+0x20c>)
 8033216:	201a      	movs	r0, #26
 8033218:	f7ff fecc 	bl	8032fb4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 803321c:	4908      	ldr	r1, [pc, #32]	; (8033240 <CS43_Init+0x20c>)
 803321e:	201b      	movs	r0, #27
 8033220:	f7ff fec8 	bl	8032fb4 <write_register>
}
 8033224:	bf00      	nop
 8033226:	46bd      	mov	sp, r7
 8033228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803322c:	b004      	add	sp, #16
 803322e:	4770      	bx	lr
 8033230:	2000012c 	.word	0x2000012c
 8033234:	40020c00 	.word	0x40020c00
 8033238:	20000030 	.word	0x20000030
 803323c:	2000002c 	.word	0x2000002c
 8033240:	2000002d 	.word	0x2000002d

08033244 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8033244:	b580      	push	{r7, lr}
 8033246:	b082      	sub	sp, #8
 8033248:	af00      	add	r7, sp, #0
 803324a:	4603      	mov	r3, r0
 803324c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 803324e:	79fb      	ldrb	r3, [r7, #7]
 8033250:	2b03      	cmp	r3, #3
 8033252:	d837      	bhi.n	80332c4 <CS43_Enable_RightLeft+0x80>
 8033254:	a201      	add	r2, pc, #4	; (adr r2, 803325c <CS43_Enable_RightLeft+0x18>)
 8033256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803325a:	bf00      	nop
 803325c:	0803326d 	.word	0x0803326d
 8033260:	08033283 	.word	0x08033283
 8033264:	08033299 	.word	0x08033299
 8033268:	080332af 	.word	0x080332af
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 803326c:	4b21      	ldr	r3, [pc, #132]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 803326e:	22c0      	movs	r2, #192	; 0xc0
 8033270:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8033272:	4b20      	ldr	r3, [pc, #128]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 8033274:	785b      	ldrb	r3, [r3, #1]
 8033276:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 803327a:	b2da      	uxtb	r2, r3
 803327c:	4b1d      	ldr	r3, [pc, #116]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 803327e:	705a      	strb	r2, [r3, #1]
			break;
 8033280:	e021      	b.n	80332c6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8033282:	4b1c      	ldr	r3, [pc, #112]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 8033284:	2280      	movs	r2, #128	; 0x80
 8033286:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8033288:	4b1a      	ldr	r3, [pc, #104]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 803328a:	785b      	ldrb	r3, [r3, #1]
 803328c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8033290:	b2da      	uxtb	r2, r3
 8033292:	4b18      	ldr	r3, [pc, #96]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 8033294:	705a      	strb	r2, [r3, #1]
			break;
 8033296:	e016      	b.n	80332c6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8033298:	4b16      	ldr	r3, [pc, #88]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 803329a:	22c0      	movs	r2, #192	; 0xc0
 803329c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 803329e:	4b15      	ldr	r3, [pc, #84]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332a0:	785b      	ldrb	r3, [r3, #1]
 80332a2:	f043 0320 	orr.w	r3, r3, #32
 80332a6:	b2da      	uxtb	r2, r3
 80332a8:	4b12      	ldr	r3, [pc, #72]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332aa:	705a      	strb	r2, [r3, #1]
			break;
 80332ac:	e00b      	b.n	80332c6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80332ae:	4b11      	ldr	r3, [pc, #68]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332b0:	2280      	movs	r2, #128	; 0x80
 80332b2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80332b4:	4b0f      	ldr	r3, [pc, #60]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332b6:	785b      	ldrb	r3, [r3, #1]
 80332b8:	f043 0320 	orr.w	r3, r3, #32
 80332bc:	b2da      	uxtb	r2, r3
 80332be:	4b0d      	ldr	r3, [pc, #52]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332c0:	705a      	strb	r2, [r3, #1]
			break;
 80332c2:	e000      	b.n	80332c6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80332c4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80332c6:	4b0b      	ldr	r3, [pc, #44]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332c8:	785b      	ldrb	r3, [r3, #1]
 80332ca:	f043 030c 	orr.w	r3, r3, #12
 80332ce:	b2da      	uxtb	r2, r3
 80332d0:	4b08      	ldr	r3, [pc, #32]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332d2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80332d4:	4b07      	ldr	r3, [pc, #28]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332d6:	785b      	ldrb	r3, [r3, #1]
 80332d8:	f043 0303 	orr.w	r3, r3, #3
 80332dc:	b2da      	uxtb	r2, r3
 80332de:	4b05      	ldr	r3, [pc, #20]	; (80332f4 <CS43_Enable_RightLeft+0xb0>)
 80332e0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80332e2:	4905      	ldr	r1, [pc, #20]	; (80332f8 <CS43_Enable_RightLeft+0xb4>)
 80332e4:	2004      	movs	r0, #4
 80332e6:	f7ff fe65 	bl	8032fb4 <write_register>
}
 80332ea:	bf00      	nop
 80332ec:	3708      	adds	r7, #8
 80332ee:	46bd      	mov	sp, r7
 80332f0:	bd80      	pop	{r7, pc}
 80332f2:	bf00      	nop
 80332f4:	2000002c 	.word	0x2000002c
 80332f8:	2000002d 	.word	0x2000002d

080332fc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80332fc:	b580      	push	{r7, lr}
 80332fe:	b084      	sub	sp, #16
 8033300:	af00      	add	r7, sp, #0
 8033302:	4603      	mov	r3, r0
 8033304:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8033306:	79fb      	ldrb	r3, [r7, #7]
 8033308:	3b32      	subs	r3, #50	; 0x32
 803330a:	b2db      	uxtb	r3, r3
 803330c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 803330e:	7bfb      	ldrb	r3, [r7, #15]
 8033310:	005b      	lsls	r3, r3, #1
 8033312:	b2db      	uxtb	r3, r3
 8033314:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8033316:	7bfb      	ldrb	r3, [r7, #15]
 8033318:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 803331a:	4a16      	ldr	r2, [pc, #88]	; (8033374 <CS43_SetVolume+0x78>)
 803331c:	7bbb      	ldrb	r3, [r7, #14]
 803331e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8033320:	4915      	ldr	r1, [pc, #84]	; (8033378 <CS43_SetVolume+0x7c>)
 8033322:	2014      	movs	r0, #20
 8033324:	f7ff fe46 	bl	8032fb4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8033328:	4913      	ldr	r1, [pc, #76]	; (8033378 <CS43_SetVolume+0x7c>)
 803332a:	2015      	movs	r0, #21
 803332c:	f7ff fe42 	bl	8032fb4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8033330:	79fb      	ldrb	r3, [r7, #7]
 8033332:	2b64      	cmp	r3, #100	; 0x64
 8033334:	d80e      	bhi.n	8033354 <CS43_SetVolume+0x58>
 8033336:	79fa      	ldrb	r2, [r7, #7]
 8033338:	4613      	mov	r3, r2
 803333a:	005b      	lsls	r3, r3, #1
 803333c:	4413      	add	r3, r2
 803333e:	011b      	lsls	r3, r3, #4
 8033340:	4a0e      	ldr	r2, [pc, #56]	; (803337c <CS43_SetVolume+0x80>)
 8033342:	fb82 1203 	smull	r1, r2, r2, r3
 8033346:	1152      	asrs	r2, r2, #5
 8033348:	17db      	asrs	r3, r3, #31
 803334a:	1ad3      	subs	r3, r2, r3
 803334c:	b2db      	uxtb	r3, r3
 803334e:	3b18      	subs	r3, #24
 8033350:	b2db      	uxtb	r3, r3
 8033352:	e000      	b.n	8033356 <CS43_SetVolume+0x5a>
 8033354:	2318      	movs	r3, #24
 8033356:	4a07      	ldr	r2, [pc, #28]	; (8033374 <CS43_SetVolume+0x78>)
 8033358:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 803335a:	4907      	ldr	r1, [pc, #28]	; (8033378 <CS43_SetVolume+0x7c>)
 803335c:	2020      	movs	r0, #32
 803335e:	f7ff fe29 	bl	8032fb4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8033362:	4905      	ldr	r1, [pc, #20]	; (8033378 <CS43_SetVolume+0x7c>)
 8033364:	2021      	movs	r0, #33	; 0x21
 8033366:	f7ff fe25 	bl	8032fb4 <write_register>
}
 803336a:	bf00      	nop
 803336c:	3710      	adds	r7, #16
 803336e:	46bd      	mov	sp, r7
 8033370:	bd80      	pop	{r7, pc}
 8033372:	bf00      	nop
 8033374:	2000002c 	.word	0x2000002c
 8033378:	2000002d 	.word	0x2000002d
 803337c:	51eb851f 	.word	0x51eb851f

08033380 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8033380:	b580      	push	{r7, lr}
 8033382:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8033384:	4b1d      	ldr	r3, [pc, #116]	; (80333fc <CS43_Start+0x7c>)
 8033386:	2299      	movs	r2, #153	; 0x99
 8033388:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 803338a:	491d      	ldr	r1, [pc, #116]	; (8033400 <CS43_Start+0x80>)
 803338c:	2000      	movs	r0, #0
 803338e:	f7ff fe11 	bl	8032fb4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8033392:	4b1a      	ldr	r3, [pc, #104]	; (80333fc <CS43_Start+0x7c>)
 8033394:	2280      	movs	r2, #128	; 0x80
 8033396:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8033398:	4919      	ldr	r1, [pc, #100]	; (8033400 <CS43_Start+0x80>)
 803339a:	2047      	movs	r0, #71	; 0x47
 803339c:	f7ff fe0a 	bl	8032fb4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80333a0:	4917      	ldr	r1, [pc, #92]	; (8033400 <CS43_Start+0x80>)
 80333a2:	2032      	movs	r0, #50	; 0x32
 80333a4:	f7ff fe24 	bl	8032ff0 <read_register>
	iData[1] |= 0x80;
 80333a8:	4b14      	ldr	r3, [pc, #80]	; (80333fc <CS43_Start+0x7c>)
 80333aa:	785b      	ldrb	r3, [r3, #1]
 80333ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80333b0:	b2da      	uxtb	r2, r3
 80333b2:	4b12      	ldr	r3, [pc, #72]	; (80333fc <CS43_Start+0x7c>)
 80333b4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80333b6:	4912      	ldr	r1, [pc, #72]	; (8033400 <CS43_Start+0x80>)
 80333b8:	2032      	movs	r0, #50	; 0x32
 80333ba:	f7ff fdfb 	bl	8032fb4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80333be:	4910      	ldr	r1, [pc, #64]	; (8033400 <CS43_Start+0x80>)
 80333c0:	2032      	movs	r0, #50	; 0x32
 80333c2:	f7ff fe15 	bl	8032ff0 <read_register>
	iData[1] &= ~(0x80);
 80333c6:	4b0d      	ldr	r3, [pc, #52]	; (80333fc <CS43_Start+0x7c>)
 80333c8:	785b      	ldrb	r3, [r3, #1]
 80333ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80333ce:	b2da      	uxtb	r2, r3
 80333d0:	4b0a      	ldr	r3, [pc, #40]	; (80333fc <CS43_Start+0x7c>)
 80333d2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80333d4:	490a      	ldr	r1, [pc, #40]	; (8033400 <CS43_Start+0x80>)
 80333d6:	2032      	movs	r0, #50	; 0x32
 80333d8:	f7ff fdec 	bl	8032fb4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80333dc:	4b07      	ldr	r3, [pc, #28]	; (80333fc <CS43_Start+0x7c>)
 80333de:	2200      	movs	r2, #0
 80333e0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80333e2:	4907      	ldr	r1, [pc, #28]	; (8033400 <CS43_Start+0x80>)
 80333e4:	2000      	movs	r0, #0
 80333e6:	f7ff fde5 	bl	8032fb4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80333ea:	4b04      	ldr	r3, [pc, #16]	; (80333fc <CS43_Start+0x7c>)
 80333ec:	229e      	movs	r2, #158	; 0x9e
 80333ee:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80333f0:	4903      	ldr	r1, [pc, #12]	; (8033400 <CS43_Start+0x80>)
 80333f2:	2002      	movs	r0, #2
 80333f4:	f7ff fdde 	bl	8032fb4 <write_register>
}
 80333f8:	bf00      	nop
 80333fa:	bd80      	pop	{r7, pc}
 80333fc:	2000002c 	.word	0x2000002c
 8033400:	2000002d 	.word	0x2000002d

08033404 <ADPCM_Decode>:
  * @brief  ADPCM_Decode.
  * @param code: a byte containing a 4-bit ADPCM sample. 
  * @retval : 16-bit ADPCM sample
  */
int16_t ADPCM_Decode(uint8_t code)
{
 8033404:	b480      	push	{r7}
 8033406:	b085      	sub	sp, #20
 8033408:	af00      	add	r7, sp, #0
 803340a:	4603      	mov	r3, r0
 803340c:	71fb      	strb	r3, [r7, #7]
  static int16_t  index = 0;
  static int32_t predsample = 0;
  uint16_t step=0;
 803340e:	2300      	movs	r3, #0
 8033410:	817b      	strh	r3, [r7, #10]
  int32_t diffq=0;
 8033412:	2300      	movs	r3, #0
 8033414:	60fb      	str	r3, [r7, #12]
  
  step = StepSizeTable[index];
 8033416:	4b3b      	ldr	r3, [pc, #236]	; (8033504 <ADPCM_Decode+0x100>)
 8033418:	f9b3 3000 	ldrsh.w	r3, [r3]
 803341c:	461a      	mov	r2, r3
 803341e:	4b3a      	ldr	r3, [pc, #232]	; (8033508 <ADPCM_Decode+0x104>)
 8033420:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8033424:	817b      	strh	r3, [r7, #10]

  /* 2. inverse code into diff */
  diffq = step>> 3;
 8033426:	897b      	ldrh	r3, [r7, #10]
 8033428:	08db      	lsrs	r3, r3, #3
 803342a:	b29b      	uxth	r3, r3
 803342c:	60fb      	str	r3, [r7, #12]
  if (code&4)
 803342e:	79fb      	ldrb	r3, [r7, #7]
 8033430:	f003 0304 	and.w	r3, r3, #4
 8033434:	2b00      	cmp	r3, #0
 8033436:	d003      	beq.n	8033440 <ADPCM_Decode+0x3c>
  {
    diffq += step;
 8033438:	897b      	ldrh	r3, [r7, #10]
 803343a:	68fa      	ldr	r2, [r7, #12]
 803343c:	4413      	add	r3, r2
 803343e:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&2)
 8033440:	79fb      	ldrb	r3, [r7, #7]
 8033442:	f003 0302 	and.w	r3, r3, #2
 8033446:	2b00      	cmp	r3, #0
 8033448:	d006      	beq.n	8033458 <ADPCM_Decode+0x54>
  {
    diffq += step>>1;
 803344a:	897b      	ldrh	r3, [r7, #10]
 803344c:	085b      	lsrs	r3, r3, #1
 803344e:	b29b      	uxth	r3, r3
 8033450:	461a      	mov	r2, r3
 8033452:	68fb      	ldr	r3, [r7, #12]
 8033454:	4413      	add	r3, r2
 8033456:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&1)
 8033458:	79fb      	ldrb	r3, [r7, #7]
 803345a:	f003 0301 	and.w	r3, r3, #1
 803345e:	2b00      	cmp	r3, #0
 8033460:	d006      	beq.n	8033470 <ADPCM_Decode+0x6c>
  {
    diffq += step>>2;
 8033462:	897b      	ldrh	r3, [r7, #10]
 8033464:	089b      	lsrs	r3, r3, #2
 8033466:	b29b      	uxth	r3, r3
 8033468:	461a      	mov	r2, r3
 803346a:	68fb      	ldr	r3, [r7, #12]
 803346c:	4413      	add	r3, r2
 803346e:	60fb      	str	r3, [r7, #12]
  }

  /* 3. add diff to predicted sample*/
  if (code&8)
 8033470:	79fb      	ldrb	r3, [r7, #7]
 8033472:	f003 0308 	and.w	r3, r3, #8
 8033476:	2b00      	cmp	r3, #0
 8033478:	d006      	beq.n	8033488 <ADPCM_Decode+0x84>
  {
    predsample -= diffq;
 803347a:	4b24      	ldr	r3, [pc, #144]	; (803350c <ADPCM_Decode+0x108>)
 803347c:	681a      	ldr	r2, [r3, #0]
 803347e:	68fb      	ldr	r3, [r7, #12]
 8033480:	1ad3      	subs	r3, r2, r3
 8033482:	4a22      	ldr	r2, [pc, #136]	; (803350c <ADPCM_Decode+0x108>)
 8033484:	6013      	str	r3, [r2, #0]
 8033486:	e005      	b.n	8033494 <ADPCM_Decode+0x90>
  }
  else
  {
    predsample += diffq;
 8033488:	4b20      	ldr	r3, [pc, #128]	; (803350c <ADPCM_Decode+0x108>)
 803348a:	681a      	ldr	r2, [r3, #0]
 803348c:	68fb      	ldr	r3, [r7, #12]
 803348e:	4413      	add	r3, r2
 8033490:	4a1e      	ldr	r2, [pc, #120]	; (803350c <ADPCM_Decode+0x108>)
 8033492:	6013      	str	r3, [r2, #0]
  }
  
  /* check for overflow*/
  if (predsample > 32767)
 8033494:	4b1d      	ldr	r3, [pc, #116]	; (803350c <ADPCM_Decode+0x108>)
 8033496:	681b      	ldr	r3, [r3, #0]
 8033498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803349c:	db04      	blt.n	80334a8 <ADPCM_Decode+0xa4>
  {
    predsample = 32767;
 803349e:	4b1b      	ldr	r3, [pc, #108]	; (803350c <ADPCM_Decode+0x108>)
 80334a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80334a4:	601a      	str	r2, [r3, #0]
 80334a6:	e007      	b.n	80334b8 <ADPCM_Decode+0xb4>
  }
  else if (predsample < -32768)
 80334a8:	4b18      	ldr	r3, [pc, #96]	; (803350c <ADPCM_Decode+0x108>)
 80334aa:	681b      	ldr	r3, [r3, #0]
 80334ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80334b0:	da02      	bge.n	80334b8 <ADPCM_Decode+0xb4>
  {
    predsample = -32768;
 80334b2:	4b16      	ldr	r3, [pc, #88]	; (803350c <ADPCM_Decode+0x108>)
 80334b4:	4a16      	ldr	r2, [pc, #88]	; (8033510 <ADPCM_Decode+0x10c>)
 80334b6:	601a      	str	r2, [r3, #0]
  }

  /* 4. find new quantizer step size */
  index += IndexTable [code];
 80334b8:	79fb      	ldrb	r3, [r7, #7]
 80334ba:	4a16      	ldr	r2, [pc, #88]	; (8033514 <ADPCM_Decode+0x110>)
 80334bc:	56d3      	ldrsb	r3, [r2, r3]
 80334be:	b29a      	uxth	r2, r3
 80334c0:	4b10      	ldr	r3, [pc, #64]	; (8033504 <ADPCM_Decode+0x100>)
 80334c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80334c6:	b29b      	uxth	r3, r3
 80334c8:	4413      	add	r3, r2
 80334ca:	b29b      	uxth	r3, r3
 80334cc:	b21a      	sxth	r2, r3
 80334ce:	4b0d      	ldr	r3, [pc, #52]	; (8033504 <ADPCM_Decode+0x100>)
 80334d0:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (index < 0)
 80334d2:	4b0c      	ldr	r3, [pc, #48]	; (8033504 <ADPCM_Decode+0x100>)
 80334d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80334d8:	2b00      	cmp	r3, #0
 80334da:	da02      	bge.n	80334e2 <ADPCM_Decode+0xde>
  {
    index = 0;
 80334dc:	4b09      	ldr	r3, [pc, #36]	; (8033504 <ADPCM_Decode+0x100>)
 80334de:	2200      	movs	r2, #0
 80334e0:	801a      	strh	r2, [r3, #0]
  }
  if (index > 88)
 80334e2:	4b08      	ldr	r3, [pc, #32]	; (8033504 <ADPCM_Decode+0x100>)
 80334e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80334e8:	2b58      	cmp	r3, #88	; 0x58
 80334ea:	dd02      	ble.n	80334f2 <ADPCM_Decode+0xee>
  {
    index = 88;
 80334ec:	4b05      	ldr	r3, [pc, #20]	; (8033504 <ADPCM_Decode+0x100>)
 80334ee:	2258      	movs	r2, #88	; 0x58
 80334f0:	801a      	strh	r2, [r3, #0]
  
  /* 5. save predict sample and index for next iteration */
  /* done! static variables */
  
  /* 6. return new speech sample*/
  return ((int16_t)predsample);
 80334f2:	4b06      	ldr	r3, [pc, #24]	; (803350c <ADPCM_Decode+0x108>)
 80334f4:	681b      	ldr	r3, [r3, #0]
 80334f6:	b21b      	sxth	r3, r3
}
 80334f8:	4618      	mov	r0, r3
 80334fa:	3714      	adds	r7, #20
 80334fc:	46bd      	mov	sp, r7
 80334fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033502:	4770      	bx	lr
 8033504:	20000084 	.word	0x20000084
 8033508:	08037e7c 	.word	0x08037e7c
 803350c:	20000088 	.word	0x20000088
 8033510:	ffff8000 	.word	0xffff8000
 8033514:	08037f30 	.word	0x08037f30

08033518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8033518:	b590      	push	{r4, r7, lr}
 803351a:	b095      	sub	sp, #84	; 0x54
 803351c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 803351e:	4b32      	ldr	r3, [pc, #200]	; (80335e8 <main+0xd0>)
 8033520:	4a32      	ldr	r2, [pc, #200]	; (80335ec <main+0xd4>)
 8033522:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8033524:	4b32      	ldr	r3, [pc, #200]	; (80335f0 <main+0xd8>)
 8033526:	22a6      	movs	r2, #166	; 0xa6
 8033528:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 803352a:	f000 fd4d 	bl	8033fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 803352e:	f000 f87d 	bl	803362c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8033532:	f000 f9d7 	bl	80338e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8033536:	f000 f9b5 	bl	80338a4 <MX_DMA_Init>
  MX_I2C1_Init();
 803353a:	f000 f90b 	bl	8033754 <MX_I2C1_Init>
  MX_I2S3_Init();
 803353e:	f000 f937 	bl	80337b0 <MX_I2S3_Init>
  MX_DAC_Init();
 8033542:	f000 f8dd 	bl	8033700 <MX_DAC_Init>
  MX_TIM2_Init();
 8033546:	f000 f961 	bl	803380c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1);//, MODE_ANALOG);
 803354a:	4c2a      	ldr	r4, [pc, #168]	; (80335f4 <main+0xdc>)
 803354c:	4668      	mov	r0, sp
 803354e:	f104 0310 	add.w	r3, r4, #16
 8033552:	2244      	movs	r2, #68	; 0x44
 8033554:	4619      	mov	r1, r3
 8033556:	f004 fc77 	bl	8037e48 <memcpy>
 803355a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 803355e:	f7ff fd69 	bl	8033034 <CS43_Init>
  CS43_SetVolume(50);
 8033562:	2032      	movs	r0, #50	; 0x32
 8033564:	f7ff feca 	bl	80332fc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8033568:	2003      	movs	r0, #3
 803356a:	f7ff fe6b 	bl	8033244 <CS43_Enable_RightLeft>
  CS43_Start();
 803356e:	f7ff ff07 	bl	8033380 <CS43_Start>

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_dummy, 4);
 8033572:	2204      	movs	r2, #4
 8033574:	4920      	ldr	r1, [pc, #128]	; (80335f8 <main+0xe0>)
 8033576:	4821      	ldr	r0, [pc, #132]	; (80335fc <main+0xe4>)
 8033578:	f002 fd8e 	bl	8036098 <HAL_I2S_Transmit_DMA>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 803357c:	2100      	movs	r1, #0
 803357e:	4820      	ldr	r0, [pc, #128]	; (8033600 <main+0xe8>)
 8033580:	f000 fec7 	bl	8034312 <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8033584:	481f      	ldr	r0, [pc, #124]	; (8033604 <main+0xec>)
 8033586:	f004 f801 	bl	803758c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	AudioFile.AudioFiles[0] = (uint32_t)&afnm;
 803358a:	4a1f      	ldr	r2, [pc, #124]	; (8033608 <main+0xf0>)
 803358c:	4b1f      	ldr	r3, [pc, #124]	; (803360c <main+0xf4>)
 803358e:	601a      	str	r2, [r3, #0]
	AudioFile.AudioSize[0] = NELEMS(afnm);
 8033590:	4b1e      	ldr	r3, [pc, #120]	; (803360c <main+0xf4>)
 8033592:	f647 2212 	movw	r2, #31250	; 0x7a12
 8033596:	619a      	str	r2, [r3, #24]

	//new -db
	AudioFile.AudioFiles[1] = (uint32_t)&cowbell;
 8033598:	4a1d      	ldr	r2, [pc, #116]	; (8033610 <main+0xf8>)
 803359a:	4b1c      	ldr	r3, [pc, #112]	; (803360c <main+0xf4>)
 803359c:	605a      	str	r2, [r3, #4]
	AudioFile.AudioSize[1] = NELEMS(cowbell);
 803359e:	4b1b      	ldr	r3, [pc, #108]	; (803360c <main+0xf4>)
 80335a0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80335a4:	61da      	str	r2, [r3, #28]

	AudioFile.AudioFiles[2] = (uint32_t)&floortom;
 80335a6:	4a1b      	ldr	r2, [pc, #108]	; (8033614 <main+0xfc>)
 80335a8:	4b18      	ldr	r3, [pc, #96]	; (803360c <main+0xf4>)
 80335aa:	609a      	str	r2, [r3, #8]
	AudioFile.AudioSize[2] = NELEMS(floortom);
 80335ac:	4b17      	ldr	r3, [pc, #92]	; (803360c <main+0xf4>)
 80335ae:	f647 2212 	movw	r2, #31250	; 0x7a12
 80335b2:	621a      	str	r2, [r3, #32]

	AudioFile.AudioFiles[3] = (uint32_t)&hat;
 80335b4:	4a18      	ldr	r2, [pc, #96]	; (8033618 <main+0x100>)
 80335b6:	4b15      	ldr	r3, [pc, #84]	; (803360c <main+0xf4>)
 80335b8:	60da      	str	r2, [r3, #12]
	AudioFile.AudioSize[3] = NELEMS(hat);
 80335ba:	4b14      	ldr	r3, [pc, #80]	; (803360c <main+0xf4>)
 80335bc:	f647 2212 	movw	r2, #31250	; 0x7a12
 80335c0:	625a      	str	r2, [r3, #36]	; 0x24

	AudioFile.AudioFiles[4] = (uint32_t)&ride;
 80335c2:	4a16      	ldr	r2, [pc, #88]	; (803361c <main+0x104>)
 80335c4:	4b11      	ldr	r3, [pc, #68]	; (803360c <main+0xf4>)
 80335c6:	611a      	str	r2, [r3, #16]
	AudioFile.AudioSize[4] = NELEMS(ride);
 80335c8:	4b10      	ldr	r3, [pc, #64]	; (803360c <main+0xf4>)
 80335ca:	f647 2212 	movw	r2, #31250	; 0x7a12
 80335ce:	629a      	str	r2, [r3, #40]	; 0x28

	AudioFile.AudioFiles[5] = (uint32_t)&snare;
 80335d0:	4a13      	ldr	r2, [pc, #76]	; (8033620 <main+0x108>)
 80335d2:	4b0e      	ldr	r3, [pc, #56]	; (803360c <main+0xf4>)
 80335d4:	615a      	str	r2, [r3, #20]
	AudioFile.AudioSize[5] = NELEMS(snare);
 80335d6:	4b0d      	ldr	r3, [pc, #52]	; (803360c <main+0xf4>)
 80335d8:	f647 2212 	movw	r2, #31250	; 0x7a12
 80335dc:	62da      	str	r2, [r3, #44]	; 0x2c


  char* first = (char*)(0x08005000);
 80335de:	4b11      	ldr	r3, [pc, #68]	; (8033624 <main+0x10c>)
 80335e0:	607b      	str	r3, [r7, #4]
  char* second = (char*)(0x08005001);
 80335e2:	4b11      	ldr	r3, [pc, #68]	; (8033628 <main+0x110>)
 80335e4:	603b      	str	r3, [r7, #0]
  while (1)
 80335e6:	e7fe      	b.n	80335e6 <main+0xce>
 80335e8:	2000021c 	.word	0x2000021c
 80335ec:	3bc49ba6 	.word	0x3bc49ba6
 80335f0:	20000220 	.word	0x20000220
 80335f4:	200000d8 	.word	0x200000d8
 80335f8:	20000224 	.word	0x20000224
 80335fc:	2000012c 	.word	0x2000012c
 8033600:	200000c4 	.word	0x200000c4
 8033604:	200001d4 	.word	0x200001d4
 8033608:	08005000 	.word	0x08005000
 803360c:	20000090 	.word	0x20000090
 8033610:	0800ca14 	.word	0x0800ca14
 8033614:	08014428 	.word	0x08014428
 8033618:	0801be3c 	.word	0x0801be3c
 803361c:	08023850 	.word	0x08023850
 8033620:	0802b264 	.word	0x0802b264
 8033624:	08005000 	.word	0x08005000
 8033628:	08005001 	.word	0x08005001

0803362c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 803362c:	b580      	push	{r7, lr}
 803362e:	b094      	sub	sp, #80	; 0x50
 8033630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8033632:	f107 0320 	add.w	r3, r7, #32
 8033636:	2230      	movs	r2, #48	; 0x30
 8033638:	2100      	movs	r1, #0
 803363a:	4618      	mov	r0, r3
 803363c:	f004 fbd8 	bl	8037df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8033640:	f107 030c 	add.w	r3, r7, #12
 8033644:	2200      	movs	r2, #0
 8033646:	601a      	str	r2, [r3, #0]
 8033648:	605a      	str	r2, [r3, #4]
 803364a:	609a      	str	r2, [r3, #8]
 803364c:	60da      	str	r2, [r3, #12]
 803364e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8033650:	2300      	movs	r3, #0
 8033652:	60bb      	str	r3, [r7, #8]
 8033654:	4b28      	ldr	r3, [pc, #160]	; (80336f8 <SystemClock_Config+0xcc>)
 8033656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033658:	4a27      	ldr	r2, [pc, #156]	; (80336f8 <SystemClock_Config+0xcc>)
 803365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803365e:	6413      	str	r3, [r2, #64]	; 0x40
 8033660:	4b25      	ldr	r3, [pc, #148]	; (80336f8 <SystemClock_Config+0xcc>)
 8033662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033668:	60bb      	str	r3, [r7, #8]
 803366a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 803366c:	2300      	movs	r3, #0
 803366e:	607b      	str	r3, [r7, #4]
 8033670:	4b22      	ldr	r3, [pc, #136]	; (80336fc <SystemClock_Config+0xd0>)
 8033672:	681b      	ldr	r3, [r3, #0]
 8033674:	4a21      	ldr	r2, [pc, #132]	; (80336fc <SystemClock_Config+0xd0>)
 8033676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 803367a:	6013      	str	r3, [r2, #0]
 803367c:	4b1f      	ldr	r3, [pc, #124]	; (80336fc <SystemClock_Config+0xd0>)
 803367e:	681b      	ldr	r3, [r3, #0]
 8033680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033684:	607b      	str	r3, [r7, #4]
 8033686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8033688:	2301      	movs	r3, #1
 803368a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 803368c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8033690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8033692:	2302      	movs	r3, #2
 8033694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8033696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 803369a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 803369c:	2304      	movs	r3, #4
 803369e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80336a0:	2340      	movs	r3, #64	; 0x40
 80336a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80336a4:	2302      	movs	r3, #2
 80336a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80336a8:	2307      	movs	r3, #7
 80336aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80336ac:	f107 0320 	add.w	r3, r7, #32
 80336b0:	4618      	mov	r0, r3
 80336b2:	f003 f957 	bl	8036964 <HAL_RCC_OscConfig>
 80336b6:	4603      	mov	r3, r0
 80336b8:	2b00      	cmp	r3, #0
 80336ba:	d001      	beq.n	80336c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80336bc:	f000 fa6c 	bl	8033b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80336c0:	230f      	movs	r3, #15
 80336c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80336c4:	2302      	movs	r3, #2
 80336c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80336c8:	2300      	movs	r3, #0
 80336ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80336cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80336d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80336d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80336d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80336d8:	f107 030c 	add.w	r3, r7, #12
 80336dc:	2102      	movs	r1, #2
 80336de:	4618      	mov	r0, r3
 80336e0:	f003 fbb8 	bl	8036e54 <HAL_RCC_ClockConfig>
 80336e4:	4603      	mov	r3, r0
 80336e6:	2b00      	cmp	r3, #0
 80336e8:	d001      	beq.n	80336ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80336ea:	f000 fa55 	bl	8033b98 <Error_Handler>
  }
}
 80336ee:	bf00      	nop
 80336f0:	3750      	adds	r7, #80	; 0x50
 80336f2:	46bd      	mov	sp, r7
 80336f4:	bd80      	pop	{r7, pc}
 80336f6:	bf00      	nop
 80336f8:	40023800 	.word	0x40023800
 80336fc:	40007000 	.word	0x40007000

08033700 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8033700:	b580      	push	{r7, lr}
 8033702:	b082      	sub	sp, #8
 8033704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8033706:	463b      	mov	r3, r7
 8033708:	2200      	movs	r2, #0
 803370a:	601a      	str	r2, [r3, #0]
 803370c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 803370e:	4b0f      	ldr	r3, [pc, #60]	; (803374c <MX_DAC_Init+0x4c>)
 8033710:	4a0f      	ldr	r2, [pc, #60]	; (8033750 <MX_DAC_Init+0x50>)
 8033712:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8033714:	480d      	ldr	r0, [pc, #52]	; (803374c <MX_DAC_Init+0x4c>)
 8033716:	f000 fdda 	bl	80342ce <HAL_DAC_Init>
 803371a:	4603      	mov	r3, r0
 803371c:	2b00      	cmp	r3, #0
 803371e:	d001      	beq.n	8033724 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8033720:	f000 fa3a 	bl	8033b98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8033724:	2300      	movs	r3, #0
 8033726:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8033728:	2300      	movs	r3, #0
 803372a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 803372c:	463b      	mov	r3, r7
 803372e:	2200      	movs	r2, #0
 8033730:	4619      	mov	r1, r3
 8033732:	4806      	ldr	r0, [pc, #24]	; (803374c <MX_DAC_Init+0x4c>)
 8033734:	f000 fe64 	bl	8034400 <HAL_DAC_ConfigChannel>
 8033738:	4603      	mov	r3, r0
 803373a:	2b00      	cmp	r3, #0
 803373c:	d001      	beq.n	8033742 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 803373e:	f000 fa2b 	bl	8033b98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8033742:	bf00      	nop
 8033744:	3708      	adds	r7, #8
 8033746:	46bd      	mov	sp, r7
 8033748:	bd80      	pop	{r7, pc}
 803374a:	bf00      	nop
 803374c:	200000c4 	.word	0x200000c4
 8033750:	40007400 	.word	0x40007400

08033754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8033754:	b580      	push	{r7, lr}
 8033756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8033758:	4b12      	ldr	r3, [pc, #72]	; (80337a4 <MX_I2C1_Init+0x50>)
 803375a:	4a13      	ldr	r2, [pc, #76]	; (80337a8 <MX_I2C1_Init+0x54>)
 803375c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 803375e:	4b11      	ldr	r3, [pc, #68]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033760:	4a12      	ldr	r2, [pc, #72]	; (80337ac <MX_I2C1_Init+0x58>)
 8033762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8033764:	4b0f      	ldr	r3, [pc, #60]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033766:	2200      	movs	r2, #0
 8033768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 803376a:	4b0e      	ldr	r3, [pc, #56]	; (80337a4 <MX_I2C1_Init+0x50>)
 803376c:	2200      	movs	r2, #0
 803376e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8033770:	4b0c      	ldr	r3, [pc, #48]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8033776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8033778:	4b0a      	ldr	r3, [pc, #40]	; (80337a4 <MX_I2C1_Init+0x50>)
 803377a:	2200      	movs	r2, #0
 803377c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 803377e:	4b09      	ldr	r3, [pc, #36]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033780:	2200      	movs	r2, #0
 8033782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8033784:	4b07      	ldr	r3, [pc, #28]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033786:	2200      	movs	r2, #0
 8033788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 803378a:	4b06      	ldr	r3, [pc, #24]	; (80337a4 <MX_I2C1_Init+0x50>)
 803378c:	2200      	movs	r2, #0
 803378e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8033790:	4804      	ldr	r0, [pc, #16]	; (80337a4 <MX_I2C1_Init+0x50>)
 8033792:	f001 fbab 	bl	8034eec <HAL_I2C_Init>
 8033796:	4603      	mov	r3, r0
 8033798:	2b00      	cmp	r3, #0
 803379a:	d001      	beq.n	80337a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 803379c:	f000 f9fc 	bl	8033b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80337a0:	bf00      	nop
 80337a2:	bd80      	pop	{r7, pc}
 80337a4:	200000d8 	.word	0x200000d8
 80337a8:	40005400 	.word	0x40005400
 80337ac:	000186a0 	.word	0x000186a0

080337b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80337b0:	b580      	push	{r7, lr}
 80337b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80337b4:	4b13      	ldr	r3, [pc, #76]	; (8033804 <MX_I2S3_Init+0x54>)
 80337b6:	4a14      	ldr	r2, [pc, #80]	; (8033808 <MX_I2S3_Init+0x58>)
 80337b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80337ba:	4b12      	ldr	r3, [pc, #72]	; (8033804 <MX_I2S3_Init+0x54>)
 80337bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80337c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80337c2:	4b10      	ldr	r3, [pc, #64]	; (8033804 <MX_I2S3_Init+0x54>)
 80337c4:	2200      	movs	r2, #0
 80337c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80337c8:	4b0e      	ldr	r3, [pc, #56]	; (8033804 <MX_I2S3_Init+0x54>)
 80337ca:	2200      	movs	r2, #0
 80337cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80337ce:	4b0d      	ldr	r3, [pc, #52]	; (8033804 <MX_I2S3_Init+0x54>)
 80337d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80337d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80337d6:	4b0b      	ldr	r3, [pc, #44]	; (8033804 <MX_I2S3_Init+0x54>)
 80337d8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80337dc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80337de:	4b09      	ldr	r3, [pc, #36]	; (8033804 <MX_I2S3_Init+0x54>)
 80337e0:	2200      	movs	r2, #0
 80337e2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80337e4:	4b07      	ldr	r3, [pc, #28]	; (8033804 <MX_I2S3_Init+0x54>)
 80337e6:	2200      	movs	r2, #0
 80337e8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80337ea:	4b06      	ldr	r3, [pc, #24]	; (8033804 <MX_I2S3_Init+0x54>)
 80337ec:	2200      	movs	r2, #0
 80337ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80337f0:	4804      	ldr	r0, [pc, #16]	; (8033804 <MX_I2S3_Init+0x54>)
 80337f2:	f002 fb11 	bl	8035e18 <HAL_I2S_Init>
 80337f6:	4603      	mov	r3, r0
 80337f8:	2b00      	cmp	r3, #0
 80337fa:	d001      	beq.n	8033800 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80337fc:	f000 f9cc 	bl	8033b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8033800:	bf00      	nop
 8033802:	bd80      	pop	{r7, pc}
 8033804:	2000012c 	.word	0x2000012c
 8033808:	40003c00 	.word	0x40003c00

0803380c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 803380c:	b580      	push	{r7, lr}
 803380e:	b086      	sub	sp, #24
 8033810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8033812:	f107 0308 	add.w	r3, r7, #8
 8033816:	2200      	movs	r2, #0
 8033818:	601a      	str	r2, [r3, #0]
 803381a:	605a      	str	r2, [r3, #4]
 803381c:	609a      	str	r2, [r3, #8]
 803381e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8033820:	463b      	mov	r3, r7
 8033822:	2200      	movs	r2, #0
 8033824:	601a      	str	r2, [r3, #0]
 8033826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8033828:	4b1d      	ldr	r3, [pc, #116]	; (80338a0 <MX_TIM2_Init+0x94>)
 803382a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 803382e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8033830:	4b1b      	ldr	r3, [pc, #108]	; (80338a0 <MX_TIM2_Init+0x94>)
 8033832:	2201      	movs	r2, #1
 8033834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8033836:	4b1a      	ldr	r3, [pc, #104]	; (80338a0 <MX_TIM2_Init+0x94>)
 8033838:	2200      	movs	r2, #0
 803383a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 803383c:	4b18      	ldr	r3, [pc, #96]	; (80338a0 <MX_TIM2_Init+0x94>)
 803383e:	22ff      	movs	r2, #255	; 0xff
 8033840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8033842:	4b17      	ldr	r3, [pc, #92]	; (80338a0 <MX_TIM2_Init+0x94>)
 8033844:	2200      	movs	r2, #0
 8033846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8033848:	4b15      	ldr	r3, [pc, #84]	; (80338a0 <MX_TIM2_Init+0x94>)
 803384a:	2200      	movs	r2, #0
 803384c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 803384e:	4814      	ldr	r0, [pc, #80]	; (80338a0 <MX_TIM2_Init+0x94>)
 8033850:	f003 fe4c 	bl	80374ec <HAL_TIM_Base_Init>
 8033854:	4603      	mov	r3, r0
 8033856:	2b00      	cmp	r3, #0
 8033858:	d001      	beq.n	803385e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 803385a:	f000 f99d 	bl	8033b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 803385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8033862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8033864:	f107 0308 	add.w	r3, r7, #8
 8033868:	4619      	mov	r1, r3
 803386a:	480d      	ldr	r0, [pc, #52]	; (80338a0 <MX_TIM2_Init+0x94>)
 803386c:	f004 f806 	bl	803787c <HAL_TIM_ConfigClockSource>
 8033870:	4603      	mov	r3, r0
 8033872:	2b00      	cmp	r3, #0
 8033874:	d001      	beq.n	803387a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8033876:	f000 f98f 	bl	8033b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 803387a:	2320      	movs	r3, #32
 803387c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 803387e:	2300      	movs	r3, #0
 8033880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8033882:	463b      	mov	r3, r7
 8033884:	4619      	mov	r1, r3
 8033886:	4806      	ldr	r0, [pc, #24]	; (80338a0 <MX_TIM2_Init+0x94>)
 8033888:	f004 fa22 	bl	8037cd0 <HAL_TIMEx_MasterConfigSynchronization>
 803388c:	4603      	mov	r3, r0
 803388e:	2b00      	cmp	r3, #0
 8033890:	d001      	beq.n	8033896 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8033892:	f000 f981 	bl	8033b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8033896:	bf00      	nop
 8033898:	3718      	adds	r7, #24
 803389a:	46bd      	mov	sp, r7
 803389c:	bd80      	pop	{r7, pc}
 803389e:	bf00      	nop
 80338a0:	200001d4 	.word	0x200001d4

080338a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80338a4:	b580      	push	{r7, lr}
 80338a6:	b082      	sub	sp, #8
 80338a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80338aa:	2300      	movs	r3, #0
 80338ac:	607b      	str	r3, [r7, #4]
 80338ae:	4b0c      	ldr	r3, [pc, #48]	; (80338e0 <MX_DMA_Init+0x3c>)
 80338b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80338b2:	4a0b      	ldr	r2, [pc, #44]	; (80338e0 <MX_DMA_Init+0x3c>)
 80338b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80338b8:	6313      	str	r3, [r2, #48]	; 0x30
 80338ba:	4b09      	ldr	r3, [pc, #36]	; (80338e0 <MX_DMA_Init+0x3c>)
 80338bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80338be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80338c2:	607b      	str	r3, [r7, #4]
 80338c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80338c6:	2200      	movs	r2, #0
 80338c8:	2100      	movs	r1, #0
 80338ca:	2010      	movs	r0, #16
 80338cc:	f000 fcc9 	bl	8034262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80338d0:	2010      	movs	r0, #16
 80338d2:	f000 fce2 	bl	803429a <HAL_NVIC_EnableIRQ>

}
 80338d6:	bf00      	nop
 80338d8:	3708      	adds	r7, #8
 80338da:	46bd      	mov	sp, r7
 80338dc:	bd80      	pop	{r7, pc}
 80338de:	bf00      	nop
 80338e0:	40023800 	.word	0x40023800

080338e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80338e4:	b580      	push	{r7, lr}
 80338e6:	b08a      	sub	sp, #40	; 0x28
 80338e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80338ea:	f107 0314 	add.w	r3, r7, #20
 80338ee:	2200      	movs	r2, #0
 80338f0:	601a      	str	r2, [r3, #0]
 80338f2:	605a      	str	r2, [r3, #4]
 80338f4:	609a      	str	r2, [r3, #8]
 80338f6:	60da      	str	r2, [r3, #12]
 80338f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80338fa:	2300      	movs	r3, #0
 80338fc:	613b      	str	r3, [r7, #16]
 80338fe:	4b2e      	ldr	r3, [pc, #184]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033902:	4a2d      	ldr	r2, [pc, #180]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033908:	6313      	str	r3, [r2, #48]	; 0x30
 803390a:	4b2b      	ldr	r3, [pc, #172]	; (80339b8 <MX_GPIO_Init+0xd4>)
 803390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033912:	613b      	str	r3, [r7, #16]
 8033914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8033916:	2300      	movs	r3, #0
 8033918:	60fb      	str	r3, [r7, #12]
 803391a:	4b27      	ldr	r3, [pc, #156]	; (80339b8 <MX_GPIO_Init+0xd4>)
 803391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803391e:	4a26      	ldr	r2, [pc, #152]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033920:	f043 0301 	orr.w	r3, r3, #1
 8033924:	6313      	str	r3, [r2, #48]	; 0x30
 8033926:	4b24      	ldr	r3, [pc, #144]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803392a:	f003 0301 	and.w	r3, r3, #1
 803392e:	60fb      	str	r3, [r7, #12]
 8033930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8033932:	2300      	movs	r3, #0
 8033934:	60bb      	str	r3, [r7, #8]
 8033936:	4b20      	ldr	r3, [pc, #128]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803393a:	4a1f      	ldr	r2, [pc, #124]	; (80339b8 <MX_GPIO_Init+0xd4>)
 803393c:	f043 0308 	orr.w	r3, r3, #8
 8033940:	6313      	str	r3, [r2, #48]	; 0x30
 8033942:	4b1d      	ldr	r3, [pc, #116]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033946:	f003 0308 	and.w	r3, r3, #8
 803394a:	60bb      	str	r3, [r7, #8]
 803394c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 803394e:	2300      	movs	r3, #0
 8033950:	607b      	str	r3, [r7, #4]
 8033952:	4b19      	ldr	r3, [pc, #100]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033956:	4a18      	ldr	r2, [pc, #96]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033958:	f043 0304 	orr.w	r3, r3, #4
 803395c:	6313      	str	r3, [r2, #48]	; 0x30
 803395e:	4b16      	ldr	r3, [pc, #88]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033962:	f003 0304 	and.w	r3, r3, #4
 8033966:	607b      	str	r3, [r7, #4]
 8033968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 803396a:	2300      	movs	r3, #0
 803396c:	603b      	str	r3, [r7, #0]
 803396e:	4b12      	ldr	r3, [pc, #72]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033972:	4a11      	ldr	r2, [pc, #68]	; (80339b8 <MX_GPIO_Init+0xd4>)
 8033974:	f043 0302 	orr.w	r3, r3, #2
 8033978:	6313      	str	r3, [r2, #48]	; 0x30
 803397a:	4b0f      	ldr	r3, [pc, #60]	; (80339b8 <MX_GPIO_Init+0xd4>)
 803397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803397e:	f003 0302 	and.w	r3, r3, #2
 8033982:	603b      	str	r3, [r7, #0]
 8033984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8033986:	2200      	movs	r2, #0
 8033988:	f24f 0110 	movw	r1, #61456	; 0xf010
 803398c:	480b      	ldr	r0, [pc, #44]	; (80339bc <MX_GPIO_Init+0xd8>)
 803398e:	f001 fa93 	bl	8034eb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8033992:	f24f 0310 	movw	r3, #61456	; 0xf010
 8033996:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8033998:	2301      	movs	r3, #1
 803399a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803399c:	2300      	movs	r3, #0
 803399e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80339a0:	2300      	movs	r3, #0
 80339a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80339a4:	f107 0314 	add.w	r3, r7, #20
 80339a8:	4619      	mov	r1, r3
 80339aa:	4804      	ldr	r0, [pc, #16]	; (80339bc <MX_GPIO_Init+0xd8>)
 80339ac:	f001 f8e8 	bl	8034b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80339b0:	bf00      	nop
 80339b2:	3728      	adds	r7, #40	; 0x28
 80339b4:	46bd      	mov	sp, r7
 80339b6:	bd80      	pop	{r7, pc}
 80339b8:	40023800 	.word	0x40023800
 80339bc:	40020c00 	.word	0x40020c00

080339c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80339c0:	b580      	push	{r7, lr}
 80339c2:	b084      	sub	sp, #16
 80339c4:	af00      	add	r7, sp, #0
 80339c6:	6078      	str	r0, [r7, #4]
//		i_t++;
//		if(i_t>= sample_N) i_t = 0;
//	}


	if(htim->Instance == TIM2)
 80339c8:	687b      	ldr	r3, [r7, #4]
 80339ca:	681b      	ldr	r3, [r3, #0]
 80339cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80339d0:	f040 80c9 	bne.w	8033b66 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		static uint8_t repetition = 0;
		static uint16_t sample_position = 0;
		static unsigned char *RawAudio;
		static uint8_t PrevAudioFileToPlay = 0xFF;

		if(PrevAudioFileToPlay != AudioFileToPlay)
 80339d4:	4b66      	ldr	r3, [pc, #408]	; (8033b70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80339d6:	781a      	ldrb	r2, [r3, #0]
 80339d8:	4b66      	ldr	r3, [pc, #408]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80339da:	781b      	ldrb	r3, [r3, #0]
 80339dc:	429a      	cmp	r2, r3
 80339de:	d015      	beq.n	8033a0c <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			PrevAudioFileToPlay = AudioFileToPlay;
 80339e0:	4b64      	ldr	r3, [pc, #400]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80339e2:	781a      	ldrb	r2, [r3, #0]
 80339e4:	4b62      	ldr	r3, [pc, #392]	; (8033b70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80339e6:	701a      	strb	r2, [r3, #0]
			nibble = 1;
 80339e8:	4b63      	ldr	r3, [pc, #396]	; (8033b78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80339ea:	2201      	movs	r2, #1
 80339ec:	701a      	strb	r2, [r3, #0]
			repetition = 0;
 80339ee:	4b63      	ldr	r3, [pc, #396]	; (8033b7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80339f0:	2200      	movs	r2, #0
 80339f2:	701a      	strb	r2, [r3, #0]
			sample_position = 0;
 80339f4:	4b62      	ldr	r3, [pc, #392]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80339f6:	2200      	movs	r2, #0
 80339f8:	801a      	strh	r2, [r3, #0]
			RawAudio = (unsigned char *)AudioFile.AudioFiles[AudioFileToPlay];
 80339fa:	4b5e      	ldr	r3, [pc, #376]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80339fc:	781b      	ldrb	r3, [r3, #0]
 80339fe:	461a      	mov	r2, r3
 8033a00:	4b60      	ldr	r3, [pc, #384]	; (8033b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8033a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033a06:	461a      	mov	r2, r3
 8033a08:	4b5f      	ldr	r3, [pc, #380]	; (8033b88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8033a0a:	601a      	str	r2, [r3, #0]
		}


			if (sample_position >= AudioFile.AudioSize[AudioFileToPlay])
 8033a0c:	4b5c      	ldr	r3, [pc, #368]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033a0e:	881b      	ldrh	r3, [r3, #0]
 8033a10:	4619      	mov	r1, r3
 8033a12:	4b58      	ldr	r3, [pc, #352]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a14:	781b      	ldrb	r3, [r3, #0]
 8033a16:	4a5b      	ldr	r2, [pc, #364]	; (8033b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8033a18:	3306      	adds	r3, #6
 8033a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033a1e:	4299      	cmp	r1, r3
 8033a20:	d311      	bcc.n	8033a46 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				sample_position = 0;
 8033a22:	4b57      	ldr	r3, [pc, #348]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033a24:	2200      	movs	r2, #0
 8033a26:	801a      	strh	r2, [r3, #0]
				if (AudioFileToPlay < 6)
 8033a28:	4b52      	ldr	r3, [pc, #328]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a2a:	781b      	ldrb	r3, [r3, #0]
 8033a2c:	2b05      	cmp	r3, #5
 8033a2e:	d806      	bhi.n	8033a3e <HAL_TIM_PeriodElapsedCallback+0x7e>
				{
					AudioFileToPlay++;
 8033a30:	4b50      	ldr	r3, [pc, #320]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a32:	781b      	ldrb	r3, [r3, #0]
 8033a34:	3301      	adds	r3, #1
 8033a36:	b2da      	uxtb	r2, r3
 8033a38:	4b4e      	ldr	r3, [pc, #312]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a3a:	701a      	strb	r2, [r3, #0]

	  /* USER CODE END TIM3_IRQn 0 */
	  /* USER CODE BEGIN TIM3_IRQn 1 */
	}
	  /* USER CODE END TIM3_IRQn 1 */
}
 8033a3c:	e093      	b.n	8033b66 <HAL_TIM_PeriodElapsedCallback+0x1a6>
					AudioFileToPlay = 0;
 8033a3e:	4b4d      	ldr	r3, [pc, #308]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a40:	2200      	movs	r2, #0
 8033a42:	701a      	strb	r2, [r3, #0]
}
 8033a44:	e08f      	b.n	8033b66 <HAL_TIM_PeriodElapsedCallback+0x1a6>
			else if ((repetition==0) & (sample_position < AudioFile.AudioSize[AudioFileToPlay]))
 8033a46:	4b4d      	ldr	r3, [pc, #308]	; (8033b7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8033a48:	781b      	ldrb	r3, [r3, #0]
 8033a4a:	2b00      	cmp	r3, #0
 8033a4c:	bf0c      	ite	eq
 8033a4e:	2301      	moveq	r3, #1
 8033a50:	2300      	movne	r3, #0
 8033a52:	b2da      	uxtb	r2, r3
 8033a54:	4b4a      	ldr	r3, [pc, #296]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033a56:	881b      	ldrh	r3, [r3, #0]
 8033a58:	4618      	mov	r0, r3
 8033a5a:	4b46      	ldr	r3, [pc, #280]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033a5c:	781b      	ldrb	r3, [r3, #0]
 8033a5e:	4949      	ldr	r1, [pc, #292]	; (8033b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8033a60:	3306      	adds	r3, #6
 8033a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8033a66:	4298      	cmp	r0, r3
 8033a68:	bf34      	ite	cc
 8033a6a:	2301      	movcc	r3, #1
 8033a6c:	2300      	movcs	r3, #0
 8033a6e:	b2db      	uxtb	r3, r3
 8033a70:	4013      	ands	r3, r2
 8033a72:	b2db      	uxtb	r3, r3
 8033a74:	2b00      	cmp	r3, #0
 8033a76:	d04b      	beq.n	8033b10 <HAL_TIM_PeriodElapsedCallback+0x150>
				repetition = 7;	// reinitialize repetition down counter
 8033a78:	4b40      	ldr	r3, [pc, #256]	; (8033b7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8033a7a:	2207      	movs	r2, #7
 8033a7c:	701a      	strb	r2, [r3, #0]
				if (nibble)
 8033a7e:	4b3e      	ldr	r3, [pc, #248]	; (8033b78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8033a80:	781b      	ldrb	r3, [r3, #0]
 8033a82:	2b00      	cmp	r3, #0
 8033a84:	d008      	beq.n	8033a98 <HAL_TIM_PeriodElapsedCallback+0xd8>
					adpcmSample = (uint8_t)(RawAudio[sample_position] >> 4);
 8033a86:	4b40      	ldr	r3, [pc, #256]	; (8033b88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8033a88:	681b      	ldr	r3, [r3, #0]
 8033a8a:	4a3d      	ldr	r2, [pc, #244]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033a8c:	8812      	ldrh	r2, [r2, #0]
 8033a8e:	4413      	add	r3, r2
 8033a90:	781b      	ldrb	r3, [r3, #0]
 8033a92:	091b      	lsrs	r3, r3, #4
 8033a94:	73fb      	strb	r3, [r7, #15]
 8033a96:	e00e      	b.n	8033ab6 <HAL_TIM_PeriodElapsedCallback+0xf6>
					adpcmSample = (uint8_t)(RawAudio[sample_position] & 0x0F);
 8033a98:	4b3b      	ldr	r3, [pc, #236]	; (8033b88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8033a9a:	681b      	ldr	r3, [r3, #0]
 8033a9c:	4a38      	ldr	r2, [pc, #224]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033a9e:	8812      	ldrh	r2, [r2, #0]
 8033aa0:	4413      	add	r3, r2
 8033aa2:	781b      	ldrb	r3, [r3, #0]
 8033aa4:	f003 030f 	and.w	r3, r3, #15
 8033aa8:	73fb      	strb	r3, [r7, #15]
					sample_position++ ;
 8033aaa:	4b35      	ldr	r3, [pc, #212]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033aac:	881b      	ldrh	r3, [r3, #0]
 8033aae:	3301      	adds	r3, #1
 8033ab0:	b29a      	uxth	r2, r3
 8033ab2:	4b33      	ldr	r3, [pc, #204]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033ab4:	801a      	strh	r2, [r3, #0]
				nibble = (uint8_t)(!nibble);/* indicator inverted mean next interrupt will handle
 8033ab6:	4b30      	ldr	r3, [pc, #192]	; (8033b78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8033ab8:	781b      	ldrb	r3, [r3, #0]
 8033aba:	2b00      	cmp	r3, #0
 8033abc:	bf0c      	ite	eq
 8033abe:	2301      	moveq	r3, #1
 8033ac0:	2300      	movne	r3, #0
 8033ac2:	b2db      	uxtb	r3, r3
 8033ac4:	461a      	mov	r2, r3
 8033ac6:	4b2c      	ldr	r3, [pc, #176]	; (8033b78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8033ac8:	701a      	strb	r2, [r3, #0]
				pcmSample = ADPCM_Decode(adpcmSample);
 8033aca:	7bfb      	ldrb	r3, [r7, #15]
 8033acc:	4618      	mov	r0, r3
 8033ace:	f7ff fc99 	bl	8033404 <ADPCM_Decode>
 8033ad2:	4603      	mov	r3, r0
 8033ad4:	b29a      	uxth	r2, r3
 8033ad6:	4b2d      	ldr	r3, [pc, #180]	; (8033b8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8033ad8:	801a      	strh	r2, [r3, #0]
				newSample.uShort = (uint16_t)32768 + pcmSample;
 8033ada:	4b2c      	ldr	r3, [pc, #176]	; (8033b8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8033adc:	881b      	ldrh	r3, [r3, #0]
 8033ade:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8033ae2:	b29a      	uxth	r2, r3
 8033ae4:	4b2a      	ldr	r3, [pc, #168]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033ae6:	801a      	strh	r2, [r3, #0]
				TIM2->CCR2 = newSample.uBytes[0]; //LSB
 8033ae8:	4b29      	ldr	r3, [pc, #164]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033aea:	781a      	ldrb	r2, [r3, #0]
 8033aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8033af0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR1 = newSample.uBytes[1]; //MSB
 8033af2:	4b27      	ldr	r3, [pc, #156]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033af4:	785a      	ldrb	r2, [r3, #1]
 8033af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8033afa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort)>>4);
 8033afc:	4b24      	ldr	r3, [pc, #144]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033afe:	881b      	ldrh	r3, [r3, #0]
 8033b00:	091b      	lsrs	r3, r3, #4
 8033b02:	b29b      	uxth	r3, r3
 8033b04:	2200      	movs	r2, #0
 8033b06:	2100      	movs	r1, #0
 8033b08:	4822      	ldr	r0, [pc, #136]	; (8033b94 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8033b0a:	f000 fc54 	bl	80343b6 <HAL_DAC_SetValue>
}
 8033b0e:	e02a      	b.n	8033b66 <HAL_TIM_PeriodElapsedCallback+0x1a6>
			else if (sample_position < AudioFile.AudioSize[AudioFileToPlay])
 8033b10:	4b1b      	ldr	r3, [pc, #108]	; (8033b80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8033b12:	881b      	ldrh	r3, [r3, #0]
 8033b14:	4619      	mov	r1, r3
 8033b16:	4b17      	ldr	r3, [pc, #92]	; (8033b74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8033b18:	781b      	ldrb	r3, [r3, #0]
 8033b1a:	4a1a      	ldr	r2, [pc, #104]	; (8033b84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8033b1c:	3306      	adds	r3, #6
 8033b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033b22:	4299      	cmp	r1, r3
 8033b24:	d21f      	bcs.n	8033b66 <HAL_TIM_PeriodElapsedCallback+0x1a6>
				repetition--;
 8033b26:	4b15      	ldr	r3, [pc, #84]	; (8033b7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8033b28:	781b      	ldrb	r3, [r3, #0]
 8033b2a:	3b01      	subs	r3, #1
 8033b2c:	b2da      	uxtb	r2, r3
 8033b2e:	4b13      	ldr	r3, [pc, #76]	; (8033b7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8033b30:	701a      	strb	r2, [r3, #0]
				newSample.uShort = (uint16_t)32768 + pcmSample;
 8033b32:	4b16      	ldr	r3, [pc, #88]	; (8033b8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8033b34:	881b      	ldrh	r3, [r3, #0]
 8033b36:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8033b3a:	b29a      	uxth	r2, r3
 8033b3c:	4b14      	ldr	r3, [pc, #80]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033b3e:	801a      	strh	r2, [r3, #0]
				TIM2->CCR2 = newSample.uBytes[0]; //LSB
 8033b40:	4b13      	ldr	r3, [pc, #76]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033b42:	781a      	ldrb	r2, [r3, #0]
 8033b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8033b48:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR1 = newSample.uBytes[1]; //MSB
 8033b4a:	4b11      	ldr	r3, [pc, #68]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033b4c:	785a      	ldrb	r2, [r3, #1]
 8033b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8033b52:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort)>>4);
 8033b54:	4b0e      	ldr	r3, [pc, #56]	; (8033b90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8033b56:	881b      	ldrh	r3, [r3, #0]
 8033b58:	091b      	lsrs	r3, r3, #4
 8033b5a:	b29b      	uxth	r3, r3
 8033b5c:	2200      	movs	r2, #0
 8033b5e:	2100      	movs	r1, #0
 8033b60:	480c      	ldr	r0, [pc, #48]	; (8033b94 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8033b62:	f000 fc28 	bl	80343b6 <HAL_DAC_SetValue>
}
 8033b66:	bf00      	nop
 8033b68:	3710      	adds	r7, #16
 8033b6a:	46bd      	mov	sp, r7
 8033b6c:	bd80      	pop	{r7, pc}
 8033b6e:	bf00      	nop
 8033b70:	20000000 	.word	0x20000000
 8033b74:	200000c0 	.word	0x200000c0
 8033b78:	20000001 	.word	0x20000001
 8033b7c:	2000022c 	.word	0x2000022c
 8033b80:	2000022e 	.word	0x2000022e
 8033b84:	20000090 	.word	0x20000090
 8033b88:	20000230 	.word	0x20000230
 8033b8c:	20000234 	.word	0x20000234
 8033b90:	2000008c 	.word	0x2000008c
 8033b94:	200000c4 	.word	0x200000c4

08033b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8033b98:	b480      	push	{r7}
 8033b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8033b9c:	b672      	cpsid	i
}
 8033b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8033ba0:	e7fe      	b.n	8033ba0 <Error_Handler+0x8>
	...

08033ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8033ba4:	b580      	push	{r7, lr}
 8033ba6:	b082      	sub	sp, #8
 8033ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8033baa:	2300      	movs	r3, #0
 8033bac:	607b      	str	r3, [r7, #4]
 8033bae:	4b10      	ldr	r3, [pc, #64]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033bb2:	4a0f      	ldr	r2, [pc, #60]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8033bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8033bba:	4b0d      	ldr	r3, [pc, #52]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033bc2:	607b      	str	r3, [r7, #4]
 8033bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8033bc6:	2300      	movs	r3, #0
 8033bc8:	603b      	str	r3, [r7, #0]
 8033bca:	4b09      	ldr	r3, [pc, #36]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033bce:	4a08      	ldr	r2, [pc, #32]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8033bd6:	4b06      	ldr	r3, [pc, #24]	; (8033bf0 <HAL_MspInit+0x4c>)
 8033bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033bde:	603b      	str	r3, [r7, #0]
 8033be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8033be2:	2007      	movs	r0, #7
 8033be4:	f000 fb32 	bl	803424c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8033be8:	bf00      	nop
 8033bea:	3708      	adds	r7, #8
 8033bec:	46bd      	mov	sp, r7
 8033bee:	bd80      	pop	{r7, pc}
 8033bf0:	40023800 	.word	0x40023800

08033bf4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8033bf4:	b580      	push	{r7, lr}
 8033bf6:	b08a      	sub	sp, #40	; 0x28
 8033bf8:	af00      	add	r7, sp, #0
 8033bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033bfc:	f107 0314 	add.w	r3, r7, #20
 8033c00:	2200      	movs	r2, #0
 8033c02:	601a      	str	r2, [r3, #0]
 8033c04:	605a      	str	r2, [r3, #4]
 8033c06:	609a      	str	r2, [r3, #8]
 8033c08:	60da      	str	r2, [r3, #12]
 8033c0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8033c0c:	687b      	ldr	r3, [r7, #4]
 8033c0e:	681b      	ldr	r3, [r3, #0]
 8033c10:	4a17      	ldr	r2, [pc, #92]	; (8033c70 <HAL_DAC_MspInit+0x7c>)
 8033c12:	4293      	cmp	r3, r2
 8033c14:	d127      	bne.n	8033c66 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8033c16:	2300      	movs	r3, #0
 8033c18:	613b      	str	r3, [r7, #16]
 8033c1a:	4b16      	ldr	r3, [pc, #88]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033c1e:	4a15      	ldr	r2, [pc, #84]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8033c24:	6413      	str	r3, [r2, #64]	; 0x40
 8033c26:	4b13      	ldr	r3, [pc, #76]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033c2e:	613b      	str	r3, [r7, #16]
 8033c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8033c32:	2300      	movs	r3, #0
 8033c34:	60fb      	str	r3, [r7, #12]
 8033c36:	4b0f      	ldr	r3, [pc, #60]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033c3a:	4a0e      	ldr	r2, [pc, #56]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c3c:	f043 0301 	orr.w	r3, r3, #1
 8033c40:	6313      	str	r3, [r2, #48]	; 0x30
 8033c42:	4b0c      	ldr	r3, [pc, #48]	; (8033c74 <HAL_DAC_MspInit+0x80>)
 8033c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033c46:	f003 0301 	and.w	r3, r3, #1
 8033c4a:	60fb      	str	r3, [r7, #12]
 8033c4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8033c4e:	2310      	movs	r3, #16
 8033c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8033c52:	2303      	movs	r3, #3
 8033c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033c56:	2300      	movs	r3, #0
 8033c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033c5a:	f107 0314 	add.w	r3, r7, #20
 8033c5e:	4619      	mov	r1, r3
 8033c60:	4805      	ldr	r0, [pc, #20]	; (8033c78 <HAL_DAC_MspInit+0x84>)
 8033c62:	f000 ff8d 	bl	8034b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8033c66:	bf00      	nop
 8033c68:	3728      	adds	r7, #40	; 0x28
 8033c6a:	46bd      	mov	sp, r7
 8033c6c:	bd80      	pop	{r7, pc}
 8033c6e:	bf00      	nop
 8033c70:	40007400 	.word	0x40007400
 8033c74:	40023800 	.word	0x40023800
 8033c78:	40020000 	.word	0x40020000

08033c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8033c7c:	b580      	push	{r7, lr}
 8033c7e:	b08a      	sub	sp, #40	; 0x28
 8033c80:	af00      	add	r7, sp, #0
 8033c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033c84:	f107 0314 	add.w	r3, r7, #20
 8033c88:	2200      	movs	r2, #0
 8033c8a:	601a      	str	r2, [r3, #0]
 8033c8c:	605a      	str	r2, [r3, #4]
 8033c8e:	609a      	str	r2, [r3, #8]
 8033c90:	60da      	str	r2, [r3, #12]
 8033c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8033c94:	687b      	ldr	r3, [r7, #4]
 8033c96:	681b      	ldr	r3, [r3, #0]
 8033c98:	4a19      	ldr	r2, [pc, #100]	; (8033d00 <HAL_I2C_MspInit+0x84>)
 8033c9a:	4293      	cmp	r3, r2
 8033c9c:	d12c      	bne.n	8033cf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8033c9e:	2300      	movs	r3, #0
 8033ca0:	613b      	str	r3, [r7, #16]
 8033ca2:	4b18      	ldr	r3, [pc, #96]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033ca6:	4a17      	ldr	r2, [pc, #92]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033ca8:	f043 0302 	orr.w	r3, r3, #2
 8033cac:	6313      	str	r3, [r2, #48]	; 0x30
 8033cae:	4b15      	ldr	r3, [pc, #84]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033cb2:	f003 0302 	and.w	r3, r3, #2
 8033cb6:	613b      	str	r3, [r7, #16]
 8033cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8033cba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8033cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8033cc0:	2312      	movs	r3, #18
 8033cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033cc4:	2300      	movs	r3, #0
 8033cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8033cc8:	2303      	movs	r3, #3
 8033cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8033ccc:	2304      	movs	r3, #4
 8033cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8033cd0:	f107 0314 	add.w	r3, r7, #20
 8033cd4:	4619      	mov	r1, r3
 8033cd6:	480c      	ldr	r0, [pc, #48]	; (8033d08 <HAL_I2C_MspInit+0x8c>)
 8033cd8:	f000 ff52 	bl	8034b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8033cdc:	2300      	movs	r3, #0
 8033cde:	60fb      	str	r3, [r7, #12]
 8033ce0:	4b08      	ldr	r3, [pc, #32]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033ce4:	4a07      	ldr	r2, [pc, #28]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8033cea:	6413      	str	r3, [r2, #64]	; 0x40
 8033cec:	4b05      	ldr	r3, [pc, #20]	; (8033d04 <HAL_I2C_MspInit+0x88>)
 8033cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8033cf4:	60fb      	str	r3, [r7, #12]
 8033cf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8033cf8:	bf00      	nop
 8033cfa:	3728      	adds	r7, #40	; 0x28
 8033cfc:	46bd      	mov	sp, r7
 8033cfe:	bd80      	pop	{r7, pc}
 8033d00:	40005400 	.word	0x40005400
 8033d04:	40023800 	.word	0x40023800
 8033d08:	40020400 	.word	0x40020400

08033d0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8033d0c:	b580      	push	{r7, lr}
 8033d0e:	b08e      	sub	sp, #56	; 0x38
 8033d10:	af00      	add	r7, sp, #0
 8033d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8033d18:	2200      	movs	r2, #0
 8033d1a:	601a      	str	r2, [r3, #0]
 8033d1c:	605a      	str	r2, [r3, #4]
 8033d1e:	609a      	str	r2, [r3, #8]
 8033d20:	60da      	str	r2, [r3, #12]
 8033d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8033d24:	f107 0314 	add.w	r3, r7, #20
 8033d28:	2200      	movs	r2, #0
 8033d2a:	601a      	str	r2, [r3, #0]
 8033d2c:	605a      	str	r2, [r3, #4]
 8033d2e:	609a      	str	r2, [r3, #8]
 8033d30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8033d32:	687b      	ldr	r3, [r7, #4]
 8033d34:	681b      	ldr	r3, [r3, #0]
 8033d36:	4a4e      	ldr	r2, [pc, #312]	; (8033e70 <HAL_I2S_MspInit+0x164>)
 8033d38:	4293      	cmp	r3, r2
 8033d3a:	f040 8095 	bne.w	8033e68 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8033d3e:	2301      	movs	r3, #1
 8033d40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8033d42:	2332      	movs	r3, #50	; 0x32
 8033d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8033d46:	2302      	movs	r3, #2
 8033d48:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8033d4a:	f107 0314 	add.w	r3, r7, #20
 8033d4e:	4618      	mov	r0, r3
 8033d50:	f003 fa8c 	bl	803726c <HAL_RCCEx_PeriphCLKConfig>
 8033d54:	4603      	mov	r3, r0
 8033d56:	2b00      	cmp	r3, #0
 8033d58:	d001      	beq.n	8033d5e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8033d5a:	f7ff ff1d 	bl	8033b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8033d5e:	2300      	movs	r3, #0
 8033d60:	613b      	str	r3, [r7, #16]
 8033d62:	4b44      	ldr	r3, [pc, #272]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033d66:	4a43      	ldr	r2, [pc, #268]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8033d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8033d6e:	4b41      	ldr	r3, [pc, #260]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033d76:	613b      	str	r3, [r7, #16]
 8033d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8033d7a:	2300      	movs	r3, #0
 8033d7c:	60fb      	str	r3, [r7, #12]
 8033d7e:	4b3d      	ldr	r3, [pc, #244]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033d82:	4a3c      	ldr	r2, [pc, #240]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d84:	f043 0304 	orr.w	r3, r3, #4
 8033d88:	6313      	str	r3, [r2, #48]	; 0x30
 8033d8a:	4b3a      	ldr	r3, [pc, #232]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033d8e:	f003 0304 	and.w	r3, r3, #4
 8033d92:	60fb      	str	r3, [r7, #12]
 8033d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8033d96:	2300      	movs	r3, #0
 8033d98:	60bb      	str	r3, [r7, #8]
 8033d9a:	4b36      	ldr	r3, [pc, #216]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033d9e:	4a35      	ldr	r2, [pc, #212]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033da0:	f043 0301 	orr.w	r3, r3, #1
 8033da4:	6313      	str	r3, [r2, #48]	; 0x30
 8033da6:	4b33      	ldr	r3, [pc, #204]	; (8033e74 <HAL_I2S_MspInit+0x168>)
 8033da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033daa:	f003 0301 	and.w	r3, r3, #1
 8033dae:	60bb      	str	r3, [r7, #8]
 8033db0:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8033db2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8033db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033db8:	2302      	movs	r3, #2
 8033dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033dbc:	2300      	movs	r3, #0
 8033dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033dc0:	2300      	movs	r3, #0
 8033dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8033dc4:	2306      	movs	r3, #6
 8033dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8033dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8033dcc:	4619      	mov	r1, r3
 8033dce:	482a      	ldr	r0, [pc, #168]	; (8033e78 <HAL_I2S_MspInit+0x16c>)
 8033dd0:	f000 fed6 	bl	8034b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8033dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033dda:	2302      	movs	r3, #2
 8033ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033dde:	2300      	movs	r3, #0
 8033de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033de2:	2300      	movs	r3, #0
 8033de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8033de6:	2306      	movs	r3, #6
 8033de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8033dee:	4619      	mov	r1, r3
 8033df0:	4822      	ldr	r0, [pc, #136]	; (8033e7c <HAL_I2S_MspInit+0x170>)
 8033df2:	f000 fec5 	bl	8034b80 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8033df6:	4b22      	ldr	r3, [pc, #136]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033df8:	4a22      	ldr	r2, [pc, #136]	; (8033e84 <HAL_I2S_MspInit+0x178>)
 8033dfa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8033dfc:	4b20      	ldr	r3, [pc, #128]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033dfe:	2200      	movs	r2, #0
 8033e00:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8033e02:	4b1f      	ldr	r3, [pc, #124]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e04:	2240      	movs	r2, #64	; 0x40
 8033e06:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8033e08:	4b1d      	ldr	r3, [pc, #116]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e0a:	2200      	movs	r2, #0
 8033e0c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8033e0e:	4b1c      	ldr	r3, [pc, #112]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8033e14:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8033e16:	4b1a      	ldr	r3, [pc, #104]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8033e1c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8033e1e:	4b18      	ldr	r3, [pc, #96]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8033e24:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8033e26:	4b16      	ldr	r3, [pc, #88]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8033e2c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8033e2e:	4b14      	ldr	r3, [pc, #80]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e30:	2200      	movs	r2, #0
 8033e32:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8033e34:	4b12      	ldr	r3, [pc, #72]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e36:	2204      	movs	r2, #4
 8033e38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8033e3a:	4b11      	ldr	r3, [pc, #68]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e3c:	2203      	movs	r2, #3
 8033e3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8033e40:	4b0f      	ldr	r3, [pc, #60]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e42:	2200      	movs	r2, #0
 8033e44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8033e46:	4b0e      	ldr	r3, [pc, #56]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e48:	2200      	movs	r2, #0
 8033e4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8033e4c:	480c      	ldr	r0, [pc, #48]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e4e:	f000 fb27 	bl	80344a0 <HAL_DMA_Init>
 8033e52:	4603      	mov	r3, r0
 8033e54:	2b00      	cmp	r3, #0
 8033e56:	d001      	beq.n	8033e5c <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8033e58:	f7ff fe9e 	bl	8033b98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8033e5c:	687b      	ldr	r3, [r7, #4]
 8033e5e:	4a08      	ldr	r2, [pc, #32]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e60:	639a      	str	r2, [r3, #56]	; 0x38
 8033e62:	4a07      	ldr	r2, [pc, #28]	; (8033e80 <HAL_I2S_MspInit+0x174>)
 8033e64:	687b      	ldr	r3, [r7, #4]
 8033e66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8033e68:	bf00      	nop
 8033e6a:	3738      	adds	r7, #56	; 0x38
 8033e6c:	46bd      	mov	sp, r7
 8033e6e:	bd80      	pop	{r7, pc}
 8033e70:	40003c00 	.word	0x40003c00
 8033e74:	40023800 	.word	0x40023800
 8033e78:	40020800 	.word	0x40020800
 8033e7c:	40020000 	.word	0x40020000
 8033e80:	20000174 	.word	0x20000174
 8033e84:	40026088 	.word	0x40026088

08033e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8033e88:	b580      	push	{r7, lr}
 8033e8a:	b084      	sub	sp, #16
 8033e8c:	af00      	add	r7, sp, #0
 8033e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8033e90:	687b      	ldr	r3, [r7, #4]
 8033e92:	681b      	ldr	r3, [r3, #0]
 8033e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8033e98:	d115      	bne.n	8033ec6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8033e9a:	2300      	movs	r3, #0
 8033e9c:	60fb      	str	r3, [r7, #12]
 8033e9e:	4b0c      	ldr	r3, [pc, #48]	; (8033ed0 <HAL_TIM_Base_MspInit+0x48>)
 8033ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033ea2:	4a0b      	ldr	r2, [pc, #44]	; (8033ed0 <HAL_TIM_Base_MspInit+0x48>)
 8033ea4:	f043 0301 	orr.w	r3, r3, #1
 8033ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8033eaa:	4b09      	ldr	r3, [pc, #36]	; (8033ed0 <HAL_TIM_Base_MspInit+0x48>)
 8033eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033eae:	f003 0301 	and.w	r3, r3, #1
 8033eb2:	60fb      	str	r3, [r7, #12]
 8033eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8033eb6:	2200      	movs	r2, #0
 8033eb8:	2100      	movs	r1, #0
 8033eba:	201c      	movs	r0, #28
 8033ebc:	f000 f9d1 	bl	8034262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8033ec0:	201c      	movs	r0, #28
 8033ec2:	f000 f9ea 	bl	803429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8033ec6:	bf00      	nop
 8033ec8:	3710      	adds	r7, #16
 8033eca:	46bd      	mov	sp, r7
 8033ecc:	bd80      	pop	{r7, pc}
 8033ece:	bf00      	nop
 8033ed0:	40023800 	.word	0x40023800

08033ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8033ed4:	b480      	push	{r7}
 8033ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8033ed8:	e7fe      	b.n	8033ed8 <NMI_Handler+0x4>

08033eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8033eda:	b480      	push	{r7}
 8033edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8033ede:	e7fe      	b.n	8033ede <HardFault_Handler+0x4>

08033ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8033ee0:	b480      	push	{r7}
 8033ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8033ee4:	e7fe      	b.n	8033ee4 <MemManage_Handler+0x4>

08033ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8033ee6:	b480      	push	{r7}
 8033ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8033eea:	e7fe      	b.n	8033eea <BusFault_Handler+0x4>

08033eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8033eec:	b480      	push	{r7}
 8033eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8033ef0:	e7fe      	b.n	8033ef0 <UsageFault_Handler+0x4>

08033ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8033ef2:	b480      	push	{r7}
 8033ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8033ef6:	bf00      	nop
 8033ef8:	46bd      	mov	sp, r7
 8033efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033efe:	4770      	bx	lr

08033f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8033f00:	b480      	push	{r7}
 8033f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8033f04:	bf00      	nop
 8033f06:	46bd      	mov	sp, r7
 8033f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f0c:	4770      	bx	lr

08033f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8033f0e:	b480      	push	{r7}
 8033f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8033f12:	bf00      	nop
 8033f14:	46bd      	mov	sp, r7
 8033f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f1a:	4770      	bx	lr

08033f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8033f1c:	b580      	push	{r7, lr}
 8033f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8033f20:	f000 f8a4 	bl	803406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8033f24:	bf00      	nop
 8033f26:	bd80      	pop	{r7, pc}

08033f28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8033f28:	b580      	push	{r7, lr}
 8033f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8033f2c:	4802      	ldr	r0, [pc, #8]	; (8033f38 <DMA1_Stream5_IRQHandler+0x10>)
 8033f2e:	f000 fbbd 	bl	80346ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8033f32:	bf00      	nop
 8033f34:	bd80      	pop	{r7, pc}
 8033f36:	bf00      	nop
 8033f38:	20000174 	.word	0x20000174

08033f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8033f3c:	b580      	push	{r7, lr}
 8033f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8033f40:	4802      	ldr	r0, [pc, #8]	; (8033f4c <TIM2_IRQHandler+0x10>)
 8033f42:	f003 fb93 	bl	803766c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8033f46:	bf00      	nop
 8033f48:	bd80      	pop	{r7, pc}
 8033f4a:	bf00      	nop
 8033f4c:	200001d4 	.word	0x200001d4

08033f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8033f50:	b480      	push	{r7}
 8033f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8033f54:	4b06      	ldr	r3, [pc, #24]	; (8033f70 <SystemInit+0x20>)
 8033f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8033f5a:	4a05      	ldr	r2, [pc, #20]	; (8033f70 <SystemInit+0x20>)
 8033f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8033f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8033f64:	bf00      	nop
 8033f66:	46bd      	mov	sp, r7
 8033f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f6c:	4770      	bx	lr
 8033f6e:	bf00      	nop
 8033f70:	e000ed00 	.word	0xe000ed00

08033f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8033f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8033fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8033f78:	480d      	ldr	r0, [pc, #52]	; (8033fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8033f7a:	490e      	ldr	r1, [pc, #56]	; (8033fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8033f7c:	4a0e      	ldr	r2, [pc, #56]	; (8033fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8033f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8033f80:	e002      	b.n	8033f88 <LoopCopyDataInit>

08033f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8033f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8033f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8033f86:	3304      	adds	r3, #4

08033f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8033f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8033f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8033f8c:	d3f9      	bcc.n	8033f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8033f8e:	4a0b      	ldr	r2, [pc, #44]	; (8033fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8033f90:	4c0b      	ldr	r4, [pc, #44]	; (8033fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8033f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8033f94:	e001      	b.n	8033f9a <LoopFillZerobss>

08033f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8033f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8033f98:	3204      	adds	r2, #4

08033f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8033f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8033f9c:	d3fb      	bcc.n	8033f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8033f9e:	f7ff ffd7 	bl	8033f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8033fa2:	f003 ff2d 	bl	8037e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8033fa6:	f7ff fab7 	bl	8033518 <main>
  bx  lr    
 8033faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8033fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8033fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8033fb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8033fb8:	08037f70 	.word	0x08037f70
  ldr r2, =_sbss
 8033fbc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8033fc0:	2000023c 	.word	0x2000023c

08033fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8033fc4:	e7fe      	b.n	8033fc4 <ADC_IRQHandler>
	...

08033fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8033fc8:	b580      	push	{r7, lr}
 8033fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8033fcc:	4b0e      	ldr	r3, [pc, #56]	; (8034008 <HAL_Init+0x40>)
 8033fce:	681b      	ldr	r3, [r3, #0]
 8033fd0:	4a0d      	ldr	r2, [pc, #52]	; (8034008 <HAL_Init+0x40>)
 8033fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8033fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8033fd8:	4b0b      	ldr	r3, [pc, #44]	; (8034008 <HAL_Init+0x40>)
 8033fda:	681b      	ldr	r3, [r3, #0]
 8033fdc:	4a0a      	ldr	r2, [pc, #40]	; (8034008 <HAL_Init+0x40>)
 8033fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8033fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8033fe4:	4b08      	ldr	r3, [pc, #32]	; (8034008 <HAL_Init+0x40>)
 8033fe6:	681b      	ldr	r3, [r3, #0]
 8033fe8:	4a07      	ldr	r2, [pc, #28]	; (8034008 <HAL_Init+0x40>)
 8033fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8033ff0:	2003      	movs	r0, #3
 8033ff2:	f000 f92b 	bl	803424c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8033ff6:	2000      	movs	r0, #0
 8033ff8:	f000 f808 	bl	803400c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8033ffc:	f7ff fdd2 	bl	8033ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8034000:	2300      	movs	r3, #0
}
 8034002:	4618      	mov	r0, r3
 8034004:	bd80      	pop	{r7, pc}
 8034006:	bf00      	nop
 8034008:	40023c00 	.word	0x40023c00

0803400c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 803400c:	b580      	push	{r7, lr}
 803400e:	b082      	sub	sp, #8
 8034010:	af00      	add	r7, sp, #0
 8034012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8034014:	4b12      	ldr	r3, [pc, #72]	; (8034060 <HAL_InitTick+0x54>)
 8034016:	681a      	ldr	r2, [r3, #0]
 8034018:	4b12      	ldr	r3, [pc, #72]	; (8034064 <HAL_InitTick+0x58>)
 803401a:	781b      	ldrb	r3, [r3, #0]
 803401c:	4619      	mov	r1, r3
 803401e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8034022:	fbb3 f3f1 	udiv	r3, r3, r1
 8034026:	fbb2 f3f3 	udiv	r3, r2, r3
 803402a:	4618      	mov	r0, r3
 803402c:	f000 f943 	bl	80342b6 <HAL_SYSTICK_Config>
 8034030:	4603      	mov	r3, r0
 8034032:	2b00      	cmp	r3, #0
 8034034:	d001      	beq.n	803403a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8034036:	2301      	movs	r3, #1
 8034038:	e00e      	b.n	8034058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 803403a:	687b      	ldr	r3, [r7, #4]
 803403c:	2b0f      	cmp	r3, #15
 803403e:	d80a      	bhi.n	8034056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8034040:	2200      	movs	r2, #0
 8034042:	6879      	ldr	r1, [r7, #4]
 8034044:	f04f 30ff 	mov.w	r0, #4294967295
 8034048:	f000 f90b 	bl	8034262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 803404c:	4a06      	ldr	r2, [pc, #24]	; (8034068 <HAL_InitTick+0x5c>)
 803404e:	687b      	ldr	r3, [r7, #4]
 8034050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8034052:	2300      	movs	r3, #0
 8034054:	e000      	b.n	8034058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8034056:	2301      	movs	r3, #1
}
 8034058:	4618      	mov	r0, r3
 803405a:	3708      	adds	r7, #8
 803405c:	46bd      	mov	sp, r7
 803405e:	bd80      	pop	{r7, pc}
 8034060:	20000004 	.word	0x20000004
 8034064:	2000000c 	.word	0x2000000c
 8034068:	20000008 	.word	0x20000008

0803406c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 803406c:	b480      	push	{r7}
 803406e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8034070:	4b06      	ldr	r3, [pc, #24]	; (803408c <HAL_IncTick+0x20>)
 8034072:	781b      	ldrb	r3, [r3, #0]
 8034074:	461a      	mov	r2, r3
 8034076:	4b06      	ldr	r3, [pc, #24]	; (8034090 <HAL_IncTick+0x24>)
 8034078:	681b      	ldr	r3, [r3, #0]
 803407a:	4413      	add	r3, r2
 803407c:	4a04      	ldr	r2, [pc, #16]	; (8034090 <HAL_IncTick+0x24>)
 803407e:	6013      	str	r3, [r2, #0]
}
 8034080:	bf00      	nop
 8034082:	46bd      	mov	sp, r7
 8034084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034088:	4770      	bx	lr
 803408a:	bf00      	nop
 803408c:	2000000c 	.word	0x2000000c
 8034090:	20000238 	.word	0x20000238

08034094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8034094:	b480      	push	{r7}
 8034096:	af00      	add	r7, sp, #0
  return uwTick;
 8034098:	4b03      	ldr	r3, [pc, #12]	; (80340a8 <HAL_GetTick+0x14>)
 803409a:	681b      	ldr	r3, [r3, #0]
}
 803409c:	4618      	mov	r0, r3
 803409e:	46bd      	mov	sp, r7
 80340a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340a4:	4770      	bx	lr
 80340a6:	bf00      	nop
 80340a8:	20000238 	.word	0x20000238

080340ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80340ac:	b480      	push	{r7}
 80340ae:	b085      	sub	sp, #20
 80340b0:	af00      	add	r7, sp, #0
 80340b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80340b4:	687b      	ldr	r3, [r7, #4]
 80340b6:	f003 0307 	and.w	r3, r3, #7
 80340ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80340bc:	4b0c      	ldr	r3, [pc, #48]	; (80340f0 <__NVIC_SetPriorityGrouping+0x44>)
 80340be:	68db      	ldr	r3, [r3, #12]
 80340c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80340c2:	68ba      	ldr	r2, [r7, #8]
 80340c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80340c8:	4013      	ands	r3, r2
 80340ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80340cc:	68fb      	ldr	r3, [r7, #12]
 80340ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80340d0:	68bb      	ldr	r3, [r7, #8]
 80340d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80340d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80340d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80340dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80340de:	4a04      	ldr	r2, [pc, #16]	; (80340f0 <__NVIC_SetPriorityGrouping+0x44>)
 80340e0:	68bb      	ldr	r3, [r7, #8]
 80340e2:	60d3      	str	r3, [r2, #12]
}
 80340e4:	bf00      	nop
 80340e6:	3714      	adds	r7, #20
 80340e8:	46bd      	mov	sp, r7
 80340ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340ee:	4770      	bx	lr
 80340f0:	e000ed00 	.word	0xe000ed00

080340f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80340f4:	b480      	push	{r7}
 80340f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80340f8:	4b04      	ldr	r3, [pc, #16]	; (803410c <__NVIC_GetPriorityGrouping+0x18>)
 80340fa:	68db      	ldr	r3, [r3, #12]
 80340fc:	0a1b      	lsrs	r3, r3, #8
 80340fe:	f003 0307 	and.w	r3, r3, #7
}
 8034102:	4618      	mov	r0, r3
 8034104:	46bd      	mov	sp, r7
 8034106:	f85d 7b04 	ldr.w	r7, [sp], #4
 803410a:	4770      	bx	lr
 803410c:	e000ed00 	.word	0xe000ed00

08034110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8034110:	b480      	push	{r7}
 8034112:	b083      	sub	sp, #12
 8034114:	af00      	add	r7, sp, #0
 8034116:	4603      	mov	r3, r0
 8034118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803411e:	2b00      	cmp	r3, #0
 8034120:	db0b      	blt.n	803413a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8034122:	79fb      	ldrb	r3, [r7, #7]
 8034124:	f003 021f 	and.w	r2, r3, #31
 8034128:	4907      	ldr	r1, [pc, #28]	; (8034148 <__NVIC_EnableIRQ+0x38>)
 803412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803412e:	095b      	lsrs	r3, r3, #5
 8034130:	2001      	movs	r0, #1
 8034132:	fa00 f202 	lsl.w	r2, r0, r2
 8034136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 803413a:	bf00      	nop
 803413c:	370c      	adds	r7, #12
 803413e:	46bd      	mov	sp, r7
 8034140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034144:	4770      	bx	lr
 8034146:	bf00      	nop
 8034148:	e000e100 	.word	0xe000e100

0803414c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 803414c:	b480      	push	{r7}
 803414e:	b083      	sub	sp, #12
 8034150:	af00      	add	r7, sp, #0
 8034152:	4603      	mov	r3, r0
 8034154:	6039      	str	r1, [r7, #0]
 8034156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8034158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803415c:	2b00      	cmp	r3, #0
 803415e:	db0a      	blt.n	8034176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8034160:	683b      	ldr	r3, [r7, #0]
 8034162:	b2da      	uxtb	r2, r3
 8034164:	490c      	ldr	r1, [pc, #48]	; (8034198 <__NVIC_SetPriority+0x4c>)
 8034166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803416a:	0112      	lsls	r2, r2, #4
 803416c:	b2d2      	uxtb	r2, r2
 803416e:	440b      	add	r3, r1
 8034170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8034174:	e00a      	b.n	803418c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8034176:	683b      	ldr	r3, [r7, #0]
 8034178:	b2da      	uxtb	r2, r3
 803417a:	4908      	ldr	r1, [pc, #32]	; (803419c <__NVIC_SetPriority+0x50>)
 803417c:	79fb      	ldrb	r3, [r7, #7]
 803417e:	f003 030f 	and.w	r3, r3, #15
 8034182:	3b04      	subs	r3, #4
 8034184:	0112      	lsls	r2, r2, #4
 8034186:	b2d2      	uxtb	r2, r2
 8034188:	440b      	add	r3, r1
 803418a:	761a      	strb	r2, [r3, #24]
}
 803418c:	bf00      	nop
 803418e:	370c      	adds	r7, #12
 8034190:	46bd      	mov	sp, r7
 8034192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034196:	4770      	bx	lr
 8034198:	e000e100 	.word	0xe000e100
 803419c:	e000ed00 	.word	0xe000ed00

080341a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80341a0:	b480      	push	{r7}
 80341a2:	b089      	sub	sp, #36	; 0x24
 80341a4:	af00      	add	r7, sp, #0
 80341a6:	60f8      	str	r0, [r7, #12]
 80341a8:	60b9      	str	r1, [r7, #8]
 80341aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80341ac:	68fb      	ldr	r3, [r7, #12]
 80341ae:	f003 0307 	and.w	r3, r3, #7
 80341b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80341b4:	69fb      	ldr	r3, [r7, #28]
 80341b6:	f1c3 0307 	rsb	r3, r3, #7
 80341ba:	2b04      	cmp	r3, #4
 80341bc:	bf28      	it	cs
 80341be:	2304      	movcs	r3, #4
 80341c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80341c2:	69fb      	ldr	r3, [r7, #28]
 80341c4:	3304      	adds	r3, #4
 80341c6:	2b06      	cmp	r3, #6
 80341c8:	d902      	bls.n	80341d0 <NVIC_EncodePriority+0x30>
 80341ca:	69fb      	ldr	r3, [r7, #28]
 80341cc:	3b03      	subs	r3, #3
 80341ce:	e000      	b.n	80341d2 <NVIC_EncodePriority+0x32>
 80341d0:	2300      	movs	r3, #0
 80341d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80341d4:	f04f 32ff 	mov.w	r2, #4294967295
 80341d8:	69bb      	ldr	r3, [r7, #24]
 80341da:	fa02 f303 	lsl.w	r3, r2, r3
 80341de:	43da      	mvns	r2, r3
 80341e0:	68bb      	ldr	r3, [r7, #8]
 80341e2:	401a      	ands	r2, r3
 80341e4:	697b      	ldr	r3, [r7, #20]
 80341e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80341e8:	f04f 31ff 	mov.w	r1, #4294967295
 80341ec:	697b      	ldr	r3, [r7, #20]
 80341ee:	fa01 f303 	lsl.w	r3, r1, r3
 80341f2:	43d9      	mvns	r1, r3
 80341f4:	687b      	ldr	r3, [r7, #4]
 80341f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80341f8:	4313      	orrs	r3, r2
         );
}
 80341fa:	4618      	mov	r0, r3
 80341fc:	3724      	adds	r7, #36	; 0x24
 80341fe:	46bd      	mov	sp, r7
 8034200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034204:	4770      	bx	lr
	...

08034208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8034208:	b580      	push	{r7, lr}
 803420a:	b082      	sub	sp, #8
 803420c:	af00      	add	r7, sp, #0
 803420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8034210:	687b      	ldr	r3, [r7, #4]
 8034212:	3b01      	subs	r3, #1
 8034214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8034218:	d301      	bcc.n	803421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 803421a:	2301      	movs	r3, #1
 803421c:	e00f      	b.n	803423e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 803421e:	4a0a      	ldr	r2, [pc, #40]	; (8034248 <SysTick_Config+0x40>)
 8034220:	687b      	ldr	r3, [r7, #4]
 8034222:	3b01      	subs	r3, #1
 8034224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8034226:	210f      	movs	r1, #15
 8034228:	f04f 30ff 	mov.w	r0, #4294967295
 803422c:	f7ff ff8e 	bl	803414c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8034230:	4b05      	ldr	r3, [pc, #20]	; (8034248 <SysTick_Config+0x40>)
 8034232:	2200      	movs	r2, #0
 8034234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8034236:	4b04      	ldr	r3, [pc, #16]	; (8034248 <SysTick_Config+0x40>)
 8034238:	2207      	movs	r2, #7
 803423a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 803423c:	2300      	movs	r3, #0
}
 803423e:	4618      	mov	r0, r3
 8034240:	3708      	adds	r7, #8
 8034242:	46bd      	mov	sp, r7
 8034244:	bd80      	pop	{r7, pc}
 8034246:	bf00      	nop
 8034248:	e000e010 	.word	0xe000e010

0803424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 803424c:	b580      	push	{r7, lr}
 803424e:	b082      	sub	sp, #8
 8034250:	af00      	add	r7, sp, #0
 8034252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8034254:	6878      	ldr	r0, [r7, #4]
 8034256:	f7ff ff29 	bl	80340ac <__NVIC_SetPriorityGrouping>
}
 803425a:	bf00      	nop
 803425c:	3708      	adds	r7, #8
 803425e:	46bd      	mov	sp, r7
 8034260:	bd80      	pop	{r7, pc}

08034262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8034262:	b580      	push	{r7, lr}
 8034264:	b086      	sub	sp, #24
 8034266:	af00      	add	r7, sp, #0
 8034268:	4603      	mov	r3, r0
 803426a:	60b9      	str	r1, [r7, #8]
 803426c:	607a      	str	r2, [r7, #4]
 803426e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8034270:	2300      	movs	r3, #0
 8034272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8034274:	f7ff ff3e 	bl	80340f4 <__NVIC_GetPriorityGrouping>
 8034278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 803427a:	687a      	ldr	r2, [r7, #4]
 803427c:	68b9      	ldr	r1, [r7, #8]
 803427e:	6978      	ldr	r0, [r7, #20]
 8034280:	f7ff ff8e 	bl	80341a0 <NVIC_EncodePriority>
 8034284:	4602      	mov	r2, r0
 8034286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803428a:	4611      	mov	r1, r2
 803428c:	4618      	mov	r0, r3
 803428e:	f7ff ff5d 	bl	803414c <__NVIC_SetPriority>
}
 8034292:	bf00      	nop
 8034294:	3718      	adds	r7, #24
 8034296:	46bd      	mov	sp, r7
 8034298:	bd80      	pop	{r7, pc}

0803429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 803429a:	b580      	push	{r7, lr}
 803429c:	b082      	sub	sp, #8
 803429e:	af00      	add	r7, sp, #0
 80342a0:	4603      	mov	r3, r0
 80342a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80342a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80342a8:	4618      	mov	r0, r3
 80342aa:	f7ff ff31 	bl	8034110 <__NVIC_EnableIRQ>
}
 80342ae:	bf00      	nop
 80342b0:	3708      	adds	r7, #8
 80342b2:	46bd      	mov	sp, r7
 80342b4:	bd80      	pop	{r7, pc}

080342b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80342b6:	b580      	push	{r7, lr}
 80342b8:	b082      	sub	sp, #8
 80342ba:	af00      	add	r7, sp, #0
 80342bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80342be:	6878      	ldr	r0, [r7, #4]
 80342c0:	f7ff ffa2 	bl	8034208 <SysTick_Config>
 80342c4:	4603      	mov	r3, r0
}
 80342c6:	4618      	mov	r0, r3
 80342c8:	3708      	adds	r7, #8
 80342ca:	46bd      	mov	sp, r7
 80342cc:	bd80      	pop	{r7, pc}

080342ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80342ce:	b580      	push	{r7, lr}
 80342d0:	b082      	sub	sp, #8
 80342d2:	af00      	add	r7, sp, #0
 80342d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80342d6:	687b      	ldr	r3, [r7, #4]
 80342d8:	2b00      	cmp	r3, #0
 80342da:	d101      	bne.n	80342e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80342dc:	2301      	movs	r3, #1
 80342de:	e014      	b.n	803430a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80342e0:	687b      	ldr	r3, [r7, #4]
 80342e2:	791b      	ldrb	r3, [r3, #4]
 80342e4:	b2db      	uxtb	r3, r3
 80342e6:	2b00      	cmp	r3, #0
 80342e8:	d105      	bne.n	80342f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80342ea:	687b      	ldr	r3, [r7, #4]
 80342ec:	2200      	movs	r2, #0
 80342ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80342f0:	6878      	ldr	r0, [r7, #4]
 80342f2:	f7ff fc7f 	bl	8033bf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80342f6:	687b      	ldr	r3, [r7, #4]
 80342f8:	2202      	movs	r2, #2
 80342fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80342fc:	687b      	ldr	r3, [r7, #4]
 80342fe:	2200      	movs	r2, #0
 8034300:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8034302:	687b      	ldr	r3, [r7, #4]
 8034304:	2201      	movs	r2, #1
 8034306:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8034308:	2300      	movs	r3, #0
}
 803430a:	4618      	mov	r0, r3
 803430c:	3708      	adds	r7, #8
 803430e:	46bd      	mov	sp, r7
 8034310:	bd80      	pop	{r7, pc}

08034312 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8034312:	b480      	push	{r7}
 8034314:	b083      	sub	sp, #12
 8034316:	af00      	add	r7, sp, #0
 8034318:	6078      	str	r0, [r7, #4]
 803431a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 803431c:	687b      	ldr	r3, [r7, #4]
 803431e:	795b      	ldrb	r3, [r3, #5]
 8034320:	2b01      	cmp	r3, #1
 8034322:	d101      	bne.n	8034328 <HAL_DAC_Start+0x16>
 8034324:	2302      	movs	r3, #2
 8034326:	e040      	b.n	80343aa <HAL_DAC_Start+0x98>
 8034328:	687b      	ldr	r3, [r7, #4]
 803432a:	2201      	movs	r2, #1
 803432c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 803432e:	687b      	ldr	r3, [r7, #4]
 8034330:	2202      	movs	r2, #2
 8034332:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8034334:	687b      	ldr	r3, [r7, #4]
 8034336:	681b      	ldr	r3, [r3, #0]
 8034338:	6819      	ldr	r1, [r3, #0]
 803433a:	683b      	ldr	r3, [r7, #0]
 803433c:	f003 0310 	and.w	r3, r3, #16
 8034340:	2201      	movs	r2, #1
 8034342:	409a      	lsls	r2, r3
 8034344:	687b      	ldr	r3, [r7, #4]
 8034346:	681b      	ldr	r3, [r3, #0]
 8034348:	430a      	orrs	r2, r1
 803434a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 803434c:	683b      	ldr	r3, [r7, #0]
 803434e:	2b00      	cmp	r3, #0
 8034350:	d10f      	bne.n	8034372 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8034352:	687b      	ldr	r3, [r7, #4]
 8034354:	681b      	ldr	r3, [r3, #0]
 8034356:	681b      	ldr	r3, [r3, #0]
 8034358:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 803435c:	2b3c      	cmp	r3, #60	; 0x3c
 803435e:	d11d      	bne.n	803439c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8034360:	687b      	ldr	r3, [r7, #4]
 8034362:	681b      	ldr	r3, [r3, #0]
 8034364:	685a      	ldr	r2, [r3, #4]
 8034366:	687b      	ldr	r3, [r7, #4]
 8034368:	681b      	ldr	r3, [r3, #0]
 803436a:	f042 0201 	orr.w	r2, r2, #1
 803436e:	605a      	str	r2, [r3, #4]
 8034370:	e014      	b.n	803439c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8034372:	687b      	ldr	r3, [r7, #4]
 8034374:	681b      	ldr	r3, [r3, #0]
 8034376:	681b      	ldr	r3, [r3, #0]
 8034378:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 803437c:	683b      	ldr	r3, [r7, #0]
 803437e:	f003 0310 	and.w	r3, r3, #16
 8034382:	213c      	movs	r1, #60	; 0x3c
 8034384:	fa01 f303 	lsl.w	r3, r1, r3
 8034388:	429a      	cmp	r2, r3
 803438a:	d107      	bne.n	803439c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 803438c:	687b      	ldr	r3, [r7, #4]
 803438e:	681b      	ldr	r3, [r3, #0]
 8034390:	685a      	ldr	r2, [r3, #4]
 8034392:	687b      	ldr	r3, [r7, #4]
 8034394:	681b      	ldr	r3, [r3, #0]
 8034396:	f042 0202 	orr.w	r2, r2, #2
 803439a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 803439c:	687b      	ldr	r3, [r7, #4]
 803439e:	2201      	movs	r2, #1
 80343a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80343a2:	687b      	ldr	r3, [r7, #4]
 80343a4:	2200      	movs	r2, #0
 80343a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80343a8:	2300      	movs	r3, #0
}
 80343aa:	4618      	mov	r0, r3
 80343ac:	370c      	adds	r7, #12
 80343ae:	46bd      	mov	sp, r7
 80343b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80343b4:	4770      	bx	lr

080343b6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80343b6:	b480      	push	{r7}
 80343b8:	b087      	sub	sp, #28
 80343ba:	af00      	add	r7, sp, #0
 80343bc:	60f8      	str	r0, [r7, #12]
 80343be:	60b9      	str	r1, [r7, #8]
 80343c0:	607a      	str	r2, [r7, #4]
 80343c2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80343c4:	2300      	movs	r3, #0
 80343c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80343c8:	68fb      	ldr	r3, [r7, #12]
 80343ca:	681b      	ldr	r3, [r3, #0]
 80343cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80343ce:	68bb      	ldr	r3, [r7, #8]
 80343d0:	2b00      	cmp	r3, #0
 80343d2:	d105      	bne.n	80343e0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80343d4:	697a      	ldr	r2, [r7, #20]
 80343d6:	687b      	ldr	r3, [r7, #4]
 80343d8:	4413      	add	r3, r2
 80343da:	3308      	adds	r3, #8
 80343dc:	617b      	str	r3, [r7, #20]
 80343de:	e004      	b.n	80343ea <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80343e0:	697a      	ldr	r2, [r7, #20]
 80343e2:	687b      	ldr	r3, [r7, #4]
 80343e4:	4413      	add	r3, r2
 80343e6:	3314      	adds	r3, #20
 80343e8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80343ea:	697b      	ldr	r3, [r7, #20]
 80343ec:	461a      	mov	r2, r3
 80343ee:	683b      	ldr	r3, [r7, #0]
 80343f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80343f2:	2300      	movs	r3, #0
}
 80343f4:	4618      	mov	r0, r3
 80343f6:	371c      	adds	r7, #28
 80343f8:	46bd      	mov	sp, r7
 80343fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80343fe:	4770      	bx	lr

08034400 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8034400:	b480      	push	{r7}
 8034402:	b087      	sub	sp, #28
 8034404:	af00      	add	r7, sp, #0
 8034406:	60f8      	str	r0, [r7, #12]
 8034408:	60b9      	str	r1, [r7, #8]
 803440a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 803440c:	68fb      	ldr	r3, [r7, #12]
 803440e:	795b      	ldrb	r3, [r3, #5]
 8034410:	2b01      	cmp	r3, #1
 8034412:	d101      	bne.n	8034418 <HAL_DAC_ConfigChannel+0x18>
 8034414:	2302      	movs	r3, #2
 8034416:	e03c      	b.n	8034492 <HAL_DAC_ConfigChannel+0x92>
 8034418:	68fb      	ldr	r3, [r7, #12]
 803441a:	2201      	movs	r2, #1
 803441c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 803441e:	68fb      	ldr	r3, [r7, #12]
 8034420:	2202      	movs	r2, #2
 8034422:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8034424:	68fb      	ldr	r3, [r7, #12]
 8034426:	681b      	ldr	r3, [r3, #0]
 8034428:	681b      	ldr	r3, [r3, #0]
 803442a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 803442c:	687b      	ldr	r3, [r7, #4]
 803442e:	f003 0310 	and.w	r3, r3, #16
 8034432:	f640 72fe 	movw	r2, #4094	; 0xffe
 8034436:	fa02 f303 	lsl.w	r3, r2, r3
 803443a:	43db      	mvns	r3, r3
 803443c:	697a      	ldr	r2, [r7, #20]
 803443e:	4013      	ands	r3, r2
 8034440:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8034442:	68bb      	ldr	r3, [r7, #8]
 8034444:	681a      	ldr	r2, [r3, #0]
 8034446:	68bb      	ldr	r3, [r7, #8]
 8034448:	685b      	ldr	r3, [r3, #4]
 803444a:	4313      	orrs	r3, r2
 803444c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 803444e:	687b      	ldr	r3, [r7, #4]
 8034450:	f003 0310 	and.w	r3, r3, #16
 8034454:	693a      	ldr	r2, [r7, #16]
 8034456:	fa02 f303 	lsl.w	r3, r2, r3
 803445a:	697a      	ldr	r2, [r7, #20]
 803445c:	4313      	orrs	r3, r2
 803445e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8034460:	68fb      	ldr	r3, [r7, #12]
 8034462:	681b      	ldr	r3, [r3, #0]
 8034464:	697a      	ldr	r2, [r7, #20]
 8034466:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8034468:	68fb      	ldr	r3, [r7, #12]
 803446a:	681b      	ldr	r3, [r3, #0]
 803446c:	6819      	ldr	r1, [r3, #0]
 803446e:	687b      	ldr	r3, [r7, #4]
 8034470:	f003 0310 	and.w	r3, r3, #16
 8034474:	22c0      	movs	r2, #192	; 0xc0
 8034476:	fa02 f303 	lsl.w	r3, r2, r3
 803447a:	43da      	mvns	r2, r3
 803447c:	68fb      	ldr	r3, [r7, #12]
 803447e:	681b      	ldr	r3, [r3, #0]
 8034480:	400a      	ands	r2, r1
 8034482:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8034484:	68fb      	ldr	r3, [r7, #12]
 8034486:	2201      	movs	r2, #1
 8034488:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 803448a:	68fb      	ldr	r3, [r7, #12]
 803448c:	2200      	movs	r2, #0
 803448e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8034490:	2300      	movs	r3, #0
}
 8034492:	4618      	mov	r0, r3
 8034494:	371c      	adds	r7, #28
 8034496:	46bd      	mov	sp, r7
 8034498:	f85d 7b04 	ldr.w	r7, [sp], #4
 803449c:	4770      	bx	lr
	...

080344a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80344a0:	b580      	push	{r7, lr}
 80344a2:	b086      	sub	sp, #24
 80344a4:	af00      	add	r7, sp, #0
 80344a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80344a8:	2300      	movs	r3, #0
 80344aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80344ac:	f7ff fdf2 	bl	8034094 <HAL_GetTick>
 80344b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80344b2:	687b      	ldr	r3, [r7, #4]
 80344b4:	2b00      	cmp	r3, #0
 80344b6:	d101      	bne.n	80344bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80344b8:	2301      	movs	r3, #1
 80344ba:	e099      	b.n	80345f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80344bc:	687b      	ldr	r3, [r7, #4]
 80344be:	2202      	movs	r2, #2
 80344c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80344c4:	687b      	ldr	r3, [r7, #4]
 80344c6:	2200      	movs	r2, #0
 80344c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80344cc:	687b      	ldr	r3, [r7, #4]
 80344ce:	681b      	ldr	r3, [r3, #0]
 80344d0:	681a      	ldr	r2, [r3, #0]
 80344d2:	687b      	ldr	r3, [r7, #4]
 80344d4:	681b      	ldr	r3, [r3, #0]
 80344d6:	f022 0201 	bic.w	r2, r2, #1
 80344da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80344dc:	e00f      	b.n	80344fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80344de:	f7ff fdd9 	bl	8034094 <HAL_GetTick>
 80344e2:	4602      	mov	r2, r0
 80344e4:	693b      	ldr	r3, [r7, #16]
 80344e6:	1ad3      	subs	r3, r2, r3
 80344e8:	2b05      	cmp	r3, #5
 80344ea:	d908      	bls.n	80344fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80344ec:	687b      	ldr	r3, [r7, #4]
 80344ee:	2220      	movs	r2, #32
 80344f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80344f2:	687b      	ldr	r3, [r7, #4]
 80344f4:	2203      	movs	r2, #3
 80344f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80344fa:	2303      	movs	r3, #3
 80344fc:	e078      	b.n	80345f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80344fe:	687b      	ldr	r3, [r7, #4]
 8034500:	681b      	ldr	r3, [r3, #0]
 8034502:	681b      	ldr	r3, [r3, #0]
 8034504:	f003 0301 	and.w	r3, r3, #1
 8034508:	2b00      	cmp	r3, #0
 803450a:	d1e8      	bne.n	80344de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	681b      	ldr	r3, [r3, #0]
 8034510:	681b      	ldr	r3, [r3, #0]
 8034512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8034514:	697a      	ldr	r2, [r7, #20]
 8034516:	4b38      	ldr	r3, [pc, #224]	; (80345f8 <HAL_DMA_Init+0x158>)
 8034518:	4013      	ands	r3, r2
 803451a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803451c:	687b      	ldr	r3, [r7, #4]
 803451e:	685a      	ldr	r2, [r3, #4]
 8034520:	687b      	ldr	r3, [r7, #4]
 8034522:	689b      	ldr	r3, [r3, #8]
 8034524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8034526:	687b      	ldr	r3, [r7, #4]
 8034528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803452a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 803452c:	687b      	ldr	r3, [r7, #4]
 803452e:	691b      	ldr	r3, [r3, #16]
 8034530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8034532:	687b      	ldr	r3, [r7, #4]
 8034534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8034536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8034538:	687b      	ldr	r3, [r7, #4]
 803453a:	699b      	ldr	r3, [r3, #24]
 803453c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 803453e:	687b      	ldr	r3, [r7, #4]
 8034540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8034542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8034544:	687b      	ldr	r3, [r7, #4]
 8034546:	6a1b      	ldr	r3, [r3, #32]
 8034548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803454a:	697a      	ldr	r2, [r7, #20]
 803454c:	4313      	orrs	r3, r2
 803454e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8034550:	687b      	ldr	r3, [r7, #4]
 8034552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034554:	2b04      	cmp	r3, #4
 8034556:	d107      	bne.n	8034568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8034558:	687b      	ldr	r3, [r7, #4]
 803455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803455c:	687b      	ldr	r3, [r7, #4]
 803455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034560:	4313      	orrs	r3, r2
 8034562:	697a      	ldr	r2, [r7, #20]
 8034564:	4313      	orrs	r3, r2
 8034566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8034568:	687b      	ldr	r3, [r7, #4]
 803456a:	681b      	ldr	r3, [r3, #0]
 803456c:	697a      	ldr	r2, [r7, #20]
 803456e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8034570:	687b      	ldr	r3, [r7, #4]
 8034572:	681b      	ldr	r3, [r3, #0]
 8034574:	695b      	ldr	r3, [r3, #20]
 8034576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8034578:	697b      	ldr	r3, [r7, #20]
 803457a:	f023 0307 	bic.w	r3, r3, #7
 803457e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8034580:	687b      	ldr	r3, [r7, #4]
 8034582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034584:	697a      	ldr	r2, [r7, #20]
 8034586:	4313      	orrs	r3, r2
 8034588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 803458a:	687b      	ldr	r3, [r7, #4]
 803458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803458e:	2b04      	cmp	r3, #4
 8034590:	d117      	bne.n	80345c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8034592:	687b      	ldr	r3, [r7, #4]
 8034594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034596:	697a      	ldr	r2, [r7, #20]
 8034598:	4313      	orrs	r3, r2
 803459a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 803459c:	687b      	ldr	r3, [r7, #4]
 803459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80345a0:	2b00      	cmp	r3, #0
 80345a2:	d00e      	beq.n	80345c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80345a4:	6878      	ldr	r0, [r7, #4]
 80345a6:	f000 fa6f 	bl	8034a88 <DMA_CheckFifoParam>
 80345aa:	4603      	mov	r3, r0
 80345ac:	2b00      	cmp	r3, #0
 80345ae:	d008      	beq.n	80345c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80345b0:	687b      	ldr	r3, [r7, #4]
 80345b2:	2240      	movs	r2, #64	; 0x40
 80345b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80345b6:	687b      	ldr	r3, [r7, #4]
 80345b8:	2201      	movs	r2, #1
 80345ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80345be:	2301      	movs	r3, #1
 80345c0:	e016      	b.n	80345f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80345c2:	687b      	ldr	r3, [r7, #4]
 80345c4:	681b      	ldr	r3, [r3, #0]
 80345c6:	697a      	ldr	r2, [r7, #20]
 80345c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80345ca:	6878      	ldr	r0, [r7, #4]
 80345cc:	f000 fa26 	bl	8034a1c <DMA_CalcBaseAndBitshift>
 80345d0:	4603      	mov	r3, r0
 80345d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80345d4:	687b      	ldr	r3, [r7, #4]
 80345d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80345d8:	223f      	movs	r2, #63	; 0x3f
 80345da:	409a      	lsls	r2, r3
 80345dc:	68fb      	ldr	r3, [r7, #12]
 80345de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80345e0:	687b      	ldr	r3, [r7, #4]
 80345e2:	2200      	movs	r2, #0
 80345e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	2201      	movs	r2, #1
 80345ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80345ee:	2300      	movs	r3, #0
}
 80345f0:	4618      	mov	r0, r3
 80345f2:	3718      	adds	r7, #24
 80345f4:	46bd      	mov	sp, r7
 80345f6:	bd80      	pop	{r7, pc}
 80345f8:	f010803f 	.word	0xf010803f

080345fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80345fc:	b580      	push	{r7, lr}
 80345fe:	b086      	sub	sp, #24
 8034600:	af00      	add	r7, sp, #0
 8034602:	60f8      	str	r0, [r7, #12]
 8034604:	60b9      	str	r1, [r7, #8]
 8034606:	607a      	str	r2, [r7, #4]
 8034608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 803460a:	2300      	movs	r3, #0
 803460c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 803460e:	68fb      	ldr	r3, [r7, #12]
 8034610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8034612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8034614:	68fb      	ldr	r3, [r7, #12]
 8034616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 803461a:	2b01      	cmp	r3, #1
 803461c:	d101      	bne.n	8034622 <HAL_DMA_Start_IT+0x26>
 803461e:	2302      	movs	r3, #2
 8034620:	e040      	b.n	80346a4 <HAL_DMA_Start_IT+0xa8>
 8034622:	68fb      	ldr	r3, [r7, #12]
 8034624:	2201      	movs	r2, #1
 8034626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 803462a:	68fb      	ldr	r3, [r7, #12]
 803462c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8034630:	b2db      	uxtb	r3, r3
 8034632:	2b01      	cmp	r3, #1
 8034634:	d12f      	bne.n	8034696 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8034636:	68fb      	ldr	r3, [r7, #12]
 8034638:	2202      	movs	r2, #2
 803463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 803463e:	68fb      	ldr	r3, [r7, #12]
 8034640:	2200      	movs	r2, #0
 8034642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8034644:	683b      	ldr	r3, [r7, #0]
 8034646:	687a      	ldr	r2, [r7, #4]
 8034648:	68b9      	ldr	r1, [r7, #8]
 803464a:	68f8      	ldr	r0, [r7, #12]
 803464c:	f000 f9b8 	bl	80349c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8034650:	68fb      	ldr	r3, [r7, #12]
 8034652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034654:	223f      	movs	r2, #63	; 0x3f
 8034656:	409a      	lsls	r2, r3
 8034658:	693b      	ldr	r3, [r7, #16]
 803465a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 803465c:	68fb      	ldr	r3, [r7, #12]
 803465e:	681b      	ldr	r3, [r3, #0]
 8034660:	681a      	ldr	r2, [r3, #0]
 8034662:	68fb      	ldr	r3, [r7, #12]
 8034664:	681b      	ldr	r3, [r3, #0]
 8034666:	f042 0216 	orr.w	r2, r2, #22
 803466a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 803466c:	68fb      	ldr	r3, [r7, #12]
 803466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034670:	2b00      	cmp	r3, #0
 8034672:	d007      	beq.n	8034684 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8034674:	68fb      	ldr	r3, [r7, #12]
 8034676:	681b      	ldr	r3, [r3, #0]
 8034678:	681a      	ldr	r2, [r3, #0]
 803467a:	68fb      	ldr	r3, [r7, #12]
 803467c:	681b      	ldr	r3, [r3, #0]
 803467e:	f042 0208 	orr.w	r2, r2, #8
 8034682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8034684:	68fb      	ldr	r3, [r7, #12]
 8034686:	681b      	ldr	r3, [r3, #0]
 8034688:	681a      	ldr	r2, [r3, #0]
 803468a:	68fb      	ldr	r3, [r7, #12]
 803468c:	681b      	ldr	r3, [r3, #0]
 803468e:	f042 0201 	orr.w	r2, r2, #1
 8034692:	601a      	str	r2, [r3, #0]
 8034694:	e005      	b.n	80346a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8034696:	68fb      	ldr	r3, [r7, #12]
 8034698:	2200      	movs	r2, #0
 803469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 803469e:	2302      	movs	r3, #2
 80346a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80346a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80346a4:	4618      	mov	r0, r3
 80346a6:	3718      	adds	r7, #24
 80346a8:	46bd      	mov	sp, r7
 80346aa:	bd80      	pop	{r7, pc}

080346ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80346ac:	b580      	push	{r7, lr}
 80346ae:	b086      	sub	sp, #24
 80346b0:	af00      	add	r7, sp, #0
 80346b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80346b4:	2300      	movs	r3, #0
 80346b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80346b8:	4b8e      	ldr	r3, [pc, #568]	; (80348f4 <HAL_DMA_IRQHandler+0x248>)
 80346ba:	681b      	ldr	r3, [r3, #0]
 80346bc:	4a8e      	ldr	r2, [pc, #568]	; (80348f8 <HAL_DMA_IRQHandler+0x24c>)
 80346be:	fba2 2303 	umull	r2, r3, r2, r3
 80346c2:	0a9b      	lsrs	r3, r3, #10
 80346c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80346c6:	687b      	ldr	r3, [r7, #4]
 80346c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80346ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80346cc:	693b      	ldr	r3, [r7, #16]
 80346ce:	681b      	ldr	r3, [r3, #0]
 80346d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80346d2:	687b      	ldr	r3, [r7, #4]
 80346d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80346d6:	2208      	movs	r2, #8
 80346d8:	409a      	lsls	r2, r3
 80346da:	68fb      	ldr	r3, [r7, #12]
 80346dc:	4013      	ands	r3, r2
 80346de:	2b00      	cmp	r3, #0
 80346e0:	d01a      	beq.n	8034718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80346e2:	687b      	ldr	r3, [r7, #4]
 80346e4:	681b      	ldr	r3, [r3, #0]
 80346e6:	681b      	ldr	r3, [r3, #0]
 80346e8:	f003 0304 	and.w	r3, r3, #4
 80346ec:	2b00      	cmp	r3, #0
 80346ee:	d013      	beq.n	8034718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80346f0:	687b      	ldr	r3, [r7, #4]
 80346f2:	681b      	ldr	r3, [r3, #0]
 80346f4:	681a      	ldr	r2, [r3, #0]
 80346f6:	687b      	ldr	r3, [r7, #4]
 80346f8:	681b      	ldr	r3, [r3, #0]
 80346fa:	f022 0204 	bic.w	r2, r2, #4
 80346fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8034700:	687b      	ldr	r3, [r7, #4]
 8034702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034704:	2208      	movs	r2, #8
 8034706:	409a      	lsls	r2, r3
 8034708:	693b      	ldr	r3, [r7, #16]
 803470a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 803470c:	687b      	ldr	r3, [r7, #4]
 803470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034710:	f043 0201 	orr.w	r2, r3, #1
 8034714:	687b      	ldr	r3, [r7, #4]
 8034716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8034718:	687b      	ldr	r3, [r7, #4]
 803471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803471c:	2201      	movs	r2, #1
 803471e:	409a      	lsls	r2, r3
 8034720:	68fb      	ldr	r3, [r7, #12]
 8034722:	4013      	ands	r3, r2
 8034724:	2b00      	cmp	r3, #0
 8034726:	d012      	beq.n	803474e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8034728:	687b      	ldr	r3, [r7, #4]
 803472a:	681b      	ldr	r3, [r3, #0]
 803472c:	695b      	ldr	r3, [r3, #20]
 803472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034732:	2b00      	cmp	r3, #0
 8034734:	d00b      	beq.n	803474e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8034736:	687b      	ldr	r3, [r7, #4]
 8034738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803473a:	2201      	movs	r2, #1
 803473c:	409a      	lsls	r2, r3
 803473e:	693b      	ldr	r3, [r7, #16]
 8034740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8034742:	687b      	ldr	r3, [r7, #4]
 8034744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034746:	f043 0202 	orr.w	r2, r3, #2
 803474a:	687b      	ldr	r3, [r7, #4]
 803474c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 803474e:	687b      	ldr	r3, [r7, #4]
 8034750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034752:	2204      	movs	r2, #4
 8034754:	409a      	lsls	r2, r3
 8034756:	68fb      	ldr	r3, [r7, #12]
 8034758:	4013      	ands	r3, r2
 803475a:	2b00      	cmp	r3, #0
 803475c:	d012      	beq.n	8034784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 803475e:	687b      	ldr	r3, [r7, #4]
 8034760:	681b      	ldr	r3, [r3, #0]
 8034762:	681b      	ldr	r3, [r3, #0]
 8034764:	f003 0302 	and.w	r3, r3, #2
 8034768:	2b00      	cmp	r3, #0
 803476a:	d00b      	beq.n	8034784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 803476c:	687b      	ldr	r3, [r7, #4]
 803476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034770:	2204      	movs	r2, #4
 8034772:	409a      	lsls	r2, r3
 8034774:	693b      	ldr	r3, [r7, #16]
 8034776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8034778:	687b      	ldr	r3, [r7, #4]
 803477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803477c:	f043 0204 	orr.w	r2, r3, #4
 8034780:	687b      	ldr	r3, [r7, #4]
 8034782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8034784:	687b      	ldr	r3, [r7, #4]
 8034786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034788:	2210      	movs	r2, #16
 803478a:	409a      	lsls	r2, r3
 803478c:	68fb      	ldr	r3, [r7, #12]
 803478e:	4013      	ands	r3, r2
 8034790:	2b00      	cmp	r3, #0
 8034792:	d043      	beq.n	803481c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8034794:	687b      	ldr	r3, [r7, #4]
 8034796:	681b      	ldr	r3, [r3, #0]
 8034798:	681b      	ldr	r3, [r3, #0]
 803479a:	f003 0308 	and.w	r3, r3, #8
 803479e:	2b00      	cmp	r3, #0
 80347a0:	d03c      	beq.n	803481c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80347a2:	687b      	ldr	r3, [r7, #4]
 80347a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80347a6:	2210      	movs	r2, #16
 80347a8:	409a      	lsls	r2, r3
 80347aa:	693b      	ldr	r3, [r7, #16]
 80347ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80347ae:	687b      	ldr	r3, [r7, #4]
 80347b0:	681b      	ldr	r3, [r3, #0]
 80347b2:	681b      	ldr	r3, [r3, #0]
 80347b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80347b8:	2b00      	cmp	r3, #0
 80347ba:	d018      	beq.n	80347ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80347bc:	687b      	ldr	r3, [r7, #4]
 80347be:	681b      	ldr	r3, [r3, #0]
 80347c0:	681b      	ldr	r3, [r3, #0]
 80347c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80347c6:	2b00      	cmp	r3, #0
 80347c8:	d108      	bne.n	80347dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80347ca:	687b      	ldr	r3, [r7, #4]
 80347cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80347ce:	2b00      	cmp	r3, #0
 80347d0:	d024      	beq.n	803481c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80347d2:	687b      	ldr	r3, [r7, #4]
 80347d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80347d6:	6878      	ldr	r0, [r7, #4]
 80347d8:	4798      	blx	r3
 80347da:	e01f      	b.n	803481c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80347dc:	687b      	ldr	r3, [r7, #4]
 80347de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80347e0:	2b00      	cmp	r3, #0
 80347e2:	d01b      	beq.n	803481c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80347e4:	687b      	ldr	r3, [r7, #4]
 80347e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80347e8:	6878      	ldr	r0, [r7, #4]
 80347ea:	4798      	blx	r3
 80347ec:	e016      	b.n	803481c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80347ee:	687b      	ldr	r3, [r7, #4]
 80347f0:	681b      	ldr	r3, [r3, #0]
 80347f2:	681b      	ldr	r3, [r3, #0]
 80347f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80347f8:	2b00      	cmp	r3, #0
 80347fa:	d107      	bne.n	803480c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80347fc:	687b      	ldr	r3, [r7, #4]
 80347fe:	681b      	ldr	r3, [r3, #0]
 8034800:	681a      	ldr	r2, [r3, #0]
 8034802:	687b      	ldr	r3, [r7, #4]
 8034804:	681b      	ldr	r3, [r3, #0]
 8034806:	f022 0208 	bic.w	r2, r2, #8
 803480a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 803480c:	687b      	ldr	r3, [r7, #4]
 803480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034810:	2b00      	cmp	r3, #0
 8034812:	d003      	beq.n	803481c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8034814:	687b      	ldr	r3, [r7, #4]
 8034816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034818:	6878      	ldr	r0, [r7, #4]
 803481a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 803481c:	687b      	ldr	r3, [r7, #4]
 803481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034820:	2220      	movs	r2, #32
 8034822:	409a      	lsls	r2, r3
 8034824:	68fb      	ldr	r3, [r7, #12]
 8034826:	4013      	ands	r3, r2
 8034828:	2b00      	cmp	r3, #0
 803482a:	f000 808f 	beq.w	803494c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 803482e:	687b      	ldr	r3, [r7, #4]
 8034830:	681b      	ldr	r3, [r3, #0]
 8034832:	681b      	ldr	r3, [r3, #0]
 8034834:	f003 0310 	and.w	r3, r3, #16
 8034838:	2b00      	cmp	r3, #0
 803483a:	f000 8087 	beq.w	803494c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 803483e:	687b      	ldr	r3, [r7, #4]
 8034840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034842:	2220      	movs	r2, #32
 8034844:	409a      	lsls	r2, r3
 8034846:	693b      	ldr	r3, [r7, #16]
 8034848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 803484a:	687b      	ldr	r3, [r7, #4]
 803484c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8034850:	b2db      	uxtb	r3, r3
 8034852:	2b05      	cmp	r3, #5
 8034854:	d136      	bne.n	80348c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8034856:	687b      	ldr	r3, [r7, #4]
 8034858:	681b      	ldr	r3, [r3, #0]
 803485a:	681a      	ldr	r2, [r3, #0]
 803485c:	687b      	ldr	r3, [r7, #4]
 803485e:	681b      	ldr	r3, [r3, #0]
 8034860:	f022 0216 	bic.w	r2, r2, #22
 8034864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8034866:	687b      	ldr	r3, [r7, #4]
 8034868:	681b      	ldr	r3, [r3, #0]
 803486a:	695a      	ldr	r2, [r3, #20]
 803486c:	687b      	ldr	r3, [r7, #4]
 803486e:	681b      	ldr	r3, [r3, #0]
 8034870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8034874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8034876:	687b      	ldr	r3, [r7, #4]
 8034878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803487a:	2b00      	cmp	r3, #0
 803487c:	d103      	bne.n	8034886 <HAL_DMA_IRQHandler+0x1da>
 803487e:	687b      	ldr	r3, [r7, #4]
 8034880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8034882:	2b00      	cmp	r3, #0
 8034884:	d007      	beq.n	8034896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8034886:	687b      	ldr	r3, [r7, #4]
 8034888:	681b      	ldr	r3, [r3, #0]
 803488a:	681a      	ldr	r2, [r3, #0]
 803488c:	687b      	ldr	r3, [r7, #4]
 803488e:	681b      	ldr	r3, [r3, #0]
 8034890:	f022 0208 	bic.w	r2, r2, #8
 8034894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8034896:	687b      	ldr	r3, [r7, #4]
 8034898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803489a:	223f      	movs	r2, #63	; 0x3f
 803489c:	409a      	lsls	r2, r3
 803489e:	693b      	ldr	r3, [r7, #16]
 80348a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80348a2:	687b      	ldr	r3, [r7, #4]
 80348a4:	2201      	movs	r2, #1
 80348a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80348aa:	687b      	ldr	r3, [r7, #4]
 80348ac:	2200      	movs	r2, #0
 80348ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80348b2:	687b      	ldr	r3, [r7, #4]
 80348b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80348b6:	2b00      	cmp	r3, #0
 80348b8:	d07e      	beq.n	80349b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80348ba:	687b      	ldr	r3, [r7, #4]
 80348bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80348be:	6878      	ldr	r0, [r7, #4]
 80348c0:	4798      	blx	r3
        }
        return;
 80348c2:	e079      	b.n	80349b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80348c4:	687b      	ldr	r3, [r7, #4]
 80348c6:	681b      	ldr	r3, [r3, #0]
 80348c8:	681b      	ldr	r3, [r3, #0]
 80348ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80348ce:	2b00      	cmp	r3, #0
 80348d0:	d01d      	beq.n	803490e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80348d2:	687b      	ldr	r3, [r7, #4]
 80348d4:	681b      	ldr	r3, [r3, #0]
 80348d6:	681b      	ldr	r3, [r3, #0]
 80348d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80348dc:	2b00      	cmp	r3, #0
 80348de:	d10d      	bne.n	80348fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80348e0:	687b      	ldr	r3, [r7, #4]
 80348e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80348e4:	2b00      	cmp	r3, #0
 80348e6:	d031      	beq.n	803494c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80348e8:	687b      	ldr	r3, [r7, #4]
 80348ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80348ec:	6878      	ldr	r0, [r7, #4]
 80348ee:	4798      	blx	r3
 80348f0:	e02c      	b.n	803494c <HAL_DMA_IRQHandler+0x2a0>
 80348f2:	bf00      	nop
 80348f4:	20000004 	.word	0x20000004
 80348f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80348fc:	687b      	ldr	r3, [r7, #4]
 80348fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034900:	2b00      	cmp	r3, #0
 8034902:	d023      	beq.n	803494c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8034904:	687b      	ldr	r3, [r7, #4]
 8034906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034908:	6878      	ldr	r0, [r7, #4]
 803490a:	4798      	blx	r3
 803490c:	e01e      	b.n	803494c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 803490e:	687b      	ldr	r3, [r7, #4]
 8034910:	681b      	ldr	r3, [r3, #0]
 8034912:	681b      	ldr	r3, [r3, #0]
 8034914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034918:	2b00      	cmp	r3, #0
 803491a:	d10f      	bne.n	803493c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 803491c:	687b      	ldr	r3, [r7, #4]
 803491e:	681b      	ldr	r3, [r3, #0]
 8034920:	681a      	ldr	r2, [r3, #0]
 8034922:	687b      	ldr	r3, [r7, #4]
 8034924:	681b      	ldr	r3, [r3, #0]
 8034926:	f022 0210 	bic.w	r2, r2, #16
 803492a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 803492c:	687b      	ldr	r3, [r7, #4]
 803492e:	2201      	movs	r2, #1
 8034930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8034934:	687b      	ldr	r3, [r7, #4]
 8034936:	2200      	movs	r2, #0
 8034938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 803493c:	687b      	ldr	r3, [r7, #4]
 803493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034940:	2b00      	cmp	r3, #0
 8034942:	d003      	beq.n	803494c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8034944:	687b      	ldr	r3, [r7, #4]
 8034946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034948:	6878      	ldr	r0, [r7, #4]
 803494a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 803494c:	687b      	ldr	r3, [r7, #4]
 803494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034950:	2b00      	cmp	r3, #0
 8034952:	d032      	beq.n	80349ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8034954:	687b      	ldr	r3, [r7, #4]
 8034956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034958:	f003 0301 	and.w	r3, r3, #1
 803495c:	2b00      	cmp	r3, #0
 803495e:	d022      	beq.n	80349a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8034960:	687b      	ldr	r3, [r7, #4]
 8034962:	2205      	movs	r2, #5
 8034964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8034968:	687b      	ldr	r3, [r7, #4]
 803496a:	681b      	ldr	r3, [r3, #0]
 803496c:	681a      	ldr	r2, [r3, #0]
 803496e:	687b      	ldr	r3, [r7, #4]
 8034970:	681b      	ldr	r3, [r3, #0]
 8034972:	f022 0201 	bic.w	r2, r2, #1
 8034976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8034978:	68bb      	ldr	r3, [r7, #8]
 803497a:	3301      	adds	r3, #1
 803497c:	60bb      	str	r3, [r7, #8]
 803497e:	697a      	ldr	r2, [r7, #20]
 8034980:	429a      	cmp	r2, r3
 8034982:	d307      	bcc.n	8034994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8034984:	687b      	ldr	r3, [r7, #4]
 8034986:	681b      	ldr	r3, [r3, #0]
 8034988:	681b      	ldr	r3, [r3, #0]
 803498a:	f003 0301 	and.w	r3, r3, #1
 803498e:	2b00      	cmp	r3, #0
 8034990:	d1f2      	bne.n	8034978 <HAL_DMA_IRQHandler+0x2cc>
 8034992:	e000      	b.n	8034996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8034994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8034996:	687b      	ldr	r3, [r7, #4]
 8034998:	2201      	movs	r2, #1
 803499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 803499e:	687b      	ldr	r3, [r7, #4]
 80349a0:	2200      	movs	r2, #0
 80349a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80349a6:	687b      	ldr	r3, [r7, #4]
 80349a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80349aa:	2b00      	cmp	r3, #0
 80349ac:	d005      	beq.n	80349ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80349ae:	687b      	ldr	r3, [r7, #4]
 80349b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80349b2:	6878      	ldr	r0, [r7, #4]
 80349b4:	4798      	blx	r3
 80349b6:	e000      	b.n	80349ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80349b8:	bf00      	nop
    }
  }
}
 80349ba:	3718      	adds	r7, #24
 80349bc:	46bd      	mov	sp, r7
 80349be:	bd80      	pop	{r7, pc}

080349c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80349c0:	b480      	push	{r7}
 80349c2:	b085      	sub	sp, #20
 80349c4:	af00      	add	r7, sp, #0
 80349c6:	60f8      	str	r0, [r7, #12]
 80349c8:	60b9      	str	r1, [r7, #8]
 80349ca:	607a      	str	r2, [r7, #4]
 80349cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80349ce:	68fb      	ldr	r3, [r7, #12]
 80349d0:	681b      	ldr	r3, [r3, #0]
 80349d2:	681a      	ldr	r2, [r3, #0]
 80349d4:	68fb      	ldr	r3, [r7, #12]
 80349d6:	681b      	ldr	r3, [r3, #0]
 80349d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80349dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80349de:	68fb      	ldr	r3, [r7, #12]
 80349e0:	681b      	ldr	r3, [r3, #0]
 80349e2:	683a      	ldr	r2, [r7, #0]
 80349e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80349e6:	68fb      	ldr	r3, [r7, #12]
 80349e8:	689b      	ldr	r3, [r3, #8]
 80349ea:	2b40      	cmp	r3, #64	; 0x40
 80349ec:	d108      	bne.n	8034a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80349ee:	68fb      	ldr	r3, [r7, #12]
 80349f0:	681b      	ldr	r3, [r3, #0]
 80349f2:	687a      	ldr	r2, [r7, #4]
 80349f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80349f6:	68fb      	ldr	r3, [r7, #12]
 80349f8:	681b      	ldr	r3, [r3, #0]
 80349fa:	68ba      	ldr	r2, [r7, #8]
 80349fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80349fe:	e007      	b.n	8034a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8034a00:	68fb      	ldr	r3, [r7, #12]
 8034a02:	681b      	ldr	r3, [r3, #0]
 8034a04:	68ba      	ldr	r2, [r7, #8]
 8034a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8034a08:	68fb      	ldr	r3, [r7, #12]
 8034a0a:	681b      	ldr	r3, [r3, #0]
 8034a0c:	687a      	ldr	r2, [r7, #4]
 8034a0e:	60da      	str	r2, [r3, #12]
}
 8034a10:	bf00      	nop
 8034a12:	3714      	adds	r7, #20
 8034a14:	46bd      	mov	sp, r7
 8034a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a1a:	4770      	bx	lr

08034a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8034a1c:	b480      	push	{r7}
 8034a1e:	b085      	sub	sp, #20
 8034a20:	af00      	add	r7, sp, #0
 8034a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8034a24:	687b      	ldr	r3, [r7, #4]
 8034a26:	681b      	ldr	r3, [r3, #0]
 8034a28:	b2db      	uxtb	r3, r3
 8034a2a:	3b10      	subs	r3, #16
 8034a2c:	4a14      	ldr	r2, [pc, #80]	; (8034a80 <DMA_CalcBaseAndBitshift+0x64>)
 8034a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8034a32:	091b      	lsrs	r3, r3, #4
 8034a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8034a36:	4a13      	ldr	r2, [pc, #76]	; (8034a84 <DMA_CalcBaseAndBitshift+0x68>)
 8034a38:	68fb      	ldr	r3, [r7, #12]
 8034a3a:	4413      	add	r3, r2
 8034a3c:	781b      	ldrb	r3, [r3, #0]
 8034a3e:	461a      	mov	r2, r3
 8034a40:	687b      	ldr	r3, [r7, #4]
 8034a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8034a44:	68fb      	ldr	r3, [r7, #12]
 8034a46:	2b03      	cmp	r3, #3
 8034a48:	d909      	bls.n	8034a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8034a4a:	687b      	ldr	r3, [r7, #4]
 8034a4c:	681b      	ldr	r3, [r3, #0]
 8034a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8034a52:	f023 0303 	bic.w	r3, r3, #3
 8034a56:	1d1a      	adds	r2, r3, #4
 8034a58:	687b      	ldr	r3, [r7, #4]
 8034a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8034a5c:	e007      	b.n	8034a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8034a5e:	687b      	ldr	r3, [r7, #4]
 8034a60:	681b      	ldr	r3, [r3, #0]
 8034a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8034a66:	f023 0303 	bic.w	r3, r3, #3
 8034a6a:	687a      	ldr	r2, [r7, #4]
 8034a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8034a6e:	687b      	ldr	r3, [r7, #4]
 8034a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8034a72:	4618      	mov	r0, r3
 8034a74:	3714      	adds	r7, #20
 8034a76:	46bd      	mov	sp, r7
 8034a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a7c:	4770      	bx	lr
 8034a7e:	bf00      	nop
 8034a80:	aaaaaaab 	.word	0xaaaaaaab
 8034a84:	08037f58 	.word	0x08037f58

08034a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8034a88:	b480      	push	{r7}
 8034a8a:	b085      	sub	sp, #20
 8034a8c:	af00      	add	r7, sp, #0
 8034a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8034a90:	2300      	movs	r3, #0
 8034a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8034a94:	687b      	ldr	r3, [r7, #4]
 8034a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8034a9a:	687b      	ldr	r3, [r7, #4]
 8034a9c:	699b      	ldr	r3, [r3, #24]
 8034a9e:	2b00      	cmp	r3, #0
 8034aa0:	d11f      	bne.n	8034ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8034aa2:	68bb      	ldr	r3, [r7, #8]
 8034aa4:	2b03      	cmp	r3, #3
 8034aa6:	d856      	bhi.n	8034b56 <DMA_CheckFifoParam+0xce>
 8034aa8:	a201      	add	r2, pc, #4	; (adr r2, 8034ab0 <DMA_CheckFifoParam+0x28>)
 8034aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034aae:	bf00      	nop
 8034ab0:	08034ac1 	.word	0x08034ac1
 8034ab4:	08034ad3 	.word	0x08034ad3
 8034ab8:	08034ac1 	.word	0x08034ac1
 8034abc:	08034b57 	.word	0x08034b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8034ac0:	687b      	ldr	r3, [r7, #4]
 8034ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8034ac8:	2b00      	cmp	r3, #0
 8034aca:	d046      	beq.n	8034b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8034acc:	2301      	movs	r3, #1
 8034ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8034ad0:	e043      	b.n	8034b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8034ad2:	687b      	ldr	r3, [r7, #4]
 8034ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8034ada:	d140      	bne.n	8034b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8034adc:	2301      	movs	r3, #1
 8034ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8034ae0:	e03d      	b.n	8034b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034ae2:	687b      	ldr	r3, [r7, #4]
 8034ae4:	699b      	ldr	r3, [r3, #24]
 8034ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034aea:	d121      	bne.n	8034b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8034aec:	68bb      	ldr	r3, [r7, #8]
 8034aee:	2b03      	cmp	r3, #3
 8034af0:	d837      	bhi.n	8034b62 <DMA_CheckFifoParam+0xda>
 8034af2:	a201      	add	r2, pc, #4	; (adr r2, 8034af8 <DMA_CheckFifoParam+0x70>)
 8034af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034af8:	08034b09 	.word	0x08034b09
 8034afc:	08034b0f 	.word	0x08034b0f
 8034b00:	08034b09 	.word	0x08034b09
 8034b04:	08034b21 	.word	0x08034b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8034b08:	2301      	movs	r3, #1
 8034b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8034b0c:	e030      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8034b0e:	687b      	ldr	r3, [r7, #4]
 8034b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8034b16:	2b00      	cmp	r3, #0
 8034b18:	d025      	beq.n	8034b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8034b1a:	2301      	movs	r3, #1
 8034b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8034b1e:	e022      	b.n	8034b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8034b20:	687b      	ldr	r3, [r7, #4]
 8034b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8034b28:	d11f      	bne.n	8034b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8034b2a:	2301      	movs	r3, #1
 8034b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8034b2e:	e01c      	b.n	8034b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8034b30:	68bb      	ldr	r3, [r7, #8]
 8034b32:	2b02      	cmp	r3, #2
 8034b34:	d903      	bls.n	8034b3e <DMA_CheckFifoParam+0xb6>
 8034b36:	68bb      	ldr	r3, [r7, #8]
 8034b38:	2b03      	cmp	r3, #3
 8034b3a:	d003      	beq.n	8034b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8034b3c:	e018      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8034b3e:	2301      	movs	r3, #1
 8034b40:	73fb      	strb	r3, [r7, #15]
      break;
 8034b42:	e015      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8034b44:	687b      	ldr	r3, [r7, #4]
 8034b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8034b4c:	2b00      	cmp	r3, #0
 8034b4e:	d00e      	beq.n	8034b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8034b50:	2301      	movs	r3, #1
 8034b52:	73fb      	strb	r3, [r7, #15]
      break;
 8034b54:	e00b      	b.n	8034b6e <DMA_CheckFifoParam+0xe6>
      break;
 8034b56:	bf00      	nop
 8034b58:	e00a      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;
 8034b5a:	bf00      	nop
 8034b5c:	e008      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;
 8034b5e:	bf00      	nop
 8034b60:	e006      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;
 8034b62:	bf00      	nop
 8034b64:	e004      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;
 8034b66:	bf00      	nop
 8034b68:	e002      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8034b6a:	bf00      	nop
 8034b6c:	e000      	b.n	8034b70 <DMA_CheckFifoParam+0xe8>
      break;
 8034b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8034b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8034b72:	4618      	mov	r0, r3
 8034b74:	3714      	adds	r7, #20
 8034b76:	46bd      	mov	sp, r7
 8034b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b7c:	4770      	bx	lr
 8034b7e:	bf00      	nop

08034b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8034b80:	b480      	push	{r7}
 8034b82:	b089      	sub	sp, #36	; 0x24
 8034b84:	af00      	add	r7, sp, #0
 8034b86:	6078      	str	r0, [r7, #4]
 8034b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8034b8a:	2300      	movs	r3, #0
 8034b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8034b8e:	2300      	movs	r3, #0
 8034b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8034b92:	2300      	movs	r3, #0
 8034b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8034b96:	2300      	movs	r3, #0
 8034b98:	61fb      	str	r3, [r7, #28]
 8034b9a:	e16b      	b.n	8034e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8034b9c:	2201      	movs	r2, #1
 8034b9e:	69fb      	ldr	r3, [r7, #28]
 8034ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8034ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8034ba6:	683b      	ldr	r3, [r7, #0]
 8034ba8:	681b      	ldr	r3, [r3, #0]
 8034baa:	697a      	ldr	r2, [r7, #20]
 8034bac:	4013      	ands	r3, r2
 8034bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8034bb0:	693a      	ldr	r2, [r7, #16]
 8034bb2:	697b      	ldr	r3, [r7, #20]
 8034bb4:	429a      	cmp	r2, r3
 8034bb6:	f040 815a 	bne.w	8034e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8034bba:	683b      	ldr	r3, [r7, #0]
 8034bbc:	685b      	ldr	r3, [r3, #4]
 8034bbe:	f003 0303 	and.w	r3, r3, #3
 8034bc2:	2b01      	cmp	r3, #1
 8034bc4:	d005      	beq.n	8034bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8034bc6:	683b      	ldr	r3, [r7, #0]
 8034bc8:	685b      	ldr	r3, [r3, #4]
 8034bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8034bce:	2b02      	cmp	r3, #2
 8034bd0:	d130      	bne.n	8034c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8034bd2:	687b      	ldr	r3, [r7, #4]
 8034bd4:	689b      	ldr	r3, [r3, #8]
 8034bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8034bd8:	69fb      	ldr	r3, [r7, #28]
 8034bda:	005b      	lsls	r3, r3, #1
 8034bdc:	2203      	movs	r2, #3
 8034bde:	fa02 f303 	lsl.w	r3, r2, r3
 8034be2:	43db      	mvns	r3, r3
 8034be4:	69ba      	ldr	r2, [r7, #24]
 8034be6:	4013      	ands	r3, r2
 8034be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8034bea:	683b      	ldr	r3, [r7, #0]
 8034bec:	68da      	ldr	r2, [r3, #12]
 8034bee:	69fb      	ldr	r3, [r7, #28]
 8034bf0:	005b      	lsls	r3, r3, #1
 8034bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8034bf6:	69ba      	ldr	r2, [r7, #24]
 8034bf8:	4313      	orrs	r3, r2
 8034bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8034bfc:	687b      	ldr	r3, [r7, #4]
 8034bfe:	69ba      	ldr	r2, [r7, #24]
 8034c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8034c02:	687b      	ldr	r3, [r7, #4]
 8034c04:	685b      	ldr	r3, [r3, #4]
 8034c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8034c08:	2201      	movs	r2, #1
 8034c0a:	69fb      	ldr	r3, [r7, #28]
 8034c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8034c10:	43db      	mvns	r3, r3
 8034c12:	69ba      	ldr	r2, [r7, #24]
 8034c14:	4013      	ands	r3, r2
 8034c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8034c18:	683b      	ldr	r3, [r7, #0]
 8034c1a:	685b      	ldr	r3, [r3, #4]
 8034c1c:	091b      	lsrs	r3, r3, #4
 8034c1e:	f003 0201 	and.w	r2, r3, #1
 8034c22:	69fb      	ldr	r3, [r7, #28]
 8034c24:	fa02 f303 	lsl.w	r3, r2, r3
 8034c28:	69ba      	ldr	r2, [r7, #24]
 8034c2a:	4313      	orrs	r3, r2
 8034c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8034c2e:	687b      	ldr	r3, [r7, #4]
 8034c30:	69ba      	ldr	r2, [r7, #24]
 8034c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8034c34:	683b      	ldr	r3, [r7, #0]
 8034c36:	685b      	ldr	r3, [r3, #4]
 8034c38:	f003 0303 	and.w	r3, r3, #3
 8034c3c:	2b03      	cmp	r3, #3
 8034c3e:	d017      	beq.n	8034c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8034c40:	687b      	ldr	r3, [r7, #4]
 8034c42:	68db      	ldr	r3, [r3, #12]
 8034c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8034c46:	69fb      	ldr	r3, [r7, #28]
 8034c48:	005b      	lsls	r3, r3, #1
 8034c4a:	2203      	movs	r2, #3
 8034c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8034c50:	43db      	mvns	r3, r3
 8034c52:	69ba      	ldr	r2, [r7, #24]
 8034c54:	4013      	ands	r3, r2
 8034c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8034c58:	683b      	ldr	r3, [r7, #0]
 8034c5a:	689a      	ldr	r2, [r3, #8]
 8034c5c:	69fb      	ldr	r3, [r7, #28]
 8034c5e:	005b      	lsls	r3, r3, #1
 8034c60:	fa02 f303 	lsl.w	r3, r2, r3
 8034c64:	69ba      	ldr	r2, [r7, #24]
 8034c66:	4313      	orrs	r3, r2
 8034c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8034c6a:	687b      	ldr	r3, [r7, #4]
 8034c6c:	69ba      	ldr	r2, [r7, #24]
 8034c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8034c70:	683b      	ldr	r3, [r7, #0]
 8034c72:	685b      	ldr	r3, [r3, #4]
 8034c74:	f003 0303 	and.w	r3, r3, #3
 8034c78:	2b02      	cmp	r3, #2
 8034c7a:	d123      	bne.n	8034cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8034c7c:	69fb      	ldr	r3, [r7, #28]
 8034c7e:	08da      	lsrs	r2, r3, #3
 8034c80:	687b      	ldr	r3, [r7, #4]
 8034c82:	3208      	adds	r2, #8
 8034c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8034c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8034c8a:	69fb      	ldr	r3, [r7, #28]
 8034c8c:	f003 0307 	and.w	r3, r3, #7
 8034c90:	009b      	lsls	r3, r3, #2
 8034c92:	220f      	movs	r2, #15
 8034c94:	fa02 f303 	lsl.w	r3, r2, r3
 8034c98:	43db      	mvns	r3, r3
 8034c9a:	69ba      	ldr	r2, [r7, #24]
 8034c9c:	4013      	ands	r3, r2
 8034c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8034ca0:	683b      	ldr	r3, [r7, #0]
 8034ca2:	691a      	ldr	r2, [r3, #16]
 8034ca4:	69fb      	ldr	r3, [r7, #28]
 8034ca6:	f003 0307 	and.w	r3, r3, #7
 8034caa:	009b      	lsls	r3, r3, #2
 8034cac:	fa02 f303 	lsl.w	r3, r2, r3
 8034cb0:	69ba      	ldr	r2, [r7, #24]
 8034cb2:	4313      	orrs	r3, r2
 8034cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8034cb6:	69fb      	ldr	r3, [r7, #28]
 8034cb8:	08da      	lsrs	r2, r3, #3
 8034cba:	687b      	ldr	r3, [r7, #4]
 8034cbc:	3208      	adds	r2, #8
 8034cbe:	69b9      	ldr	r1, [r7, #24]
 8034cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8034cc4:	687b      	ldr	r3, [r7, #4]
 8034cc6:	681b      	ldr	r3, [r3, #0]
 8034cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8034cca:	69fb      	ldr	r3, [r7, #28]
 8034ccc:	005b      	lsls	r3, r3, #1
 8034cce:	2203      	movs	r2, #3
 8034cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8034cd4:	43db      	mvns	r3, r3
 8034cd6:	69ba      	ldr	r2, [r7, #24]
 8034cd8:	4013      	ands	r3, r2
 8034cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8034cdc:	683b      	ldr	r3, [r7, #0]
 8034cde:	685b      	ldr	r3, [r3, #4]
 8034ce0:	f003 0203 	and.w	r2, r3, #3
 8034ce4:	69fb      	ldr	r3, [r7, #28]
 8034ce6:	005b      	lsls	r3, r3, #1
 8034ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8034cec:	69ba      	ldr	r2, [r7, #24]
 8034cee:	4313      	orrs	r3, r2
 8034cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8034cf2:	687b      	ldr	r3, [r7, #4]
 8034cf4:	69ba      	ldr	r2, [r7, #24]
 8034cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8034cf8:	683b      	ldr	r3, [r7, #0]
 8034cfa:	685b      	ldr	r3, [r3, #4]
 8034cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8034d00:	2b00      	cmp	r3, #0
 8034d02:	f000 80b4 	beq.w	8034e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8034d06:	2300      	movs	r3, #0
 8034d08:	60fb      	str	r3, [r7, #12]
 8034d0a:	4b60      	ldr	r3, [pc, #384]	; (8034e8c <HAL_GPIO_Init+0x30c>)
 8034d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034d0e:	4a5f      	ldr	r2, [pc, #380]	; (8034e8c <HAL_GPIO_Init+0x30c>)
 8034d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8034d14:	6453      	str	r3, [r2, #68]	; 0x44
 8034d16:	4b5d      	ldr	r3, [pc, #372]	; (8034e8c <HAL_GPIO_Init+0x30c>)
 8034d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8034d1e:	60fb      	str	r3, [r7, #12]
 8034d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8034d22:	4a5b      	ldr	r2, [pc, #364]	; (8034e90 <HAL_GPIO_Init+0x310>)
 8034d24:	69fb      	ldr	r3, [r7, #28]
 8034d26:	089b      	lsrs	r3, r3, #2
 8034d28:	3302      	adds	r3, #2
 8034d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8034d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8034d30:	69fb      	ldr	r3, [r7, #28]
 8034d32:	f003 0303 	and.w	r3, r3, #3
 8034d36:	009b      	lsls	r3, r3, #2
 8034d38:	220f      	movs	r2, #15
 8034d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8034d3e:	43db      	mvns	r3, r3
 8034d40:	69ba      	ldr	r2, [r7, #24]
 8034d42:	4013      	ands	r3, r2
 8034d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8034d46:	687b      	ldr	r3, [r7, #4]
 8034d48:	4a52      	ldr	r2, [pc, #328]	; (8034e94 <HAL_GPIO_Init+0x314>)
 8034d4a:	4293      	cmp	r3, r2
 8034d4c:	d02b      	beq.n	8034da6 <HAL_GPIO_Init+0x226>
 8034d4e:	687b      	ldr	r3, [r7, #4]
 8034d50:	4a51      	ldr	r2, [pc, #324]	; (8034e98 <HAL_GPIO_Init+0x318>)
 8034d52:	4293      	cmp	r3, r2
 8034d54:	d025      	beq.n	8034da2 <HAL_GPIO_Init+0x222>
 8034d56:	687b      	ldr	r3, [r7, #4]
 8034d58:	4a50      	ldr	r2, [pc, #320]	; (8034e9c <HAL_GPIO_Init+0x31c>)
 8034d5a:	4293      	cmp	r3, r2
 8034d5c:	d01f      	beq.n	8034d9e <HAL_GPIO_Init+0x21e>
 8034d5e:	687b      	ldr	r3, [r7, #4]
 8034d60:	4a4f      	ldr	r2, [pc, #316]	; (8034ea0 <HAL_GPIO_Init+0x320>)
 8034d62:	4293      	cmp	r3, r2
 8034d64:	d019      	beq.n	8034d9a <HAL_GPIO_Init+0x21a>
 8034d66:	687b      	ldr	r3, [r7, #4]
 8034d68:	4a4e      	ldr	r2, [pc, #312]	; (8034ea4 <HAL_GPIO_Init+0x324>)
 8034d6a:	4293      	cmp	r3, r2
 8034d6c:	d013      	beq.n	8034d96 <HAL_GPIO_Init+0x216>
 8034d6e:	687b      	ldr	r3, [r7, #4]
 8034d70:	4a4d      	ldr	r2, [pc, #308]	; (8034ea8 <HAL_GPIO_Init+0x328>)
 8034d72:	4293      	cmp	r3, r2
 8034d74:	d00d      	beq.n	8034d92 <HAL_GPIO_Init+0x212>
 8034d76:	687b      	ldr	r3, [r7, #4]
 8034d78:	4a4c      	ldr	r2, [pc, #304]	; (8034eac <HAL_GPIO_Init+0x32c>)
 8034d7a:	4293      	cmp	r3, r2
 8034d7c:	d007      	beq.n	8034d8e <HAL_GPIO_Init+0x20e>
 8034d7e:	687b      	ldr	r3, [r7, #4]
 8034d80:	4a4b      	ldr	r2, [pc, #300]	; (8034eb0 <HAL_GPIO_Init+0x330>)
 8034d82:	4293      	cmp	r3, r2
 8034d84:	d101      	bne.n	8034d8a <HAL_GPIO_Init+0x20a>
 8034d86:	2307      	movs	r3, #7
 8034d88:	e00e      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d8a:	2308      	movs	r3, #8
 8034d8c:	e00c      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d8e:	2306      	movs	r3, #6
 8034d90:	e00a      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d92:	2305      	movs	r3, #5
 8034d94:	e008      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d96:	2304      	movs	r3, #4
 8034d98:	e006      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d9a:	2303      	movs	r3, #3
 8034d9c:	e004      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034d9e:	2302      	movs	r3, #2
 8034da0:	e002      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034da2:	2301      	movs	r3, #1
 8034da4:	e000      	b.n	8034da8 <HAL_GPIO_Init+0x228>
 8034da6:	2300      	movs	r3, #0
 8034da8:	69fa      	ldr	r2, [r7, #28]
 8034daa:	f002 0203 	and.w	r2, r2, #3
 8034dae:	0092      	lsls	r2, r2, #2
 8034db0:	4093      	lsls	r3, r2
 8034db2:	69ba      	ldr	r2, [r7, #24]
 8034db4:	4313      	orrs	r3, r2
 8034db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8034db8:	4935      	ldr	r1, [pc, #212]	; (8034e90 <HAL_GPIO_Init+0x310>)
 8034dba:	69fb      	ldr	r3, [r7, #28]
 8034dbc:	089b      	lsrs	r3, r3, #2
 8034dbe:	3302      	adds	r3, #2
 8034dc0:	69ba      	ldr	r2, [r7, #24]
 8034dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8034dc6:	4b3b      	ldr	r3, [pc, #236]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034dc8:	689b      	ldr	r3, [r3, #8]
 8034dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034dcc:	693b      	ldr	r3, [r7, #16]
 8034dce:	43db      	mvns	r3, r3
 8034dd0:	69ba      	ldr	r2, [r7, #24]
 8034dd2:	4013      	ands	r3, r2
 8034dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8034dd6:	683b      	ldr	r3, [r7, #0]
 8034dd8:	685b      	ldr	r3, [r3, #4]
 8034dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8034dde:	2b00      	cmp	r3, #0
 8034de0:	d003      	beq.n	8034dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8034de2:	69ba      	ldr	r2, [r7, #24]
 8034de4:	693b      	ldr	r3, [r7, #16]
 8034de6:	4313      	orrs	r3, r2
 8034de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8034dea:	4a32      	ldr	r2, [pc, #200]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034dec:	69bb      	ldr	r3, [r7, #24]
 8034dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8034df0:	4b30      	ldr	r3, [pc, #192]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034df2:	68db      	ldr	r3, [r3, #12]
 8034df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034df6:	693b      	ldr	r3, [r7, #16]
 8034df8:	43db      	mvns	r3, r3
 8034dfa:	69ba      	ldr	r2, [r7, #24]
 8034dfc:	4013      	ands	r3, r2
 8034dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8034e00:	683b      	ldr	r3, [r7, #0]
 8034e02:	685b      	ldr	r3, [r3, #4]
 8034e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8034e08:	2b00      	cmp	r3, #0
 8034e0a:	d003      	beq.n	8034e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8034e0c:	69ba      	ldr	r2, [r7, #24]
 8034e0e:	693b      	ldr	r3, [r7, #16]
 8034e10:	4313      	orrs	r3, r2
 8034e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8034e14:	4a27      	ldr	r2, [pc, #156]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034e16:	69bb      	ldr	r3, [r7, #24]
 8034e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8034e1a:	4b26      	ldr	r3, [pc, #152]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034e1c:	685b      	ldr	r3, [r3, #4]
 8034e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034e20:	693b      	ldr	r3, [r7, #16]
 8034e22:	43db      	mvns	r3, r3
 8034e24:	69ba      	ldr	r2, [r7, #24]
 8034e26:	4013      	ands	r3, r2
 8034e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8034e2a:	683b      	ldr	r3, [r7, #0]
 8034e2c:	685b      	ldr	r3, [r3, #4]
 8034e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034e32:	2b00      	cmp	r3, #0
 8034e34:	d003      	beq.n	8034e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8034e36:	69ba      	ldr	r2, [r7, #24]
 8034e38:	693b      	ldr	r3, [r7, #16]
 8034e3a:	4313      	orrs	r3, r2
 8034e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8034e3e:	4a1d      	ldr	r2, [pc, #116]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034e40:	69bb      	ldr	r3, [r7, #24]
 8034e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8034e44:	4b1b      	ldr	r3, [pc, #108]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034e46:	681b      	ldr	r3, [r3, #0]
 8034e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034e4a:	693b      	ldr	r3, [r7, #16]
 8034e4c:	43db      	mvns	r3, r3
 8034e4e:	69ba      	ldr	r2, [r7, #24]
 8034e50:	4013      	ands	r3, r2
 8034e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8034e54:	683b      	ldr	r3, [r7, #0]
 8034e56:	685b      	ldr	r3, [r3, #4]
 8034e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8034e5c:	2b00      	cmp	r3, #0
 8034e5e:	d003      	beq.n	8034e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8034e60:	69ba      	ldr	r2, [r7, #24]
 8034e62:	693b      	ldr	r3, [r7, #16]
 8034e64:	4313      	orrs	r3, r2
 8034e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8034e68:	4a12      	ldr	r2, [pc, #72]	; (8034eb4 <HAL_GPIO_Init+0x334>)
 8034e6a:	69bb      	ldr	r3, [r7, #24]
 8034e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8034e6e:	69fb      	ldr	r3, [r7, #28]
 8034e70:	3301      	adds	r3, #1
 8034e72:	61fb      	str	r3, [r7, #28]
 8034e74:	69fb      	ldr	r3, [r7, #28]
 8034e76:	2b0f      	cmp	r3, #15
 8034e78:	f67f ae90 	bls.w	8034b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8034e7c:	bf00      	nop
 8034e7e:	bf00      	nop
 8034e80:	3724      	adds	r7, #36	; 0x24
 8034e82:	46bd      	mov	sp, r7
 8034e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e88:	4770      	bx	lr
 8034e8a:	bf00      	nop
 8034e8c:	40023800 	.word	0x40023800
 8034e90:	40013800 	.word	0x40013800
 8034e94:	40020000 	.word	0x40020000
 8034e98:	40020400 	.word	0x40020400
 8034e9c:	40020800 	.word	0x40020800
 8034ea0:	40020c00 	.word	0x40020c00
 8034ea4:	40021000 	.word	0x40021000
 8034ea8:	40021400 	.word	0x40021400
 8034eac:	40021800 	.word	0x40021800
 8034eb0:	40021c00 	.word	0x40021c00
 8034eb4:	40013c00 	.word	0x40013c00

08034eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8034eb8:	b480      	push	{r7}
 8034eba:	b083      	sub	sp, #12
 8034ebc:	af00      	add	r7, sp, #0
 8034ebe:	6078      	str	r0, [r7, #4]
 8034ec0:	460b      	mov	r3, r1
 8034ec2:	807b      	strh	r3, [r7, #2]
 8034ec4:	4613      	mov	r3, r2
 8034ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8034ec8:	787b      	ldrb	r3, [r7, #1]
 8034eca:	2b00      	cmp	r3, #0
 8034ecc:	d003      	beq.n	8034ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8034ece:	887a      	ldrh	r2, [r7, #2]
 8034ed0:	687b      	ldr	r3, [r7, #4]
 8034ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8034ed4:	e003      	b.n	8034ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8034ed6:	887b      	ldrh	r3, [r7, #2]
 8034ed8:	041a      	lsls	r2, r3, #16
 8034eda:	687b      	ldr	r3, [r7, #4]
 8034edc:	619a      	str	r2, [r3, #24]
}
 8034ede:	bf00      	nop
 8034ee0:	370c      	adds	r7, #12
 8034ee2:	46bd      	mov	sp, r7
 8034ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ee8:	4770      	bx	lr
	...

08034eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8034eec:	b580      	push	{r7, lr}
 8034eee:	b084      	sub	sp, #16
 8034ef0:	af00      	add	r7, sp, #0
 8034ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8034ef4:	687b      	ldr	r3, [r7, #4]
 8034ef6:	2b00      	cmp	r3, #0
 8034ef8:	d101      	bne.n	8034efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8034efa:	2301      	movs	r3, #1
 8034efc:	e12b      	b.n	8035156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8034efe:	687b      	ldr	r3, [r7, #4]
 8034f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8034f04:	b2db      	uxtb	r3, r3
 8034f06:	2b00      	cmp	r3, #0
 8034f08:	d106      	bne.n	8034f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8034f0a:	687b      	ldr	r3, [r7, #4]
 8034f0c:	2200      	movs	r2, #0
 8034f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8034f12:	6878      	ldr	r0, [r7, #4]
 8034f14:	f7fe feb2 	bl	8033c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8034f18:	687b      	ldr	r3, [r7, #4]
 8034f1a:	2224      	movs	r2, #36	; 0x24
 8034f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8034f20:	687b      	ldr	r3, [r7, #4]
 8034f22:	681b      	ldr	r3, [r3, #0]
 8034f24:	681a      	ldr	r2, [r3, #0]
 8034f26:	687b      	ldr	r3, [r7, #4]
 8034f28:	681b      	ldr	r3, [r3, #0]
 8034f2a:	f022 0201 	bic.w	r2, r2, #1
 8034f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8034f30:	687b      	ldr	r3, [r7, #4]
 8034f32:	681b      	ldr	r3, [r3, #0]
 8034f34:	681a      	ldr	r2, [r3, #0]
 8034f36:	687b      	ldr	r3, [r7, #4]
 8034f38:	681b      	ldr	r3, [r3, #0]
 8034f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8034f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8034f40:	687b      	ldr	r3, [r7, #4]
 8034f42:	681b      	ldr	r3, [r3, #0]
 8034f44:	681a      	ldr	r2, [r3, #0]
 8034f46:	687b      	ldr	r3, [r7, #4]
 8034f48:	681b      	ldr	r3, [r3, #0]
 8034f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8034f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8034f50:	f002 f978 	bl	8037244 <HAL_RCC_GetPCLK1Freq>
 8034f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8034f56:	687b      	ldr	r3, [r7, #4]
 8034f58:	685b      	ldr	r3, [r3, #4]
 8034f5a:	4a81      	ldr	r2, [pc, #516]	; (8035160 <HAL_I2C_Init+0x274>)
 8034f5c:	4293      	cmp	r3, r2
 8034f5e:	d807      	bhi.n	8034f70 <HAL_I2C_Init+0x84>
 8034f60:	68fb      	ldr	r3, [r7, #12]
 8034f62:	4a80      	ldr	r2, [pc, #512]	; (8035164 <HAL_I2C_Init+0x278>)
 8034f64:	4293      	cmp	r3, r2
 8034f66:	bf94      	ite	ls
 8034f68:	2301      	movls	r3, #1
 8034f6a:	2300      	movhi	r3, #0
 8034f6c:	b2db      	uxtb	r3, r3
 8034f6e:	e006      	b.n	8034f7e <HAL_I2C_Init+0x92>
 8034f70:	68fb      	ldr	r3, [r7, #12]
 8034f72:	4a7d      	ldr	r2, [pc, #500]	; (8035168 <HAL_I2C_Init+0x27c>)
 8034f74:	4293      	cmp	r3, r2
 8034f76:	bf94      	ite	ls
 8034f78:	2301      	movls	r3, #1
 8034f7a:	2300      	movhi	r3, #0
 8034f7c:	b2db      	uxtb	r3, r3
 8034f7e:	2b00      	cmp	r3, #0
 8034f80:	d001      	beq.n	8034f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8034f82:	2301      	movs	r3, #1
 8034f84:	e0e7      	b.n	8035156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8034f86:	68fb      	ldr	r3, [r7, #12]
 8034f88:	4a78      	ldr	r2, [pc, #480]	; (803516c <HAL_I2C_Init+0x280>)
 8034f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8034f8e:	0c9b      	lsrs	r3, r3, #18
 8034f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8034f92:	687b      	ldr	r3, [r7, #4]
 8034f94:	681b      	ldr	r3, [r3, #0]
 8034f96:	685b      	ldr	r3, [r3, #4]
 8034f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8034f9c:	687b      	ldr	r3, [r7, #4]
 8034f9e:	681b      	ldr	r3, [r3, #0]
 8034fa0:	68ba      	ldr	r2, [r7, #8]
 8034fa2:	430a      	orrs	r2, r1
 8034fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8034fa6:	687b      	ldr	r3, [r7, #4]
 8034fa8:	681b      	ldr	r3, [r3, #0]
 8034faa:	6a1b      	ldr	r3, [r3, #32]
 8034fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8034fb0:	687b      	ldr	r3, [r7, #4]
 8034fb2:	685b      	ldr	r3, [r3, #4]
 8034fb4:	4a6a      	ldr	r2, [pc, #424]	; (8035160 <HAL_I2C_Init+0x274>)
 8034fb6:	4293      	cmp	r3, r2
 8034fb8:	d802      	bhi.n	8034fc0 <HAL_I2C_Init+0xd4>
 8034fba:	68bb      	ldr	r3, [r7, #8]
 8034fbc:	3301      	adds	r3, #1
 8034fbe:	e009      	b.n	8034fd4 <HAL_I2C_Init+0xe8>
 8034fc0:	68bb      	ldr	r3, [r7, #8]
 8034fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8034fc6:	fb02 f303 	mul.w	r3, r2, r3
 8034fca:	4a69      	ldr	r2, [pc, #420]	; (8035170 <HAL_I2C_Init+0x284>)
 8034fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8034fd0:	099b      	lsrs	r3, r3, #6
 8034fd2:	3301      	adds	r3, #1
 8034fd4:	687a      	ldr	r2, [r7, #4]
 8034fd6:	6812      	ldr	r2, [r2, #0]
 8034fd8:	430b      	orrs	r3, r1
 8034fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8034fdc:	687b      	ldr	r3, [r7, #4]
 8034fde:	681b      	ldr	r3, [r3, #0]
 8034fe0:	69db      	ldr	r3, [r3, #28]
 8034fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8034fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8034fea:	687b      	ldr	r3, [r7, #4]
 8034fec:	685b      	ldr	r3, [r3, #4]
 8034fee:	495c      	ldr	r1, [pc, #368]	; (8035160 <HAL_I2C_Init+0x274>)
 8034ff0:	428b      	cmp	r3, r1
 8034ff2:	d819      	bhi.n	8035028 <HAL_I2C_Init+0x13c>
 8034ff4:	68fb      	ldr	r3, [r7, #12]
 8034ff6:	1e59      	subs	r1, r3, #1
 8034ff8:	687b      	ldr	r3, [r7, #4]
 8034ffa:	685b      	ldr	r3, [r3, #4]
 8034ffc:	005b      	lsls	r3, r3, #1
 8034ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8035002:	1c59      	adds	r1, r3, #1
 8035004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8035008:	400b      	ands	r3, r1
 803500a:	2b00      	cmp	r3, #0
 803500c:	d00a      	beq.n	8035024 <HAL_I2C_Init+0x138>
 803500e:	68fb      	ldr	r3, [r7, #12]
 8035010:	1e59      	subs	r1, r3, #1
 8035012:	687b      	ldr	r3, [r7, #4]
 8035014:	685b      	ldr	r3, [r3, #4]
 8035016:	005b      	lsls	r3, r3, #1
 8035018:	fbb1 f3f3 	udiv	r3, r1, r3
 803501c:	3301      	adds	r3, #1
 803501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8035022:	e051      	b.n	80350c8 <HAL_I2C_Init+0x1dc>
 8035024:	2304      	movs	r3, #4
 8035026:	e04f      	b.n	80350c8 <HAL_I2C_Init+0x1dc>
 8035028:	687b      	ldr	r3, [r7, #4]
 803502a:	689b      	ldr	r3, [r3, #8]
 803502c:	2b00      	cmp	r3, #0
 803502e:	d111      	bne.n	8035054 <HAL_I2C_Init+0x168>
 8035030:	68fb      	ldr	r3, [r7, #12]
 8035032:	1e58      	subs	r0, r3, #1
 8035034:	687b      	ldr	r3, [r7, #4]
 8035036:	6859      	ldr	r1, [r3, #4]
 8035038:	460b      	mov	r3, r1
 803503a:	005b      	lsls	r3, r3, #1
 803503c:	440b      	add	r3, r1
 803503e:	fbb0 f3f3 	udiv	r3, r0, r3
 8035042:	3301      	adds	r3, #1
 8035044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8035048:	2b00      	cmp	r3, #0
 803504a:	bf0c      	ite	eq
 803504c:	2301      	moveq	r3, #1
 803504e:	2300      	movne	r3, #0
 8035050:	b2db      	uxtb	r3, r3
 8035052:	e012      	b.n	803507a <HAL_I2C_Init+0x18e>
 8035054:	68fb      	ldr	r3, [r7, #12]
 8035056:	1e58      	subs	r0, r3, #1
 8035058:	687b      	ldr	r3, [r7, #4]
 803505a:	6859      	ldr	r1, [r3, #4]
 803505c:	460b      	mov	r3, r1
 803505e:	009b      	lsls	r3, r3, #2
 8035060:	440b      	add	r3, r1
 8035062:	0099      	lsls	r1, r3, #2
 8035064:	440b      	add	r3, r1
 8035066:	fbb0 f3f3 	udiv	r3, r0, r3
 803506a:	3301      	adds	r3, #1
 803506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8035070:	2b00      	cmp	r3, #0
 8035072:	bf0c      	ite	eq
 8035074:	2301      	moveq	r3, #1
 8035076:	2300      	movne	r3, #0
 8035078:	b2db      	uxtb	r3, r3
 803507a:	2b00      	cmp	r3, #0
 803507c:	d001      	beq.n	8035082 <HAL_I2C_Init+0x196>
 803507e:	2301      	movs	r3, #1
 8035080:	e022      	b.n	80350c8 <HAL_I2C_Init+0x1dc>
 8035082:	687b      	ldr	r3, [r7, #4]
 8035084:	689b      	ldr	r3, [r3, #8]
 8035086:	2b00      	cmp	r3, #0
 8035088:	d10e      	bne.n	80350a8 <HAL_I2C_Init+0x1bc>
 803508a:	68fb      	ldr	r3, [r7, #12]
 803508c:	1e58      	subs	r0, r3, #1
 803508e:	687b      	ldr	r3, [r7, #4]
 8035090:	6859      	ldr	r1, [r3, #4]
 8035092:	460b      	mov	r3, r1
 8035094:	005b      	lsls	r3, r3, #1
 8035096:	440b      	add	r3, r1
 8035098:	fbb0 f3f3 	udiv	r3, r0, r3
 803509c:	3301      	adds	r3, #1
 803509e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80350a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80350a6:	e00f      	b.n	80350c8 <HAL_I2C_Init+0x1dc>
 80350a8:	68fb      	ldr	r3, [r7, #12]
 80350aa:	1e58      	subs	r0, r3, #1
 80350ac:	687b      	ldr	r3, [r7, #4]
 80350ae:	6859      	ldr	r1, [r3, #4]
 80350b0:	460b      	mov	r3, r1
 80350b2:	009b      	lsls	r3, r3, #2
 80350b4:	440b      	add	r3, r1
 80350b6:	0099      	lsls	r1, r3, #2
 80350b8:	440b      	add	r3, r1
 80350ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80350be:	3301      	adds	r3, #1
 80350c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80350c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80350c8:	6879      	ldr	r1, [r7, #4]
 80350ca:	6809      	ldr	r1, [r1, #0]
 80350cc:	4313      	orrs	r3, r2
 80350ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80350d0:	687b      	ldr	r3, [r7, #4]
 80350d2:	681b      	ldr	r3, [r3, #0]
 80350d4:	681b      	ldr	r3, [r3, #0]
 80350d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80350da:	687b      	ldr	r3, [r7, #4]
 80350dc:	69da      	ldr	r2, [r3, #28]
 80350de:	687b      	ldr	r3, [r7, #4]
 80350e0:	6a1b      	ldr	r3, [r3, #32]
 80350e2:	431a      	orrs	r2, r3
 80350e4:	687b      	ldr	r3, [r7, #4]
 80350e6:	681b      	ldr	r3, [r3, #0]
 80350e8:	430a      	orrs	r2, r1
 80350ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80350ec:	687b      	ldr	r3, [r7, #4]
 80350ee:	681b      	ldr	r3, [r3, #0]
 80350f0:	689b      	ldr	r3, [r3, #8]
 80350f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80350f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80350fa:	687a      	ldr	r2, [r7, #4]
 80350fc:	6911      	ldr	r1, [r2, #16]
 80350fe:	687a      	ldr	r2, [r7, #4]
 8035100:	68d2      	ldr	r2, [r2, #12]
 8035102:	4311      	orrs	r1, r2
 8035104:	687a      	ldr	r2, [r7, #4]
 8035106:	6812      	ldr	r2, [r2, #0]
 8035108:	430b      	orrs	r3, r1
 803510a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 803510c:	687b      	ldr	r3, [r7, #4]
 803510e:	681b      	ldr	r3, [r3, #0]
 8035110:	68db      	ldr	r3, [r3, #12]
 8035112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8035116:	687b      	ldr	r3, [r7, #4]
 8035118:	695a      	ldr	r2, [r3, #20]
 803511a:	687b      	ldr	r3, [r7, #4]
 803511c:	699b      	ldr	r3, [r3, #24]
 803511e:	431a      	orrs	r2, r3
 8035120:	687b      	ldr	r3, [r7, #4]
 8035122:	681b      	ldr	r3, [r3, #0]
 8035124:	430a      	orrs	r2, r1
 8035126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8035128:	687b      	ldr	r3, [r7, #4]
 803512a:	681b      	ldr	r3, [r3, #0]
 803512c:	681a      	ldr	r2, [r3, #0]
 803512e:	687b      	ldr	r3, [r7, #4]
 8035130:	681b      	ldr	r3, [r3, #0]
 8035132:	f042 0201 	orr.w	r2, r2, #1
 8035136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8035138:	687b      	ldr	r3, [r7, #4]
 803513a:	2200      	movs	r2, #0
 803513c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 803513e:	687b      	ldr	r3, [r7, #4]
 8035140:	2220      	movs	r2, #32
 8035142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8035146:	687b      	ldr	r3, [r7, #4]
 8035148:	2200      	movs	r2, #0
 803514a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 803514c:	687b      	ldr	r3, [r7, #4]
 803514e:	2200      	movs	r2, #0
 8035150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8035154:	2300      	movs	r3, #0
}
 8035156:	4618      	mov	r0, r3
 8035158:	3710      	adds	r7, #16
 803515a:	46bd      	mov	sp, r7
 803515c:	bd80      	pop	{r7, pc}
 803515e:	bf00      	nop
 8035160:	000186a0 	.word	0x000186a0
 8035164:	001e847f 	.word	0x001e847f
 8035168:	003d08ff 	.word	0x003d08ff
 803516c:	431bde83 	.word	0x431bde83
 8035170:	10624dd3 	.word	0x10624dd3

08035174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8035174:	b580      	push	{r7, lr}
 8035176:	b088      	sub	sp, #32
 8035178:	af02      	add	r7, sp, #8
 803517a:	60f8      	str	r0, [r7, #12]
 803517c:	607a      	str	r2, [r7, #4]
 803517e:	461a      	mov	r2, r3
 8035180:	460b      	mov	r3, r1
 8035182:	817b      	strh	r3, [r7, #10]
 8035184:	4613      	mov	r3, r2
 8035186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8035188:	f7fe ff84 	bl	8034094 <HAL_GetTick>
 803518c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 803518e:	68fb      	ldr	r3, [r7, #12]
 8035190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035194:	b2db      	uxtb	r3, r3
 8035196:	2b20      	cmp	r3, #32
 8035198:	f040 80e0 	bne.w	803535c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 803519c:	697b      	ldr	r3, [r7, #20]
 803519e:	9300      	str	r3, [sp, #0]
 80351a0:	2319      	movs	r3, #25
 80351a2:	2201      	movs	r2, #1
 80351a4:	4970      	ldr	r1, [pc, #448]	; (8035368 <HAL_I2C_Master_Transmit+0x1f4>)
 80351a6:	68f8      	ldr	r0, [r7, #12]
 80351a8:	f000 fc58 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 80351ac:	4603      	mov	r3, r0
 80351ae:	2b00      	cmp	r3, #0
 80351b0:	d001      	beq.n	80351b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80351b2:	2302      	movs	r3, #2
 80351b4:	e0d3      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80351b6:	68fb      	ldr	r3, [r7, #12]
 80351b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80351bc:	2b01      	cmp	r3, #1
 80351be:	d101      	bne.n	80351c4 <HAL_I2C_Master_Transmit+0x50>
 80351c0:	2302      	movs	r3, #2
 80351c2:	e0cc      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
 80351c4:	68fb      	ldr	r3, [r7, #12]
 80351c6:	2201      	movs	r2, #1
 80351c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80351cc:	68fb      	ldr	r3, [r7, #12]
 80351ce:	681b      	ldr	r3, [r3, #0]
 80351d0:	681b      	ldr	r3, [r3, #0]
 80351d2:	f003 0301 	and.w	r3, r3, #1
 80351d6:	2b01      	cmp	r3, #1
 80351d8:	d007      	beq.n	80351ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80351da:	68fb      	ldr	r3, [r7, #12]
 80351dc:	681b      	ldr	r3, [r3, #0]
 80351de:	681a      	ldr	r2, [r3, #0]
 80351e0:	68fb      	ldr	r3, [r7, #12]
 80351e2:	681b      	ldr	r3, [r3, #0]
 80351e4:	f042 0201 	orr.w	r2, r2, #1
 80351e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80351ea:	68fb      	ldr	r3, [r7, #12]
 80351ec:	681b      	ldr	r3, [r3, #0]
 80351ee:	681a      	ldr	r2, [r3, #0]
 80351f0:	68fb      	ldr	r3, [r7, #12]
 80351f2:	681b      	ldr	r3, [r3, #0]
 80351f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80351f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80351fa:	68fb      	ldr	r3, [r7, #12]
 80351fc:	2221      	movs	r2, #33	; 0x21
 80351fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8035202:	68fb      	ldr	r3, [r7, #12]
 8035204:	2210      	movs	r2, #16
 8035206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 803520a:	68fb      	ldr	r3, [r7, #12]
 803520c:	2200      	movs	r2, #0
 803520e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8035210:	68fb      	ldr	r3, [r7, #12]
 8035212:	687a      	ldr	r2, [r7, #4]
 8035214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8035216:	68fb      	ldr	r3, [r7, #12]
 8035218:	893a      	ldrh	r2, [r7, #8]
 803521a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 803521c:	68fb      	ldr	r3, [r7, #12]
 803521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8035220:	b29a      	uxth	r2, r3
 8035222:	68fb      	ldr	r3, [r7, #12]
 8035224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8035226:	68fb      	ldr	r3, [r7, #12]
 8035228:	4a50      	ldr	r2, [pc, #320]	; (803536c <HAL_I2C_Master_Transmit+0x1f8>)
 803522a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 803522c:	8979      	ldrh	r1, [r7, #10]
 803522e:	697b      	ldr	r3, [r7, #20]
 8035230:	6a3a      	ldr	r2, [r7, #32]
 8035232:	68f8      	ldr	r0, [r7, #12]
 8035234:	f000 fac2 	bl	80357bc <I2C_MasterRequestWrite>
 8035238:	4603      	mov	r3, r0
 803523a:	2b00      	cmp	r3, #0
 803523c:	d001      	beq.n	8035242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 803523e:	2301      	movs	r3, #1
 8035240:	e08d      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8035242:	2300      	movs	r3, #0
 8035244:	613b      	str	r3, [r7, #16]
 8035246:	68fb      	ldr	r3, [r7, #12]
 8035248:	681b      	ldr	r3, [r3, #0]
 803524a:	695b      	ldr	r3, [r3, #20]
 803524c:	613b      	str	r3, [r7, #16]
 803524e:	68fb      	ldr	r3, [r7, #12]
 8035250:	681b      	ldr	r3, [r3, #0]
 8035252:	699b      	ldr	r3, [r3, #24]
 8035254:	613b      	str	r3, [r7, #16]
 8035256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8035258:	e066      	b.n	8035328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 803525a:	697a      	ldr	r2, [r7, #20]
 803525c:	6a39      	ldr	r1, [r7, #32]
 803525e:	68f8      	ldr	r0, [r7, #12]
 8035260:	f000 fcd2 	bl	8035c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8035264:	4603      	mov	r3, r0
 8035266:	2b00      	cmp	r3, #0
 8035268:	d00d      	beq.n	8035286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803526a:	68fb      	ldr	r3, [r7, #12]
 803526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803526e:	2b04      	cmp	r3, #4
 8035270:	d107      	bne.n	8035282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8035272:	68fb      	ldr	r3, [r7, #12]
 8035274:	681b      	ldr	r3, [r3, #0]
 8035276:	681a      	ldr	r2, [r3, #0]
 8035278:	68fb      	ldr	r3, [r7, #12]
 803527a:	681b      	ldr	r3, [r3, #0]
 803527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8035280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8035282:	2301      	movs	r3, #1
 8035284:	e06b      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8035286:	68fb      	ldr	r3, [r7, #12]
 8035288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803528a:	781a      	ldrb	r2, [r3, #0]
 803528c:	68fb      	ldr	r3, [r7, #12]
 803528e:	681b      	ldr	r3, [r3, #0]
 8035290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8035292:	68fb      	ldr	r3, [r7, #12]
 8035294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035296:	1c5a      	adds	r2, r3, #1
 8035298:	68fb      	ldr	r3, [r7, #12]
 803529a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 803529c:	68fb      	ldr	r3, [r7, #12]
 803529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80352a0:	b29b      	uxth	r3, r3
 80352a2:	3b01      	subs	r3, #1
 80352a4:	b29a      	uxth	r2, r3
 80352a6:	68fb      	ldr	r3, [r7, #12]
 80352a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80352aa:	68fb      	ldr	r3, [r7, #12]
 80352ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80352ae:	3b01      	subs	r3, #1
 80352b0:	b29a      	uxth	r2, r3
 80352b2:	68fb      	ldr	r3, [r7, #12]
 80352b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80352b6:	68fb      	ldr	r3, [r7, #12]
 80352b8:	681b      	ldr	r3, [r3, #0]
 80352ba:	695b      	ldr	r3, [r3, #20]
 80352bc:	f003 0304 	and.w	r3, r3, #4
 80352c0:	2b04      	cmp	r3, #4
 80352c2:	d11b      	bne.n	80352fc <HAL_I2C_Master_Transmit+0x188>
 80352c4:	68fb      	ldr	r3, [r7, #12]
 80352c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	d017      	beq.n	80352fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80352cc:	68fb      	ldr	r3, [r7, #12]
 80352ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80352d0:	781a      	ldrb	r2, [r3, #0]
 80352d2:	68fb      	ldr	r3, [r7, #12]
 80352d4:	681b      	ldr	r3, [r3, #0]
 80352d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80352d8:	68fb      	ldr	r3, [r7, #12]
 80352da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80352dc:	1c5a      	adds	r2, r3, #1
 80352de:	68fb      	ldr	r3, [r7, #12]
 80352e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80352e2:	68fb      	ldr	r3, [r7, #12]
 80352e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80352e6:	b29b      	uxth	r3, r3
 80352e8:	3b01      	subs	r3, #1
 80352ea:	b29a      	uxth	r2, r3
 80352ec:	68fb      	ldr	r3, [r7, #12]
 80352ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80352f0:	68fb      	ldr	r3, [r7, #12]
 80352f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80352f4:	3b01      	subs	r3, #1
 80352f6:	b29a      	uxth	r2, r3
 80352f8:	68fb      	ldr	r3, [r7, #12]
 80352fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80352fc:	697a      	ldr	r2, [r7, #20]
 80352fe:	6a39      	ldr	r1, [r7, #32]
 8035300:	68f8      	ldr	r0, [r7, #12]
 8035302:	f000 fcc2 	bl	8035c8a <I2C_WaitOnBTFFlagUntilTimeout>
 8035306:	4603      	mov	r3, r0
 8035308:	2b00      	cmp	r3, #0
 803530a:	d00d      	beq.n	8035328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803530c:	68fb      	ldr	r3, [r7, #12]
 803530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035310:	2b04      	cmp	r3, #4
 8035312:	d107      	bne.n	8035324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8035314:	68fb      	ldr	r3, [r7, #12]
 8035316:	681b      	ldr	r3, [r3, #0]
 8035318:	681a      	ldr	r2, [r3, #0]
 803531a:	68fb      	ldr	r3, [r7, #12]
 803531c:	681b      	ldr	r3, [r3, #0]
 803531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8035322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8035324:	2301      	movs	r3, #1
 8035326:	e01a      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8035328:	68fb      	ldr	r3, [r7, #12]
 803532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803532c:	2b00      	cmp	r3, #0
 803532e:	d194      	bne.n	803525a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8035330:	68fb      	ldr	r3, [r7, #12]
 8035332:	681b      	ldr	r3, [r3, #0]
 8035334:	681a      	ldr	r2, [r3, #0]
 8035336:	68fb      	ldr	r3, [r7, #12]
 8035338:	681b      	ldr	r3, [r3, #0]
 803533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8035340:	68fb      	ldr	r3, [r7, #12]
 8035342:	2220      	movs	r2, #32
 8035344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8035348:	68fb      	ldr	r3, [r7, #12]
 803534a:	2200      	movs	r2, #0
 803534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8035350:	68fb      	ldr	r3, [r7, #12]
 8035352:	2200      	movs	r2, #0
 8035354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8035358:	2300      	movs	r3, #0
 803535a:	e000      	b.n	803535e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 803535c:	2302      	movs	r3, #2
  }
}
 803535e:	4618      	mov	r0, r3
 8035360:	3718      	adds	r7, #24
 8035362:	46bd      	mov	sp, r7
 8035364:	bd80      	pop	{r7, pc}
 8035366:	bf00      	nop
 8035368:	00100002 	.word	0x00100002
 803536c:	ffff0000 	.word	0xffff0000

08035370 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8035370:	b580      	push	{r7, lr}
 8035372:	b08c      	sub	sp, #48	; 0x30
 8035374:	af02      	add	r7, sp, #8
 8035376:	60f8      	str	r0, [r7, #12]
 8035378:	607a      	str	r2, [r7, #4]
 803537a:	461a      	mov	r2, r3
 803537c:	460b      	mov	r3, r1
 803537e:	817b      	strh	r3, [r7, #10]
 8035380:	4613      	mov	r3, r2
 8035382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8035384:	f7fe fe86 	bl	8034094 <HAL_GetTick>
 8035388:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 803538a:	68fb      	ldr	r3, [r7, #12]
 803538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035390:	b2db      	uxtb	r3, r3
 8035392:	2b20      	cmp	r3, #32
 8035394:	f040 820b 	bne.w	80357ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8035398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803539a:	9300      	str	r3, [sp, #0]
 803539c:	2319      	movs	r3, #25
 803539e:	2201      	movs	r2, #1
 80353a0:	497c      	ldr	r1, [pc, #496]	; (8035594 <HAL_I2C_Master_Receive+0x224>)
 80353a2:	68f8      	ldr	r0, [r7, #12]
 80353a4:	f000 fb5a 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 80353a8:	4603      	mov	r3, r0
 80353aa:	2b00      	cmp	r3, #0
 80353ac:	d001      	beq.n	80353b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80353ae:	2302      	movs	r3, #2
 80353b0:	e1fe      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80353b2:	68fb      	ldr	r3, [r7, #12]
 80353b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80353b8:	2b01      	cmp	r3, #1
 80353ba:	d101      	bne.n	80353c0 <HAL_I2C_Master_Receive+0x50>
 80353bc:	2302      	movs	r3, #2
 80353be:	e1f7      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
 80353c0:	68fb      	ldr	r3, [r7, #12]
 80353c2:	2201      	movs	r2, #1
 80353c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80353c8:	68fb      	ldr	r3, [r7, #12]
 80353ca:	681b      	ldr	r3, [r3, #0]
 80353cc:	681b      	ldr	r3, [r3, #0]
 80353ce:	f003 0301 	and.w	r3, r3, #1
 80353d2:	2b01      	cmp	r3, #1
 80353d4:	d007      	beq.n	80353e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80353d6:	68fb      	ldr	r3, [r7, #12]
 80353d8:	681b      	ldr	r3, [r3, #0]
 80353da:	681a      	ldr	r2, [r3, #0]
 80353dc:	68fb      	ldr	r3, [r7, #12]
 80353de:	681b      	ldr	r3, [r3, #0]
 80353e0:	f042 0201 	orr.w	r2, r2, #1
 80353e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80353e6:	68fb      	ldr	r3, [r7, #12]
 80353e8:	681b      	ldr	r3, [r3, #0]
 80353ea:	681a      	ldr	r2, [r3, #0]
 80353ec:	68fb      	ldr	r3, [r7, #12]
 80353ee:	681b      	ldr	r3, [r3, #0]
 80353f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80353f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80353f6:	68fb      	ldr	r3, [r7, #12]
 80353f8:	2222      	movs	r2, #34	; 0x22
 80353fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80353fe:	68fb      	ldr	r3, [r7, #12]
 8035400:	2210      	movs	r2, #16
 8035402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8035406:	68fb      	ldr	r3, [r7, #12]
 8035408:	2200      	movs	r2, #0
 803540a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 803540c:	68fb      	ldr	r3, [r7, #12]
 803540e:	687a      	ldr	r2, [r7, #4]
 8035410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8035412:	68fb      	ldr	r3, [r7, #12]
 8035414:	893a      	ldrh	r2, [r7, #8]
 8035416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8035418:	68fb      	ldr	r3, [r7, #12]
 803541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803541c:	b29a      	uxth	r2, r3
 803541e:	68fb      	ldr	r3, [r7, #12]
 8035420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8035422:	68fb      	ldr	r3, [r7, #12]
 8035424:	4a5c      	ldr	r2, [pc, #368]	; (8035598 <HAL_I2C_Master_Receive+0x228>)
 8035426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8035428:	8979      	ldrh	r1, [r7, #10]
 803542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803542e:	68f8      	ldr	r0, [r7, #12]
 8035430:	f000 fa46 	bl	80358c0 <I2C_MasterRequestRead>
 8035434:	4603      	mov	r3, r0
 8035436:	2b00      	cmp	r3, #0
 8035438:	d001      	beq.n	803543e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 803543a:	2301      	movs	r3, #1
 803543c:	e1b8      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 803543e:	68fb      	ldr	r3, [r7, #12]
 8035440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035442:	2b00      	cmp	r3, #0
 8035444:	d113      	bne.n	803546e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8035446:	2300      	movs	r3, #0
 8035448:	623b      	str	r3, [r7, #32]
 803544a:	68fb      	ldr	r3, [r7, #12]
 803544c:	681b      	ldr	r3, [r3, #0]
 803544e:	695b      	ldr	r3, [r3, #20]
 8035450:	623b      	str	r3, [r7, #32]
 8035452:	68fb      	ldr	r3, [r7, #12]
 8035454:	681b      	ldr	r3, [r3, #0]
 8035456:	699b      	ldr	r3, [r3, #24]
 8035458:	623b      	str	r3, [r7, #32]
 803545a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803545c:	68fb      	ldr	r3, [r7, #12]
 803545e:	681b      	ldr	r3, [r3, #0]
 8035460:	681a      	ldr	r2, [r3, #0]
 8035462:	68fb      	ldr	r3, [r7, #12]
 8035464:	681b      	ldr	r3, [r3, #0]
 8035466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803546a:	601a      	str	r2, [r3, #0]
 803546c:	e18c      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 803546e:	68fb      	ldr	r3, [r7, #12]
 8035470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035472:	2b01      	cmp	r3, #1
 8035474:	d11b      	bne.n	80354ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8035476:	68fb      	ldr	r3, [r7, #12]
 8035478:	681b      	ldr	r3, [r3, #0]
 803547a:	681a      	ldr	r2, [r3, #0]
 803547c:	68fb      	ldr	r3, [r7, #12]
 803547e:	681b      	ldr	r3, [r3, #0]
 8035480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8035484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8035486:	2300      	movs	r3, #0
 8035488:	61fb      	str	r3, [r7, #28]
 803548a:	68fb      	ldr	r3, [r7, #12]
 803548c:	681b      	ldr	r3, [r3, #0]
 803548e:	695b      	ldr	r3, [r3, #20]
 8035490:	61fb      	str	r3, [r7, #28]
 8035492:	68fb      	ldr	r3, [r7, #12]
 8035494:	681b      	ldr	r3, [r3, #0]
 8035496:	699b      	ldr	r3, [r3, #24]
 8035498:	61fb      	str	r3, [r7, #28]
 803549a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803549c:	68fb      	ldr	r3, [r7, #12]
 803549e:	681b      	ldr	r3, [r3, #0]
 80354a0:	681a      	ldr	r2, [r3, #0]
 80354a2:	68fb      	ldr	r3, [r7, #12]
 80354a4:	681b      	ldr	r3, [r3, #0]
 80354a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80354aa:	601a      	str	r2, [r3, #0]
 80354ac:	e16c      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80354ae:	68fb      	ldr	r3, [r7, #12]
 80354b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80354b2:	2b02      	cmp	r3, #2
 80354b4:	d11b      	bne.n	80354ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80354b6:	68fb      	ldr	r3, [r7, #12]
 80354b8:	681b      	ldr	r3, [r3, #0]
 80354ba:	681a      	ldr	r2, [r3, #0]
 80354bc:	68fb      	ldr	r3, [r7, #12]
 80354be:	681b      	ldr	r3, [r3, #0]
 80354c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80354c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80354c6:	68fb      	ldr	r3, [r7, #12]
 80354c8:	681b      	ldr	r3, [r3, #0]
 80354ca:	681a      	ldr	r2, [r3, #0]
 80354cc:	68fb      	ldr	r3, [r7, #12]
 80354ce:	681b      	ldr	r3, [r3, #0]
 80354d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80354d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80354d6:	2300      	movs	r3, #0
 80354d8:	61bb      	str	r3, [r7, #24]
 80354da:	68fb      	ldr	r3, [r7, #12]
 80354dc:	681b      	ldr	r3, [r3, #0]
 80354de:	695b      	ldr	r3, [r3, #20]
 80354e0:	61bb      	str	r3, [r7, #24]
 80354e2:	68fb      	ldr	r3, [r7, #12]
 80354e4:	681b      	ldr	r3, [r3, #0]
 80354e6:	699b      	ldr	r3, [r3, #24]
 80354e8:	61bb      	str	r3, [r7, #24]
 80354ea:	69bb      	ldr	r3, [r7, #24]
 80354ec:	e14c      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80354ee:	68fb      	ldr	r3, [r7, #12]
 80354f0:	681b      	ldr	r3, [r3, #0]
 80354f2:	681a      	ldr	r2, [r3, #0]
 80354f4:	68fb      	ldr	r3, [r7, #12]
 80354f6:	681b      	ldr	r3, [r3, #0]
 80354f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80354fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80354fe:	2300      	movs	r3, #0
 8035500:	617b      	str	r3, [r7, #20]
 8035502:	68fb      	ldr	r3, [r7, #12]
 8035504:	681b      	ldr	r3, [r3, #0]
 8035506:	695b      	ldr	r3, [r3, #20]
 8035508:	617b      	str	r3, [r7, #20]
 803550a:	68fb      	ldr	r3, [r7, #12]
 803550c:	681b      	ldr	r3, [r3, #0]
 803550e:	699b      	ldr	r3, [r3, #24]
 8035510:	617b      	str	r3, [r7, #20]
 8035512:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8035514:	e138      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8035516:	68fb      	ldr	r3, [r7, #12]
 8035518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803551a:	2b03      	cmp	r3, #3
 803551c:	f200 80f1 	bhi.w	8035702 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8035520:	68fb      	ldr	r3, [r7, #12]
 8035522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035524:	2b01      	cmp	r3, #1
 8035526:	d123      	bne.n	8035570 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8035528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803552a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803552c:	68f8      	ldr	r0, [r7, #12]
 803552e:	f000 fbed 	bl	8035d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8035532:	4603      	mov	r3, r0
 8035534:	2b00      	cmp	r3, #0
 8035536:	d001      	beq.n	803553c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8035538:	2301      	movs	r3, #1
 803553a:	e139      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803553c:	68fb      	ldr	r3, [r7, #12]
 803553e:	681b      	ldr	r3, [r3, #0]
 8035540:	691a      	ldr	r2, [r3, #16]
 8035542:	68fb      	ldr	r3, [r7, #12]
 8035544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035546:	b2d2      	uxtb	r2, r2
 8035548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 803554a:	68fb      	ldr	r3, [r7, #12]
 803554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803554e:	1c5a      	adds	r2, r3, #1
 8035550:	68fb      	ldr	r3, [r7, #12]
 8035552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8035554:	68fb      	ldr	r3, [r7, #12]
 8035556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035558:	3b01      	subs	r3, #1
 803555a:	b29a      	uxth	r2, r3
 803555c:	68fb      	ldr	r3, [r7, #12]
 803555e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8035560:	68fb      	ldr	r3, [r7, #12]
 8035562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8035564:	b29b      	uxth	r3, r3
 8035566:	3b01      	subs	r3, #1
 8035568:	b29a      	uxth	r2, r3
 803556a:	68fb      	ldr	r3, [r7, #12]
 803556c:	855a      	strh	r2, [r3, #42]	; 0x2a
 803556e:	e10b      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8035570:	68fb      	ldr	r3, [r7, #12]
 8035572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035574:	2b02      	cmp	r3, #2
 8035576:	d14e      	bne.n	8035616 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8035578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803557a:	9300      	str	r3, [sp, #0]
 803557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803557e:	2200      	movs	r2, #0
 8035580:	4906      	ldr	r1, [pc, #24]	; (803559c <HAL_I2C_Master_Receive+0x22c>)
 8035582:	68f8      	ldr	r0, [r7, #12]
 8035584:	f000 fa6a 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 8035588:	4603      	mov	r3, r0
 803558a:	2b00      	cmp	r3, #0
 803558c:	d008      	beq.n	80355a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 803558e:	2301      	movs	r3, #1
 8035590:	e10e      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
 8035592:	bf00      	nop
 8035594:	00100002 	.word	0x00100002
 8035598:	ffff0000 	.word	0xffff0000
 803559c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80355a0:	68fb      	ldr	r3, [r7, #12]
 80355a2:	681b      	ldr	r3, [r3, #0]
 80355a4:	681a      	ldr	r2, [r3, #0]
 80355a6:	68fb      	ldr	r3, [r7, #12]
 80355a8:	681b      	ldr	r3, [r3, #0]
 80355aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80355ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80355b0:	68fb      	ldr	r3, [r7, #12]
 80355b2:	681b      	ldr	r3, [r3, #0]
 80355b4:	691a      	ldr	r2, [r3, #16]
 80355b6:	68fb      	ldr	r3, [r7, #12]
 80355b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80355ba:	b2d2      	uxtb	r2, r2
 80355bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80355be:	68fb      	ldr	r3, [r7, #12]
 80355c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80355c2:	1c5a      	adds	r2, r3, #1
 80355c4:	68fb      	ldr	r3, [r7, #12]
 80355c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80355c8:	68fb      	ldr	r3, [r7, #12]
 80355ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80355cc:	3b01      	subs	r3, #1
 80355ce:	b29a      	uxth	r2, r3
 80355d0:	68fb      	ldr	r3, [r7, #12]
 80355d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80355d4:	68fb      	ldr	r3, [r7, #12]
 80355d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80355d8:	b29b      	uxth	r3, r3
 80355da:	3b01      	subs	r3, #1
 80355dc:	b29a      	uxth	r2, r3
 80355de:	68fb      	ldr	r3, [r7, #12]
 80355e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80355e2:	68fb      	ldr	r3, [r7, #12]
 80355e4:	681b      	ldr	r3, [r3, #0]
 80355e6:	691a      	ldr	r2, [r3, #16]
 80355e8:	68fb      	ldr	r3, [r7, #12]
 80355ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80355ec:	b2d2      	uxtb	r2, r2
 80355ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80355f0:	68fb      	ldr	r3, [r7, #12]
 80355f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80355f4:	1c5a      	adds	r2, r3, #1
 80355f6:	68fb      	ldr	r3, [r7, #12]
 80355f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80355fa:	68fb      	ldr	r3, [r7, #12]
 80355fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80355fe:	3b01      	subs	r3, #1
 8035600:	b29a      	uxth	r2, r3
 8035602:	68fb      	ldr	r3, [r7, #12]
 8035604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8035606:	68fb      	ldr	r3, [r7, #12]
 8035608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803560a:	b29b      	uxth	r3, r3
 803560c:	3b01      	subs	r3, #1
 803560e:	b29a      	uxth	r2, r3
 8035610:	68fb      	ldr	r3, [r7, #12]
 8035612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8035614:	e0b8      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8035616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035618:	9300      	str	r3, [sp, #0]
 803561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803561c:	2200      	movs	r2, #0
 803561e:	4966      	ldr	r1, [pc, #408]	; (80357b8 <HAL_I2C_Master_Receive+0x448>)
 8035620:	68f8      	ldr	r0, [r7, #12]
 8035622:	f000 fa1b 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 8035626:	4603      	mov	r3, r0
 8035628:	2b00      	cmp	r3, #0
 803562a:	d001      	beq.n	8035630 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 803562c:	2301      	movs	r3, #1
 803562e:	e0bf      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8035630:	68fb      	ldr	r3, [r7, #12]
 8035632:	681b      	ldr	r3, [r3, #0]
 8035634:	681a      	ldr	r2, [r3, #0]
 8035636:	68fb      	ldr	r3, [r7, #12]
 8035638:	681b      	ldr	r3, [r3, #0]
 803563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 803563e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8035640:	68fb      	ldr	r3, [r7, #12]
 8035642:	681b      	ldr	r3, [r3, #0]
 8035644:	691a      	ldr	r2, [r3, #16]
 8035646:	68fb      	ldr	r3, [r7, #12]
 8035648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803564a:	b2d2      	uxtb	r2, r2
 803564c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 803564e:	68fb      	ldr	r3, [r7, #12]
 8035650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035652:	1c5a      	adds	r2, r3, #1
 8035654:	68fb      	ldr	r3, [r7, #12]
 8035656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8035658:	68fb      	ldr	r3, [r7, #12]
 803565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803565c:	3b01      	subs	r3, #1
 803565e:	b29a      	uxth	r2, r3
 8035660:	68fb      	ldr	r3, [r7, #12]
 8035662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8035664:	68fb      	ldr	r3, [r7, #12]
 8035666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8035668:	b29b      	uxth	r3, r3
 803566a:	3b01      	subs	r3, #1
 803566c:	b29a      	uxth	r2, r3
 803566e:	68fb      	ldr	r3, [r7, #12]
 8035670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8035672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035674:	9300      	str	r3, [sp, #0]
 8035676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035678:	2200      	movs	r2, #0
 803567a:	494f      	ldr	r1, [pc, #316]	; (80357b8 <HAL_I2C_Master_Receive+0x448>)
 803567c:	68f8      	ldr	r0, [r7, #12]
 803567e:	f000 f9ed 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 8035682:	4603      	mov	r3, r0
 8035684:	2b00      	cmp	r3, #0
 8035686:	d001      	beq.n	803568c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8035688:	2301      	movs	r3, #1
 803568a:	e091      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803568c:	68fb      	ldr	r3, [r7, #12]
 803568e:	681b      	ldr	r3, [r3, #0]
 8035690:	681a      	ldr	r2, [r3, #0]
 8035692:	68fb      	ldr	r3, [r7, #12]
 8035694:	681b      	ldr	r3, [r3, #0]
 8035696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803569a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 803569c:	68fb      	ldr	r3, [r7, #12]
 803569e:	681b      	ldr	r3, [r3, #0]
 80356a0:	691a      	ldr	r2, [r3, #16]
 80356a2:	68fb      	ldr	r3, [r7, #12]
 80356a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356a6:	b2d2      	uxtb	r2, r2
 80356a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80356aa:	68fb      	ldr	r3, [r7, #12]
 80356ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356ae:	1c5a      	adds	r2, r3, #1
 80356b0:	68fb      	ldr	r3, [r7, #12]
 80356b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80356b4:	68fb      	ldr	r3, [r7, #12]
 80356b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80356b8:	3b01      	subs	r3, #1
 80356ba:	b29a      	uxth	r2, r3
 80356bc:	68fb      	ldr	r3, [r7, #12]
 80356be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80356c0:	68fb      	ldr	r3, [r7, #12]
 80356c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80356c4:	b29b      	uxth	r3, r3
 80356c6:	3b01      	subs	r3, #1
 80356c8:	b29a      	uxth	r2, r3
 80356ca:	68fb      	ldr	r3, [r7, #12]
 80356cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80356ce:	68fb      	ldr	r3, [r7, #12]
 80356d0:	681b      	ldr	r3, [r3, #0]
 80356d2:	691a      	ldr	r2, [r3, #16]
 80356d4:	68fb      	ldr	r3, [r7, #12]
 80356d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356d8:	b2d2      	uxtb	r2, r2
 80356da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80356dc:	68fb      	ldr	r3, [r7, #12]
 80356de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356e0:	1c5a      	adds	r2, r3, #1
 80356e2:	68fb      	ldr	r3, [r7, #12]
 80356e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80356e6:	68fb      	ldr	r3, [r7, #12]
 80356e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80356ea:	3b01      	subs	r3, #1
 80356ec:	b29a      	uxth	r2, r3
 80356ee:	68fb      	ldr	r3, [r7, #12]
 80356f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80356f2:	68fb      	ldr	r3, [r7, #12]
 80356f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80356f6:	b29b      	uxth	r3, r3
 80356f8:	3b01      	subs	r3, #1
 80356fa:	b29a      	uxth	r2, r3
 80356fc:	68fb      	ldr	r3, [r7, #12]
 80356fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8035700:	e042      	b.n	8035788 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8035702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8035704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8035706:	68f8      	ldr	r0, [r7, #12]
 8035708:	f000 fb00 	bl	8035d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 803570c:	4603      	mov	r3, r0
 803570e:	2b00      	cmp	r3, #0
 8035710:	d001      	beq.n	8035716 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8035712:	2301      	movs	r3, #1
 8035714:	e04c      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8035716:	68fb      	ldr	r3, [r7, #12]
 8035718:	681b      	ldr	r3, [r3, #0]
 803571a:	691a      	ldr	r2, [r3, #16]
 803571c:	68fb      	ldr	r3, [r7, #12]
 803571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035720:	b2d2      	uxtb	r2, r2
 8035722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8035724:	68fb      	ldr	r3, [r7, #12]
 8035726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035728:	1c5a      	adds	r2, r3, #1
 803572a:	68fb      	ldr	r3, [r7, #12]
 803572c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 803572e:	68fb      	ldr	r3, [r7, #12]
 8035730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035732:	3b01      	subs	r3, #1
 8035734:	b29a      	uxth	r2, r3
 8035736:	68fb      	ldr	r3, [r7, #12]
 8035738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 803573a:	68fb      	ldr	r3, [r7, #12]
 803573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803573e:	b29b      	uxth	r3, r3
 8035740:	3b01      	subs	r3, #1
 8035742:	b29a      	uxth	r2, r3
 8035744:	68fb      	ldr	r3, [r7, #12]
 8035746:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8035748:	68fb      	ldr	r3, [r7, #12]
 803574a:	681b      	ldr	r3, [r3, #0]
 803574c:	695b      	ldr	r3, [r3, #20]
 803574e:	f003 0304 	and.w	r3, r3, #4
 8035752:	2b04      	cmp	r3, #4
 8035754:	d118      	bne.n	8035788 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8035756:	68fb      	ldr	r3, [r7, #12]
 8035758:	681b      	ldr	r3, [r3, #0]
 803575a:	691a      	ldr	r2, [r3, #16]
 803575c:	68fb      	ldr	r3, [r7, #12]
 803575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035760:	b2d2      	uxtb	r2, r2
 8035762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8035764:	68fb      	ldr	r3, [r7, #12]
 8035766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035768:	1c5a      	adds	r2, r3, #1
 803576a:	68fb      	ldr	r3, [r7, #12]
 803576c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 803576e:	68fb      	ldr	r3, [r7, #12]
 8035770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035772:	3b01      	subs	r3, #1
 8035774:	b29a      	uxth	r2, r3
 8035776:	68fb      	ldr	r3, [r7, #12]
 8035778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 803577a:	68fb      	ldr	r3, [r7, #12]
 803577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803577e:	b29b      	uxth	r3, r3
 8035780:	3b01      	subs	r3, #1
 8035782:	b29a      	uxth	r2, r3
 8035784:	68fb      	ldr	r3, [r7, #12]
 8035786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8035788:	68fb      	ldr	r3, [r7, #12]
 803578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803578c:	2b00      	cmp	r3, #0
 803578e:	f47f aec2 	bne.w	8035516 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8035792:	68fb      	ldr	r3, [r7, #12]
 8035794:	2220      	movs	r2, #32
 8035796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 803579a:	68fb      	ldr	r3, [r7, #12]
 803579c:	2200      	movs	r2, #0
 803579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80357a2:	68fb      	ldr	r3, [r7, #12]
 80357a4:	2200      	movs	r2, #0
 80357a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80357aa:	2300      	movs	r3, #0
 80357ac:	e000      	b.n	80357b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80357ae:	2302      	movs	r3, #2
  }
}
 80357b0:	4618      	mov	r0, r3
 80357b2:	3728      	adds	r7, #40	; 0x28
 80357b4:	46bd      	mov	sp, r7
 80357b6:	bd80      	pop	{r7, pc}
 80357b8:	00010004 	.word	0x00010004

080357bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80357bc:	b580      	push	{r7, lr}
 80357be:	b088      	sub	sp, #32
 80357c0:	af02      	add	r7, sp, #8
 80357c2:	60f8      	str	r0, [r7, #12]
 80357c4:	607a      	str	r2, [r7, #4]
 80357c6:	603b      	str	r3, [r7, #0]
 80357c8:	460b      	mov	r3, r1
 80357ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80357cc:	68fb      	ldr	r3, [r7, #12]
 80357ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80357d2:	697b      	ldr	r3, [r7, #20]
 80357d4:	2b08      	cmp	r3, #8
 80357d6:	d006      	beq.n	80357e6 <I2C_MasterRequestWrite+0x2a>
 80357d8:	697b      	ldr	r3, [r7, #20]
 80357da:	2b01      	cmp	r3, #1
 80357dc:	d003      	beq.n	80357e6 <I2C_MasterRequestWrite+0x2a>
 80357de:	697b      	ldr	r3, [r7, #20]
 80357e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80357e4:	d108      	bne.n	80357f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80357e6:	68fb      	ldr	r3, [r7, #12]
 80357e8:	681b      	ldr	r3, [r3, #0]
 80357ea:	681a      	ldr	r2, [r3, #0]
 80357ec:	68fb      	ldr	r3, [r7, #12]
 80357ee:	681b      	ldr	r3, [r3, #0]
 80357f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80357f4:	601a      	str	r2, [r3, #0]
 80357f6:	e00b      	b.n	8035810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80357f8:	68fb      	ldr	r3, [r7, #12]
 80357fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80357fc:	2b12      	cmp	r3, #18
 80357fe:	d107      	bne.n	8035810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8035800:	68fb      	ldr	r3, [r7, #12]
 8035802:	681b      	ldr	r3, [r3, #0]
 8035804:	681a      	ldr	r2, [r3, #0]
 8035806:	68fb      	ldr	r3, [r7, #12]
 8035808:	681b      	ldr	r3, [r3, #0]
 803580a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803580e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8035810:	683b      	ldr	r3, [r7, #0]
 8035812:	9300      	str	r3, [sp, #0]
 8035814:	687b      	ldr	r3, [r7, #4]
 8035816:	2200      	movs	r2, #0
 8035818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 803581c:	68f8      	ldr	r0, [r7, #12]
 803581e:	f000 f91d 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 8035822:	4603      	mov	r3, r0
 8035824:	2b00      	cmp	r3, #0
 8035826:	d00d      	beq.n	8035844 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8035828:	68fb      	ldr	r3, [r7, #12]
 803582a:	681b      	ldr	r3, [r3, #0]
 803582c:	681b      	ldr	r3, [r3, #0]
 803582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035836:	d103      	bne.n	8035840 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8035838:	68fb      	ldr	r3, [r7, #12]
 803583a:	f44f 7200 	mov.w	r2, #512	; 0x200
 803583e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8035840:	2303      	movs	r3, #3
 8035842:	e035      	b.n	80358b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8035844:	68fb      	ldr	r3, [r7, #12]
 8035846:	691b      	ldr	r3, [r3, #16]
 8035848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803584c:	d108      	bne.n	8035860 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 803584e:	897b      	ldrh	r3, [r7, #10]
 8035850:	b2db      	uxtb	r3, r3
 8035852:	461a      	mov	r2, r3
 8035854:	68fb      	ldr	r3, [r7, #12]
 8035856:	681b      	ldr	r3, [r3, #0]
 8035858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 803585c:	611a      	str	r2, [r3, #16]
 803585e:	e01b      	b.n	8035898 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8035860:	897b      	ldrh	r3, [r7, #10]
 8035862:	11db      	asrs	r3, r3, #7
 8035864:	b2db      	uxtb	r3, r3
 8035866:	f003 0306 	and.w	r3, r3, #6
 803586a:	b2db      	uxtb	r3, r3
 803586c:	f063 030f 	orn	r3, r3, #15
 8035870:	b2da      	uxtb	r2, r3
 8035872:	68fb      	ldr	r3, [r7, #12]
 8035874:	681b      	ldr	r3, [r3, #0]
 8035876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8035878:	683b      	ldr	r3, [r7, #0]
 803587a:	687a      	ldr	r2, [r7, #4]
 803587c:	490e      	ldr	r1, [pc, #56]	; (80358b8 <I2C_MasterRequestWrite+0xfc>)
 803587e:	68f8      	ldr	r0, [r7, #12]
 8035880:	f000 f943 	bl	8035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8035884:	4603      	mov	r3, r0
 8035886:	2b00      	cmp	r3, #0
 8035888:	d001      	beq.n	803588e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 803588a:	2301      	movs	r3, #1
 803588c:	e010      	b.n	80358b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 803588e:	897b      	ldrh	r3, [r7, #10]
 8035890:	b2da      	uxtb	r2, r3
 8035892:	68fb      	ldr	r3, [r7, #12]
 8035894:	681b      	ldr	r3, [r3, #0]
 8035896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8035898:	683b      	ldr	r3, [r7, #0]
 803589a:	687a      	ldr	r2, [r7, #4]
 803589c:	4907      	ldr	r1, [pc, #28]	; (80358bc <I2C_MasterRequestWrite+0x100>)
 803589e:	68f8      	ldr	r0, [r7, #12]
 80358a0:	f000 f933 	bl	8035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80358a4:	4603      	mov	r3, r0
 80358a6:	2b00      	cmp	r3, #0
 80358a8:	d001      	beq.n	80358ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80358aa:	2301      	movs	r3, #1
 80358ac:	e000      	b.n	80358b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80358ae:	2300      	movs	r3, #0
}
 80358b0:	4618      	mov	r0, r3
 80358b2:	3718      	adds	r7, #24
 80358b4:	46bd      	mov	sp, r7
 80358b6:	bd80      	pop	{r7, pc}
 80358b8:	00010008 	.word	0x00010008
 80358bc:	00010002 	.word	0x00010002

080358c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80358c0:	b580      	push	{r7, lr}
 80358c2:	b088      	sub	sp, #32
 80358c4:	af02      	add	r7, sp, #8
 80358c6:	60f8      	str	r0, [r7, #12]
 80358c8:	607a      	str	r2, [r7, #4]
 80358ca:	603b      	str	r3, [r7, #0]
 80358cc:	460b      	mov	r3, r1
 80358ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80358d0:	68fb      	ldr	r3, [r7, #12]
 80358d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80358d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80358d6:	68fb      	ldr	r3, [r7, #12]
 80358d8:	681b      	ldr	r3, [r3, #0]
 80358da:	681a      	ldr	r2, [r3, #0]
 80358dc:	68fb      	ldr	r3, [r7, #12]
 80358de:	681b      	ldr	r3, [r3, #0]
 80358e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80358e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80358e6:	697b      	ldr	r3, [r7, #20]
 80358e8:	2b08      	cmp	r3, #8
 80358ea:	d006      	beq.n	80358fa <I2C_MasterRequestRead+0x3a>
 80358ec:	697b      	ldr	r3, [r7, #20]
 80358ee:	2b01      	cmp	r3, #1
 80358f0:	d003      	beq.n	80358fa <I2C_MasterRequestRead+0x3a>
 80358f2:	697b      	ldr	r3, [r7, #20]
 80358f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80358f8:	d108      	bne.n	803590c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80358fa:	68fb      	ldr	r3, [r7, #12]
 80358fc:	681b      	ldr	r3, [r3, #0]
 80358fe:	681a      	ldr	r2, [r3, #0]
 8035900:	68fb      	ldr	r3, [r7, #12]
 8035902:	681b      	ldr	r3, [r3, #0]
 8035904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035908:	601a      	str	r2, [r3, #0]
 803590a:	e00b      	b.n	8035924 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 803590c:	68fb      	ldr	r3, [r7, #12]
 803590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035910:	2b11      	cmp	r3, #17
 8035912:	d107      	bne.n	8035924 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8035914:	68fb      	ldr	r3, [r7, #12]
 8035916:	681b      	ldr	r3, [r3, #0]
 8035918:	681a      	ldr	r2, [r3, #0]
 803591a:	68fb      	ldr	r3, [r7, #12]
 803591c:	681b      	ldr	r3, [r3, #0]
 803591e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8035924:	683b      	ldr	r3, [r7, #0]
 8035926:	9300      	str	r3, [sp, #0]
 8035928:	687b      	ldr	r3, [r7, #4]
 803592a:	2200      	movs	r2, #0
 803592c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8035930:	68f8      	ldr	r0, [r7, #12]
 8035932:	f000 f893 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 8035936:	4603      	mov	r3, r0
 8035938:	2b00      	cmp	r3, #0
 803593a:	d00d      	beq.n	8035958 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 803593c:	68fb      	ldr	r3, [r7, #12]
 803593e:	681b      	ldr	r3, [r3, #0]
 8035940:	681b      	ldr	r3, [r3, #0]
 8035942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803594a:	d103      	bne.n	8035954 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 803594c:	68fb      	ldr	r3, [r7, #12]
 803594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8035952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8035954:	2303      	movs	r3, #3
 8035956:	e079      	b.n	8035a4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8035958:	68fb      	ldr	r3, [r7, #12]
 803595a:	691b      	ldr	r3, [r3, #16]
 803595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035960:	d108      	bne.n	8035974 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8035962:	897b      	ldrh	r3, [r7, #10]
 8035964:	b2db      	uxtb	r3, r3
 8035966:	f043 0301 	orr.w	r3, r3, #1
 803596a:	b2da      	uxtb	r2, r3
 803596c:	68fb      	ldr	r3, [r7, #12]
 803596e:	681b      	ldr	r3, [r3, #0]
 8035970:	611a      	str	r2, [r3, #16]
 8035972:	e05f      	b.n	8035a34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8035974:	897b      	ldrh	r3, [r7, #10]
 8035976:	11db      	asrs	r3, r3, #7
 8035978:	b2db      	uxtb	r3, r3
 803597a:	f003 0306 	and.w	r3, r3, #6
 803597e:	b2db      	uxtb	r3, r3
 8035980:	f063 030f 	orn	r3, r3, #15
 8035984:	b2da      	uxtb	r2, r3
 8035986:	68fb      	ldr	r3, [r7, #12]
 8035988:	681b      	ldr	r3, [r3, #0]
 803598a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 803598c:	683b      	ldr	r3, [r7, #0]
 803598e:	687a      	ldr	r2, [r7, #4]
 8035990:	4930      	ldr	r1, [pc, #192]	; (8035a54 <I2C_MasterRequestRead+0x194>)
 8035992:	68f8      	ldr	r0, [r7, #12]
 8035994:	f000 f8b9 	bl	8035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8035998:	4603      	mov	r3, r0
 803599a:	2b00      	cmp	r3, #0
 803599c:	d001      	beq.n	80359a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 803599e:	2301      	movs	r3, #1
 80359a0:	e054      	b.n	8035a4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80359a2:	897b      	ldrh	r3, [r7, #10]
 80359a4:	b2da      	uxtb	r2, r3
 80359a6:	68fb      	ldr	r3, [r7, #12]
 80359a8:	681b      	ldr	r3, [r3, #0]
 80359aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80359ac:	683b      	ldr	r3, [r7, #0]
 80359ae:	687a      	ldr	r2, [r7, #4]
 80359b0:	4929      	ldr	r1, [pc, #164]	; (8035a58 <I2C_MasterRequestRead+0x198>)
 80359b2:	68f8      	ldr	r0, [r7, #12]
 80359b4:	f000 f8a9 	bl	8035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80359b8:	4603      	mov	r3, r0
 80359ba:	2b00      	cmp	r3, #0
 80359bc:	d001      	beq.n	80359c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80359be:	2301      	movs	r3, #1
 80359c0:	e044      	b.n	8035a4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80359c2:	2300      	movs	r3, #0
 80359c4:	613b      	str	r3, [r7, #16]
 80359c6:	68fb      	ldr	r3, [r7, #12]
 80359c8:	681b      	ldr	r3, [r3, #0]
 80359ca:	695b      	ldr	r3, [r3, #20]
 80359cc:	613b      	str	r3, [r7, #16]
 80359ce:	68fb      	ldr	r3, [r7, #12]
 80359d0:	681b      	ldr	r3, [r3, #0]
 80359d2:	699b      	ldr	r3, [r3, #24]
 80359d4:	613b      	str	r3, [r7, #16]
 80359d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80359d8:	68fb      	ldr	r3, [r7, #12]
 80359da:	681b      	ldr	r3, [r3, #0]
 80359dc:	681a      	ldr	r2, [r3, #0]
 80359de:	68fb      	ldr	r3, [r7, #12]
 80359e0:	681b      	ldr	r3, [r3, #0]
 80359e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80359e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80359e8:	683b      	ldr	r3, [r7, #0]
 80359ea:	9300      	str	r3, [sp, #0]
 80359ec:	687b      	ldr	r3, [r7, #4]
 80359ee:	2200      	movs	r2, #0
 80359f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80359f4:	68f8      	ldr	r0, [r7, #12]
 80359f6:	f000 f831 	bl	8035a5c <I2C_WaitOnFlagUntilTimeout>
 80359fa:	4603      	mov	r3, r0
 80359fc:	2b00      	cmp	r3, #0
 80359fe:	d00d      	beq.n	8035a1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8035a00:	68fb      	ldr	r3, [r7, #12]
 8035a02:	681b      	ldr	r3, [r3, #0]
 8035a04:	681b      	ldr	r3, [r3, #0]
 8035a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035a0e:	d103      	bne.n	8035a18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8035a10:	68fb      	ldr	r3, [r7, #12]
 8035a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8035a16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8035a18:	2303      	movs	r3, #3
 8035a1a:	e017      	b.n	8035a4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8035a1c:	897b      	ldrh	r3, [r7, #10]
 8035a1e:	11db      	asrs	r3, r3, #7
 8035a20:	b2db      	uxtb	r3, r3
 8035a22:	f003 0306 	and.w	r3, r3, #6
 8035a26:	b2db      	uxtb	r3, r3
 8035a28:	f063 030e 	orn	r3, r3, #14
 8035a2c:	b2da      	uxtb	r2, r3
 8035a2e:	68fb      	ldr	r3, [r7, #12]
 8035a30:	681b      	ldr	r3, [r3, #0]
 8035a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8035a34:	683b      	ldr	r3, [r7, #0]
 8035a36:	687a      	ldr	r2, [r7, #4]
 8035a38:	4907      	ldr	r1, [pc, #28]	; (8035a58 <I2C_MasterRequestRead+0x198>)
 8035a3a:	68f8      	ldr	r0, [r7, #12]
 8035a3c:	f000 f865 	bl	8035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8035a40:	4603      	mov	r3, r0
 8035a42:	2b00      	cmp	r3, #0
 8035a44:	d001      	beq.n	8035a4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8035a46:	2301      	movs	r3, #1
 8035a48:	e000      	b.n	8035a4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8035a4a:	2300      	movs	r3, #0
}
 8035a4c:	4618      	mov	r0, r3
 8035a4e:	3718      	adds	r7, #24
 8035a50:	46bd      	mov	sp, r7
 8035a52:	bd80      	pop	{r7, pc}
 8035a54:	00010008 	.word	0x00010008
 8035a58:	00010002 	.word	0x00010002

08035a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8035a5c:	b580      	push	{r7, lr}
 8035a5e:	b084      	sub	sp, #16
 8035a60:	af00      	add	r7, sp, #0
 8035a62:	60f8      	str	r0, [r7, #12]
 8035a64:	60b9      	str	r1, [r7, #8]
 8035a66:	603b      	str	r3, [r7, #0]
 8035a68:	4613      	mov	r3, r2
 8035a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8035a6c:	e025      	b.n	8035aba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8035a6e:	683b      	ldr	r3, [r7, #0]
 8035a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035a74:	d021      	beq.n	8035aba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8035a76:	f7fe fb0d 	bl	8034094 <HAL_GetTick>
 8035a7a:	4602      	mov	r2, r0
 8035a7c:	69bb      	ldr	r3, [r7, #24]
 8035a7e:	1ad3      	subs	r3, r2, r3
 8035a80:	683a      	ldr	r2, [r7, #0]
 8035a82:	429a      	cmp	r2, r3
 8035a84:	d302      	bcc.n	8035a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8035a86:	683b      	ldr	r3, [r7, #0]
 8035a88:	2b00      	cmp	r3, #0
 8035a8a:	d116      	bne.n	8035aba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8035a8c:	68fb      	ldr	r3, [r7, #12]
 8035a8e:	2200      	movs	r2, #0
 8035a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8035a92:	68fb      	ldr	r3, [r7, #12]
 8035a94:	2220      	movs	r2, #32
 8035a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8035a9a:	68fb      	ldr	r3, [r7, #12]
 8035a9c:	2200      	movs	r2, #0
 8035a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8035aa2:	68fb      	ldr	r3, [r7, #12]
 8035aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035aa6:	f043 0220 	orr.w	r2, r3, #32
 8035aaa:	68fb      	ldr	r3, [r7, #12]
 8035aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8035aae:	68fb      	ldr	r3, [r7, #12]
 8035ab0:	2200      	movs	r2, #0
 8035ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8035ab6:	2301      	movs	r3, #1
 8035ab8:	e023      	b.n	8035b02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8035aba:	68bb      	ldr	r3, [r7, #8]
 8035abc:	0c1b      	lsrs	r3, r3, #16
 8035abe:	b2db      	uxtb	r3, r3
 8035ac0:	2b01      	cmp	r3, #1
 8035ac2:	d10d      	bne.n	8035ae0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8035ac4:	68fb      	ldr	r3, [r7, #12]
 8035ac6:	681b      	ldr	r3, [r3, #0]
 8035ac8:	695b      	ldr	r3, [r3, #20]
 8035aca:	43da      	mvns	r2, r3
 8035acc:	68bb      	ldr	r3, [r7, #8]
 8035ace:	4013      	ands	r3, r2
 8035ad0:	b29b      	uxth	r3, r3
 8035ad2:	2b00      	cmp	r3, #0
 8035ad4:	bf0c      	ite	eq
 8035ad6:	2301      	moveq	r3, #1
 8035ad8:	2300      	movne	r3, #0
 8035ada:	b2db      	uxtb	r3, r3
 8035adc:	461a      	mov	r2, r3
 8035ade:	e00c      	b.n	8035afa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8035ae0:	68fb      	ldr	r3, [r7, #12]
 8035ae2:	681b      	ldr	r3, [r3, #0]
 8035ae4:	699b      	ldr	r3, [r3, #24]
 8035ae6:	43da      	mvns	r2, r3
 8035ae8:	68bb      	ldr	r3, [r7, #8]
 8035aea:	4013      	ands	r3, r2
 8035aec:	b29b      	uxth	r3, r3
 8035aee:	2b00      	cmp	r3, #0
 8035af0:	bf0c      	ite	eq
 8035af2:	2301      	moveq	r3, #1
 8035af4:	2300      	movne	r3, #0
 8035af6:	b2db      	uxtb	r3, r3
 8035af8:	461a      	mov	r2, r3
 8035afa:	79fb      	ldrb	r3, [r7, #7]
 8035afc:	429a      	cmp	r2, r3
 8035afe:	d0b6      	beq.n	8035a6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8035b00:	2300      	movs	r3, #0
}
 8035b02:	4618      	mov	r0, r3
 8035b04:	3710      	adds	r7, #16
 8035b06:	46bd      	mov	sp, r7
 8035b08:	bd80      	pop	{r7, pc}

08035b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8035b0a:	b580      	push	{r7, lr}
 8035b0c:	b084      	sub	sp, #16
 8035b0e:	af00      	add	r7, sp, #0
 8035b10:	60f8      	str	r0, [r7, #12]
 8035b12:	60b9      	str	r1, [r7, #8]
 8035b14:	607a      	str	r2, [r7, #4]
 8035b16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8035b18:	e051      	b.n	8035bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8035b1a:	68fb      	ldr	r3, [r7, #12]
 8035b1c:	681b      	ldr	r3, [r3, #0]
 8035b1e:	695b      	ldr	r3, [r3, #20]
 8035b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8035b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035b28:	d123      	bne.n	8035b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8035b2a:	68fb      	ldr	r3, [r7, #12]
 8035b2c:	681b      	ldr	r3, [r3, #0]
 8035b2e:	681a      	ldr	r2, [r3, #0]
 8035b30:	68fb      	ldr	r3, [r7, #12]
 8035b32:	681b      	ldr	r3, [r3, #0]
 8035b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8035b38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8035b3a:	68fb      	ldr	r3, [r7, #12]
 8035b3c:	681b      	ldr	r3, [r3, #0]
 8035b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8035b42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8035b44:	68fb      	ldr	r3, [r7, #12]
 8035b46:	2200      	movs	r2, #0
 8035b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8035b4a:	68fb      	ldr	r3, [r7, #12]
 8035b4c:	2220      	movs	r2, #32
 8035b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035b52:	68fb      	ldr	r3, [r7, #12]
 8035b54:	2200      	movs	r2, #0
 8035b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8035b5a:	68fb      	ldr	r3, [r7, #12]
 8035b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035b5e:	f043 0204 	orr.w	r2, r3, #4
 8035b62:	68fb      	ldr	r3, [r7, #12]
 8035b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8035b66:	68fb      	ldr	r3, [r7, #12]
 8035b68:	2200      	movs	r2, #0
 8035b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8035b6e:	2301      	movs	r3, #1
 8035b70:	e046      	b.n	8035c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8035b72:	687b      	ldr	r3, [r7, #4]
 8035b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035b78:	d021      	beq.n	8035bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8035b7a:	f7fe fa8b 	bl	8034094 <HAL_GetTick>
 8035b7e:	4602      	mov	r2, r0
 8035b80:	683b      	ldr	r3, [r7, #0]
 8035b82:	1ad3      	subs	r3, r2, r3
 8035b84:	687a      	ldr	r2, [r7, #4]
 8035b86:	429a      	cmp	r2, r3
 8035b88:	d302      	bcc.n	8035b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8035b8a:	687b      	ldr	r3, [r7, #4]
 8035b8c:	2b00      	cmp	r3, #0
 8035b8e:	d116      	bne.n	8035bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8035b90:	68fb      	ldr	r3, [r7, #12]
 8035b92:	2200      	movs	r2, #0
 8035b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8035b96:	68fb      	ldr	r3, [r7, #12]
 8035b98:	2220      	movs	r2, #32
 8035b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035b9e:	68fb      	ldr	r3, [r7, #12]
 8035ba0:	2200      	movs	r2, #0
 8035ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8035ba6:	68fb      	ldr	r3, [r7, #12]
 8035ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035baa:	f043 0220 	orr.w	r2, r3, #32
 8035bae:	68fb      	ldr	r3, [r7, #12]
 8035bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8035bb2:	68fb      	ldr	r3, [r7, #12]
 8035bb4:	2200      	movs	r2, #0
 8035bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8035bba:	2301      	movs	r3, #1
 8035bbc:	e020      	b.n	8035c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8035bbe:	68bb      	ldr	r3, [r7, #8]
 8035bc0:	0c1b      	lsrs	r3, r3, #16
 8035bc2:	b2db      	uxtb	r3, r3
 8035bc4:	2b01      	cmp	r3, #1
 8035bc6:	d10c      	bne.n	8035be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8035bc8:	68fb      	ldr	r3, [r7, #12]
 8035bca:	681b      	ldr	r3, [r3, #0]
 8035bcc:	695b      	ldr	r3, [r3, #20]
 8035bce:	43da      	mvns	r2, r3
 8035bd0:	68bb      	ldr	r3, [r7, #8]
 8035bd2:	4013      	ands	r3, r2
 8035bd4:	b29b      	uxth	r3, r3
 8035bd6:	2b00      	cmp	r3, #0
 8035bd8:	bf14      	ite	ne
 8035bda:	2301      	movne	r3, #1
 8035bdc:	2300      	moveq	r3, #0
 8035bde:	b2db      	uxtb	r3, r3
 8035be0:	e00b      	b.n	8035bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8035be2:	68fb      	ldr	r3, [r7, #12]
 8035be4:	681b      	ldr	r3, [r3, #0]
 8035be6:	699b      	ldr	r3, [r3, #24]
 8035be8:	43da      	mvns	r2, r3
 8035bea:	68bb      	ldr	r3, [r7, #8]
 8035bec:	4013      	ands	r3, r2
 8035bee:	b29b      	uxth	r3, r3
 8035bf0:	2b00      	cmp	r3, #0
 8035bf2:	bf14      	ite	ne
 8035bf4:	2301      	movne	r3, #1
 8035bf6:	2300      	moveq	r3, #0
 8035bf8:	b2db      	uxtb	r3, r3
 8035bfa:	2b00      	cmp	r3, #0
 8035bfc:	d18d      	bne.n	8035b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8035bfe:	2300      	movs	r3, #0
}
 8035c00:	4618      	mov	r0, r3
 8035c02:	3710      	adds	r7, #16
 8035c04:	46bd      	mov	sp, r7
 8035c06:	bd80      	pop	{r7, pc}

08035c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8035c08:	b580      	push	{r7, lr}
 8035c0a:	b084      	sub	sp, #16
 8035c0c:	af00      	add	r7, sp, #0
 8035c0e:	60f8      	str	r0, [r7, #12]
 8035c10:	60b9      	str	r1, [r7, #8]
 8035c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8035c14:	e02d      	b.n	8035c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8035c16:	68f8      	ldr	r0, [r7, #12]
 8035c18:	f000 f8ce 	bl	8035db8 <I2C_IsAcknowledgeFailed>
 8035c1c:	4603      	mov	r3, r0
 8035c1e:	2b00      	cmp	r3, #0
 8035c20:	d001      	beq.n	8035c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8035c22:	2301      	movs	r3, #1
 8035c24:	e02d      	b.n	8035c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8035c26:	68bb      	ldr	r3, [r7, #8]
 8035c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035c2c:	d021      	beq.n	8035c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8035c2e:	f7fe fa31 	bl	8034094 <HAL_GetTick>
 8035c32:	4602      	mov	r2, r0
 8035c34:	687b      	ldr	r3, [r7, #4]
 8035c36:	1ad3      	subs	r3, r2, r3
 8035c38:	68ba      	ldr	r2, [r7, #8]
 8035c3a:	429a      	cmp	r2, r3
 8035c3c:	d302      	bcc.n	8035c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8035c3e:	68bb      	ldr	r3, [r7, #8]
 8035c40:	2b00      	cmp	r3, #0
 8035c42:	d116      	bne.n	8035c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8035c44:	68fb      	ldr	r3, [r7, #12]
 8035c46:	2200      	movs	r2, #0
 8035c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8035c4a:	68fb      	ldr	r3, [r7, #12]
 8035c4c:	2220      	movs	r2, #32
 8035c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035c52:	68fb      	ldr	r3, [r7, #12]
 8035c54:	2200      	movs	r2, #0
 8035c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8035c5a:	68fb      	ldr	r3, [r7, #12]
 8035c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035c5e:	f043 0220 	orr.w	r2, r3, #32
 8035c62:	68fb      	ldr	r3, [r7, #12]
 8035c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8035c66:	68fb      	ldr	r3, [r7, #12]
 8035c68:	2200      	movs	r2, #0
 8035c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8035c6e:	2301      	movs	r3, #1
 8035c70:	e007      	b.n	8035c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8035c72:	68fb      	ldr	r3, [r7, #12]
 8035c74:	681b      	ldr	r3, [r3, #0]
 8035c76:	695b      	ldr	r3, [r3, #20]
 8035c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035c7c:	2b80      	cmp	r3, #128	; 0x80
 8035c7e:	d1ca      	bne.n	8035c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8035c80:	2300      	movs	r3, #0
}
 8035c82:	4618      	mov	r0, r3
 8035c84:	3710      	adds	r7, #16
 8035c86:	46bd      	mov	sp, r7
 8035c88:	bd80      	pop	{r7, pc}

08035c8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8035c8a:	b580      	push	{r7, lr}
 8035c8c:	b084      	sub	sp, #16
 8035c8e:	af00      	add	r7, sp, #0
 8035c90:	60f8      	str	r0, [r7, #12]
 8035c92:	60b9      	str	r1, [r7, #8]
 8035c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8035c96:	e02d      	b.n	8035cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8035c98:	68f8      	ldr	r0, [r7, #12]
 8035c9a:	f000 f88d 	bl	8035db8 <I2C_IsAcknowledgeFailed>
 8035c9e:	4603      	mov	r3, r0
 8035ca0:	2b00      	cmp	r3, #0
 8035ca2:	d001      	beq.n	8035ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8035ca4:	2301      	movs	r3, #1
 8035ca6:	e02d      	b.n	8035d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8035ca8:	68bb      	ldr	r3, [r7, #8]
 8035caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035cae:	d021      	beq.n	8035cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8035cb0:	f7fe f9f0 	bl	8034094 <HAL_GetTick>
 8035cb4:	4602      	mov	r2, r0
 8035cb6:	687b      	ldr	r3, [r7, #4]
 8035cb8:	1ad3      	subs	r3, r2, r3
 8035cba:	68ba      	ldr	r2, [r7, #8]
 8035cbc:	429a      	cmp	r2, r3
 8035cbe:	d302      	bcc.n	8035cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8035cc0:	68bb      	ldr	r3, [r7, #8]
 8035cc2:	2b00      	cmp	r3, #0
 8035cc4:	d116      	bne.n	8035cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8035cc6:	68fb      	ldr	r3, [r7, #12]
 8035cc8:	2200      	movs	r2, #0
 8035cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8035ccc:	68fb      	ldr	r3, [r7, #12]
 8035cce:	2220      	movs	r2, #32
 8035cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035cd4:	68fb      	ldr	r3, [r7, #12]
 8035cd6:	2200      	movs	r2, #0
 8035cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8035cdc:	68fb      	ldr	r3, [r7, #12]
 8035cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035ce0:	f043 0220 	orr.w	r2, r3, #32
 8035ce4:	68fb      	ldr	r3, [r7, #12]
 8035ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8035ce8:	68fb      	ldr	r3, [r7, #12]
 8035cea:	2200      	movs	r2, #0
 8035cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8035cf0:	2301      	movs	r3, #1
 8035cf2:	e007      	b.n	8035d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8035cf4:	68fb      	ldr	r3, [r7, #12]
 8035cf6:	681b      	ldr	r3, [r3, #0]
 8035cf8:	695b      	ldr	r3, [r3, #20]
 8035cfa:	f003 0304 	and.w	r3, r3, #4
 8035cfe:	2b04      	cmp	r3, #4
 8035d00:	d1ca      	bne.n	8035c98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8035d02:	2300      	movs	r3, #0
}
 8035d04:	4618      	mov	r0, r3
 8035d06:	3710      	adds	r7, #16
 8035d08:	46bd      	mov	sp, r7
 8035d0a:	bd80      	pop	{r7, pc}

08035d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8035d0c:	b580      	push	{r7, lr}
 8035d0e:	b084      	sub	sp, #16
 8035d10:	af00      	add	r7, sp, #0
 8035d12:	60f8      	str	r0, [r7, #12]
 8035d14:	60b9      	str	r1, [r7, #8]
 8035d16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8035d18:	e042      	b.n	8035da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8035d1a:	68fb      	ldr	r3, [r7, #12]
 8035d1c:	681b      	ldr	r3, [r3, #0]
 8035d1e:	695b      	ldr	r3, [r3, #20]
 8035d20:	f003 0310 	and.w	r3, r3, #16
 8035d24:	2b10      	cmp	r3, #16
 8035d26:	d119      	bne.n	8035d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8035d28:	68fb      	ldr	r3, [r7, #12]
 8035d2a:	681b      	ldr	r3, [r3, #0]
 8035d2c:	f06f 0210 	mvn.w	r2, #16
 8035d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8035d32:	68fb      	ldr	r3, [r7, #12]
 8035d34:	2200      	movs	r2, #0
 8035d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8035d38:	68fb      	ldr	r3, [r7, #12]
 8035d3a:	2220      	movs	r2, #32
 8035d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035d40:	68fb      	ldr	r3, [r7, #12]
 8035d42:	2200      	movs	r2, #0
 8035d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8035d48:	68fb      	ldr	r3, [r7, #12]
 8035d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8035d4c:	68fb      	ldr	r3, [r7, #12]
 8035d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8035d50:	68fb      	ldr	r3, [r7, #12]
 8035d52:	2200      	movs	r2, #0
 8035d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8035d58:	2301      	movs	r3, #1
 8035d5a:	e029      	b.n	8035db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8035d5c:	f7fe f99a 	bl	8034094 <HAL_GetTick>
 8035d60:	4602      	mov	r2, r0
 8035d62:	687b      	ldr	r3, [r7, #4]
 8035d64:	1ad3      	subs	r3, r2, r3
 8035d66:	68ba      	ldr	r2, [r7, #8]
 8035d68:	429a      	cmp	r2, r3
 8035d6a:	d302      	bcc.n	8035d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8035d6c:	68bb      	ldr	r3, [r7, #8]
 8035d6e:	2b00      	cmp	r3, #0
 8035d70:	d116      	bne.n	8035da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8035d72:	68fb      	ldr	r3, [r7, #12]
 8035d74:	2200      	movs	r2, #0
 8035d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8035d78:	68fb      	ldr	r3, [r7, #12]
 8035d7a:	2220      	movs	r2, #32
 8035d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035d80:	68fb      	ldr	r3, [r7, #12]
 8035d82:	2200      	movs	r2, #0
 8035d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8035d88:	68fb      	ldr	r3, [r7, #12]
 8035d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035d8c:	f043 0220 	orr.w	r2, r3, #32
 8035d90:	68fb      	ldr	r3, [r7, #12]
 8035d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8035d94:	68fb      	ldr	r3, [r7, #12]
 8035d96:	2200      	movs	r2, #0
 8035d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8035d9c:	2301      	movs	r3, #1
 8035d9e:	e007      	b.n	8035db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8035da0:	68fb      	ldr	r3, [r7, #12]
 8035da2:	681b      	ldr	r3, [r3, #0]
 8035da4:	695b      	ldr	r3, [r3, #20]
 8035da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035daa:	2b40      	cmp	r3, #64	; 0x40
 8035dac:	d1b5      	bne.n	8035d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8035dae:	2300      	movs	r3, #0
}
 8035db0:	4618      	mov	r0, r3
 8035db2:	3710      	adds	r7, #16
 8035db4:	46bd      	mov	sp, r7
 8035db6:	bd80      	pop	{r7, pc}

08035db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8035db8:	b480      	push	{r7}
 8035dba:	b083      	sub	sp, #12
 8035dbc:	af00      	add	r7, sp, #0
 8035dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8035dc0:	687b      	ldr	r3, [r7, #4]
 8035dc2:	681b      	ldr	r3, [r3, #0]
 8035dc4:	695b      	ldr	r3, [r3, #20]
 8035dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8035dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035dce:	d11b      	bne.n	8035e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8035dd0:	687b      	ldr	r3, [r7, #4]
 8035dd2:	681b      	ldr	r3, [r3, #0]
 8035dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8035dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8035dda:	687b      	ldr	r3, [r7, #4]
 8035ddc:	2200      	movs	r2, #0
 8035dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8035de0:	687b      	ldr	r3, [r7, #4]
 8035de2:	2220      	movs	r2, #32
 8035de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8035de8:	687b      	ldr	r3, [r7, #4]
 8035dea:	2200      	movs	r2, #0
 8035dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8035df0:	687b      	ldr	r3, [r7, #4]
 8035df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035df4:	f043 0204 	orr.w	r2, r3, #4
 8035df8:	687b      	ldr	r3, [r7, #4]
 8035dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8035dfc:	687b      	ldr	r3, [r7, #4]
 8035dfe:	2200      	movs	r2, #0
 8035e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8035e04:	2301      	movs	r3, #1
 8035e06:	e000      	b.n	8035e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8035e08:	2300      	movs	r3, #0
}
 8035e0a:	4618      	mov	r0, r3
 8035e0c:	370c      	adds	r7, #12
 8035e0e:	46bd      	mov	sp, r7
 8035e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e14:	4770      	bx	lr
	...

08035e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8035e18:	b580      	push	{r7, lr}
 8035e1a:	b088      	sub	sp, #32
 8035e1c:	af00      	add	r7, sp, #0
 8035e1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8035e20:	687b      	ldr	r3, [r7, #4]
 8035e22:	2b00      	cmp	r3, #0
 8035e24:	d101      	bne.n	8035e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8035e26:	2301      	movs	r3, #1
 8035e28:	e128      	b.n	803607c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8035e2a:	687b      	ldr	r3, [r7, #4]
 8035e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8035e30:	b2db      	uxtb	r3, r3
 8035e32:	2b00      	cmp	r3, #0
 8035e34:	d109      	bne.n	8035e4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8035e36:	687b      	ldr	r3, [r7, #4]
 8035e38:	2200      	movs	r2, #0
 8035e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8035e3e:	687b      	ldr	r3, [r7, #4]
 8035e40:	4a90      	ldr	r2, [pc, #576]	; (8036084 <HAL_I2S_Init+0x26c>)
 8035e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8035e44:	6878      	ldr	r0, [r7, #4]
 8035e46:	f7fd ff61 	bl	8033d0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8035e4a:	687b      	ldr	r3, [r7, #4]
 8035e4c:	2202      	movs	r2, #2
 8035e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8035e52:	687b      	ldr	r3, [r7, #4]
 8035e54:	681b      	ldr	r3, [r3, #0]
 8035e56:	69db      	ldr	r3, [r3, #28]
 8035e58:	687a      	ldr	r2, [r7, #4]
 8035e5a:	6812      	ldr	r2, [r2, #0]
 8035e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8035e60:	f023 030f 	bic.w	r3, r3, #15
 8035e64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8035e66:	687b      	ldr	r3, [r7, #4]
 8035e68:	681b      	ldr	r3, [r3, #0]
 8035e6a:	2202      	movs	r2, #2
 8035e6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8035e6e:	687b      	ldr	r3, [r7, #4]
 8035e70:	695b      	ldr	r3, [r3, #20]
 8035e72:	2b02      	cmp	r3, #2
 8035e74:	d060      	beq.n	8035f38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8035e76:	687b      	ldr	r3, [r7, #4]
 8035e78:	68db      	ldr	r3, [r3, #12]
 8035e7a:	2b00      	cmp	r3, #0
 8035e7c:	d102      	bne.n	8035e84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8035e7e:	2310      	movs	r3, #16
 8035e80:	617b      	str	r3, [r7, #20]
 8035e82:	e001      	b.n	8035e88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8035e84:	2320      	movs	r3, #32
 8035e86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8035e88:	687b      	ldr	r3, [r7, #4]
 8035e8a:	689b      	ldr	r3, [r3, #8]
 8035e8c:	2b20      	cmp	r3, #32
 8035e8e:	d802      	bhi.n	8035e96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8035e90:	697b      	ldr	r3, [r7, #20]
 8035e92:	005b      	lsls	r3, r3, #1
 8035e94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8035e96:	2001      	movs	r0, #1
 8035e98:	f001 faca 	bl	8037430 <HAL_RCCEx_GetPeriphCLKFreq>
 8035e9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8035e9e:	687b      	ldr	r3, [r7, #4]
 8035ea0:	691b      	ldr	r3, [r3, #16]
 8035ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035ea6:	d125      	bne.n	8035ef4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8035ea8:	687b      	ldr	r3, [r7, #4]
 8035eaa:	68db      	ldr	r3, [r3, #12]
 8035eac:	2b00      	cmp	r3, #0
 8035eae:	d010      	beq.n	8035ed2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8035eb0:	697b      	ldr	r3, [r7, #20]
 8035eb2:	009b      	lsls	r3, r3, #2
 8035eb4:	68fa      	ldr	r2, [r7, #12]
 8035eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8035eba:	4613      	mov	r3, r2
 8035ebc:	009b      	lsls	r3, r3, #2
 8035ebe:	4413      	add	r3, r2
 8035ec0:	005b      	lsls	r3, r3, #1
 8035ec2:	461a      	mov	r2, r3
 8035ec4:	687b      	ldr	r3, [r7, #4]
 8035ec6:	695b      	ldr	r3, [r3, #20]
 8035ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8035ecc:	3305      	adds	r3, #5
 8035ece:	613b      	str	r3, [r7, #16]
 8035ed0:	e01f      	b.n	8035f12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8035ed2:	697b      	ldr	r3, [r7, #20]
 8035ed4:	00db      	lsls	r3, r3, #3
 8035ed6:	68fa      	ldr	r2, [r7, #12]
 8035ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8035edc:	4613      	mov	r3, r2
 8035ede:	009b      	lsls	r3, r3, #2
 8035ee0:	4413      	add	r3, r2
 8035ee2:	005b      	lsls	r3, r3, #1
 8035ee4:	461a      	mov	r2, r3
 8035ee6:	687b      	ldr	r3, [r7, #4]
 8035ee8:	695b      	ldr	r3, [r3, #20]
 8035eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8035eee:	3305      	adds	r3, #5
 8035ef0:	613b      	str	r3, [r7, #16]
 8035ef2:	e00e      	b.n	8035f12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8035ef4:	68fa      	ldr	r2, [r7, #12]
 8035ef6:	697b      	ldr	r3, [r7, #20]
 8035ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8035efc:	4613      	mov	r3, r2
 8035efe:	009b      	lsls	r3, r3, #2
 8035f00:	4413      	add	r3, r2
 8035f02:	005b      	lsls	r3, r3, #1
 8035f04:	461a      	mov	r2, r3
 8035f06:	687b      	ldr	r3, [r7, #4]
 8035f08:	695b      	ldr	r3, [r3, #20]
 8035f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8035f0e:	3305      	adds	r3, #5
 8035f10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8035f12:	693b      	ldr	r3, [r7, #16]
 8035f14:	4a5c      	ldr	r2, [pc, #368]	; (8036088 <HAL_I2S_Init+0x270>)
 8035f16:	fba2 2303 	umull	r2, r3, r2, r3
 8035f1a:	08db      	lsrs	r3, r3, #3
 8035f1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8035f1e:	693b      	ldr	r3, [r7, #16]
 8035f20:	f003 0301 	and.w	r3, r3, #1
 8035f24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8035f26:	693a      	ldr	r2, [r7, #16]
 8035f28:	69bb      	ldr	r3, [r7, #24]
 8035f2a:	1ad3      	subs	r3, r2, r3
 8035f2c:	085b      	lsrs	r3, r3, #1
 8035f2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8035f30:	69bb      	ldr	r3, [r7, #24]
 8035f32:	021b      	lsls	r3, r3, #8
 8035f34:	61bb      	str	r3, [r7, #24]
 8035f36:	e003      	b.n	8035f40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8035f38:	2302      	movs	r3, #2
 8035f3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8035f3c:	2300      	movs	r3, #0
 8035f3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8035f40:	69fb      	ldr	r3, [r7, #28]
 8035f42:	2b01      	cmp	r3, #1
 8035f44:	d902      	bls.n	8035f4c <HAL_I2S_Init+0x134>
 8035f46:	69fb      	ldr	r3, [r7, #28]
 8035f48:	2bff      	cmp	r3, #255	; 0xff
 8035f4a:	d907      	bls.n	8035f5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8035f4c:	687b      	ldr	r3, [r7, #4]
 8035f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035f50:	f043 0210 	orr.w	r2, r3, #16
 8035f54:	687b      	ldr	r3, [r7, #4]
 8035f56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8035f58:	2301      	movs	r3, #1
 8035f5a:	e08f      	b.n	803607c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8035f5c:	687b      	ldr	r3, [r7, #4]
 8035f5e:	691a      	ldr	r2, [r3, #16]
 8035f60:	69bb      	ldr	r3, [r7, #24]
 8035f62:	ea42 0103 	orr.w	r1, r2, r3
 8035f66:	687b      	ldr	r3, [r7, #4]
 8035f68:	681b      	ldr	r3, [r3, #0]
 8035f6a:	69fa      	ldr	r2, [r7, #28]
 8035f6c:	430a      	orrs	r2, r1
 8035f6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8035f70:	687b      	ldr	r3, [r7, #4]
 8035f72:	681b      	ldr	r3, [r3, #0]
 8035f74:	69db      	ldr	r3, [r3, #28]
 8035f76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8035f7a:	f023 030f 	bic.w	r3, r3, #15
 8035f7e:	687a      	ldr	r2, [r7, #4]
 8035f80:	6851      	ldr	r1, [r2, #4]
 8035f82:	687a      	ldr	r2, [r7, #4]
 8035f84:	6892      	ldr	r2, [r2, #8]
 8035f86:	4311      	orrs	r1, r2
 8035f88:	687a      	ldr	r2, [r7, #4]
 8035f8a:	68d2      	ldr	r2, [r2, #12]
 8035f8c:	4311      	orrs	r1, r2
 8035f8e:	687a      	ldr	r2, [r7, #4]
 8035f90:	6992      	ldr	r2, [r2, #24]
 8035f92:	430a      	orrs	r2, r1
 8035f94:	431a      	orrs	r2, r3
 8035f96:	687b      	ldr	r3, [r7, #4]
 8035f98:	681b      	ldr	r3, [r3, #0]
 8035f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035f9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8035fa0:	687b      	ldr	r3, [r7, #4]
 8035fa2:	6a1b      	ldr	r3, [r3, #32]
 8035fa4:	2b01      	cmp	r3, #1
 8035fa6:	d161      	bne.n	803606c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8035fa8:	687b      	ldr	r3, [r7, #4]
 8035faa:	4a38      	ldr	r2, [pc, #224]	; (803608c <HAL_I2S_Init+0x274>)
 8035fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8035fae:	687b      	ldr	r3, [r7, #4]
 8035fb0:	681b      	ldr	r3, [r3, #0]
 8035fb2:	4a37      	ldr	r2, [pc, #220]	; (8036090 <HAL_I2S_Init+0x278>)
 8035fb4:	4293      	cmp	r3, r2
 8035fb6:	d101      	bne.n	8035fbc <HAL_I2S_Init+0x1a4>
 8035fb8:	4b36      	ldr	r3, [pc, #216]	; (8036094 <HAL_I2S_Init+0x27c>)
 8035fba:	e001      	b.n	8035fc0 <HAL_I2S_Init+0x1a8>
 8035fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8035fc0:	69db      	ldr	r3, [r3, #28]
 8035fc2:	687a      	ldr	r2, [r7, #4]
 8035fc4:	6812      	ldr	r2, [r2, #0]
 8035fc6:	4932      	ldr	r1, [pc, #200]	; (8036090 <HAL_I2S_Init+0x278>)
 8035fc8:	428a      	cmp	r2, r1
 8035fca:	d101      	bne.n	8035fd0 <HAL_I2S_Init+0x1b8>
 8035fcc:	4a31      	ldr	r2, [pc, #196]	; (8036094 <HAL_I2S_Init+0x27c>)
 8035fce:	e001      	b.n	8035fd4 <HAL_I2S_Init+0x1bc>
 8035fd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8035fd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8035fd8:	f023 030f 	bic.w	r3, r3, #15
 8035fdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8035fde:	687b      	ldr	r3, [r7, #4]
 8035fe0:	681b      	ldr	r3, [r3, #0]
 8035fe2:	4a2b      	ldr	r2, [pc, #172]	; (8036090 <HAL_I2S_Init+0x278>)
 8035fe4:	4293      	cmp	r3, r2
 8035fe6:	d101      	bne.n	8035fec <HAL_I2S_Init+0x1d4>
 8035fe8:	4b2a      	ldr	r3, [pc, #168]	; (8036094 <HAL_I2S_Init+0x27c>)
 8035fea:	e001      	b.n	8035ff0 <HAL_I2S_Init+0x1d8>
 8035fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8035ff0:	2202      	movs	r2, #2
 8035ff2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8035ff4:	687b      	ldr	r3, [r7, #4]
 8035ff6:	681b      	ldr	r3, [r3, #0]
 8035ff8:	4a25      	ldr	r2, [pc, #148]	; (8036090 <HAL_I2S_Init+0x278>)
 8035ffa:	4293      	cmp	r3, r2
 8035ffc:	d101      	bne.n	8036002 <HAL_I2S_Init+0x1ea>
 8035ffe:	4b25      	ldr	r3, [pc, #148]	; (8036094 <HAL_I2S_Init+0x27c>)
 8036000:	e001      	b.n	8036006 <HAL_I2S_Init+0x1ee>
 8036002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036006:	69db      	ldr	r3, [r3, #28]
 8036008:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 803600a:	687b      	ldr	r3, [r7, #4]
 803600c:	685b      	ldr	r3, [r3, #4]
 803600e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8036012:	d003      	beq.n	803601c <HAL_I2S_Init+0x204>
 8036014:	687b      	ldr	r3, [r7, #4]
 8036016:	685b      	ldr	r3, [r3, #4]
 8036018:	2b00      	cmp	r3, #0
 803601a:	d103      	bne.n	8036024 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 803601c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8036020:	613b      	str	r3, [r7, #16]
 8036022:	e001      	b.n	8036028 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8036024:	2300      	movs	r3, #0
 8036026:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8036028:	693b      	ldr	r3, [r7, #16]
 803602a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 803602c:	687b      	ldr	r3, [r7, #4]
 803602e:	689b      	ldr	r3, [r3, #8]
 8036030:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8036032:	4313      	orrs	r3, r2
 8036034:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8036036:	687b      	ldr	r3, [r7, #4]
 8036038:	68db      	ldr	r3, [r3, #12]
 803603a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 803603c:	4313      	orrs	r3, r2
 803603e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8036040:	687b      	ldr	r3, [r7, #4]
 8036042:	699b      	ldr	r3, [r3, #24]
 8036044:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8036046:	4313      	orrs	r3, r2
 8036048:	b29a      	uxth	r2, r3
 803604a:	897b      	ldrh	r3, [r7, #10]
 803604c:	4313      	orrs	r3, r2
 803604e:	b29b      	uxth	r3, r3
 8036050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8036054:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8036056:	687b      	ldr	r3, [r7, #4]
 8036058:	681b      	ldr	r3, [r3, #0]
 803605a:	4a0d      	ldr	r2, [pc, #52]	; (8036090 <HAL_I2S_Init+0x278>)
 803605c:	4293      	cmp	r3, r2
 803605e:	d101      	bne.n	8036064 <HAL_I2S_Init+0x24c>
 8036060:	4b0c      	ldr	r3, [pc, #48]	; (8036094 <HAL_I2S_Init+0x27c>)
 8036062:	e001      	b.n	8036068 <HAL_I2S_Init+0x250>
 8036064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036068:	897a      	ldrh	r2, [r7, #10]
 803606a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 803606c:	687b      	ldr	r3, [r7, #4]
 803606e:	2200      	movs	r2, #0
 8036070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8036072:	687b      	ldr	r3, [r7, #4]
 8036074:	2201      	movs	r2, #1
 8036076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 803607a:	2300      	movs	r3, #0
}
 803607c:	4618      	mov	r0, r3
 803607e:	3720      	adds	r7, #32
 8036080:	46bd      	mov	sp, r7
 8036082:	bd80      	pop	{r7, pc}
 8036084:	0803639d 	.word	0x0803639d
 8036088:	cccccccd 	.word	0xcccccccd
 803608c:	080364b1 	.word	0x080364b1
 8036090:	40003800 	.word	0x40003800
 8036094:	40003400 	.word	0x40003400

08036098 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8036098:	b580      	push	{r7, lr}
 803609a:	b086      	sub	sp, #24
 803609c:	af00      	add	r7, sp, #0
 803609e:	60f8      	str	r0, [r7, #12]
 80360a0:	60b9      	str	r1, [r7, #8]
 80360a2:	4613      	mov	r3, r2
 80360a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80360a6:	68bb      	ldr	r3, [r7, #8]
 80360a8:	2b00      	cmp	r3, #0
 80360aa:	d002      	beq.n	80360b2 <HAL_I2S_Transmit_DMA+0x1a>
 80360ac:	88fb      	ldrh	r3, [r7, #6]
 80360ae:	2b00      	cmp	r3, #0
 80360b0:	d101      	bne.n	80360b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80360b2:	2301      	movs	r3, #1
 80360b4:	e08e      	b.n	80361d4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80360b6:	68fb      	ldr	r3, [r7, #12]
 80360b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80360bc:	b2db      	uxtb	r3, r3
 80360be:	2b01      	cmp	r3, #1
 80360c0:	d101      	bne.n	80360c6 <HAL_I2S_Transmit_DMA+0x2e>
 80360c2:	2302      	movs	r3, #2
 80360c4:	e086      	b.n	80361d4 <HAL_I2S_Transmit_DMA+0x13c>
 80360c6:	68fb      	ldr	r3, [r7, #12]
 80360c8:	2201      	movs	r2, #1
 80360ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80360ce:	68fb      	ldr	r3, [r7, #12]
 80360d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80360d4:	b2db      	uxtb	r3, r3
 80360d6:	2b01      	cmp	r3, #1
 80360d8:	d005      	beq.n	80360e6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80360da:	68fb      	ldr	r3, [r7, #12]
 80360dc:	2200      	movs	r2, #0
 80360de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80360e2:	2302      	movs	r3, #2
 80360e4:	e076      	b.n	80361d4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80360e6:	68fb      	ldr	r3, [r7, #12]
 80360e8:	2203      	movs	r2, #3
 80360ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80360ee:	68fb      	ldr	r3, [r7, #12]
 80360f0:	2200      	movs	r2, #0
 80360f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80360f4:	68fb      	ldr	r3, [r7, #12]
 80360f6:	68ba      	ldr	r2, [r7, #8]
 80360f8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80360fa:	68fb      	ldr	r3, [r7, #12]
 80360fc:	681b      	ldr	r3, [r3, #0]
 80360fe:	69db      	ldr	r3, [r3, #28]
 8036100:	f003 0307 	and.w	r3, r3, #7
 8036104:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8036106:	697b      	ldr	r3, [r7, #20]
 8036108:	2b03      	cmp	r3, #3
 803610a:	d002      	beq.n	8036112 <HAL_I2S_Transmit_DMA+0x7a>
 803610c:	697b      	ldr	r3, [r7, #20]
 803610e:	2b05      	cmp	r3, #5
 8036110:	d10a      	bne.n	8036128 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8036112:	88fb      	ldrh	r3, [r7, #6]
 8036114:	005b      	lsls	r3, r3, #1
 8036116:	b29a      	uxth	r2, r3
 8036118:	68fb      	ldr	r3, [r7, #12]
 803611a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 803611c:	88fb      	ldrh	r3, [r7, #6]
 803611e:	005b      	lsls	r3, r3, #1
 8036120:	b29a      	uxth	r2, r3
 8036122:	68fb      	ldr	r3, [r7, #12]
 8036124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8036126:	e005      	b.n	8036134 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8036128:	68fb      	ldr	r3, [r7, #12]
 803612a:	88fa      	ldrh	r2, [r7, #6]
 803612c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 803612e:	68fb      	ldr	r3, [r7, #12]
 8036130:	88fa      	ldrh	r2, [r7, #6]
 8036132:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8036134:	68fb      	ldr	r3, [r7, #12]
 8036136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036138:	4a28      	ldr	r2, [pc, #160]	; (80361dc <HAL_I2S_Transmit_DMA+0x144>)
 803613a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 803613c:	68fb      	ldr	r3, [r7, #12]
 803613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036140:	4a27      	ldr	r2, [pc, #156]	; (80361e0 <HAL_I2S_Transmit_DMA+0x148>)
 8036142:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8036144:	68fb      	ldr	r3, [r7, #12]
 8036146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036148:	4a26      	ldr	r2, [pc, #152]	; (80361e4 <HAL_I2S_Transmit_DMA+0x14c>)
 803614a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 803614c:	68fb      	ldr	r3, [r7, #12]
 803614e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8036150:	68fb      	ldr	r3, [r7, #12]
 8036152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8036154:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8036156:	68fb      	ldr	r3, [r7, #12]
 8036158:	681b      	ldr	r3, [r3, #0]
 803615a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 803615c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 803615e:	68fb      	ldr	r3, [r7, #12]
 8036160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8036162:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8036164:	f7fe fa4a 	bl	80345fc <HAL_DMA_Start_IT>
 8036168:	4603      	mov	r3, r0
 803616a:	2b00      	cmp	r3, #0
 803616c:	d00f      	beq.n	803618e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 803616e:	68fb      	ldr	r3, [r7, #12]
 8036170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036172:	f043 0208 	orr.w	r2, r3, #8
 8036176:	68fb      	ldr	r3, [r7, #12]
 8036178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 803617a:	68fb      	ldr	r3, [r7, #12]
 803617c:	2201      	movs	r2, #1
 803617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8036182:	68fb      	ldr	r3, [r7, #12]
 8036184:	2200      	movs	r2, #0
 8036186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 803618a:	2301      	movs	r3, #1
 803618c:	e022      	b.n	80361d4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 803618e:	68fb      	ldr	r3, [r7, #12]
 8036190:	681b      	ldr	r3, [r3, #0]
 8036192:	69db      	ldr	r3, [r3, #28]
 8036194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8036198:	2b00      	cmp	r3, #0
 803619a:	d107      	bne.n	80361ac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 803619c:	68fb      	ldr	r3, [r7, #12]
 803619e:	681b      	ldr	r3, [r3, #0]
 80361a0:	69da      	ldr	r2, [r3, #28]
 80361a2:	68fb      	ldr	r3, [r7, #12]
 80361a4:	681b      	ldr	r3, [r3, #0]
 80361a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80361aa:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80361ac:	68fb      	ldr	r3, [r7, #12]
 80361ae:	681b      	ldr	r3, [r3, #0]
 80361b0:	685b      	ldr	r3, [r3, #4]
 80361b2:	f003 0302 	and.w	r3, r3, #2
 80361b6:	2b00      	cmp	r3, #0
 80361b8:	d107      	bne.n	80361ca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80361ba:	68fb      	ldr	r3, [r7, #12]
 80361bc:	681b      	ldr	r3, [r3, #0]
 80361be:	685a      	ldr	r2, [r3, #4]
 80361c0:	68fb      	ldr	r3, [r7, #12]
 80361c2:	681b      	ldr	r3, [r3, #0]
 80361c4:	f042 0202 	orr.w	r2, r2, #2
 80361c8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80361ca:	68fb      	ldr	r3, [r7, #12]
 80361cc:	2200      	movs	r2, #0
 80361ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80361d2:	2300      	movs	r3, #0
}
 80361d4:	4618      	mov	r0, r3
 80361d6:	3718      	adds	r7, #24
 80361d8:	46bd      	mov	sp, r7
 80361da:	bd80      	pop	{r7, pc}
 80361dc:	0803627b 	.word	0x0803627b
 80361e0:	08036239 	.word	0x08036239
 80361e4:	08036297 	.word	0x08036297

080361e8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80361e8:	b480      	push	{r7}
 80361ea:	b083      	sub	sp, #12
 80361ec:	af00      	add	r7, sp, #0
 80361ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80361f0:	bf00      	nop
 80361f2:	370c      	adds	r7, #12
 80361f4:	46bd      	mov	sp, r7
 80361f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361fa:	4770      	bx	lr

080361fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80361fc:	b480      	push	{r7}
 80361fe:	b083      	sub	sp, #12
 8036200:	af00      	add	r7, sp, #0
 8036202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8036204:	bf00      	nop
 8036206:	370c      	adds	r7, #12
 8036208:	46bd      	mov	sp, r7
 803620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803620e:	4770      	bx	lr

08036210 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8036210:	b480      	push	{r7}
 8036212:	b083      	sub	sp, #12
 8036214:	af00      	add	r7, sp, #0
 8036216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8036218:	bf00      	nop
 803621a:	370c      	adds	r7, #12
 803621c:	46bd      	mov	sp, r7
 803621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036222:	4770      	bx	lr

08036224 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8036224:	b480      	push	{r7}
 8036226:	b083      	sub	sp, #12
 8036228:	af00      	add	r7, sp, #0
 803622a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 803622c:	bf00      	nop
 803622e:	370c      	adds	r7, #12
 8036230:	46bd      	mov	sp, r7
 8036232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036236:	4770      	bx	lr

08036238 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8036238:	b580      	push	{r7, lr}
 803623a:	b084      	sub	sp, #16
 803623c:	af00      	add	r7, sp, #0
 803623e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8036240:	687b      	ldr	r3, [r7, #4]
 8036242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036244:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8036246:	687b      	ldr	r3, [r7, #4]
 8036248:	69db      	ldr	r3, [r3, #28]
 803624a:	2b00      	cmp	r3, #0
 803624c:	d10e      	bne.n	803626c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 803624e:	68fb      	ldr	r3, [r7, #12]
 8036250:	681b      	ldr	r3, [r3, #0]
 8036252:	685a      	ldr	r2, [r3, #4]
 8036254:	68fb      	ldr	r3, [r7, #12]
 8036256:	681b      	ldr	r3, [r3, #0]
 8036258:	f022 0202 	bic.w	r2, r2, #2
 803625c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 803625e:	68fb      	ldr	r3, [r7, #12]
 8036260:	2200      	movs	r2, #0
 8036262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8036264:	68fb      	ldr	r3, [r7, #12]
 8036266:	2201      	movs	r2, #1
 8036268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 803626c:	68f8      	ldr	r0, [r7, #12]
 803626e:	f7ff ffc5 	bl	80361fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8036272:	bf00      	nop
 8036274:	3710      	adds	r7, #16
 8036276:	46bd      	mov	sp, r7
 8036278:	bd80      	pop	{r7, pc}

0803627a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 803627a:	b580      	push	{r7, lr}
 803627c:	b084      	sub	sp, #16
 803627e:	af00      	add	r7, sp, #0
 8036280:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8036282:	687b      	ldr	r3, [r7, #4]
 8036284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036286:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8036288:	68f8      	ldr	r0, [r7, #12]
 803628a:	f7ff ffad 	bl	80361e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 803628e:	bf00      	nop
 8036290:	3710      	adds	r7, #16
 8036292:	46bd      	mov	sp, r7
 8036294:	bd80      	pop	{r7, pc}

08036296 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8036296:	b580      	push	{r7, lr}
 8036298:	b084      	sub	sp, #16
 803629a:	af00      	add	r7, sp, #0
 803629c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 803629e:	687b      	ldr	r3, [r7, #4]
 80362a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80362a2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80362a4:	68fb      	ldr	r3, [r7, #12]
 80362a6:	681b      	ldr	r3, [r3, #0]
 80362a8:	685a      	ldr	r2, [r3, #4]
 80362aa:	68fb      	ldr	r3, [r7, #12]
 80362ac:	681b      	ldr	r3, [r3, #0]
 80362ae:	f022 0203 	bic.w	r2, r2, #3
 80362b2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80362b4:	68fb      	ldr	r3, [r7, #12]
 80362b6:	2200      	movs	r2, #0
 80362b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80362ba:	68fb      	ldr	r3, [r7, #12]
 80362bc:	2200      	movs	r2, #0
 80362be:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80362c0:	68fb      	ldr	r3, [r7, #12]
 80362c2:	2201      	movs	r2, #1
 80362c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80362c8:	68fb      	ldr	r3, [r7, #12]
 80362ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80362cc:	f043 0208 	orr.w	r2, r3, #8
 80362d0:	68fb      	ldr	r3, [r7, #12]
 80362d2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80362d4:	68f8      	ldr	r0, [r7, #12]
 80362d6:	f7ff ffa5 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80362da:	bf00      	nop
 80362dc:	3710      	adds	r7, #16
 80362de:	46bd      	mov	sp, r7
 80362e0:	bd80      	pop	{r7, pc}

080362e2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80362e2:	b580      	push	{r7, lr}
 80362e4:	b082      	sub	sp, #8
 80362e6:	af00      	add	r7, sp, #0
 80362e8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80362ea:	687b      	ldr	r3, [r7, #4]
 80362ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80362ee:	881a      	ldrh	r2, [r3, #0]
 80362f0:	687b      	ldr	r3, [r7, #4]
 80362f2:	681b      	ldr	r3, [r3, #0]
 80362f4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80362f6:	687b      	ldr	r3, [r7, #4]
 80362f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80362fa:	1c9a      	adds	r2, r3, #2
 80362fc:	687b      	ldr	r3, [r7, #4]
 80362fe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8036300:	687b      	ldr	r3, [r7, #4]
 8036302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8036304:	b29b      	uxth	r3, r3
 8036306:	3b01      	subs	r3, #1
 8036308:	b29a      	uxth	r2, r3
 803630a:	687b      	ldr	r3, [r7, #4]
 803630c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 803630e:	687b      	ldr	r3, [r7, #4]
 8036310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8036312:	b29b      	uxth	r3, r3
 8036314:	2b00      	cmp	r3, #0
 8036316:	d10e      	bne.n	8036336 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8036318:	687b      	ldr	r3, [r7, #4]
 803631a:	681b      	ldr	r3, [r3, #0]
 803631c:	685a      	ldr	r2, [r3, #4]
 803631e:	687b      	ldr	r3, [r7, #4]
 8036320:	681b      	ldr	r3, [r3, #0]
 8036322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8036326:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8036328:	687b      	ldr	r3, [r7, #4]
 803632a:	2201      	movs	r2, #1
 803632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8036330:	6878      	ldr	r0, [r7, #4]
 8036332:	f7ff ff63 	bl	80361fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8036336:	bf00      	nop
 8036338:	3708      	adds	r7, #8
 803633a:	46bd      	mov	sp, r7
 803633c:	bd80      	pop	{r7, pc}

0803633e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 803633e:	b580      	push	{r7, lr}
 8036340:	b082      	sub	sp, #8
 8036342:	af00      	add	r7, sp, #0
 8036344:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8036346:	687b      	ldr	r3, [r7, #4]
 8036348:	681b      	ldr	r3, [r3, #0]
 803634a:	68da      	ldr	r2, [r3, #12]
 803634c:	687b      	ldr	r3, [r7, #4]
 803634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036350:	b292      	uxth	r2, r2
 8036352:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8036354:	687b      	ldr	r3, [r7, #4]
 8036356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036358:	1c9a      	adds	r2, r3, #2
 803635a:	687b      	ldr	r3, [r7, #4]
 803635c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 803635e:	687b      	ldr	r3, [r7, #4]
 8036360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036362:	b29b      	uxth	r3, r3
 8036364:	3b01      	subs	r3, #1
 8036366:	b29a      	uxth	r2, r3
 8036368:	687b      	ldr	r3, [r7, #4]
 803636a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 803636c:	687b      	ldr	r3, [r7, #4]
 803636e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036370:	b29b      	uxth	r3, r3
 8036372:	2b00      	cmp	r3, #0
 8036374:	d10e      	bne.n	8036394 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8036376:	687b      	ldr	r3, [r7, #4]
 8036378:	681b      	ldr	r3, [r3, #0]
 803637a:	685a      	ldr	r2, [r3, #4]
 803637c:	687b      	ldr	r3, [r7, #4]
 803637e:	681b      	ldr	r3, [r3, #0]
 8036380:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8036384:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8036386:	687b      	ldr	r3, [r7, #4]
 8036388:	2201      	movs	r2, #1
 803638a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 803638e:	6878      	ldr	r0, [r7, #4]
 8036390:	f7ff ff3e 	bl	8036210 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8036394:	bf00      	nop
 8036396:	3708      	adds	r7, #8
 8036398:	46bd      	mov	sp, r7
 803639a:	bd80      	pop	{r7, pc}

0803639c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 803639c:	b580      	push	{r7, lr}
 803639e:	b086      	sub	sp, #24
 80363a0:	af00      	add	r7, sp, #0
 80363a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80363a4:	687b      	ldr	r3, [r7, #4]
 80363a6:	681b      	ldr	r3, [r3, #0]
 80363a8:	689b      	ldr	r3, [r3, #8]
 80363aa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80363ac:	687b      	ldr	r3, [r7, #4]
 80363ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80363b2:	b2db      	uxtb	r3, r3
 80363b4:	2b04      	cmp	r3, #4
 80363b6:	d13a      	bne.n	803642e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80363b8:	697b      	ldr	r3, [r7, #20]
 80363ba:	f003 0301 	and.w	r3, r3, #1
 80363be:	2b01      	cmp	r3, #1
 80363c0:	d109      	bne.n	80363d6 <I2S_IRQHandler+0x3a>
 80363c2:	687b      	ldr	r3, [r7, #4]
 80363c4:	681b      	ldr	r3, [r3, #0]
 80363c6:	685b      	ldr	r3, [r3, #4]
 80363c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80363cc:	2b40      	cmp	r3, #64	; 0x40
 80363ce:	d102      	bne.n	80363d6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80363d0:	6878      	ldr	r0, [r7, #4]
 80363d2:	f7ff ffb4 	bl	803633e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80363d6:	697b      	ldr	r3, [r7, #20]
 80363d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80363dc:	2b40      	cmp	r3, #64	; 0x40
 80363de:	d126      	bne.n	803642e <I2S_IRQHandler+0x92>
 80363e0:	687b      	ldr	r3, [r7, #4]
 80363e2:	681b      	ldr	r3, [r3, #0]
 80363e4:	685b      	ldr	r3, [r3, #4]
 80363e6:	f003 0320 	and.w	r3, r3, #32
 80363ea:	2b20      	cmp	r3, #32
 80363ec:	d11f      	bne.n	803642e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80363ee:	687b      	ldr	r3, [r7, #4]
 80363f0:	681b      	ldr	r3, [r3, #0]
 80363f2:	685a      	ldr	r2, [r3, #4]
 80363f4:	687b      	ldr	r3, [r7, #4]
 80363f6:	681b      	ldr	r3, [r3, #0]
 80363f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80363fc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80363fe:	2300      	movs	r3, #0
 8036400:	613b      	str	r3, [r7, #16]
 8036402:	687b      	ldr	r3, [r7, #4]
 8036404:	681b      	ldr	r3, [r3, #0]
 8036406:	68db      	ldr	r3, [r3, #12]
 8036408:	613b      	str	r3, [r7, #16]
 803640a:	687b      	ldr	r3, [r7, #4]
 803640c:	681b      	ldr	r3, [r3, #0]
 803640e:	689b      	ldr	r3, [r3, #8]
 8036410:	613b      	str	r3, [r7, #16]
 8036412:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8036414:	687b      	ldr	r3, [r7, #4]
 8036416:	2201      	movs	r2, #1
 8036418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 803641c:	687b      	ldr	r3, [r7, #4]
 803641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036420:	f043 0202 	orr.w	r2, r3, #2
 8036424:	687b      	ldr	r3, [r7, #4]
 8036426:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8036428:	6878      	ldr	r0, [r7, #4]
 803642a:	f7ff fefb 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 803642e:	687b      	ldr	r3, [r7, #4]
 8036430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8036434:	b2db      	uxtb	r3, r3
 8036436:	2b03      	cmp	r3, #3
 8036438:	d136      	bne.n	80364a8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 803643a:	697b      	ldr	r3, [r7, #20]
 803643c:	f003 0302 	and.w	r3, r3, #2
 8036440:	2b02      	cmp	r3, #2
 8036442:	d109      	bne.n	8036458 <I2S_IRQHandler+0xbc>
 8036444:	687b      	ldr	r3, [r7, #4]
 8036446:	681b      	ldr	r3, [r3, #0]
 8036448:	685b      	ldr	r3, [r3, #4]
 803644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803644e:	2b80      	cmp	r3, #128	; 0x80
 8036450:	d102      	bne.n	8036458 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8036452:	6878      	ldr	r0, [r7, #4]
 8036454:	f7ff ff45 	bl	80362e2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8036458:	697b      	ldr	r3, [r7, #20]
 803645a:	f003 0308 	and.w	r3, r3, #8
 803645e:	2b08      	cmp	r3, #8
 8036460:	d122      	bne.n	80364a8 <I2S_IRQHandler+0x10c>
 8036462:	687b      	ldr	r3, [r7, #4]
 8036464:	681b      	ldr	r3, [r3, #0]
 8036466:	685b      	ldr	r3, [r3, #4]
 8036468:	f003 0320 	and.w	r3, r3, #32
 803646c:	2b20      	cmp	r3, #32
 803646e:	d11b      	bne.n	80364a8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8036470:	687b      	ldr	r3, [r7, #4]
 8036472:	681b      	ldr	r3, [r3, #0]
 8036474:	685a      	ldr	r2, [r3, #4]
 8036476:	687b      	ldr	r3, [r7, #4]
 8036478:	681b      	ldr	r3, [r3, #0]
 803647a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803647e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8036480:	2300      	movs	r3, #0
 8036482:	60fb      	str	r3, [r7, #12]
 8036484:	687b      	ldr	r3, [r7, #4]
 8036486:	681b      	ldr	r3, [r3, #0]
 8036488:	689b      	ldr	r3, [r3, #8]
 803648a:	60fb      	str	r3, [r7, #12]
 803648c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803648e:	687b      	ldr	r3, [r7, #4]
 8036490:	2201      	movs	r2, #1
 8036492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8036496:	687b      	ldr	r3, [r7, #4]
 8036498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803649a:	f043 0204 	orr.w	r2, r3, #4
 803649e:	687b      	ldr	r3, [r7, #4]
 80364a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80364a2:	6878      	ldr	r0, [r7, #4]
 80364a4:	f7ff febe 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80364a8:	bf00      	nop
 80364aa:	3718      	adds	r7, #24
 80364ac:	46bd      	mov	sp, r7
 80364ae:	bd80      	pop	{r7, pc}

080364b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80364b0:	b580      	push	{r7, lr}
 80364b2:	b088      	sub	sp, #32
 80364b4:	af00      	add	r7, sp, #0
 80364b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80364b8:	687b      	ldr	r3, [r7, #4]
 80364ba:	681b      	ldr	r3, [r3, #0]
 80364bc:	689b      	ldr	r3, [r3, #8]
 80364be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80364c0:	687b      	ldr	r3, [r7, #4]
 80364c2:	681b      	ldr	r3, [r3, #0]
 80364c4:	4a92      	ldr	r2, [pc, #584]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80364c6:	4293      	cmp	r3, r2
 80364c8:	d101      	bne.n	80364ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80364ca:	4b92      	ldr	r3, [pc, #584]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80364cc:	e001      	b.n	80364d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80364ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80364d2:	689b      	ldr	r3, [r3, #8]
 80364d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80364d6:	687b      	ldr	r3, [r7, #4]
 80364d8:	681b      	ldr	r3, [r3, #0]
 80364da:	685b      	ldr	r3, [r3, #4]
 80364dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80364de:	687b      	ldr	r3, [r7, #4]
 80364e0:	681b      	ldr	r3, [r3, #0]
 80364e2:	4a8b      	ldr	r2, [pc, #556]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80364e4:	4293      	cmp	r3, r2
 80364e6:	d101      	bne.n	80364ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80364e8:	4b8a      	ldr	r3, [pc, #552]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80364ea:	e001      	b.n	80364f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80364ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80364f0:	685b      	ldr	r3, [r3, #4]
 80364f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80364f4:	687b      	ldr	r3, [r7, #4]
 80364f6:	685b      	ldr	r3, [r3, #4]
 80364f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80364fc:	d004      	beq.n	8036508 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80364fe:	687b      	ldr	r3, [r7, #4]
 8036500:	685b      	ldr	r3, [r3, #4]
 8036502:	2b00      	cmp	r3, #0
 8036504:	f040 8099 	bne.w	803663a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8036508:	69fb      	ldr	r3, [r7, #28]
 803650a:	f003 0302 	and.w	r3, r3, #2
 803650e:	2b02      	cmp	r3, #2
 8036510:	d107      	bne.n	8036522 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8036512:	697b      	ldr	r3, [r7, #20]
 8036514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036518:	2b00      	cmp	r3, #0
 803651a:	d002      	beq.n	8036522 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 803651c:	6878      	ldr	r0, [r7, #4]
 803651e:	f000 f925 	bl	803676c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8036522:	69bb      	ldr	r3, [r7, #24]
 8036524:	f003 0301 	and.w	r3, r3, #1
 8036528:	2b01      	cmp	r3, #1
 803652a:	d107      	bne.n	803653c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 803652c:	693b      	ldr	r3, [r7, #16]
 803652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036532:	2b00      	cmp	r3, #0
 8036534:	d002      	beq.n	803653c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8036536:	6878      	ldr	r0, [r7, #4]
 8036538:	f000 f9c8 	bl	80368cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 803653c:	69bb      	ldr	r3, [r7, #24]
 803653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036542:	2b40      	cmp	r3, #64	; 0x40
 8036544:	d13a      	bne.n	80365bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8036546:	693b      	ldr	r3, [r7, #16]
 8036548:	f003 0320 	and.w	r3, r3, #32
 803654c:	2b00      	cmp	r3, #0
 803654e:	d035      	beq.n	80365bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8036550:	687b      	ldr	r3, [r7, #4]
 8036552:	681b      	ldr	r3, [r3, #0]
 8036554:	4a6e      	ldr	r2, [pc, #440]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8036556:	4293      	cmp	r3, r2
 8036558:	d101      	bne.n	803655e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 803655a:	4b6e      	ldr	r3, [pc, #440]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 803655c:	e001      	b.n	8036562 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 803655e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036562:	685a      	ldr	r2, [r3, #4]
 8036564:	687b      	ldr	r3, [r7, #4]
 8036566:	681b      	ldr	r3, [r3, #0]
 8036568:	4969      	ldr	r1, [pc, #420]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 803656a:	428b      	cmp	r3, r1
 803656c:	d101      	bne.n	8036572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 803656e:	4b69      	ldr	r3, [pc, #420]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8036570:	e001      	b.n	8036576 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8036572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 803657a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803657c:	687b      	ldr	r3, [r7, #4]
 803657e:	681b      	ldr	r3, [r3, #0]
 8036580:	685a      	ldr	r2, [r3, #4]
 8036582:	687b      	ldr	r3, [r7, #4]
 8036584:	681b      	ldr	r3, [r3, #0]
 8036586:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803658a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 803658c:	2300      	movs	r3, #0
 803658e:	60fb      	str	r3, [r7, #12]
 8036590:	687b      	ldr	r3, [r7, #4]
 8036592:	681b      	ldr	r3, [r3, #0]
 8036594:	68db      	ldr	r3, [r3, #12]
 8036596:	60fb      	str	r3, [r7, #12]
 8036598:	687b      	ldr	r3, [r7, #4]
 803659a:	681b      	ldr	r3, [r3, #0]
 803659c:	689b      	ldr	r3, [r3, #8]
 803659e:	60fb      	str	r3, [r7, #12]
 80365a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80365a2:	687b      	ldr	r3, [r7, #4]
 80365a4:	2201      	movs	r2, #1
 80365a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80365aa:	687b      	ldr	r3, [r7, #4]
 80365ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80365ae:	f043 0202 	orr.w	r2, r3, #2
 80365b2:	687b      	ldr	r3, [r7, #4]
 80365b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80365b6:	6878      	ldr	r0, [r7, #4]
 80365b8:	f7ff fe34 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80365bc:	69fb      	ldr	r3, [r7, #28]
 80365be:	f003 0308 	and.w	r3, r3, #8
 80365c2:	2b08      	cmp	r3, #8
 80365c4:	f040 80c3 	bne.w	803674e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80365c8:	697b      	ldr	r3, [r7, #20]
 80365ca:	f003 0320 	and.w	r3, r3, #32
 80365ce:	2b00      	cmp	r3, #0
 80365d0:	f000 80bd 	beq.w	803674e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80365d4:	687b      	ldr	r3, [r7, #4]
 80365d6:	681b      	ldr	r3, [r3, #0]
 80365d8:	685a      	ldr	r2, [r3, #4]
 80365da:	687b      	ldr	r3, [r7, #4]
 80365dc:	681b      	ldr	r3, [r3, #0]
 80365de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80365e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80365e4:	687b      	ldr	r3, [r7, #4]
 80365e6:	681b      	ldr	r3, [r3, #0]
 80365e8:	4a49      	ldr	r2, [pc, #292]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80365ea:	4293      	cmp	r3, r2
 80365ec:	d101      	bne.n	80365f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80365ee:	4b49      	ldr	r3, [pc, #292]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80365f0:	e001      	b.n	80365f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80365f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80365f6:	685a      	ldr	r2, [r3, #4]
 80365f8:	687b      	ldr	r3, [r7, #4]
 80365fa:	681b      	ldr	r3, [r3, #0]
 80365fc:	4944      	ldr	r1, [pc, #272]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80365fe:	428b      	cmp	r3, r1
 8036600:	d101      	bne.n	8036606 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8036602:	4b44      	ldr	r3, [pc, #272]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8036604:	e001      	b.n	803660a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8036606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803660a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 803660e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8036610:	2300      	movs	r3, #0
 8036612:	60bb      	str	r3, [r7, #8]
 8036614:	687b      	ldr	r3, [r7, #4]
 8036616:	681b      	ldr	r3, [r3, #0]
 8036618:	689b      	ldr	r3, [r3, #8]
 803661a:	60bb      	str	r3, [r7, #8]
 803661c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 803661e:	687b      	ldr	r3, [r7, #4]
 8036620:	2201      	movs	r2, #1
 8036622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8036626:	687b      	ldr	r3, [r7, #4]
 8036628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803662a:	f043 0204 	orr.w	r2, r3, #4
 803662e:	687b      	ldr	r3, [r7, #4]
 8036630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8036632:	6878      	ldr	r0, [r7, #4]
 8036634:	f7ff fdf6 	bl	8036224 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8036638:	e089      	b.n	803674e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 803663a:	69bb      	ldr	r3, [r7, #24]
 803663c:	f003 0302 	and.w	r3, r3, #2
 8036640:	2b02      	cmp	r3, #2
 8036642:	d107      	bne.n	8036654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8036644:	693b      	ldr	r3, [r7, #16]
 8036646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803664a:	2b00      	cmp	r3, #0
 803664c:	d002      	beq.n	8036654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 803664e:	6878      	ldr	r0, [r7, #4]
 8036650:	f000 f8be 	bl	80367d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8036654:	69fb      	ldr	r3, [r7, #28]
 8036656:	f003 0301 	and.w	r3, r3, #1
 803665a:	2b01      	cmp	r3, #1
 803665c:	d107      	bne.n	803666e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 803665e:	697b      	ldr	r3, [r7, #20]
 8036660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036664:	2b00      	cmp	r3, #0
 8036666:	d002      	beq.n	803666e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8036668:	6878      	ldr	r0, [r7, #4]
 803666a:	f000 f8fd 	bl	8036868 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 803666e:	69fb      	ldr	r3, [r7, #28]
 8036670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036674:	2b40      	cmp	r3, #64	; 0x40
 8036676:	d12f      	bne.n	80366d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8036678:	697b      	ldr	r3, [r7, #20]
 803667a:	f003 0320 	and.w	r3, r3, #32
 803667e:	2b00      	cmp	r3, #0
 8036680:	d02a      	beq.n	80366d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8036682:	687b      	ldr	r3, [r7, #4]
 8036684:	681b      	ldr	r3, [r3, #0]
 8036686:	685a      	ldr	r2, [r3, #4]
 8036688:	687b      	ldr	r3, [r7, #4]
 803668a:	681b      	ldr	r3, [r3, #0]
 803668c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8036690:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8036692:	687b      	ldr	r3, [r7, #4]
 8036694:	681b      	ldr	r3, [r3, #0]
 8036696:	4a1e      	ldr	r2, [pc, #120]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8036698:	4293      	cmp	r3, r2
 803669a:	d101      	bne.n	80366a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 803669c:	4b1d      	ldr	r3, [pc, #116]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 803669e:	e001      	b.n	80366a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80366a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80366a4:	685a      	ldr	r2, [r3, #4]
 80366a6:	687b      	ldr	r3, [r7, #4]
 80366a8:	681b      	ldr	r3, [r3, #0]
 80366aa:	4919      	ldr	r1, [pc, #100]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80366ac:	428b      	cmp	r3, r1
 80366ae:	d101      	bne.n	80366b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80366b0:	4b18      	ldr	r3, [pc, #96]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80366b2:	e001      	b.n	80366b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80366b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80366b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80366bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80366be:	687b      	ldr	r3, [r7, #4]
 80366c0:	2201      	movs	r2, #1
 80366c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80366c6:	687b      	ldr	r3, [r7, #4]
 80366c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80366ca:	f043 0202 	orr.w	r2, r3, #2
 80366ce:	687b      	ldr	r3, [r7, #4]
 80366d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80366d2:	6878      	ldr	r0, [r7, #4]
 80366d4:	f7ff fda6 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80366d8:	69bb      	ldr	r3, [r7, #24]
 80366da:	f003 0308 	and.w	r3, r3, #8
 80366de:	2b08      	cmp	r3, #8
 80366e0:	d136      	bne.n	8036750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80366e2:	693b      	ldr	r3, [r7, #16]
 80366e4:	f003 0320 	and.w	r3, r3, #32
 80366e8:	2b00      	cmp	r3, #0
 80366ea:	d031      	beq.n	8036750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80366ec:	687b      	ldr	r3, [r7, #4]
 80366ee:	681b      	ldr	r3, [r3, #0]
 80366f0:	4a07      	ldr	r2, [pc, #28]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80366f2:	4293      	cmp	r3, r2
 80366f4:	d101      	bne.n	80366fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80366f6:	4b07      	ldr	r3, [pc, #28]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80366f8:	e001      	b.n	80366fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80366fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80366fe:	685a      	ldr	r2, [r3, #4]
 8036700:	687b      	ldr	r3, [r7, #4]
 8036702:	681b      	ldr	r3, [r3, #0]
 8036704:	4902      	ldr	r1, [pc, #8]	; (8036710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8036706:	428b      	cmp	r3, r1
 8036708:	d106      	bne.n	8036718 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 803670a:	4b02      	ldr	r3, [pc, #8]	; (8036714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 803670c:	e006      	b.n	803671c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 803670e:	bf00      	nop
 8036710:	40003800 	.word	0x40003800
 8036714:	40003400 	.word	0x40003400
 8036718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 803671c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8036720:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8036722:	687b      	ldr	r3, [r7, #4]
 8036724:	681b      	ldr	r3, [r3, #0]
 8036726:	685a      	ldr	r2, [r3, #4]
 8036728:	687b      	ldr	r3, [r7, #4]
 803672a:	681b      	ldr	r3, [r3, #0]
 803672c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8036730:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8036732:	687b      	ldr	r3, [r7, #4]
 8036734:	2201      	movs	r2, #1
 8036736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 803673a:	687b      	ldr	r3, [r7, #4]
 803673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803673e:	f043 0204 	orr.w	r2, r3, #4
 8036742:	687b      	ldr	r3, [r7, #4]
 8036744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8036746:	6878      	ldr	r0, [r7, #4]
 8036748:	f7ff fd6c 	bl	8036224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 803674c:	e000      	b.n	8036750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 803674e:	bf00      	nop
}
 8036750:	bf00      	nop
 8036752:	3720      	adds	r7, #32
 8036754:	46bd      	mov	sp, r7
 8036756:	bd80      	pop	{r7, pc}

08036758 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8036758:	b480      	push	{r7}
 803675a:	b083      	sub	sp, #12
 803675c:	af00      	add	r7, sp, #0
 803675e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8036760:	bf00      	nop
 8036762:	370c      	adds	r7, #12
 8036764:	46bd      	mov	sp, r7
 8036766:	f85d 7b04 	ldr.w	r7, [sp], #4
 803676a:	4770      	bx	lr

0803676c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 803676c:	b580      	push	{r7, lr}
 803676e:	b082      	sub	sp, #8
 8036770:	af00      	add	r7, sp, #0
 8036772:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8036774:	687b      	ldr	r3, [r7, #4]
 8036776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036778:	1c99      	adds	r1, r3, #2
 803677a:	687a      	ldr	r2, [r7, #4]
 803677c:	6251      	str	r1, [r2, #36]	; 0x24
 803677e:	881a      	ldrh	r2, [r3, #0]
 8036780:	687b      	ldr	r3, [r7, #4]
 8036782:	681b      	ldr	r3, [r3, #0]
 8036784:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8036786:	687b      	ldr	r3, [r7, #4]
 8036788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803678a:	b29b      	uxth	r3, r3
 803678c:	3b01      	subs	r3, #1
 803678e:	b29a      	uxth	r2, r3
 8036790:	687b      	ldr	r3, [r7, #4]
 8036792:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8036794:	687b      	ldr	r3, [r7, #4]
 8036796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8036798:	b29b      	uxth	r3, r3
 803679a:	2b00      	cmp	r3, #0
 803679c:	d113      	bne.n	80367c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 803679e:	687b      	ldr	r3, [r7, #4]
 80367a0:	681b      	ldr	r3, [r3, #0]
 80367a2:	685a      	ldr	r2, [r3, #4]
 80367a4:	687b      	ldr	r3, [r7, #4]
 80367a6:	681b      	ldr	r3, [r3, #0]
 80367a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80367ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80367ae:	687b      	ldr	r3, [r7, #4]
 80367b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80367b2:	b29b      	uxth	r3, r3
 80367b4:	2b00      	cmp	r3, #0
 80367b6:	d106      	bne.n	80367c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80367b8:	687b      	ldr	r3, [r7, #4]
 80367ba:	2201      	movs	r2, #1
 80367bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80367c0:	6878      	ldr	r0, [r7, #4]
 80367c2:	f7ff ffc9 	bl	8036758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80367c6:	bf00      	nop
 80367c8:	3708      	adds	r7, #8
 80367ca:	46bd      	mov	sp, r7
 80367cc:	bd80      	pop	{r7, pc}
	...

080367d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80367d0:	b580      	push	{r7, lr}
 80367d2:	b082      	sub	sp, #8
 80367d4:	af00      	add	r7, sp, #0
 80367d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80367d8:	687b      	ldr	r3, [r7, #4]
 80367da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80367dc:	1c99      	adds	r1, r3, #2
 80367de:	687a      	ldr	r2, [r7, #4]
 80367e0:	6251      	str	r1, [r2, #36]	; 0x24
 80367e2:	8819      	ldrh	r1, [r3, #0]
 80367e4:	687b      	ldr	r3, [r7, #4]
 80367e6:	681b      	ldr	r3, [r3, #0]
 80367e8:	4a1d      	ldr	r2, [pc, #116]	; (8036860 <I2SEx_TxISR_I2SExt+0x90>)
 80367ea:	4293      	cmp	r3, r2
 80367ec:	d101      	bne.n	80367f2 <I2SEx_TxISR_I2SExt+0x22>
 80367ee:	4b1d      	ldr	r3, [pc, #116]	; (8036864 <I2SEx_TxISR_I2SExt+0x94>)
 80367f0:	e001      	b.n	80367f6 <I2SEx_TxISR_I2SExt+0x26>
 80367f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80367f6:	460a      	mov	r2, r1
 80367f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80367fa:	687b      	ldr	r3, [r7, #4]
 80367fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80367fe:	b29b      	uxth	r3, r3
 8036800:	3b01      	subs	r3, #1
 8036802:	b29a      	uxth	r2, r3
 8036804:	687b      	ldr	r3, [r7, #4]
 8036806:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8036808:	687b      	ldr	r3, [r7, #4]
 803680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803680c:	b29b      	uxth	r3, r3
 803680e:	2b00      	cmp	r3, #0
 8036810:	d121      	bne.n	8036856 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8036812:	687b      	ldr	r3, [r7, #4]
 8036814:	681b      	ldr	r3, [r3, #0]
 8036816:	4a12      	ldr	r2, [pc, #72]	; (8036860 <I2SEx_TxISR_I2SExt+0x90>)
 8036818:	4293      	cmp	r3, r2
 803681a:	d101      	bne.n	8036820 <I2SEx_TxISR_I2SExt+0x50>
 803681c:	4b11      	ldr	r3, [pc, #68]	; (8036864 <I2SEx_TxISR_I2SExt+0x94>)
 803681e:	e001      	b.n	8036824 <I2SEx_TxISR_I2SExt+0x54>
 8036820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036824:	685a      	ldr	r2, [r3, #4]
 8036826:	687b      	ldr	r3, [r7, #4]
 8036828:	681b      	ldr	r3, [r3, #0]
 803682a:	490d      	ldr	r1, [pc, #52]	; (8036860 <I2SEx_TxISR_I2SExt+0x90>)
 803682c:	428b      	cmp	r3, r1
 803682e:	d101      	bne.n	8036834 <I2SEx_TxISR_I2SExt+0x64>
 8036830:	4b0c      	ldr	r3, [pc, #48]	; (8036864 <I2SEx_TxISR_I2SExt+0x94>)
 8036832:	e001      	b.n	8036838 <I2SEx_TxISR_I2SExt+0x68>
 8036834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036838:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 803683c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 803683e:	687b      	ldr	r3, [r7, #4]
 8036840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036842:	b29b      	uxth	r3, r3
 8036844:	2b00      	cmp	r3, #0
 8036846:	d106      	bne.n	8036856 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8036848:	687b      	ldr	r3, [r7, #4]
 803684a:	2201      	movs	r2, #1
 803684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8036850:	6878      	ldr	r0, [r7, #4]
 8036852:	f7ff ff81 	bl	8036758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8036856:	bf00      	nop
 8036858:	3708      	adds	r7, #8
 803685a:	46bd      	mov	sp, r7
 803685c:	bd80      	pop	{r7, pc}
 803685e:	bf00      	nop
 8036860:	40003800 	.word	0x40003800
 8036864:	40003400 	.word	0x40003400

08036868 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8036868:	b580      	push	{r7, lr}
 803686a:	b082      	sub	sp, #8
 803686c:	af00      	add	r7, sp, #0
 803686e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8036870:	687b      	ldr	r3, [r7, #4]
 8036872:	681b      	ldr	r3, [r3, #0]
 8036874:	68d8      	ldr	r0, [r3, #12]
 8036876:	687b      	ldr	r3, [r7, #4]
 8036878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803687a:	1c99      	adds	r1, r3, #2
 803687c:	687a      	ldr	r2, [r7, #4]
 803687e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8036880:	b282      	uxth	r2, r0
 8036882:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8036884:	687b      	ldr	r3, [r7, #4]
 8036886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036888:	b29b      	uxth	r3, r3
 803688a:	3b01      	subs	r3, #1
 803688c:	b29a      	uxth	r2, r3
 803688e:	687b      	ldr	r3, [r7, #4]
 8036890:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8036892:	687b      	ldr	r3, [r7, #4]
 8036894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036896:	b29b      	uxth	r3, r3
 8036898:	2b00      	cmp	r3, #0
 803689a:	d113      	bne.n	80368c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 803689c:	687b      	ldr	r3, [r7, #4]
 803689e:	681b      	ldr	r3, [r3, #0]
 80368a0:	685a      	ldr	r2, [r3, #4]
 80368a2:	687b      	ldr	r3, [r7, #4]
 80368a4:	681b      	ldr	r3, [r3, #0]
 80368a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80368aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80368ac:	687b      	ldr	r3, [r7, #4]
 80368ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80368b0:	b29b      	uxth	r3, r3
 80368b2:	2b00      	cmp	r3, #0
 80368b4:	d106      	bne.n	80368c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80368b6:	687b      	ldr	r3, [r7, #4]
 80368b8:	2201      	movs	r2, #1
 80368ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80368be:	6878      	ldr	r0, [r7, #4]
 80368c0:	f7ff ff4a 	bl	8036758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80368c4:	bf00      	nop
 80368c6:	3708      	adds	r7, #8
 80368c8:	46bd      	mov	sp, r7
 80368ca:	bd80      	pop	{r7, pc}

080368cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80368cc:	b580      	push	{r7, lr}
 80368ce:	b082      	sub	sp, #8
 80368d0:	af00      	add	r7, sp, #0
 80368d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80368d4:	687b      	ldr	r3, [r7, #4]
 80368d6:	681b      	ldr	r3, [r3, #0]
 80368d8:	4a20      	ldr	r2, [pc, #128]	; (803695c <I2SEx_RxISR_I2SExt+0x90>)
 80368da:	4293      	cmp	r3, r2
 80368dc:	d101      	bne.n	80368e2 <I2SEx_RxISR_I2SExt+0x16>
 80368de:	4b20      	ldr	r3, [pc, #128]	; (8036960 <I2SEx_RxISR_I2SExt+0x94>)
 80368e0:	e001      	b.n	80368e6 <I2SEx_RxISR_I2SExt+0x1a>
 80368e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80368e6:	68d8      	ldr	r0, [r3, #12]
 80368e8:	687b      	ldr	r3, [r7, #4]
 80368ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80368ec:	1c99      	adds	r1, r3, #2
 80368ee:	687a      	ldr	r2, [r7, #4]
 80368f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80368f2:	b282      	uxth	r2, r0
 80368f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80368f6:	687b      	ldr	r3, [r7, #4]
 80368f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80368fa:	b29b      	uxth	r3, r3
 80368fc:	3b01      	subs	r3, #1
 80368fe:	b29a      	uxth	r2, r3
 8036900:	687b      	ldr	r3, [r7, #4]
 8036902:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8036904:	687b      	ldr	r3, [r7, #4]
 8036906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8036908:	b29b      	uxth	r3, r3
 803690a:	2b00      	cmp	r3, #0
 803690c:	d121      	bne.n	8036952 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 803690e:	687b      	ldr	r3, [r7, #4]
 8036910:	681b      	ldr	r3, [r3, #0]
 8036912:	4a12      	ldr	r2, [pc, #72]	; (803695c <I2SEx_RxISR_I2SExt+0x90>)
 8036914:	4293      	cmp	r3, r2
 8036916:	d101      	bne.n	803691c <I2SEx_RxISR_I2SExt+0x50>
 8036918:	4b11      	ldr	r3, [pc, #68]	; (8036960 <I2SEx_RxISR_I2SExt+0x94>)
 803691a:	e001      	b.n	8036920 <I2SEx_RxISR_I2SExt+0x54>
 803691c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036920:	685a      	ldr	r2, [r3, #4]
 8036922:	687b      	ldr	r3, [r7, #4]
 8036924:	681b      	ldr	r3, [r3, #0]
 8036926:	490d      	ldr	r1, [pc, #52]	; (803695c <I2SEx_RxISR_I2SExt+0x90>)
 8036928:	428b      	cmp	r3, r1
 803692a:	d101      	bne.n	8036930 <I2SEx_RxISR_I2SExt+0x64>
 803692c:	4b0c      	ldr	r3, [pc, #48]	; (8036960 <I2SEx_RxISR_I2SExt+0x94>)
 803692e:	e001      	b.n	8036934 <I2SEx_RxISR_I2SExt+0x68>
 8036930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8036934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8036938:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 803693a:	687b      	ldr	r3, [r7, #4]
 803693c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803693e:	b29b      	uxth	r3, r3
 8036940:	2b00      	cmp	r3, #0
 8036942:	d106      	bne.n	8036952 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8036944:	687b      	ldr	r3, [r7, #4]
 8036946:	2201      	movs	r2, #1
 8036948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 803694c:	6878      	ldr	r0, [r7, #4]
 803694e:	f7ff ff03 	bl	8036758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8036952:	bf00      	nop
 8036954:	3708      	adds	r7, #8
 8036956:	46bd      	mov	sp, r7
 8036958:	bd80      	pop	{r7, pc}
 803695a:	bf00      	nop
 803695c:	40003800 	.word	0x40003800
 8036960:	40003400 	.word	0x40003400

08036964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8036964:	b580      	push	{r7, lr}
 8036966:	b086      	sub	sp, #24
 8036968:	af00      	add	r7, sp, #0
 803696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 803696c:	687b      	ldr	r3, [r7, #4]
 803696e:	2b00      	cmp	r3, #0
 8036970:	d101      	bne.n	8036976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8036972:	2301      	movs	r3, #1
 8036974:	e267      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8036976:	687b      	ldr	r3, [r7, #4]
 8036978:	681b      	ldr	r3, [r3, #0]
 803697a:	f003 0301 	and.w	r3, r3, #1
 803697e:	2b00      	cmp	r3, #0
 8036980:	d075      	beq.n	8036a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8036982:	4b88      	ldr	r3, [pc, #544]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036984:	689b      	ldr	r3, [r3, #8]
 8036986:	f003 030c 	and.w	r3, r3, #12
 803698a:	2b04      	cmp	r3, #4
 803698c:	d00c      	beq.n	80369a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 803698e:	4b85      	ldr	r3, [pc, #532]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036990:	689b      	ldr	r3, [r3, #8]
 8036992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8036996:	2b08      	cmp	r3, #8
 8036998:	d112      	bne.n	80369c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 803699a:	4b82      	ldr	r3, [pc, #520]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 803699c:	685b      	ldr	r3, [r3, #4]
 803699e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80369a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80369a6:	d10b      	bne.n	80369c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80369a8:	4b7e      	ldr	r3, [pc, #504]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369aa:	681b      	ldr	r3, [r3, #0]
 80369ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80369b0:	2b00      	cmp	r3, #0
 80369b2:	d05b      	beq.n	8036a6c <HAL_RCC_OscConfig+0x108>
 80369b4:	687b      	ldr	r3, [r7, #4]
 80369b6:	685b      	ldr	r3, [r3, #4]
 80369b8:	2b00      	cmp	r3, #0
 80369ba:	d157      	bne.n	8036a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80369bc:	2301      	movs	r3, #1
 80369be:	e242      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80369c0:	687b      	ldr	r3, [r7, #4]
 80369c2:	685b      	ldr	r3, [r3, #4]
 80369c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80369c8:	d106      	bne.n	80369d8 <HAL_RCC_OscConfig+0x74>
 80369ca:	4b76      	ldr	r3, [pc, #472]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369cc:	681b      	ldr	r3, [r3, #0]
 80369ce:	4a75      	ldr	r2, [pc, #468]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80369d4:	6013      	str	r3, [r2, #0]
 80369d6:	e01d      	b.n	8036a14 <HAL_RCC_OscConfig+0xb0>
 80369d8:	687b      	ldr	r3, [r7, #4]
 80369da:	685b      	ldr	r3, [r3, #4]
 80369dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80369e0:	d10c      	bne.n	80369fc <HAL_RCC_OscConfig+0x98>
 80369e2:	4b70      	ldr	r3, [pc, #448]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369e4:	681b      	ldr	r3, [r3, #0]
 80369e6:	4a6f      	ldr	r2, [pc, #444]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80369ec:	6013      	str	r3, [r2, #0]
 80369ee:	4b6d      	ldr	r3, [pc, #436]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369f0:	681b      	ldr	r3, [r3, #0]
 80369f2:	4a6c      	ldr	r2, [pc, #432]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80369f8:	6013      	str	r3, [r2, #0]
 80369fa:	e00b      	b.n	8036a14 <HAL_RCC_OscConfig+0xb0>
 80369fc:	4b69      	ldr	r3, [pc, #420]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 80369fe:	681b      	ldr	r3, [r3, #0]
 8036a00:	4a68      	ldr	r2, [pc, #416]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8036a06:	6013      	str	r3, [r2, #0]
 8036a08:	4b66      	ldr	r3, [pc, #408]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a0a:	681b      	ldr	r3, [r3, #0]
 8036a0c:	4a65      	ldr	r2, [pc, #404]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8036a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8036a14:	687b      	ldr	r3, [r7, #4]
 8036a16:	685b      	ldr	r3, [r3, #4]
 8036a18:	2b00      	cmp	r3, #0
 8036a1a:	d013      	beq.n	8036a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8036a1c:	f7fd fb3a 	bl	8034094 <HAL_GetTick>
 8036a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8036a22:	e008      	b.n	8036a36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8036a24:	f7fd fb36 	bl	8034094 <HAL_GetTick>
 8036a28:	4602      	mov	r2, r0
 8036a2a:	693b      	ldr	r3, [r7, #16]
 8036a2c:	1ad3      	subs	r3, r2, r3
 8036a2e:	2b64      	cmp	r3, #100	; 0x64
 8036a30:	d901      	bls.n	8036a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8036a32:	2303      	movs	r3, #3
 8036a34:	e207      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8036a36:	4b5b      	ldr	r3, [pc, #364]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a38:	681b      	ldr	r3, [r3, #0]
 8036a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8036a3e:	2b00      	cmp	r3, #0
 8036a40:	d0f0      	beq.n	8036a24 <HAL_RCC_OscConfig+0xc0>
 8036a42:	e014      	b.n	8036a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8036a44:	f7fd fb26 	bl	8034094 <HAL_GetTick>
 8036a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8036a4a:	e008      	b.n	8036a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8036a4c:	f7fd fb22 	bl	8034094 <HAL_GetTick>
 8036a50:	4602      	mov	r2, r0
 8036a52:	693b      	ldr	r3, [r7, #16]
 8036a54:	1ad3      	subs	r3, r2, r3
 8036a56:	2b64      	cmp	r3, #100	; 0x64
 8036a58:	d901      	bls.n	8036a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8036a5a:	2303      	movs	r3, #3
 8036a5c:	e1f3      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8036a5e:	4b51      	ldr	r3, [pc, #324]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a60:	681b      	ldr	r3, [r3, #0]
 8036a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8036a66:	2b00      	cmp	r3, #0
 8036a68:	d1f0      	bne.n	8036a4c <HAL_RCC_OscConfig+0xe8>
 8036a6a:	e000      	b.n	8036a6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8036a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8036a6e:	687b      	ldr	r3, [r7, #4]
 8036a70:	681b      	ldr	r3, [r3, #0]
 8036a72:	f003 0302 	and.w	r3, r3, #2
 8036a76:	2b00      	cmp	r3, #0
 8036a78:	d063      	beq.n	8036b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8036a7a:	4b4a      	ldr	r3, [pc, #296]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a7c:	689b      	ldr	r3, [r3, #8]
 8036a7e:	f003 030c 	and.w	r3, r3, #12
 8036a82:	2b00      	cmp	r3, #0
 8036a84:	d00b      	beq.n	8036a9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8036a86:	4b47      	ldr	r3, [pc, #284]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a88:	689b      	ldr	r3, [r3, #8]
 8036a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8036a8e:	2b08      	cmp	r3, #8
 8036a90:	d11c      	bne.n	8036acc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8036a92:	4b44      	ldr	r3, [pc, #272]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036a94:	685b      	ldr	r3, [r3, #4]
 8036a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8036a9a:	2b00      	cmp	r3, #0
 8036a9c:	d116      	bne.n	8036acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8036a9e:	4b41      	ldr	r3, [pc, #260]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036aa0:	681b      	ldr	r3, [r3, #0]
 8036aa2:	f003 0302 	and.w	r3, r3, #2
 8036aa6:	2b00      	cmp	r3, #0
 8036aa8:	d005      	beq.n	8036ab6 <HAL_RCC_OscConfig+0x152>
 8036aaa:	687b      	ldr	r3, [r7, #4]
 8036aac:	68db      	ldr	r3, [r3, #12]
 8036aae:	2b01      	cmp	r3, #1
 8036ab0:	d001      	beq.n	8036ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8036ab2:	2301      	movs	r3, #1
 8036ab4:	e1c7      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8036ab6:	4b3b      	ldr	r3, [pc, #236]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036ab8:	681b      	ldr	r3, [r3, #0]
 8036aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8036abe:	687b      	ldr	r3, [r7, #4]
 8036ac0:	691b      	ldr	r3, [r3, #16]
 8036ac2:	00db      	lsls	r3, r3, #3
 8036ac4:	4937      	ldr	r1, [pc, #220]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036ac6:	4313      	orrs	r3, r2
 8036ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8036aca:	e03a      	b.n	8036b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8036acc:	687b      	ldr	r3, [r7, #4]
 8036ace:	68db      	ldr	r3, [r3, #12]
 8036ad0:	2b00      	cmp	r3, #0
 8036ad2:	d020      	beq.n	8036b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8036ad4:	4b34      	ldr	r3, [pc, #208]	; (8036ba8 <HAL_RCC_OscConfig+0x244>)
 8036ad6:	2201      	movs	r2, #1
 8036ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8036ada:	f7fd fadb 	bl	8034094 <HAL_GetTick>
 8036ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8036ae0:	e008      	b.n	8036af4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8036ae2:	f7fd fad7 	bl	8034094 <HAL_GetTick>
 8036ae6:	4602      	mov	r2, r0
 8036ae8:	693b      	ldr	r3, [r7, #16]
 8036aea:	1ad3      	subs	r3, r2, r3
 8036aec:	2b02      	cmp	r3, #2
 8036aee:	d901      	bls.n	8036af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8036af0:	2303      	movs	r3, #3
 8036af2:	e1a8      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8036af4:	4b2b      	ldr	r3, [pc, #172]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036af6:	681b      	ldr	r3, [r3, #0]
 8036af8:	f003 0302 	and.w	r3, r3, #2
 8036afc:	2b00      	cmp	r3, #0
 8036afe:	d0f0      	beq.n	8036ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8036b00:	4b28      	ldr	r3, [pc, #160]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036b02:	681b      	ldr	r3, [r3, #0]
 8036b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8036b08:	687b      	ldr	r3, [r7, #4]
 8036b0a:	691b      	ldr	r3, [r3, #16]
 8036b0c:	00db      	lsls	r3, r3, #3
 8036b0e:	4925      	ldr	r1, [pc, #148]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036b10:	4313      	orrs	r3, r2
 8036b12:	600b      	str	r3, [r1, #0]
 8036b14:	e015      	b.n	8036b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8036b16:	4b24      	ldr	r3, [pc, #144]	; (8036ba8 <HAL_RCC_OscConfig+0x244>)
 8036b18:	2200      	movs	r2, #0
 8036b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8036b1c:	f7fd faba 	bl	8034094 <HAL_GetTick>
 8036b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8036b22:	e008      	b.n	8036b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8036b24:	f7fd fab6 	bl	8034094 <HAL_GetTick>
 8036b28:	4602      	mov	r2, r0
 8036b2a:	693b      	ldr	r3, [r7, #16]
 8036b2c:	1ad3      	subs	r3, r2, r3
 8036b2e:	2b02      	cmp	r3, #2
 8036b30:	d901      	bls.n	8036b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8036b32:	2303      	movs	r3, #3
 8036b34:	e187      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8036b36:	4b1b      	ldr	r3, [pc, #108]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036b38:	681b      	ldr	r3, [r3, #0]
 8036b3a:	f003 0302 	and.w	r3, r3, #2
 8036b3e:	2b00      	cmp	r3, #0
 8036b40:	d1f0      	bne.n	8036b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8036b42:	687b      	ldr	r3, [r7, #4]
 8036b44:	681b      	ldr	r3, [r3, #0]
 8036b46:	f003 0308 	and.w	r3, r3, #8
 8036b4a:	2b00      	cmp	r3, #0
 8036b4c:	d036      	beq.n	8036bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8036b4e:	687b      	ldr	r3, [r7, #4]
 8036b50:	695b      	ldr	r3, [r3, #20]
 8036b52:	2b00      	cmp	r3, #0
 8036b54:	d016      	beq.n	8036b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8036b56:	4b15      	ldr	r3, [pc, #84]	; (8036bac <HAL_RCC_OscConfig+0x248>)
 8036b58:	2201      	movs	r2, #1
 8036b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8036b5c:	f7fd fa9a 	bl	8034094 <HAL_GetTick>
 8036b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8036b62:	e008      	b.n	8036b76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8036b64:	f7fd fa96 	bl	8034094 <HAL_GetTick>
 8036b68:	4602      	mov	r2, r0
 8036b6a:	693b      	ldr	r3, [r7, #16]
 8036b6c:	1ad3      	subs	r3, r2, r3
 8036b6e:	2b02      	cmp	r3, #2
 8036b70:	d901      	bls.n	8036b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8036b72:	2303      	movs	r3, #3
 8036b74:	e167      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8036b76:	4b0b      	ldr	r3, [pc, #44]	; (8036ba4 <HAL_RCC_OscConfig+0x240>)
 8036b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036b7a:	f003 0302 	and.w	r3, r3, #2
 8036b7e:	2b00      	cmp	r3, #0
 8036b80:	d0f0      	beq.n	8036b64 <HAL_RCC_OscConfig+0x200>
 8036b82:	e01b      	b.n	8036bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8036b84:	4b09      	ldr	r3, [pc, #36]	; (8036bac <HAL_RCC_OscConfig+0x248>)
 8036b86:	2200      	movs	r2, #0
 8036b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8036b8a:	f7fd fa83 	bl	8034094 <HAL_GetTick>
 8036b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8036b90:	e00e      	b.n	8036bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8036b92:	f7fd fa7f 	bl	8034094 <HAL_GetTick>
 8036b96:	4602      	mov	r2, r0
 8036b98:	693b      	ldr	r3, [r7, #16]
 8036b9a:	1ad3      	subs	r3, r2, r3
 8036b9c:	2b02      	cmp	r3, #2
 8036b9e:	d907      	bls.n	8036bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8036ba0:	2303      	movs	r3, #3
 8036ba2:	e150      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
 8036ba4:	40023800 	.word	0x40023800
 8036ba8:	42470000 	.word	0x42470000
 8036bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8036bb0:	4b88      	ldr	r3, [pc, #544]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036bb4:	f003 0302 	and.w	r3, r3, #2
 8036bb8:	2b00      	cmp	r3, #0
 8036bba:	d1ea      	bne.n	8036b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8036bbc:	687b      	ldr	r3, [r7, #4]
 8036bbe:	681b      	ldr	r3, [r3, #0]
 8036bc0:	f003 0304 	and.w	r3, r3, #4
 8036bc4:	2b00      	cmp	r3, #0
 8036bc6:	f000 8097 	beq.w	8036cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8036bca:	2300      	movs	r3, #0
 8036bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8036bce:	4b81      	ldr	r3, [pc, #516]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036bd6:	2b00      	cmp	r3, #0
 8036bd8:	d10f      	bne.n	8036bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8036bda:	2300      	movs	r3, #0
 8036bdc:	60bb      	str	r3, [r7, #8]
 8036bde:	4b7d      	ldr	r3, [pc, #500]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036be2:	4a7c      	ldr	r2, [pc, #496]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036be8:	6413      	str	r3, [r2, #64]	; 0x40
 8036bea:	4b7a      	ldr	r3, [pc, #488]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036bf2:	60bb      	str	r3, [r7, #8]
 8036bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8036bf6:	2301      	movs	r3, #1
 8036bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8036bfa:	4b77      	ldr	r3, [pc, #476]	; (8036dd8 <HAL_RCC_OscConfig+0x474>)
 8036bfc:	681b      	ldr	r3, [r3, #0]
 8036bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036c02:	2b00      	cmp	r3, #0
 8036c04:	d118      	bne.n	8036c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8036c06:	4b74      	ldr	r3, [pc, #464]	; (8036dd8 <HAL_RCC_OscConfig+0x474>)
 8036c08:	681b      	ldr	r3, [r3, #0]
 8036c0a:	4a73      	ldr	r2, [pc, #460]	; (8036dd8 <HAL_RCC_OscConfig+0x474>)
 8036c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8036c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8036c12:	f7fd fa3f 	bl	8034094 <HAL_GetTick>
 8036c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8036c18:	e008      	b.n	8036c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8036c1a:	f7fd fa3b 	bl	8034094 <HAL_GetTick>
 8036c1e:	4602      	mov	r2, r0
 8036c20:	693b      	ldr	r3, [r7, #16]
 8036c22:	1ad3      	subs	r3, r2, r3
 8036c24:	2b02      	cmp	r3, #2
 8036c26:	d901      	bls.n	8036c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8036c28:	2303      	movs	r3, #3
 8036c2a:	e10c      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8036c2c:	4b6a      	ldr	r3, [pc, #424]	; (8036dd8 <HAL_RCC_OscConfig+0x474>)
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036c34:	2b00      	cmp	r3, #0
 8036c36:	d0f0      	beq.n	8036c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8036c38:	687b      	ldr	r3, [r7, #4]
 8036c3a:	689b      	ldr	r3, [r3, #8]
 8036c3c:	2b01      	cmp	r3, #1
 8036c3e:	d106      	bne.n	8036c4e <HAL_RCC_OscConfig+0x2ea>
 8036c40:	4b64      	ldr	r3, [pc, #400]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036c44:	4a63      	ldr	r2, [pc, #396]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c46:	f043 0301 	orr.w	r3, r3, #1
 8036c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8036c4c:	e01c      	b.n	8036c88 <HAL_RCC_OscConfig+0x324>
 8036c4e:	687b      	ldr	r3, [r7, #4]
 8036c50:	689b      	ldr	r3, [r3, #8]
 8036c52:	2b05      	cmp	r3, #5
 8036c54:	d10c      	bne.n	8036c70 <HAL_RCC_OscConfig+0x30c>
 8036c56:	4b5f      	ldr	r3, [pc, #380]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036c5a:	4a5e      	ldr	r2, [pc, #376]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c5c:	f043 0304 	orr.w	r3, r3, #4
 8036c60:	6713      	str	r3, [r2, #112]	; 0x70
 8036c62:	4b5c      	ldr	r3, [pc, #368]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036c66:	4a5b      	ldr	r2, [pc, #364]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c68:	f043 0301 	orr.w	r3, r3, #1
 8036c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8036c6e:	e00b      	b.n	8036c88 <HAL_RCC_OscConfig+0x324>
 8036c70:	4b58      	ldr	r3, [pc, #352]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036c74:	4a57      	ldr	r2, [pc, #348]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c76:	f023 0301 	bic.w	r3, r3, #1
 8036c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8036c7c:	4b55      	ldr	r3, [pc, #340]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036c80:	4a54      	ldr	r2, [pc, #336]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036c82:	f023 0304 	bic.w	r3, r3, #4
 8036c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8036c88:	687b      	ldr	r3, [r7, #4]
 8036c8a:	689b      	ldr	r3, [r3, #8]
 8036c8c:	2b00      	cmp	r3, #0
 8036c8e:	d015      	beq.n	8036cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8036c90:	f7fd fa00 	bl	8034094 <HAL_GetTick>
 8036c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8036c96:	e00a      	b.n	8036cae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8036c98:	f7fd f9fc 	bl	8034094 <HAL_GetTick>
 8036c9c:	4602      	mov	r2, r0
 8036c9e:	693b      	ldr	r3, [r7, #16]
 8036ca0:	1ad3      	subs	r3, r2, r3
 8036ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8036ca6:	4293      	cmp	r3, r2
 8036ca8:	d901      	bls.n	8036cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8036caa:	2303      	movs	r3, #3
 8036cac:	e0cb      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8036cae:	4b49      	ldr	r3, [pc, #292]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036cb2:	f003 0302 	and.w	r3, r3, #2
 8036cb6:	2b00      	cmp	r3, #0
 8036cb8:	d0ee      	beq.n	8036c98 <HAL_RCC_OscConfig+0x334>
 8036cba:	e014      	b.n	8036ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8036cbc:	f7fd f9ea 	bl	8034094 <HAL_GetTick>
 8036cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8036cc2:	e00a      	b.n	8036cda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8036cc4:	f7fd f9e6 	bl	8034094 <HAL_GetTick>
 8036cc8:	4602      	mov	r2, r0
 8036cca:	693b      	ldr	r3, [r7, #16]
 8036ccc:	1ad3      	subs	r3, r2, r3
 8036cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8036cd2:	4293      	cmp	r3, r2
 8036cd4:	d901      	bls.n	8036cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8036cd6:	2303      	movs	r3, #3
 8036cd8:	e0b5      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8036cda:	4b3e      	ldr	r3, [pc, #248]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036cde:	f003 0302 	and.w	r3, r3, #2
 8036ce2:	2b00      	cmp	r3, #0
 8036ce4:	d1ee      	bne.n	8036cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8036ce6:	7dfb      	ldrb	r3, [r7, #23]
 8036ce8:	2b01      	cmp	r3, #1
 8036cea:	d105      	bne.n	8036cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8036cec:	4b39      	ldr	r3, [pc, #228]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036cf0:	4a38      	ldr	r2, [pc, #224]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8036cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8036cf8:	687b      	ldr	r3, [r7, #4]
 8036cfa:	699b      	ldr	r3, [r3, #24]
 8036cfc:	2b00      	cmp	r3, #0
 8036cfe:	f000 80a1 	beq.w	8036e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8036d02:	4b34      	ldr	r3, [pc, #208]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036d04:	689b      	ldr	r3, [r3, #8]
 8036d06:	f003 030c 	and.w	r3, r3, #12
 8036d0a:	2b08      	cmp	r3, #8
 8036d0c:	d05c      	beq.n	8036dc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8036d0e:	687b      	ldr	r3, [r7, #4]
 8036d10:	699b      	ldr	r3, [r3, #24]
 8036d12:	2b02      	cmp	r3, #2
 8036d14:	d141      	bne.n	8036d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8036d16:	4b31      	ldr	r3, [pc, #196]	; (8036ddc <HAL_RCC_OscConfig+0x478>)
 8036d18:	2200      	movs	r2, #0
 8036d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8036d1c:	f7fd f9ba 	bl	8034094 <HAL_GetTick>
 8036d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8036d22:	e008      	b.n	8036d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8036d24:	f7fd f9b6 	bl	8034094 <HAL_GetTick>
 8036d28:	4602      	mov	r2, r0
 8036d2a:	693b      	ldr	r3, [r7, #16]
 8036d2c:	1ad3      	subs	r3, r2, r3
 8036d2e:	2b02      	cmp	r3, #2
 8036d30:	d901      	bls.n	8036d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8036d32:	2303      	movs	r3, #3
 8036d34:	e087      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8036d36:	4b27      	ldr	r3, [pc, #156]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036d38:	681b      	ldr	r3, [r3, #0]
 8036d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8036d3e:	2b00      	cmp	r3, #0
 8036d40:	d1f0      	bne.n	8036d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8036d42:	687b      	ldr	r3, [r7, #4]
 8036d44:	69da      	ldr	r2, [r3, #28]
 8036d46:	687b      	ldr	r3, [r7, #4]
 8036d48:	6a1b      	ldr	r3, [r3, #32]
 8036d4a:	431a      	orrs	r2, r3
 8036d4c:	687b      	ldr	r3, [r7, #4]
 8036d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036d50:	019b      	lsls	r3, r3, #6
 8036d52:	431a      	orrs	r2, r3
 8036d54:	687b      	ldr	r3, [r7, #4]
 8036d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036d58:	085b      	lsrs	r3, r3, #1
 8036d5a:	3b01      	subs	r3, #1
 8036d5c:	041b      	lsls	r3, r3, #16
 8036d5e:	431a      	orrs	r2, r3
 8036d60:	687b      	ldr	r3, [r7, #4]
 8036d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036d64:	061b      	lsls	r3, r3, #24
 8036d66:	491b      	ldr	r1, [pc, #108]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036d68:	4313      	orrs	r3, r2
 8036d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8036d6c:	4b1b      	ldr	r3, [pc, #108]	; (8036ddc <HAL_RCC_OscConfig+0x478>)
 8036d6e:	2201      	movs	r2, #1
 8036d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8036d72:	f7fd f98f 	bl	8034094 <HAL_GetTick>
 8036d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8036d78:	e008      	b.n	8036d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8036d7a:	f7fd f98b 	bl	8034094 <HAL_GetTick>
 8036d7e:	4602      	mov	r2, r0
 8036d80:	693b      	ldr	r3, [r7, #16]
 8036d82:	1ad3      	subs	r3, r2, r3
 8036d84:	2b02      	cmp	r3, #2
 8036d86:	d901      	bls.n	8036d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8036d88:	2303      	movs	r3, #3
 8036d8a:	e05c      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8036d8c:	4b11      	ldr	r3, [pc, #68]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036d8e:	681b      	ldr	r3, [r3, #0]
 8036d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8036d94:	2b00      	cmp	r3, #0
 8036d96:	d0f0      	beq.n	8036d7a <HAL_RCC_OscConfig+0x416>
 8036d98:	e054      	b.n	8036e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8036d9a:	4b10      	ldr	r3, [pc, #64]	; (8036ddc <HAL_RCC_OscConfig+0x478>)
 8036d9c:	2200      	movs	r2, #0
 8036d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8036da0:	f7fd f978 	bl	8034094 <HAL_GetTick>
 8036da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8036da6:	e008      	b.n	8036dba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8036da8:	f7fd f974 	bl	8034094 <HAL_GetTick>
 8036dac:	4602      	mov	r2, r0
 8036dae:	693b      	ldr	r3, [r7, #16]
 8036db0:	1ad3      	subs	r3, r2, r3
 8036db2:	2b02      	cmp	r3, #2
 8036db4:	d901      	bls.n	8036dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8036db6:	2303      	movs	r3, #3
 8036db8:	e045      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8036dba:	4b06      	ldr	r3, [pc, #24]	; (8036dd4 <HAL_RCC_OscConfig+0x470>)
 8036dbc:	681b      	ldr	r3, [r3, #0]
 8036dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8036dc2:	2b00      	cmp	r3, #0
 8036dc4:	d1f0      	bne.n	8036da8 <HAL_RCC_OscConfig+0x444>
 8036dc6:	e03d      	b.n	8036e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8036dc8:	687b      	ldr	r3, [r7, #4]
 8036dca:	699b      	ldr	r3, [r3, #24]
 8036dcc:	2b01      	cmp	r3, #1
 8036dce:	d107      	bne.n	8036de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8036dd0:	2301      	movs	r3, #1
 8036dd2:	e038      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
 8036dd4:	40023800 	.word	0x40023800
 8036dd8:	40007000 	.word	0x40007000
 8036ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8036de0:	4b1b      	ldr	r3, [pc, #108]	; (8036e50 <HAL_RCC_OscConfig+0x4ec>)
 8036de2:	685b      	ldr	r3, [r3, #4]
 8036de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8036de6:	687b      	ldr	r3, [r7, #4]
 8036de8:	699b      	ldr	r3, [r3, #24]
 8036dea:	2b01      	cmp	r3, #1
 8036dec:	d028      	beq.n	8036e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8036dee:	68fb      	ldr	r3, [r7, #12]
 8036df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8036df4:	687b      	ldr	r3, [r7, #4]
 8036df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8036df8:	429a      	cmp	r2, r3
 8036dfa:	d121      	bne.n	8036e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8036dfc:	68fb      	ldr	r3, [r7, #12]
 8036dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8036e02:	687b      	ldr	r3, [r7, #4]
 8036e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8036e06:	429a      	cmp	r2, r3
 8036e08:	d11a      	bne.n	8036e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8036e0a:	68fa      	ldr	r2, [r7, #12]
 8036e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8036e10:	4013      	ands	r3, r2
 8036e12:	687a      	ldr	r2, [r7, #4]
 8036e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8036e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8036e18:	4293      	cmp	r3, r2
 8036e1a:	d111      	bne.n	8036e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8036e1c:	68fb      	ldr	r3, [r7, #12]
 8036e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8036e22:	687b      	ldr	r3, [r7, #4]
 8036e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036e26:	085b      	lsrs	r3, r3, #1
 8036e28:	3b01      	subs	r3, #1
 8036e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8036e2c:	429a      	cmp	r2, r3
 8036e2e:	d107      	bne.n	8036e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8036e30:	68fb      	ldr	r3, [r7, #12]
 8036e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8036e36:	687b      	ldr	r3, [r7, #4]
 8036e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8036e3c:	429a      	cmp	r2, r3
 8036e3e:	d001      	beq.n	8036e44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8036e40:	2301      	movs	r3, #1
 8036e42:	e000      	b.n	8036e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8036e44:	2300      	movs	r3, #0
}
 8036e46:	4618      	mov	r0, r3
 8036e48:	3718      	adds	r7, #24
 8036e4a:	46bd      	mov	sp, r7
 8036e4c:	bd80      	pop	{r7, pc}
 8036e4e:	bf00      	nop
 8036e50:	40023800 	.word	0x40023800

08036e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8036e54:	b580      	push	{r7, lr}
 8036e56:	b084      	sub	sp, #16
 8036e58:	af00      	add	r7, sp, #0
 8036e5a:	6078      	str	r0, [r7, #4]
 8036e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8036e5e:	687b      	ldr	r3, [r7, #4]
 8036e60:	2b00      	cmp	r3, #0
 8036e62:	d101      	bne.n	8036e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8036e64:	2301      	movs	r3, #1
 8036e66:	e0cc      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8036e68:	4b68      	ldr	r3, [pc, #416]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036e6a:	681b      	ldr	r3, [r3, #0]
 8036e6c:	f003 0307 	and.w	r3, r3, #7
 8036e70:	683a      	ldr	r2, [r7, #0]
 8036e72:	429a      	cmp	r2, r3
 8036e74:	d90c      	bls.n	8036e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8036e76:	4b65      	ldr	r3, [pc, #404]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036e78:	683a      	ldr	r2, [r7, #0]
 8036e7a:	b2d2      	uxtb	r2, r2
 8036e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8036e7e:	4b63      	ldr	r3, [pc, #396]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036e80:	681b      	ldr	r3, [r3, #0]
 8036e82:	f003 0307 	and.w	r3, r3, #7
 8036e86:	683a      	ldr	r2, [r7, #0]
 8036e88:	429a      	cmp	r2, r3
 8036e8a:	d001      	beq.n	8036e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8036e8c:	2301      	movs	r3, #1
 8036e8e:	e0b8      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8036e90:	687b      	ldr	r3, [r7, #4]
 8036e92:	681b      	ldr	r3, [r3, #0]
 8036e94:	f003 0302 	and.w	r3, r3, #2
 8036e98:	2b00      	cmp	r3, #0
 8036e9a:	d020      	beq.n	8036ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8036e9c:	687b      	ldr	r3, [r7, #4]
 8036e9e:	681b      	ldr	r3, [r3, #0]
 8036ea0:	f003 0304 	and.w	r3, r3, #4
 8036ea4:	2b00      	cmp	r3, #0
 8036ea6:	d005      	beq.n	8036eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8036ea8:	4b59      	ldr	r3, [pc, #356]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036eaa:	689b      	ldr	r3, [r3, #8]
 8036eac:	4a58      	ldr	r2, [pc, #352]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8036eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8036eb4:	687b      	ldr	r3, [r7, #4]
 8036eb6:	681b      	ldr	r3, [r3, #0]
 8036eb8:	f003 0308 	and.w	r3, r3, #8
 8036ebc:	2b00      	cmp	r3, #0
 8036ebe:	d005      	beq.n	8036ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8036ec0:	4b53      	ldr	r3, [pc, #332]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036ec2:	689b      	ldr	r3, [r3, #8]
 8036ec4:	4a52      	ldr	r2, [pc, #328]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8036eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8036ecc:	4b50      	ldr	r3, [pc, #320]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036ece:	689b      	ldr	r3, [r3, #8]
 8036ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8036ed4:	687b      	ldr	r3, [r7, #4]
 8036ed6:	689b      	ldr	r3, [r3, #8]
 8036ed8:	494d      	ldr	r1, [pc, #308]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036eda:	4313      	orrs	r3, r2
 8036edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8036ede:	687b      	ldr	r3, [r7, #4]
 8036ee0:	681b      	ldr	r3, [r3, #0]
 8036ee2:	f003 0301 	and.w	r3, r3, #1
 8036ee6:	2b00      	cmp	r3, #0
 8036ee8:	d044      	beq.n	8036f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8036eea:	687b      	ldr	r3, [r7, #4]
 8036eec:	685b      	ldr	r3, [r3, #4]
 8036eee:	2b01      	cmp	r3, #1
 8036ef0:	d107      	bne.n	8036f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8036ef2:	4b47      	ldr	r3, [pc, #284]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036ef4:	681b      	ldr	r3, [r3, #0]
 8036ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8036efa:	2b00      	cmp	r3, #0
 8036efc:	d119      	bne.n	8036f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8036efe:	2301      	movs	r3, #1
 8036f00:	e07f      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8036f02:	687b      	ldr	r3, [r7, #4]
 8036f04:	685b      	ldr	r3, [r3, #4]
 8036f06:	2b02      	cmp	r3, #2
 8036f08:	d003      	beq.n	8036f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8036f0a:	687b      	ldr	r3, [r7, #4]
 8036f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8036f0e:	2b03      	cmp	r3, #3
 8036f10:	d107      	bne.n	8036f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8036f12:	4b3f      	ldr	r3, [pc, #252]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036f14:	681b      	ldr	r3, [r3, #0]
 8036f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8036f1a:	2b00      	cmp	r3, #0
 8036f1c:	d109      	bne.n	8036f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8036f1e:	2301      	movs	r3, #1
 8036f20:	e06f      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8036f22:	4b3b      	ldr	r3, [pc, #236]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036f24:	681b      	ldr	r3, [r3, #0]
 8036f26:	f003 0302 	and.w	r3, r3, #2
 8036f2a:	2b00      	cmp	r3, #0
 8036f2c:	d101      	bne.n	8036f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8036f2e:	2301      	movs	r3, #1
 8036f30:	e067      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8036f32:	4b37      	ldr	r3, [pc, #220]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036f34:	689b      	ldr	r3, [r3, #8]
 8036f36:	f023 0203 	bic.w	r2, r3, #3
 8036f3a:	687b      	ldr	r3, [r7, #4]
 8036f3c:	685b      	ldr	r3, [r3, #4]
 8036f3e:	4934      	ldr	r1, [pc, #208]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036f40:	4313      	orrs	r3, r2
 8036f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8036f44:	f7fd f8a6 	bl	8034094 <HAL_GetTick>
 8036f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8036f4a:	e00a      	b.n	8036f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8036f4c:	f7fd f8a2 	bl	8034094 <HAL_GetTick>
 8036f50:	4602      	mov	r2, r0
 8036f52:	68fb      	ldr	r3, [r7, #12]
 8036f54:	1ad3      	subs	r3, r2, r3
 8036f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8036f5a:	4293      	cmp	r3, r2
 8036f5c:	d901      	bls.n	8036f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8036f5e:	2303      	movs	r3, #3
 8036f60:	e04f      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8036f62:	4b2b      	ldr	r3, [pc, #172]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036f64:	689b      	ldr	r3, [r3, #8]
 8036f66:	f003 020c 	and.w	r2, r3, #12
 8036f6a:	687b      	ldr	r3, [r7, #4]
 8036f6c:	685b      	ldr	r3, [r3, #4]
 8036f6e:	009b      	lsls	r3, r3, #2
 8036f70:	429a      	cmp	r2, r3
 8036f72:	d1eb      	bne.n	8036f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8036f74:	4b25      	ldr	r3, [pc, #148]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036f76:	681b      	ldr	r3, [r3, #0]
 8036f78:	f003 0307 	and.w	r3, r3, #7
 8036f7c:	683a      	ldr	r2, [r7, #0]
 8036f7e:	429a      	cmp	r2, r3
 8036f80:	d20c      	bcs.n	8036f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8036f82:	4b22      	ldr	r3, [pc, #136]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036f84:	683a      	ldr	r2, [r7, #0]
 8036f86:	b2d2      	uxtb	r2, r2
 8036f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8036f8a:	4b20      	ldr	r3, [pc, #128]	; (803700c <HAL_RCC_ClockConfig+0x1b8>)
 8036f8c:	681b      	ldr	r3, [r3, #0]
 8036f8e:	f003 0307 	and.w	r3, r3, #7
 8036f92:	683a      	ldr	r2, [r7, #0]
 8036f94:	429a      	cmp	r2, r3
 8036f96:	d001      	beq.n	8036f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8036f98:	2301      	movs	r3, #1
 8036f9a:	e032      	b.n	8037002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8036f9c:	687b      	ldr	r3, [r7, #4]
 8036f9e:	681b      	ldr	r3, [r3, #0]
 8036fa0:	f003 0304 	and.w	r3, r3, #4
 8036fa4:	2b00      	cmp	r3, #0
 8036fa6:	d008      	beq.n	8036fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8036fa8:	4b19      	ldr	r3, [pc, #100]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036faa:	689b      	ldr	r3, [r3, #8]
 8036fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8036fb0:	687b      	ldr	r3, [r7, #4]
 8036fb2:	68db      	ldr	r3, [r3, #12]
 8036fb4:	4916      	ldr	r1, [pc, #88]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036fb6:	4313      	orrs	r3, r2
 8036fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8036fba:	687b      	ldr	r3, [r7, #4]
 8036fbc:	681b      	ldr	r3, [r3, #0]
 8036fbe:	f003 0308 	and.w	r3, r3, #8
 8036fc2:	2b00      	cmp	r3, #0
 8036fc4:	d009      	beq.n	8036fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8036fc6:	4b12      	ldr	r3, [pc, #72]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036fc8:	689b      	ldr	r3, [r3, #8]
 8036fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8036fce:	687b      	ldr	r3, [r7, #4]
 8036fd0:	691b      	ldr	r3, [r3, #16]
 8036fd2:	00db      	lsls	r3, r3, #3
 8036fd4:	490e      	ldr	r1, [pc, #56]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036fd6:	4313      	orrs	r3, r2
 8036fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8036fda:	f000 f821 	bl	8037020 <HAL_RCC_GetSysClockFreq>
 8036fde:	4602      	mov	r2, r0
 8036fe0:	4b0b      	ldr	r3, [pc, #44]	; (8037010 <HAL_RCC_ClockConfig+0x1bc>)
 8036fe2:	689b      	ldr	r3, [r3, #8]
 8036fe4:	091b      	lsrs	r3, r3, #4
 8036fe6:	f003 030f 	and.w	r3, r3, #15
 8036fea:	490a      	ldr	r1, [pc, #40]	; (8037014 <HAL_RCC_ClockConfig+0x1c0>)
 8036fec:	5ccb      	ldrb	r3, [r1, r3]
 8036fee:	fa22 f303 	lsr.w	r3, r2, r3
 8036ff2:	4a09      	ldr	r2, [pc, #36]	; (8037018 <HAL_RCC_ClockConfig+0x1c4>)
 8036ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8036ff6:	4b09      	ldr	r3, [pc, #36]	; (803701c <HAL_RCC_ClockConfig+0x1c8>)
 8036ff8:	681b      	ldr	r3, [r3, #0]
 8036ffa:	4618      	mov	r0, r3
 8036ffc:	f7fd f806 	bl	803400c <HAL_InitTick>

  return HAL_OK;
 8037000:	2300      	movs	r3, #0
}
 8037002:	4618      	mov	r0, r3
 8037004:	3710      	adds	r7, #16
 8037006:	46bd      	mov	sp, r7
 8037008:	bd80      	pop	{r7, pc}
 803700a:	bf00      	nop
 803700c:	40023c00 	.word	0x40023c00
 8037010:	40023800 	.word	0x40023800
 8037014:	08037f40 	.word	0x08037f40
 8037018:	20000004 	.word	0x20000004
 803701c:	20000008 	.word	0x20000008

08037020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8037020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8037024:	b094      	sub	sp, #80	; 0x50
 8037026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8037028:	2300      	movs	r3, #0
 803702a:	647b      	str	r3, [r7, #68]	; 0x44
 803702c:	2300      	movs	r3, #0
 803702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037030:	2300      	movs	r3, #0
 8037032:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8037034:	2300      	movs	r3, #0
 8037036:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8037038:	4b79      	ldr	r3, [pc, #484]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 803703a:	689b      	ldr	r3, [r3, #8]
 803703c:	f003 030c 	and.w	r3, r3, #12
 8037040:	2b08      	cmp	r3, #8
 8037042:	d00d      	beq.n	8037060 <HAL_RCC_GetSysClockFreq+0x40>
 8037044:	2b08      	cmp	r3, #8
 8037046:	f200 80e1 	bhi.w	803720c <HAL_RCC_GetSysClockFreq+0x1ec>
 803704a:	2b00      	cmp	r3, #0
 803704c:	d002      	beq.n	8037054 <HAL_RCC_GetSysClockFreq+0x34>
 803704e:	2b04      	cmp	r3, #4
 8037050:	d003      	beq.n	803705a <HAL_RCC_GetSysClockFreq+0x3a>
 8037052:	e0db      	b.n	803720c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8037054:	4b73      	ldr	r3, [pc, #460]	; (8037224 <HAL_RCC_GetSysClockFreq+0x204>)
 8037056:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8037058:	e0db      	b.n	8037212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 803705a:	4b73      	ldr	r3, [pc, #460]	; (8037228 <HAL_RCC_GetSysClockFreq+0x208>)
 803705c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 803705e:	e0d8      	b.n	8037212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8037060:	4b6f      	ldr	r3, [pc, #444]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 8037062:	685b      	ldr	r3, [r3, #4]
 8037064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8037068:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 803706a:	4b6d      	ldr	r3, [pc, #436]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 803706c:	685b      	ldr	r3, [r3, #4]
 803706e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8037072:	2b00      	cmp	r3, #0
 8037074:	d063      	beq.n	803713e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8037076:	4b6a      	ldr	r3, [pc, #424]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 8037078:	685b      	ldr	r3, [r3, #4]
 803707a:	099b      	lsrs	r3, r3, #6
 803707c:	2200      	movs	r2, #0
 803707e:	63bb      	str	r3, [r7, #56]	; 0x38
 8037080:	63fa      	str	r2, [r7, #60]	; 0x3c
 8037082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037088:	633b      	str	r3, [r7, #48]	; 0x30
 803708a:	2300      	movs	r3, #0
 803708c:	637b      	str	r3, [r7, #52]	; 0x34
 803708e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8037092:	4622      	mov	r2, r4
 8037094:	462b      	mov	r3, r5
 8037096:	f04f 0000 	mov.w	r0, #0
 803709a:	f04f 0100 	mov.w	r1, #0
 803709e:	0159      	lsls	r1, r3, #5
 80370a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80370a4:	0150      	lsls	r0, r2, #5
 80370a6:	4602      	mov	r2, r0
 80370a8:	460b      	mov	r3, r1
 80370aa:	4621      	mov	r1, r4
 80370ac:	1a51      	subs	r1, r2, r1
 80370ae:	6139      	str	r1, [r7, #16]
 80370b0:	4629      	mov	r1, r5
 80370b2:	eb63 0301 	sbc.w	r3, r3, r1
 80370b6:	617b      	str	r3, [r7, #20]
 80370b8:	f04f 0200 	mov.w	r2, #0
 80370bc:	f04f 0300 	mov.w	r3, #0
 80370c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80370c4:	4659      	mov	r1, fp
 80370c6:	018b      	lsls	r3, r1, #6
 80370c8:	4651      	mov	r1, sl
 80370ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80370ce:	4651      	mov	r1, sl
 80370d0:	018a      	lsls	r2, r1, #6
 80370d2:	4651      	mov	r1, sl
 80370d4:	ebb2 0801 	subs.w	r8, r2, r1
 80370d8:	4659      	mov	r1, fp
 80370da:	eb63 0901 	sbc.w	r9, r3, r1
 80370de:	f04f 0200 	mov.w	r2, #0
 80370e2:	f04f 0300 	mov.w	r3, #0
 80370e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80370ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80370ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80370f2:	4690      	mov	r8, r2
 80370f4:	4699      	mov	r9, r3
 80370f6:	4623      	mov	r3, r4
 80370f8:	eb18 0303 	adds.w	r3, r8, r3
 80370fc:	60bb      	str	r3, [r7, #8]
 80370fe:	462b      	mov	r3, r5
 8037100:	eb49 0303 	adc.w	r3, r9, r3
 8037104:	60fb      	str	r3, [r7, #12]
 8037106:	f04f 0200 	mov.w	r2, #0
 803710a:	f04f 0300 	mov.w	r3, #0
 803710e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8037112:	4629      	mov	r1, r5
 8037114:	024b      	lsls	r3, r1, #9
 8037116:	4621      	mov	r1, r4
 8037118:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 803711c:	4621      	mov	r1, r4
 803711e:	024a      	lsls	r2, r1, #9
 8037120:	4610      	mov	r0, r2
 8037122:	4619      	mov	r1, r3
 8037124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8037126:	2200      	movs	r2, #0
 8037128:	62bb      	str	r3, [r7, #40]	; 0x28
 803712a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803712c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8037130:	f7fb fdc2 	bl	8032cb8 <__aeabi_uldivmod>
 8037134:	4602      	mov	r2, r0
 8037136:	460b      	mov	r3, r1
 8037138:	4613      	mov	r3, r2
 803713a:	64fb      	str	r3, [r7, #76]	; 0x4c
 803713c:	e058      	b.n	80371f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 803713e:	4b38      	ldr	r3, [pc, #224]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 8037140:	685b      	ldr	r3, [r3, #4]
 8037142:	099b      	lsrs	r3, r3, #6
 8037144:	2200      	movs	r2, #0
 8037146:	4618      	mov	r0, r3
 8037148:	4611      	mov	r1, r2
 803714a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 803714e:	623b      	str	r3, [r7, #32]
 8037150:	2300      	movs	r3, #0
 8037152:	627b      	str	r3, [r7, #36]	; 0x24
 8037154:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8037158:	4642      	mov	r2, r8
 803715a:	464b      	mov	r3, r9
 803715c:	f04f 0000 	mov.w	r0, #0
 8037160:	f04f 0100 	mov.w	r1, #0
 8037164:	0159      	lsls	r1, r3, #5
 8037166:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 803716a:	0150      	lsls	r0, r2, #5
 803716c:	4602      	mov	r2, r0
 803716e:	460b      	mov	r3, r1
 8037170:	4641      	mov	r1, r8
 8037172:	ebb2 0a01 	subs.w	sl, r2, r1
 8037176:	4649      	mov	r1, r9
 8037178:	eb63 0b01 	sbc.w	fp, r3, r1
 803717c:	f04f 0200 	mov.w	r2, #0
 8037180:	f04f 0300 	mov.w	r3, #0
 8037184:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8037188:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 803718c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8037190:	ebb2 040a 	subs.w	r4, r2, sl
 8037194:	eb63 050b 	sbc.w	r5, r3, fp
 8037198:	f04f 0200 	mov.w	r2, #0
 803719c:	f04f 0300 	mov.w	r3, #0
 80371a0:	00eb      	lsls	r3, r5, #3
 80371a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80371a6:	00e2      	lsls	r2, r4, #3
 80371a8:	4614      	mov	r4, r2
 80371aa:	461d      	mov	r5, r3
 80371ac:	4643      	mov	r3, r8
 80371ae:	18e3      	adds	r3, r4, r3
 80371b0:	603b      	str	r3, [r7, #0]
 80371b2:	464b      	mov	r3, r9
 80371b4:	eb45 0303 	adc.w	r3, r5, r3
 80371b8:	607b      	str	r3, [r7, #4]
 80371ba:	f04f 0200 	mov.w	r2, #0
 80371be:	f04f 0300 	mov.w	r3, #0
 80371c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80371c6:	4629      	mov	r1, r5
 80371c8:	028b      	lsls	r3, r1, #10
 80371ca:	4621      	mov	r1, r4
 80371cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80371d0:	4621      	mov	r1, r4
 80371d2:	028a      	lsls	r2, r1, #10
 80371d4:	4610      	mov	r0, r2
 80371d6:	4619      	mov	r1, r3
 80371d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80371da:	2200      	movs	r2, #0
 80371dc:	61bb      	str	r3, [r7, #24]
 80371de:	61fa      	str	r2, [r7, #28]
 80371e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80371e4:	f7fb fd68 	bl	8032cb8 <__aeabi_uldivmod>
 80371e8:	4602      	mov	r2, r0
 80371ea:	460b      	mov	r3, r1
 80371ec:	4613      	mov	r3, r2
 80371ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80371f0:	4b0b      	ldr	r3, [pc, #44]	; (8037220 <HAL_RCC_GetSysClockFreq+0x200>)
 80371f2:	685b      	ldr	r3, [r3, #4]
 80371f4:	0c1b      	lsrs	r3, r3, #16
 80371f6:	f003 0303 	and.w	r3, r3, #3
 80371fa:	3301      	adds	r3, #1
 80371fc:	005b      	lsls	r3, r3, #1
 80371fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8037200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8037202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037204:	fbb2 f3f3 	udiv	r3, r2, r3
 8037208:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 803720a:	e002      	b.n	8037212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 803720c:	4b05      	ldr	r3, [pc, #20]	; (8037224 <HAL_RCC_GetSysClockFreq+0x204>)
 803720e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8037210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8037212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8037214:	4618      	mov	r0, r3
 8037216:	3750      	adds	r7, #80	; 0x50
 8037218:	46bd      	mov	sp, r7
 803721a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803721e:	bf00      	nop
 8037220:	40023800 	.word	0x40023800
 8037224:	00f42400 	.word	0x00f42400
 8037228:	007a1200 	.word	0x007a1200

0803722c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 803722c:	b480      	push	{r7}
 803722e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8037230:	4b03      	ldr	r3, [pc, #12]	; (8037240 <HAL_RCC_GetHCLKFreq+0x14>)
 8037232:	681b      	ldr	r3, [r3, #0]
}
 8037234:	4618      	mov	r0, r3
 8037236:	46bd      	mov	sp, r7
 8037238:	f85d 7b04 	ldr.w	r7, [sp], #4
 803723c:	4770      	bx	lr
 803723e:	bf00      	nop
 8037240:	20000004 	.word	0x20000004

08037244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8037244:	b580      	push	{r7, lr}
 8037246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8037248:	f7ff fff0 	bl	803722c <HAL_RCC_GetHCLKFreq>
 803724c:	4602      	mov	r2, r0
 803724e:	4b05      	ldr	r3, [pc, #20]	; (8037264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8037250:	689b      	ldr	r3, [r3, #8]
 8037252:	0a9b      	lsrs	r3, r3, #10
 8037254:	f003 0307 	and.w	r3, r3, #7
 8037258:	4903      	ldr	r1, [pc, #12]	; (8037268 <HAL_RCC_GetPCLK1Freq+0x24>)
 803725a:	5ccb      	ldrb	r3, [r1, r3]
 803725c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8037260:	4618      	mov	r0, r3
 8037262:	bd80      	pop	{r7, pc}
 8037264:	40023800 	.word	0x40023800
 8037268:	08037f50 	.word	0x08037f50

0803726c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 803726c:	b580      	push	{r7, lr}
 803726e:	b086      	sub	sp, #24
 8037270:	af00      	add	r7, sp, #0
 8037272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8037274:	2300      	movs	r3, #0
 8037276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8037278:	2300      	movs	r3, #0
 803727a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 803727c:	687b      	ldr	r3, [r7, #4]
 803727e:	681b      	ldr	r3, [r3, #0]
 8037280:	f003 0301 	and.w	r3, r3, #1
 8037284:	2b00      	cmp	r3, #0
 8037286:	d105      	bne.n	8037294 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8037288:	687b      	ldr	r3, [r7, #4]
 803728a:	681b      	ldr	r3, [r3, #0]
 803728c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8037290:	2b00      	cmp	r3, #0
 8037292:	d035      	beq.n	8037300 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8037294:	4b62      	ldr	r3, [pc, #392]	; (8037420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8037296:	2200      	movs	r2, #0
 8037298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 803729a:	f7fc fefb 	bl	8034094 <HAL_GetTick>
 803729e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80372a0:	e008      	b.n	80372b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80372a2:	f7fc fef7 	bl	8034094 <HAL_GetTick>
 80372a6:	4602      	mov	r2, r0
 80372a8:	697b      	ldr	r3, [r7, #20]
 80372aa:	1ad3      	subs	r3, r2, r3
 80372ac:	2b02      	cmp	r3, #2
 80372ae:	d901      	bls.n	80372b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80372b0:	2303      	movs	r3, #3
 80372b2:	e0b0      	b.n	8037416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80372b4:	4b5b      	ldr	r3, [pc, #364]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80372b6:	681b      	ldr	r3, [r3, #0]
 80372b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80372bc:	2b00      	cmp	r3, #0
 80372be:	d1f0      	bne.n	80372a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80372c0:	687b      	ldr	r3, [r7, #4]
 80372c2:	685b      	ldr	r3, [r3, #4]
 80372c4:	019a      	lsls	r2, r3, #6
 80372c6:	687b      	ldr	r3, [r7, #4]
 80372c8:	689b      	ldr	r3, [r3, #8]
 80372ca:	071b      	lsls	r3, r3, #28
 80372cc:	4955      	ldr	r1, [pc, #340]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80372ce:	4313      	orrs	r3, r2
 80372d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80372d4:	4b52      	ldr	r3, [pc, #328]	; (8037420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80372d6:	2201      	movs	r2, #1
 80372d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80372da:	f7fc fedb 	bl	8034094 <HAL_GetTick>
 80372de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80372e0:	e008      	b.n	80372f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80372e2:	f7fc fed7 	bl	8034094 <HAL_GetTick>
 80372e6:	4602      	mov	r2, r0
 80372e8:	697b      	ldr	r3, [r7, #20]
 80372ea:	1ad3      	subs	r3, r2, r3
 80372ec:	2b02      	cmp	r3, #2
 80372ee:	d901      	bls.n	80372f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80372f0:	2303      	movs	r3, #3
 80372f2:	e090      	b.n	8037416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80372f4:	4b4b      	ldr	r3, [pc, #300]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80372f6:	681b      	ldr	r3, [r3, #0]
 80372f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80372fc:	2b00      	cmp	r3, #0
 80372fe:	d0f0      	beq.n	80372e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8037300:	687b      	ldr	r3, [r7, #4]
 8037302:	681b      	ldr	r3, [r3, #0]
 8037304:	f003 0302 	and.w	r3, r3, #2
 8037308:	2b00      	cmp	r3, #0
 803730a:	f000 8083 	beq.w	8037414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 803730e:	2300      	movs	r3, #0
 8037310:	60fb      	str	r3, [r7, #12]
 8037312:	4b44      	ldr	r3, [pc, #272]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037316:	4a43      	ldr	r2, [pc, #268]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803731c:	6413      	str	r3, [r2, #64]	; 0x40
 803731e:	4b41      	ldr	r3, [pc, #260]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8037326:	60fb      	str	r3, [r7, #12]
 8037328:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 803732a:	4b3f      	ldr	r3, [pc, #252]	; (8037428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 803732c:	681b      	ldr	r3, [r3, #0]
 803732e:	4a3e      	ldr	r2, [pc, #248]	; (8037428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8037330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8037334:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8037336:	f7fc fead 	bl	8034094 <HAL_GetTick>
 803733a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 803733c:	e008      	b.n	8037350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 803733e:	f7fc fea9 	bl	8034094 <HAL_GetTick>
 8037342:	4602      	mov	r2, r0
 8037344:	697b      	ldr	r3, [r7, #20]
 8037346:	1ad3      	subs	r3, r2, r3
 8037348:	2b02      	cmp	r3, #2
 803734a:	d901      	bls.n	8037350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 803734c:	2303      	movs	r3, #3
 803734e:	e062      	b.n	8037416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8037350:	4b35      	ldr	r3, [pc, #212]	; (8037428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8037352:	681b      	ldr	r3, [r3, #0]
 8037354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037358:	2b00      	cmp	r3, #0
 803735a:	d0f0      	beq.n	803733e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 803735c:	4b31      	ldr	r3, [pc, #196]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 803735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8037360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8037364:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8037366:	693b      	ldr	r3, [r7, #16]
 8037368:	2b00      	cmp	r3, #0
 803736a:	d02f      	beq.n	80373cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 803736c:	687b      	ldr	r3, [r7, #4]
 803736e:	68db      	ldr	r3, [r3, #12]
 8037370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8037374:	693a      	ldr	r2, [r7, #16]
 8037376:	429a      	cmp	r2, r3
 8037378:	d028      	beq.n	80373cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 803737a:	4b2a      	ldr	r3, [pc, #168]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 803737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8037382:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8037384:	4b29      	ldr	r3, [pc, #164]	; (803742c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8037386:	2201      	movs	r2, #1
 8037388:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 803738a:	4b28      	ldr	r3, [pc, #160]	; (803742c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 803738c:	2200      	movs	r2, #0
 803738e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8037390:	4a24      	ldr	r2, [pc, #144]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037392:	693b      	ldr	r3, [r7, #16]
 8037394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8037396:	4b23      	ldr	r3, [pc, #140]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803739a:	f003 0301 	and.w	r3, r3, #1
 803739e:	2b01      	cmp	r3, #1
 80373a0:	d114      	bne.n	80373cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80373a2:	f7fc fe77 	bl	8034094 <HAL_GetTick>
 80373a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80373a8:	e00a      	b.n	80373c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80373aa:	f7fc fe73 	bl	8034094 <HAL_GetTick>
 80373ae:	4602      	mov	r2, r0
 80373b0:	697b      	ldr	r3, [r7, #20]
 80373b2:	1ad3      	subs	r3, r2, r3
 80373b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80373b8:	4293      	cmp	r3, r2
 80373ba:	d901      	bls.n	80373c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80373bc:	2303      	movs	r3, #3
 80373be:	e02a      	b.n	8037416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80373c0:	4b18      	ldr	r3, [pc, #96]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80373c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80373c4:	f003 0302 	and.w	r3, r3, #2
 80373c8:	2b00      	cmp	r3, #0
 80373ca:	d0ee      	beq.n	80373aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80373cc:	687b      	ldr	r3, [r7, #4]
 80373ce:	68db      	ldr	r3, [r3, #12]
 80373d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80373d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80373d8:	d10d      	bne.n	80373f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80373da:	4b12      	ldr	r3, [pc, #72]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80373dc:	689b      	ldr	r3, [r3, #8]
 80373de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80373e2:	687b      	ldr	r3, [r7, #4]
 80373e4:	68db      	ldr	r3, [r3, #12]
 80373e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80373ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80373ee:	490d      	ldr	r1, [pc, #52]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80373f0:	4313      	orrs	r3, r2
 80373f2:	608b      	str	r3, [r1, #8]
 80373f4:	e005      	b.n	8037402 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80373f6:	4b0b      	ldr	r3, [pc, #44]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80373f8:	689b      	ldr	r3, [r3, #8]
 80373fa:	4a0a      	ldr	r2, [pc, #40]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80373fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8037400:	6093      	str	r3, [r2, #8]
 8037402:	4b08      	ldr	r3, [pc, #32]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8037406:	687b      	ldr	r3, [r7, #4]
 8037408:	68db      	ldr	r3, [r3, #12]
 803740a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803740e:	4905      	ldr	r1, [pc, #20]	; (8037424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8037410:	4313      	orrs	r3, r2
 8037412:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8037414:	2300      	movs	r3, #0
}
 8037416:	4618      	mov	r0, r3
 8037418:	3718      	adds	r7, #24
 803741a:	46bd      	mov	sp, r7
 803741c:	bd80      	pop	{r7, pc}
 803741e:	bf00      	nop
 8037420:	42470068 	.word	0x42470068
 8037424:	40023800 	.word	0x40023800
 8037428:	40007000 	.word	0x40007000
 803742c:	42470e40 	.word	0x42470e40

08037430 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8037430:	b480      	push	{r7}
 8037432:	b087      	sub	sp, #28
 8037434:	af00      	add	r7, sp, #0
 8037436:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8037438:	2300      	movs	r3, #0
 803743a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 803743c:	2300      	movs	r3, #0
 803743e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8037440:	2300      	movs	r3, #0
 8037442:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8037444:	2300      	movs	r3, #0
 8037446:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8037448:	687b      	ldr	r3, [r7, #4]
 803744a:	2b01      	cmp	r3, #1
 803744c:	d13e      	bne.n	80374cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 803744e:	4b23      	ldr	r3, [pc, #140]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8037450:	689b      	ldr	r3, [r3, #8]
 8037452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8037456:	60fb      	str	r3, [r7, #12]
 8037458:	68fb      	ldr	r3, [r7, #12]
 803745a:	2b00      	cmp	r3, #0
 803745c:	d005      	beq.n	803746a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 803745e:	68fb      	ldr	r3, [r7, #12]
 8037460:	2b01      	cmp	r3, #1
 8037462:	d12f      	bne.n	80374c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8037464:	4b1e      	ldr	r3, [pc, #120]	; (80374e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8037466:	617b      	str	r3, [r7, #20]
          break;
 8037468:	e02f      	b.n	80374ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 803746a:	4b1c      	ldr	r3, [pc, #112]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 803746c:	685b      	ldr	r3, [r3, #4]
 803746e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8037472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037476:	d108      	bne.n	803748a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8037478:	4b18      	ldr	r3, [pc, #96]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 803747a:	685b      	ldr	r3, [r3, #4]
 803747c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8037480:	4a18      	ldr	r2, [pc, #96]	; (80374e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8037482:	fbb2 f3f3 	udiv	r3, r2, r3
 8037486:	613b      	str	r3, [r7, #16]
 8037488:	e007      	b.n	803749a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 803748a:	4b14      	ldr	r3, [pc, #80]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 803748c:	685b      	ldr	r3, [r3, #4]
 803748e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8037492:	4a15      	ldr	r2, [pc, #84]	; (80374e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8037494:	fbb2 f3f3 	udiv	r3, r2, r3
 8037498:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 803749a:	4b10      	ldr	r3, [pc, #64]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 803749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80374a0:	099b      	lsrs	r3, r3, #6
 80374a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80374a6:	693b      	ldr	r3, [r7, #16]
 80374a8:	fb02 f303 	mul.w	r3, r2, r3
 80374ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80374ae:	4b0b      	ldr	r3, [pc, #44]	; (80374dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80374b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80374b4:	0f1b      	lsrs	r3, r3, #28
 80374b6:	f003 0307 	and.w	r3, r3, #7
 80374ba:	68ba      	ldr	r2, [r7, #8]
 80374bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80374c0:	617b      	str	r3, [r7, #20]
          break;
 80374c2:	e002      	b.n	80374ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80374c4:	2300      	movs	r3, #0
 80374c6:	617b      	str	r3, [r7, #20]
          break;
 80374c8:	bf00      	nop
        }
      }
      break;
 80374ca:	bf00      	nop
    }
  }
  return frequency;
 80374cc:	697b      	ldr	r3, [r7, #20]
}
 80374ce:	4618      	mov	r0, r3
 80374d0:	371c      	adds	r7, #28
 80374d2:	46bd      	mov	sp, r7
 80374d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374d8:	4770      	bx	lr
 80374da:	bf00      	nop
 80374dc:	40023800 	.word	0x40023800
 80374e0:	00bb8000 	.word	0x00bb8000
 80374e4:	007a1200 	.word	0x007a1200
 80374e8:	00f42400 	.word	0x00f42400

080374ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80374ec:	b580      	push	{r7, lr}
 80374ee:	b082      	sub	sp, #8
 80374f0:	af00      	add	r7, sp, #0
 80374f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80374f4:	687b      	ldr	r3, [r7, #4]
 80374f6:	2b00      	cmp	r3, #0
 80374f8:	d101      	bne.n	80374fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80374fa:	2301      	movs	r3, #1
 80374fc:	e041      	b.n	8037582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80374fe:	687b      	ldr	r3, [r7, #4]
 8037500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8037504:	b2db      	uxtb	r3, r3
 8037506:	2b00      	cmp	r3, #0
 8037508:	d106      	bne.n	8037518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 803750a:	687b      	ldr	r3, [r7, #4]
 803750c:	2200      	movs	r2, #0
 803750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8037512:	6878      	ldr	r0, [r7, #4]
 8037514:	f7fc fcb8 	bl	8033e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037518:	687b      	ldr	r3, [r7, #4]
 803751a:	2202      	movs	r2, #2
 803751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8037520:	687b      	ldr	r3, [r7, #4]
 8037522:	681a      	ldr	r2, [r3, #0]
 8037524:	687b      	ldr	r3, [r7, #4]
 8037526:	3304      	adds	r3, #4
 8037528:	4619      	mov	r1, r3
 803752a:	4610      	mov	r0, r2
 803752c:	f000 fa96 	bl	8037a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8037530:	687b      	ldr	r3, [r7, #4]
 8037532:	2201      	movs	r2, #1
 8037534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8037538:	687b      	ldr	r3, [r7, #4]
 803753a:	2201      	movs	r2, #1
 803753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8037540:	687b      	ldr	r3, [r7, #4]
 8037542:	2201      	movs	r2, #1
 8037544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8037548:	687b      	ldr	r3, [r7, #4]
 803754a:	2201      	movs	r2, #1
 803754c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8037550:	687b      	ldr	r3, [r7, #4]
 8037552:	2201      	movs	r2, #1
 8037554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8037558:	687b      	ldr	r3, [r7, #4]
 803755a:	2201      	movs	r2, #1
 803755c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8037560:	687b      	ldr	r3, [r7, #4]
 8037562:	2201      	movs	r2, #1
 8037564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8037568:	687b      	ldr	r3, [r7, #4]
 803756a:	2201      	movs	r2, #1
 803756c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8037570:	687b      	ldr	r3, [r7, #4]
 8037572:	2201      	movs	r2, #1
 8037574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8037578:	687b      	ldr	r3, [r7, #4]
 803757a:	2201      	movs	r2, #1
 803757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8037580:	2300      	movs	r3, #0
}
 8037582:	4618      	mov	r0, r3
 8037584:	3708      	adds	r7, #8
 8037586:	46bd      	mov	sp, r7
 8037588:	bd80      	pop	{r7, pc}
	...

0803758c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 803758c:	b480      	push	{r7}
 803758e:	b085      	sub	sp, #20
 8037590:	af00      	add	r7, sp, #0
 8037592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8037594:	687b      	ldr	r3, [r7, #4]
 8037596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803759a:	b2db      	uxtb	r3, r3
 803759c:	2b01      	cmp	r3, #1
 803759e:	d001      	beq.n	80375a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80375a0:	2301      	movs	r3, #1
 80375a2:	e04e      	b.n	8037642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80375a4:	687b      	ldr	r3, [r7, #4]
 80375a6:	2202      	movs	r2, #2
 80375a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80375ac:	687b      	ldr	r3, [r7, #4]
 80375ae:	681b      	ldr	r3, [r3, #0]
 80375b0:	68da      	ldr	r2, [r3, #12]
 80375b2:	687b      	ldr	r3, [r7, #4]
 80375b4:	681b      	ldr	r3, [r3, #0]
 80375b6:	f042 0201 	orr.w	r2, r2, #1
 80375ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80375bc:	687b      	ldr	r3, [r7, #4]
 80375be:	681b      	ldr	r3, [r3, #0]
 80375c0:	4a23      	ldr	r2, [pc, #140]	; (8037650 <HAL_TIM_Base_Start_IT+0xc4>)
 80375c2:	4293      	cmp	r3, r2
 80375c4:	d022      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375c6:	687b      	ldr	r3, [r7, #4]
 80375c8:	681b      	ldr	r3, [r3, #0]
 80375ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80375ce:	d01d      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375d0:	687b      	ldr	r3, [r7, #4]
 80375d2:	681b      	ldr	r3, [r3, #0]
 80375d4:	4a1f      	ldr	r2, [pc, #124]	; (8037654 <HAL_TIM_Base_Start_IT+0xc8>)
 80375d6:	4293      	cmp	r3, r2
 80375d8:	d018      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375da:	687b      	ldr	r3, [r7, #4]
 80375dc:	681b      	ldr	r3, [r3, #0]
 80375de:	4a1e      	ldr	r2, [pc, #120]	; (8037658 <HAL_TIM_Base_Start_IT+0xcc>)
 80375e0:	4293      	cmp	r3, r2
 80375e2:	d013      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375e4:	687b      	ldr	r3, [r7, #4]
 80375e6:	681b      	ldr	r3, [r3, #0]
 80375e8:	4a1c      	ldr	r2, [pc, #112]	; (803765c <HAL_TIM_Base_Start_IT+0xd0>)
 80375ea:	4293      	cmp	r3, r2
 80375ec:	d00e      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375ee:	687b      	ldr	r3, [r7, #4]
 80375f0:	681b      	ldr	r3, [r3, #0]
 80375f2:	4a1b      	ldr	r2, [pc, #108]	; (8037660 <HAL_TIM_Base_Start_IT+0xd4>)
 80375f4:	4293      	cmp	r3, r2
 80375f6:	d009      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 80375f8:	687b      	ldr	r3, [r7, #4]
 80375fa:	681b      	ldr	r3, [r3, #0]
 80375fc:	4a19      	ldr	r2, [pc, #100]	; (8037664 <HAL_TIM_Base_Start_IT+0xd8>)
 80375fe:	4293      	cmp	r3, r2
 8037600:	d004      	beq.n	803760c <HAL_TIM_Base_Start_IT+0x80>
 8037602:	687b      	ldr	r3, [r7, #4]
 8037604:	681b      	ldr	r3, [r3, #0]
 8037606:	4a18      	ldr	r2, [pc, #96]	; (8037668 <HAL_TIM_Base_Start_IT+0xdc>)
 8037608:	4293      	cmp	r3, r2
 803760a:	d111      	bne.n	8037630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 803760c:	687b      	ldr	r3, [r7, #4]
 803760e:	681b      	ldr	r3, [r3, #0]
 8037610:	689b      	ldr	r3, [r3, #8]
 8037612:	f003 0307 	and.w	r3, r3, #7
 8037616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8037618:	68fb      	ldr	r3, [r7, #12]
 803761a:	2b06      	cmp	r3, #6
 803761c:	d010      	beq.n	8037640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 803761e:	687b      	ldr	r3, [r7, #4]
 8037620:	681b      	ldr	r3, [r3, #0]
 8037622:	681a      	ldr	r2, [r3, #0]
 8037624:	687b      	ldr	r3, [r7, #4]
 8037626:	681b      	ldr	r3, [r3, #0]
 8037628:	f042 0201 	orr.w	r2, r2, #1
 803762c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803762e:	e007      	b.n	8037640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8037630:	687b      	ldr	r3, [r7, #4]
 8037632:	681b      	ldr	r3, [r3, #0]
 8037634:	681a      	ldr	r2, [r3, #0]
 8037636:	687b      	ldr	r3, [r7, #4]
 8037638:	681b      	ldr	r3, [r3, #0]
 803763a:	f042 0201 	orr.w	r2, r2, #1
 803763e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8037640:	2300      	movs	r3, #0
}
 8037642:	4618      	mov	r0, r3
 8037644:	3714      	adds	r7, #20
 8037646:	46bd      	mov	sp, r7
 8037648:	f85d 7b04 	ldr.w	r7, [sp], #4
 803764c:	4770      	bx	lr
 803764e:	bf00      	nop
 8037650:	40010000 	.word	0x40010000
 8037654:	40000400 	.word	0x40000400
 8037658:	40000800 	.word	0x40000800
 803765c:	40000c00 	.word	0x40000c00
 8037660:	40010400 	.word	0x40010400
 8037664:	40014000 	.word	0x40014000
 8037668:	40001800 	.word	0x40001800

0803766c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 803766c:	b580      	push	{r7, lr}
 803766e:	b082      	sub	sp, #8
 8037670:	af00      	add	r7, sp, #0
 8037672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8037674:	687b      	ldr	r3, [r7, #4]
 8037676:	681b      	ldr	r3, [r3, #0]
 8037678:	691b      	ldr	r3, [r3, #16]
 803767a:	f003 0302 	and.w	r3, r3, #2
 803767e:	2b02      	cmp	r3, #2
 8037680:	d122      	bne.n	80376c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8037682:	687b      	ldr	r3, [r7, #4]
 8037684:	681b      	ldr	r3, [r3, #0]
 8037686:	68db      	ldr	r3, [r3, #12]
 8037688:	f003 0302 	and.w	r3, r3, #2
 803768c:	2b02      	cmp	r3, #2
 803768e:	d11b      	bne.n	80376c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8037690:	687b      	ldr	r3, [r7, #4]
 8037692:	681b      	ldr	r3, [r3, #0]
 8037694:	f06f 0202 	mvn.w	r2, #2
 8037698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 803769a:	687b      	ldr	r3, [r7, #4]
 803769c:	2201      	movs	r2, #1
 803769e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80376a0:	687b      	ldr	r3, [r7, #4]
 80376a2:	681b      	ldr	r3, [r3, #0]
 80376a4:	699b      	ldr	r3, [r3, #24]
 80376a6:	f003 0303 	and.w	r3, r3, #3
 80376aa:	2b00      	cmp	r3, #0
 80376ac:	d003      	beq.n	80376b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80376ae:	6878      	ldr	r0, [r7, #4]
 80376b0:	f000 f9b5 	bl	8037a1e <HAL_TIM_IC_CaptureCallback>
 80376b4:	e005      	b.n	80376c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80376b6:	6878      	ldr	r0, [r7, #4]
 80376b8:	f000 f9a7 	bl	8037a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80376bc:	6878      	ldr	r0, [r7, #4]
 80376be:	f000 f9b8 	bl	8037a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80376c2:	687b      	ldr	r3, [r7, #4]
 80376c4:	2200      	movs	r2, #0
 80376c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80376c8:	687b      	ldr	r3, [r7, #4]
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	691b      	ldr	r3, [r3, #16]
 80376ce:	f003 0304 	and.w	r3, r3, #4
 80376d2:	2b04      	cmp	r3, #4
 80376d4:	d122      	bne.n	803771c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80376d6:	687b      	ldr	r3, [r7, #4]
 80376d8:	681b      	ldr	r3, [r3, #0]
 80376da:	68db      	ldr	r3, [r3, #12]
 80376dc:	f003 0304 	and.w	r3, r3, #4
 80376e0:	2b04      	cmp	r3, #4
 80376e2:	d11b      	bne.n	803771c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80376e4:	687b      	ldr	r3, [r7, #4]
 80376e6:	681b      	ldr	r3, [r3, #0]
 80376e8:	f06f 0204 	mvn.w	r2, #4
 80376ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80376ee:	687b      	ldr	r3, [r7, #4]
 80376f0:	2202      	movs	r2, #2
 80376f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80376f4:	687b      	ldr	r3, [r7, #4]
 80376f6:	681b      	ldr	r3, [r3, #0]
 80376f8:	699b      	ldr	r3, [r3, #24]
 80376fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80376fe:	2b00      	cmp	r3, #0
 8037700:	d003      	beq.n	803770a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037702:	6878      	ldr	r0, [r7, #4]
 8037704:	f000 f98b 	bl	8037a1e <HAL_TIM_IC_CaptureCallback>
 8037708:	e005      	b.n	8037716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803770a:	6878      	ldr	r0, [r7, #4]
 803770c:	f000 f97d 	bl	8037a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037710:	6878      	ldr	r0, [r7, #4]
 8037712:	f000 f98e 	bl	8037a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037716:	687b      	ldr	r3, [r7, #4]
 8037718:	2200      	movs	r2, #0
 803771a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 803771c:	687b      	ldr	r3, [r7, #4]
 803771e:	681b      	ldr	r3, [r3, #0]
 8037720:	691b      	ldr	r3, [r3, #16]
 8037722:	f003 0308 	and.w	r3, r3, #8
 8037726:	2b08      	cmp	r3, #8
 8037728:	d122      	bne.n	8037770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 803772a:	687b      	ldr	r3, [r7, #4]
 803772c:	681b      	ldr	r3, [r3, #0]
 803772e:	68db      	ldr	r3, [r3, #12]
 8037730:	f003 0308 	and.w	r3, r3, #8
 8037734:	2b08      	cmp	r3, #8
 8037736:	d11b      	bne.n	8037770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8037738:	687b      	ldr	r3, [r7, #4]
 803773a:	681b      	ldr	r3, [r3, #0]
 803773c:	f06f 0208 	mvn.w	r2, #8
 8037740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8037742:	687b      	ldr	r3, [r7, #4]
 8037744:	2204      	movs	r2, #4
 8037746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8037748:	687b      	ldr	r3, [r7, #4]
 803774a:	681b      	ldr	r3, [r3, #0]
 803774c:	69db      	ldr	r3, [r3, #28]
 803774e:	f003 0303 	and.w	r3, r3, #3
 8037752:	2b00      	cmp	r3, #0
 8037754:	d003      	beq.n	803775e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037756:	6878      	ldr	r0, [r7, #4]
 8037758:	f000 f961 	bl	8037a1e <HAL_TIM_IC_CaptureCallback>
 803775c:	e005      	b.n	803776a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803775e:	6878      	ldr	r0, [r7, #4]
 8037760:	f000 f953 	bl	8037a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037764:	6878      	ldr	r0, [r7, #4]
 8037766:	f000 f964 	bl	8037a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803776a:	687b      	ldr	r3, [r7, #4]
 803776c:	2200      	movs	r2, #0
 803776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8037770:	687b      	ldr	r3, [r7, #4]
 8037772:	681b      	ldr	r3, [r3, #0]
 8037774:	691b      	ldr	r3, [r3, #16]
 8037776:	f003 0310 	and.w	r3, r3, #16
 803777a:	2b10      	cmp	r3, #16
 803777c:	d122      	bne.n	80377c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 803777e:	687b      	ldr	r3, [r7, #4]
 8037780:	681b      	ldr	r3, [r3, #0]
 8037782:	68db      	ldr	r3, [r3, #12]
 8037784:	f003 0310 	and.w	r3, r3, #16
 8037788:	2b10      	cmp	r3, #16
 803778a:	d11b      	bne.n	80377c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 803778c:	687b      	ldr	r3, [r7, #4]
 803778e:	681b      	ldr	r3, [r3, #0]
 8037790:	f06f 0210 	mvn.w	r2, #16
 8037794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8037796:	687b      	ldr	r3, [r7, #4]
 8037798:	2208      	movs	r2, #8
 803779a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 803779c:	687b      	ldr	r3, [r7, #4]
 803779e:	681b      	ldr	r3, [r3, #0]
 80377a0:	69db      	ldr	r3, [r3, #28]
 80377a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80377a6:	2b00      	cmp	r3, #0
 80377a8:	d003      	beq.n	80377b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80377aa:	6878      	ldr	r0, [r7, #4]
 80377ac:	f000 f937 	bl	8037a1e <HAL_TIM_IC_CaptureCallback>
 80377b0:	e005      	b.n	80377be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80377b2:	6878      	ldr	r0, [r7, #4]
 80377b4:	f000 f929 	bl	8037a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80377b8:	6878      	ldr	r0, [r7, #4]
 80377ba:	f000 f93a 	bl	8037a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80377be:	687b      	ldr	r3, [r7, #4]
 80377c0:	2200      	movs	r2, #0
 80377c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80377c4:	687b      	ldr	r3, [r7, #4]
 80377c6:	681b      	ldr	r3, [r3, #0]
 80377c8:	691b      	ldr	r3, [r3, #16]
 80377ca:	f003 0301 	and.w	r3, r3, #1
 80377ce:	2b01      	cmp	r3, #1
 80377d0:	d10e      	bne.n	80377f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80377d2:	687b      	ldr	r3, [r7, #4]
 80377d4:	681b      	ldr	r3, [r3, #0]
 80377d6:	68db      	ldr	r3, [r3, #12]
 80377d8:	f003 0301 	and.w	r3, r3, #1
 80377dc:	2b01      	cmp	r3, #1
 80377de:	d107      	bne.n	80377f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80377e0:	687b      	ldr	r3, [r7, #4]
 80377e2:	681b      	ldr	r3, [r3, #0]
 80377e4:	f06f 0201 	mvn.w	r2, #1
 80377e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80377ea:	6878      	ldr	r0, [r7, #4]
 80377ec:	f7fc f8e8 	bl	80339c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80377f0:	687b      	ldr	r3, [r7, #4]
 80377f2:	681b      	ldr	r3, [r3, #0]
 80377f4:	691b      	ldr	r3, [r3, #16]
 80377f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80377fa:	2b80      	cmp	r3, #128	; 0x80
 80377fc:	d10e      	bne.n	803781c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80377fe:	687b      	ldr	r3, [r7, #4]
 8037800:	681b      	ldr	r3, [r3, #0]
 8037802:	68db      	ldr	r3, [r3, #12]
 8037804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037808:	2b80      	cmp	r3, #128	; 0x80
 803780a:	d107      	bne.n	803781c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 803780c:	687b      	ldr	r3, [r7, #4]
 803780e:	681b      	ldr	r3, [r3, #0]
 8037810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8037814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8037816:	6878      	ldr	r0, [r7, #4]
 8037818:	f000 fae0 	bl	8037ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 803781c:	687b      	ldr	r3, [r7, #4]
 803781e:	681b      	ldr	r3, [r3, #0]
 8037820:	691b      	ldr	r3, [r3, #16]
 8037822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037826:	2b40      	cmp	r3, #64	; 0x40
 8037828:	d10e      	bne.n	8037848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 803782a:	687b      	ldr	r3, [r7, #4]
 803782c:	681b      	ldr	r3, [r3, #0]
 803782e:	68db      	ldr	r3, [r3, #12]
 8037830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037834:	2b40      	cmp	r3, #64	; 0x40
 8037836:	d107      	bne.n	8037848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8037838:	687b      	ldr	r3, [r7, #4]
 803783a:	681b      	ldr	r3, [r3, #0]
 803783c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8037840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8037842:	6878      	ldr	r0, [r7, #4]
 8037844:	f000 f8ff 	bl	8037a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8037848:	687b      	ldr	r3, [r7, #4]
 803784a:	681b      	ldr	r3, [r3, #0]
 803784c:	691b      	ldr	r3, [r3, #16]
 803784e:	f003 0320 	and.w	r3, r3, #32
 8037852:	2b20      	cmp	r3, #32
 8037854:	d10e      	bne.n	8037874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8037856:	687b      	ldr	r3, [r7, #4]
 8037858:	681b      	ldr	r3, [r3, #0]
 803785a:	68db      	ldr	r3, [r3, #12]
 803785c:	f003 0320 	and.w	r3, r3, #32
 8037860:	2b20      	cmp	r3, #32
 8037862:	d107      	bne.n	8037874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8037864:	687b      	ldr	r3, [r7, #4]
 8037866:	681b      	ldr	r3, [r3, #0]
 8037868:	f06f 0220 	mvn.w	r2, #32
 803786c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 803786e:	6878      	ldr	r0, [r7, #4]
 8037870:	f000 faaa 	bl	8037dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8037874:	bf00      	nop
 8037876:	3708      	adds	r7, #8
 8037878:	46bd      	mov	sp, r7
 803787a:	bd80      	pop	{r7, pc}

0803787c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 803787c:	b580      	push	{r7, lr}
 803787e:	b084      	sub	sp, #16
 8037880:	af00      	add	r7, sp, #0
 8037882:	6078      	str	r0, [r7, #4]
 8037884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8037886:	2300      	movs	r3, #0
 8037888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 803788a:	687b      	ldr	r3, [r7, #4]
 803788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8037890:	2b01      	cmp	r3, #1
 8037892:	d101      	bne.n	8037898 <HAL_TIM_ConfigClockSource+0x1c>
 8037894:	2302      	movs	r3, #2
 8037896:	e0b4      	b.n	8037a02 <HAL_TIM_ConfigClockSource+0x186>
 8037898:	687b      	ldr	r3, [r7, #4]
 803789a:	2201      	movs	r2, #1
 803789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80378a0:	687b      	ldr	r3, [r7, #4]
 80378a2:	2202      	movs	r2, #2
 80378a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80378a8:	687b      	ldr	r3, [r7, #4]
 80378aa:	681b      	ldr	r3, [r3, #0]
 80378ac:	689b      	ldr	r3, [r3, #8]
 80378ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80378b0:	68bb      	ldr	r3, [r7, #8]
 80378b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80378b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80378b8:	68bb      	ldr	r3, [r7, #8]
 80378ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80378be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80378c0:	687b      	ldr	r3, [r7, #4]
 80378c2:	681b      	ldr	r3, [r3, #0]
 80378c4:	68ba      	ldr	r2, [r7, #8]
 80378c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80378c8:	683b      	ldr	r3, [r7, #0]
 80378ca:	681b      	ldr	r3, [r3, #0]
 80378cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80378d0:	d03e      	beq.n	8037950 <HAL_TIM_ConfigClockSource+0xd4>
 80378d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80378d6:	f200 8087 	bhi.w	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 80378da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80378de:	f000 8086 	beq.w	80379ee <HAL_TIM_ConfigClockSource+0x172>
 80378e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80378e6:	d87f      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 80378e8:	2b70      	cmp	r3, #112	; 0x70
 80378ea:	d01a      	beq.n	8037922 <HAL_TIM_ConfigClockSource+0xa6>
 80378ec:	2b70      	cmp	r3, #112	; 0x70
 80378ee:	d87b      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 80378f0:	2b60      	cmp	r3, #96	; 0x60
 80378f2:	d050      	beq.n	8037996 <HAL_TIM_ConfigClockSource+0x11a>
 80378f4:	2b60      	cmp	r3, #96	; 0x60
 80378f6:	d877      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 80378f8:	2b50      	cmp	r3, #80	; 0x50
 80378fa:	d03c      	beq.n	8037976 <HAL_TIM_ConfigClockSource+0xfa>
 80378fc:	2b50      	cmp	r3, #80	; 0x50
 80378fe:	d873      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 8037900:	2b40      	cmp	r3, #64	; 0x40
 8037902:	d058      	beq.n	80379b6 <HAL_TIM_ConfigClockSource+0x13a>
 8037904:	2b40      	cmp	r3, #64	; 0x40
 8037906:	d86f      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 8037908:	2b30      	cmp	r3, #48	; 0x30
 803790a:	d064      	beq.n	80379d6 <HAL_TIM_ConfigClockSource+0x15a>
 803790c:	2b30      	cmp	r3, #48	; 0x30
 803790e:	d86b      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 8037910:	2b20      	cmp	r3, #32
 8037912:	d060      	beq.n	80379d6 <HAL_TIM_ConfigClockSource+0x15a>
 8037914:	2b20      	cmp	r3, #32
 8037916:	d867      	bhi.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
 8037918:	2b00      	cmp	r3, #0
 803791a:	d05c      	beq.n	80379d6 <HAL_TIM_ConfigClockSource+0x15a>
 803791c:	2b10      	cmp	r3, #16
 803791e:	d05a      	beq.n	80379d6 <HAL_TIM_ConfigClockSource+0x15a>
 8037920:	e062      	b.n	80379e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8037922:	687b      	ldr	r3, [r7, #4]
 8037924:	6818      	ldr	r0, [r3, #0]
 8037926:	683b      	ldr	r3, [r7, #0]
 8037928:	6899      	ldr	r1, [r3, #8]
 803792a:	683b      	ldr	r3, [r7, #0]
 803792c:	685a      	ldr	r2, [r3, #4]
 803792e:	683b      	ldr	r3, [r7, #0]
 8037930:	68db      	ldr	r3, [r3, #12]
 8037932:	f000 f9ad 	bl	8037c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8037936:	687b      	ldr	r3, [r7, #4]
 8037938:	681b      	ldr	r3, [r3, #0]
 803793a:	689b      	ldr	r3, [r3, #8]
 803793c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 803793e:	68bb      	ldr	r3, [r7, #8]
 8037940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8037944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8037946:	687b      	ldr	r3, [r7, #4]
 8037948:	681b      	ldr	r3, [r3, #0]
 803794a:	68ba      	ldr	r2, [r7, #8]
 803794c:	609a      	str	r2, [r3, #8]
      break;
 803794e:	e04f      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8037950:	687b      	ldr	r3, [r7, #4]
 8037952:	6818      	ldr	r0, [r3, #0]
 8037954:	683b      	ldr	r3, [r7, #0]
 8037956:	6899      	ldr	r1, [r3, #8]
 8037958:	683b      	ldr	r3, [r7, #0]
 803795a:	685a      	ldr	r2, [r3, #4]
 803795c:	683b      	ldr	r3, [r7, #0]
 803795e:	68db      	ldr	r3, [r3, #12]
 8037960:	f000 f996 	bl	8037c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8037964:	687b      	ldr	r3, [r7, #4]
 8037966:	681b      	ldr	r3, [r3, #0]
 8037968:	689a      	ldr	r2, [r3, #8]
 803796a:	687b      	ldr	r3, [r7, #4]
 803796c:	681b      	ldr	r3, [r3, #0]
 803796e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8037972:	609a      	str	r2, [r3, #8]
      break;
 8037974:	e03c      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8037976:	687b      	ldr	r3, [r7, #4]
 8037978:	6818      	ldr	r0, [r3, #0]
 803797a:	683b      	ldr	r3, [r7, #0]
 803797c:	6859      	ldr	r1, [r3, #4]
 803797e:	683b      	ldr	r3, [r7, #0]
 8037980:	68db      	ldr	r3, [r3, #12]
 8037982:	461a      	mov	r2, r3
 8037984:	f000 f90a 	bl	8037b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8037988:	687b      	ldr	r3, [r7, #4]
 803798a:	681b      	ldr	r3, [r3, #0]
 803798c:	2150      	movs	r1, #80	; 0x50
 803798e:	4618      	mov	r0, r3
 8037990:	f000 f963 	bl	8037c5a <TIM_ITRx_SetConfig>
      break;
 8037994:	e02c      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8037996:	687b      	ldr	r3, [r7, #4]
 8037998:	6818      	ldr	r0, [r3, #0]
 803799a:	683b      	ldr	r3, [r7, #0]
 803799c:	6859      	ldr	r1, [r3, #4]
 803799e:	683b      	ldr	r3, [r7, #0]
 80379a0:	68db      	ldr	r3, [r3, #12]
 80379a2:	461a      	mov	r2, r3
 80379a4:	f000 f929 	bl	8037bfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80379a8:	687b      	ldr	r3, [r7, #4]
 80379aa:	681b      	ldr	r3, [r3, #0]
 80379ac:	2160      	movs	r1, #96	; 0x60
 80379ae:	4618      	mov	r0, r3
 80379b0:	f000 f953 	bl	8037c5a <TIM_ITRx_SetConfig>
      break;
 80379b4:	e01c      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80379b6:	687b      	ldr	r3, [r7, #4]
 80379b8:	6818      	ldr	r0, [r3, #0]
 80379ba:	683b      	ldr	r3, [r7, #0]
 80379bc:	6859      	ldr	r1, [r3, #4]
 80379be:	683b      	ldr	r3, [r7, #0]
 80379c0:	68db      	ldr	r3, [r3, #12]
 80379c2:	461a      	mov	r2, r3
 80379c4:	f000 f8ea 	bl	8037b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80379c8:	687b      	ldr	r3, [r7, #4]
 80379ca:	681b      	ldr	r3, [r3, #0]
 80379cc:	2140      	movs	r1, #64	; 0x40
 80379ce:	4618      	mov	r0, r3
 80379d0:	f000 f943 	bl	8037c5a <TIM_ITRx_SetConfig>
      break;
 80379d4:	e00c      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80379d6:	687b      	ldr	r3, [r7, #4]
 80379d8:	681a      	ldr	r2, [r3, #0]
 80379da:	683b      	ldr	r3, [r7, #0]
 80379dc:	681b      	ldr	r3, [r3, #0]
 80379de:	4619      	mov	r1, r3
 80379e0:	4610      	mov	r0, r2
 80379e2:	f000 f93a 	bl	8037c5a <TIM_ITRx_SetConfig>
      break;
 80379e6:	e003      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80379e8:	2301      	movs	r3, #1
 80379ea:	73fb      	strb	r3, [r7, #15]
      break;
 80379ec:	e000      	b.n	80379f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80379ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80379f0:	687b      	ldr	r3, [r7, #4]
 80379f2:	2201      	movs	r2, #1
 80379f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80379f8:	687b      	ldr	r3, [r7, #4]
 80379fa:	2200      	movs	r2, #0
 80379fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8037a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8037a02:	4618      	mov	r0, r3
 8037a04:	3710      	adds	r7, #16
 8037a06:	46bd      	mov	sp, r7
 8037a08:	bd80      	pop	{r7, pc}

08037a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8037a0a:	b480      	push	{r7}
 8037a0c:	b083      	sub	sp, #12
 8037a0e:	af00      	add	r7, sp, #0
 8037a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8037a12:	bf00      	nop
 8037a14:	370c      	adds	r7, #12
 8037a16:	46bd      	mov	sp, r7
 8037a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a1c:	4770      	bx	lr

08037a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8037a1e:	b480      	push	{r7}
 8037a20:	b083      	sub	sp, #12
 8037a22:	af00      	add	r7, sp, #0
 8037a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8037a26:	bf00      	nop
 8037a28:	370c      	adds	r7, #12
 8037a2a:	46bd      	mov	sp, r7
 8037a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a30:	4770      	bx	lr

08037a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8037a32:	b480      	push	{r7}
 8037a34:	b083      	sub	sp, #12
 8037a36:	af00      	add	r7, sp, #0
 8037a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8037a3a:	bf00      	nop
 8037a3c:	370c      	adds	r7, #12
 8037a3e:	46bd      	mov	sp, r7
 8037a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a44:	4770      	bx	lr

08037a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8037a46:	b480      	push	{r7}
 8037a48:	b083      	sub	sp, #12
 8037a4a:	af00      	add	r7, sp, #0
 8037a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8037a4e:	bf00      	nop
 8037a50:	370c      	adds	r7, #12
 8037a52:	46bd      	mov	sp, r7
 8037a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a58:	4770      	bx	lr
	...

08037a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8037a5c:	b480      	push	{r7}
 8037a5e:	b085      	sub	sp, #20
 8037a60:	af00      	add	r7, sp, #0
 8037a62:	6078      	str	r0, [r7, #4]
 8037a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8037a66:	687b      	ldr	r3, [r7, #4]
 8037a68:	681b      	ldr	r3, [r3, #0]
 8037a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8037a6c:	687b      	ldr	r3, [r7, #4]
 8037a6e:	4a40      	ldr	r2, [pc, #256]	; (8037b70 <TIM_Base_SetConfig+0x114>)
 8037a70:	4293      	cmp	r3, r2
 8037a72:	d013      	beq.n	8037a9c <TIM_Base_SetConfig+0x40>
 8037a74:	687b      	ldr	r3, [r7, #4]
 8037a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037a7a:	d00f      	beq.n	8037a9c <TIM_Base_SetConfig+0x40>
 8037a7c:	687b      	ldr	r3, [r7, #4]
 8037a7e:	4a3d      	ldr	r2, [pc, #244]	; (8037b74 <TIM_Base_SetConfig+0x118>)
 8037a80:	4293      	cmp	r3, r2
 8037a82:	d00b      	beq.n	8037a9c <TIM_Base_SetConfig+0x40>
 8037a84:	687b      	ldr	r3, [r7, #4]
 8037a86:	4a3c      	ldr	r2, [pc, #240]	; (8037b78 <TIM_Base_SetConfig+0x11c>)
 8037a88:	4293      	cmp	r3, r2
 8037a8a:	d007      	beq.n	8037a9c <TIM_Base_SetConfig+0x40>
 8037a8c:	687b      	ldr	r3, [r7, #4]
 8037a8e:	4a3b      	ldr	r2, [pc, #236]	; (8037b7c <TIM_Base_SetConfig+0x120>)
 8037a90:	4293      	cmp	r3, r2
 8037a92:	d003      	beq.n	8037a9c <TIM_Base_SetConfig+0x40>
 8037a94:	687b      	ldr	r3, [r7, #4]
 8037a96:	4a3a      	ldr	r2, [pc, #232]	; (8037b80 <TIM_Base_SetConfig+0x124>)
 8037a98:	4293      	cmp	r3, r2
 8037a9a:	d108      	bne.n	8037aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8037a9c:	68fb      	ldr	r3, [r7, #12]
 8037a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8037aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8037aa4:	683b      	ldr	r3, [r7, #0]
 8037aa6:	685b      	ldr	r3, [r3, #4]
 8037aa8:	68fa      	ldr	r2, [r7, #12]
 8037aaa:	4313      	orrs	r3, r2
 8037aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8037aae:	687b      	ldr	r3, [r7, #4]
 8037ab0:	4a2f      	ldr	r2, [pc, #188]	; (8037b70 <TIM_Base_SetConfig+0x114>)
 8037ab2:	4293      	cmp	r3, r2
 8037ab4:	d02b      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ab6:	687b      	ldr	r3, [r7, #4]
 8037ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037abc:	d027      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037abe:	687b      	ldr	r3, [r7, #4]
 8037ac0:	4a2c      	ldr	r2, [pc, #176]	; (8037b74 <TIM_Base_SetConfig+0x118>)
 8037ac2:	4293      	cmp	r3, r2
 8037ac4:	d023      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ac6:	687b      	ldr	r3, [r7, #4]
 8037ac8:	4a2b      	ldr	r2, [pc, #172]	; (8037b78 <TIM_Base_SetConfig+0x11c>)
 8037aca:	4293      	cmp	r3, r2
 8037acc:	d01f      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ace:	687b      	ldr	r3, [r7, #4]
 8037ad0:	4a2a      	ldr	r2, [pc, #168]	; (8037b7c <TIM_Base_SetConfig+0x120>)
 8037ad2:	4293      	cmp	r3, r2
 8037ad4:	d01b      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ad6:	687b      	ldr	r3, [r7, #4]
 8037ad8:	4a29      	ldr	r2, [pc, #164]	; (8037b80 <TIM_Base_SetConfig+0x124>)
 8037ada:	4293      	cmp	r3, r2
 8037adc:	d017      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ade:	687b      	ldr	r3, [r7, #4]
 8037ae0:	4a28      	ldr	r2, [pc, #160]	; (8037b84 <TIM_Base_SetConfig+0x128>)
 8037ae2:	4293      	cmp	r3, r2
 8037ae4:	d013      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037ae6:	687b      	ldr	r3, [r7, #4]
 8037ae8:	4a27      	ldr	r2, [pc, #156]	; (8037b88 <TIM_Base_SetConfig+0x12c>)
 8037aea:	4293      	cmp	r3, r2
 8037aec:	d00f      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037aee:	687b      	ldr	r3, [r7, #4]
 8037af0:	4a26      	ldr	r2, [pc, #152]	; (8037b8c <TIM_Base_SetConfig+0x130>)
 8037af2:	4293      	cmp	r3, r2
 8037af4:	d00b      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037af6:	687b      	ldr	r3, [r7, #4]
 8037af8:	4a25      	ldr	r2, [pc, #148]	; (8037b90 <TIM_Base_SetConfig+0x134>)
 8037afa:	4293      	cmp	r3, r2
 8037afc:	d007      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037afe:	687b      	ldr	r3, [r7, #4]
 8037b00:	4a24      	ldr	r2, [pc, #144]	; (8037b94 <TIM_Base_SetConfig+0x138>)
 8037b02:	4293      	cmp	r3, r2
 8037b04:	d003      	beq.n	8037b0e <TIM_Base_SetConfig+0xb2>
 8037b06:	687b      	ldr	r3, [r7, #4]
 8037b08:	4a23      	ldr	r2, [pc, #140]	; (8037b98 <TIM_Base_SetConfig+0x13c>)
 8037b0a:	4293      	cmp	r3, r2
 8037b0c:	d108      	bne.n	8037b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8037b0e:	68fb      	ldr	r3, [r7, #12]
 8037b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8037b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8037b16:	683b      	ldr	r3, [r7, #0]
 8037b18:	68db      	ldr	r3, [r3, #12]
 8037b1a:	68fa      	ldr	r2, [r7, #12]
 8037b1c:	4313      	orrs	r3, r2
 8037b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8037b20:	68fb      	ldr	r3, [r7, #12]
 8037b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8037b26:	683b      	ldr	r3, [r7, #0]
 8037b28:	695b      	ldr	r3, [r3, #20]
 8037b2a:	4313      	orrs	r3, r2
 8037b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8037b2e:	687b      	ldr	r3, [r7, #4]
 8037b30:	68fa      	ldr	r2, [r7, #12]
 8037b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8037b34:	683b      	ldr	r3, [r7, #0]
 8037b36:	689a      	ldr	r2, [r3, #8]
 8037b38:	687b      	ldr	r3, [r7, #4]
 8037b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8037b3c:	683b      	ldr	r3, [r7, #0]
 8037b3e:	681a      	ldr	r2, [r3, #0]
 8037b40:	687b      	ldr	r3, [r7, #4]
 8037b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8037b44:	687b      	ldr	r3, [r7, #4]
 8037b46:	4a0a      	ldr	r2, [pc, #40]	; (8037b70 <TIM_Base_SetConfig+0x114>)
 8037b48:	4293      	cmp	r3, r2
 8037b4a:	d003      	beq.n	8037b54 <TIM_Base_SetConfig+0xf8>
 8037b4c:	687b      	ldr	r3, [r7, #4]
 8037b4e:	4a0c      	ldr	r2, [pc, #48]	; (8037b80 <TIM_Base_SetConfig+0x124>)
 8037b50:	4293      	cmp	r3, r2
 8037b52:	d103      	bne.n	8037b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8037b54:	683b      	ldr	r3, [r7, #0]
 8037b56:	691a      	ldr	r2, [r3, #16]
 8037b58:	687b      	ldr	r3, [r7, #4]
 8037b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8037b5c:	687b      	ldr	r3, [r7, #4]
 8037b5e:	2201      	movs	r2, #1
 8037b60:	615a      	str	r2, [r3, #20]
}
 8037b62:	bf00      	nop
 8037b64:	3714      	adds	r7, #20
 8037b66:	46bd      	mov	sp, r7
 8037b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b6c:	4770      	bx	lr
 8037b6e:	bf00      	nop
 8037b70:	40010000 	.word	0x40010000
 8037b74:	40000400 	.word	0x40000400
 8037b78:	40000800 	.word	0x40000800
 8037b7c:	40000c00 	.word	0x40000c00
 8037b80:	40010400 	.word	0x40010400
 8037b84:	40014000 	.word	0x40014000
 8037b88:	40014400 	.word	0x40014400
 8037b8c:	40014800 	.word	0x40014800
 8037b90:	40001800 	.word	0x40001800
 8037b94:	40001c00 	.word	0x40001c00
 8037b98:	40002000 	.word	0x40002000

08037b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8037b9c:	b480      	push	{r7}
 8037b9e:	b087      	sub	sp, #28
 8037ba0:	af00      	add	r7, sp, #0
 8037ba2:	60f8      	str	r0, [r7, #12]
 8037ba4:	60b9      	str	r1, [r7, #8]
 8037ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8037ba8:	68fb      	ldr	r3, [r7, #12]
 8037baa:	6a1b      	ldr	r3, [r3, #32]
 8037bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8037bae:	68fb      	ldr	r3, [r7, #12]
 8037bb0:	6a1b      	ldr	r3, [r3, #32]
 8037bb2:	f023 0201 	bic.w	r2, r3, #1
 8037bb6:	68fb      	ldr	r3, [r7, #12]
 8037bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8037bba:	68fb      	ldr	r3, [r7, #12]
 8037bbc:	699b      	ldr	r3, [r3, #24]
 8037bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8037bc0:	693b      	ldr	r3, [r7, #16]
 8037bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8037bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8037bc8:	687b      	ldr	r3, [r7, #4]
 8037bca:	011b      	lsls	r3, r3, #4
 8037bcc:	693a      	ldr	r2, [r7, #16]
 8037bce:	4313      	orrs	r3, r2
 8037bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8037bd2:	697b      	ldr	r3, [r7, #20]
 8037bd4:	f023 030a 	bic.w	r3, r3, #10
 8037bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8037bda:	697a      	ldr	r2, [r7, #20]
 8037bdc:	68bb      	ldr	r3, [r7, #8]
 8037bde:	4313      	orrs	r3, r2
 8037be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8037be2:	68fb      	ldr	r3, [r7, #12]
 8037be4:	693a      	ldr	r2, [r7, #16]
 8037be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8037be8:	68fb      	ldr	r3, [r7, #12]
 8037bea:	697a      	ldr	r2, [r7, #20]
 8037bec:	621a      	str	r2, [r3, #32]
}
 8037bee:	bf00      	nop
 8037bf0:	371c      	adds	r7, #28
 8037bf2:	46bd      	mov	sp, r7
 8037bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037bf8:	4770      	bx	lr

08037bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8037bfa:	b480      	push	{r7}
 8037bfc:	b087      	sub	sp, #28
 8037bfe:	af00      	add	r7, sp, #0
 8037c00:	60f8      	str	r0, [r7, #12]
 8037c02:	60b9      	str	r1, [r7, #8]
 8037c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8037c06:	68fb      	ldr	r3, [r7, #12]
 8037c08:	6a1b      	ldr	r3, [r3, #32]
 8037c0a:	f023 0210 	bic.w	r2, r3, #16
 8037c0e:	68fb      	ldr	r3, [r7, #12]
 8037c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8037c12:	68fb      	ldr	r3, [r7, #12]
 8037c14:	699b      	ldr	r3, [r3, #24]
 8037c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8037c18:	68fb      	ldr	r3, [r7, #12]
 8037c1a:	6a1b      	ldr	r3, [r3, #32]
 8037c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8037c1e:	697b      	ldr	r3, [r7, #20]
 8037c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8037c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8037c26:	687b      	ldr	r3, [r7, #4]
 8037c28:	031b      	lsls	r3, r3, #12
 8037c2a:	697a      	ldr	r2, [r7, #20]
 8037c2c:	4313      	orrs	r3, r2
 8037c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8037c30:	693b      	ldr	r3, [r7, #16]
 8037c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8037c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8037c38:	68bb      	ldr	r3, [r7, #8]
 8037c3a:	011b      	lsls	r3, r3, #4
 8037c3c:	693a      	ldr	r2, [r7, #16]
 8037c3e:	4313      	orrs	r3, r2
 8037c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8037c42:	68fb      	ldr	r3, [r7, #12]
 8037c44:	697a      	ldr	r2, [r7, #20]
 8037c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8037c48:	68fb      	ldr	r3, [r7, #12]
 8037c4a:	693a      	ldr	r2, [r7, #16]
 8037c4c:	621a      	str	r2, [r3, #32]
}
 8037c4e:	bf00      	nop
 8037c50:	371c      	adds	r7, #28
 8037c52:	46bd      	mov	sp, r7
 8037c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c58:	4770      	bx	lr

08037c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8037c5a:	b480      	push	{r7}
 8037c5c:	b085      	sub	sp, #20
 8037c5e:	af00      	add	r7, sp, #0
 8037c60:	6078      	str	r0, [r7, #4]
 8037c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8037c64:	687b      	ldr	r3, [r7, #4]
 8037c66:	689b      	ldr	r3, [r3, #8]
 8037c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8037c6a:	68fb      	ldr	r3, [r7, #12]
 8037c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8037c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8037c72:	683a      	ldr	r2, [r7, #0]
 8037c74:	68fb      	ldr	r3, [r7, #12]
 8037c76:	4313      	orrs	r3, r2
 8037c78:	f043 0307 	orr.w	r3, r3, #7
 8037c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8037c7e:	687b      	ldr	r3, [r7, #4]
 8037c80:	68fa      	ldr	r2, [r7, #12]
 8037c82:	609a      	str	r2, [r3, #8]
}
 8037c84:	bf00      	nop
 8037c86:	3714      	adds	r7, #20
 8037c88:	46bd      	mov	sp, r7
 8037c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c8e:	4770      	bx	lr

08037c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8037c90:	b480      	push	{r7}
 8037c92:	b087      	sub	sp, #28
 8037c94:	af00      	add	r7, sp, #0
 8037c96:	60f8      	str	r0, [r7, #12]
 8037c98:	60b9      	str	r1, [r7, #8]
 8037c9a:	607a      	str	r2, [r7, #4]
 8037c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8037c9e:	68fb      	ldr	r3, [r7, #12]
 8037ca0:	689b      	ldr	r3, [r3, #8]
 8037ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8037ca4:	697b      	ldr	r3, [r7, #20]
 8037ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8037caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8037cac:	683b      	ldr	r3, [r7, #0]
 8037cae:	021a      	lsls	r2, r3, #8
 8037cb0:	687b      	ldr	r3, [r7, #4]
 8037cb2:	431a      	orrs	r2, r3
 8037cb4:	68bb      	ldr	r3, [r7, #8]
 8037cb6:	4313      	orrs	r3, r2
 8037cb8:	697a      	ldr	r2, [r7, #20]
 8037cba:	4313      	orrs	r3, r2
 8037cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8037cbe:	68fb      	ldr	r3, [r7, #12]
 8037cc0:	697a      	ldr	r2, [r7, #20]
 8037cc2:	609a      	str	r2, [r3, #8]
}
 8037cc4:	bf00      	nop
 8037cc6:	371c      	adds	r7, #28
 8037cc8:	46bd      	mov	sp, r7
 8037cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cce:	4770      	bx	lr

08037cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8037cd0:	b480      	push	{r7}
 8037cd2:	b085      	sub	sp, #20
 8037cd4:	af00      	add	r7, sp, #0
 8037cd6:	6078      	str	r0, [r7, #4]
 8037cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8037cda:	687b      	ldr	r3, [r7, #4]
 8037cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8037ce0:	2b01      	cmp	r3, #1
 8037ce2:	d101      	bne.n	8037ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8037ce4:	2302      	movs	r3, #2
 8037ce6:	e05a      	b.n	8037d9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8037ce8:	687b      	ldr	r3, [r7, #4]
 8037cea:	2201      	movs	r2, #1
 8037cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037cf0:	687b      	ldr	r3, [r7, #4]
 8037cf2:	2202      	movs	r2, #2
 8037cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8037cf8:	687b      	ldr	r3, [r7, #4]
 8037cfa:	681b      	ldr	r3, [r3, #0]
 8037cfc:	685b      	ldr	r3, [r3, #4]
 8037cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8037d00:	687b      	ldr	r3, [r7, #4]
 8037d02:	681b      	ldr	r3, [r3, #0]
 8037d04:	689b      	ldr	r3, [r3, #8]
 8037d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8037d08:	68fb      	ldr	r3, [r7, #12]
 8037d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8037d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8037d10:	683b      	ldr	r3, [r7, #0]
 8037d12:	681b      	ldr	r3, [r3, #0]
 8037d14:	68fa      	ldr	r2, [r7, #12]
 8037d16:	4313      	orrs	r3, r2
 8037d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8037d1a:	687b      	ldr	r3, [r7, #4]
 8037d1c:	681b      	ldr	r3, [r3, #0]
 8037d1e:	68fa      	ldr	r2, [r7, #12]
 8037d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8037d22:	687b      	ldr	r3, [r7, #4]
 8037d24:	681b      	ldr	r3, [r3, #0]
 8037d26:	4a21      	ldr	r2, [pc, #132]	; (8037dac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8037d28:	4293      	cmp	r3, r2
 8037d2a:	d022      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d2c:	687b      	ldr	r3, [r7, #4]
 8037d2e:	681b      	ldr	r3, [r3, #0]
 8037d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037d34:	d01d      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d36:	687b      	ldr	r3, [r7, #4]
 8037d38:	681b      	ldr	r3, [r3, #0]
 8037d3a:	4a1d      	ldr	r2, [pc, #116]	; (8037db0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8037d3c:	4293      	cmp	r3, r2
 8037d3e:	d018      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d40:	687b      	ldr	r3, [r7, #4]
 8037d42:	681b      	ldr	r3, [r3, #0]
 8037d44:	4a1b      	ldr	r2, [pc, #108]	; (8037db4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8037d46:	4293      	cmp	r3, r2
 8037d48:	d013      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d4a:	687b      	ldr	r3, [r7, #4]
 8037d4c:	681b      	ldr	r3, [r3, #0]
 8037d4e:	4a1a      	ldr	r2, [pc, #104]	; (8037db8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8037d50:	4293      	cmp	r3, r2
 8037d52:	d00e      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d54:	687b      	ldr	r3, [r7, #4]
 8037d56:	681b      	ldr	r3, [r3, #0]
 8037d58:	4a18      	ldr	r2, [pc, #96]	; (8037dbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8037d5a:	4293      	cmp	r3, r2
 8037d5c:	d009      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d5e:	687b      	ldr	r3, [r7, #4]
 8037d60:	681b      	ldr	r3, [r3, #0]
 8037d62:	4a17      	ldr	r2, [pc, #92]	; (8037dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8037d64:	4293      	cmp	r3, r2
 8037d66:	d004      	beq.n	8037d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8037d68:	687b      	ldr	r3, [r7, #4]
 8037d6a:	681b      	ldr	r3, [r3, #0]
 8037d6c:	4a15      	ldr	r2, [pc, #84]	; (8037dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8037d6e:	4293      	cmp	r3, r2
 8037d70:	d10c      	bne.n	8037d8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8037d72:	68bb      	ldr	r3, [r7, #8]
 8037d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8037d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8037d7a:	683b      	ldr	r3, [r7, #0]
 8037d7c:	685b      	ldr	r3, [r3, #4]
 8037d7e:	68ba      	ldr	r2, [r7, #8]
 8037d80:	4313      	orrs	r3, r2
 8037d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8037d84:	687b      	ldr	r3, [r7, #4]
 8037d86:	681b      	ldr	r3, [r3, #0]
 8037d88:	68ba      	ldr	r2, [r7, #8]
 8037d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8037d8c:	687b      	ldr	r3, [r7, #4]
 8037d8e:	2201      	movs	r2, #1
 8037d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8037d94:	687b      	ldr	r3, [r7, #4]
 8037d96:	2200      	movs	r2, #0
 8037d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8037d9c:	2300      	movs	r3, #0
}
 8037d9e:	4618      	mov	r0, r3
 8037da0:	3714      	adds	r7, #20
 8037da2:	46bd      	mov	sp, r7
 8037da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037da8:	4770      	bx	lr
 8037daa:	bf00      	nop
 8037dac:	40010000 	.word	0x40010000
 8037db0:	40000400 	.word	0x40000400
 8037db4:	40000800 	.word	0x40000800
 8037db8:	40000c00 	.word	0x40000c00
 8037dbc:	40010400 	.word	0x40010400
 8037dc0:	40014000 	.word	0x40014000
 8037dc4:	40001800 	.word	0x40001800

08037dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8037dc8:	b480      	push	{r7}
 8037dca:	b083      	sub	sp, #12
 8037dcc:	af00      	add	r7, sp, #0
 8037dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8037dd0:	bf00      	nop
 8037dd2:	370c      	adds	r7, #12
 8037dd4:	46bd      	mov	sp, r7
 8037dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037dda:	4770      	bx	lr

08037ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8037ddc:	b480      	push	{r7}
 8037dde:	b083      	sub	sp, #12
 8037de0:	af00      	add	r7, sp, #0
 8037de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8037de4:	bf00      	nop
 8037de6:	370c      	adds	r7, #12
 8037de8:	46bd      	mov	sp, r7
 8037dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037dee:	4770      	bx	lr

08037df0 <memset>:
 8037df0:	4402      	add	r2, r0
 8037df2:	4603      	mov	r3, r0
 8037df4:	4293      	cmp	r3, r2
 8037df6:	d100      	bne.n	8037dfa <memset+0xa>
 8037df8:	4770      	bx	lr
 8037dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8037dfe:	e7f9      	b.n	8037df4 <memset+0x4>

08037e00 <__libc_init_array>:
 8037e00:	b570      	push	{r4, r5, r6, lr}
 8037e02:	4d0d      	ldr	r5, [pc, #52]	; (8037e38 <__libc_init_array+0x38>)
 8037e04:	4c0d      	ldr	r4, [pc, #52]	; (8037e3c <__libc_init_array+0x3c>)
 8037e06:	1b64      	subs	r4, r4, r5
 8037e08:	10a4      	asrs	r4, r4, #2
 8037e0a:	2600      	movs	r6, #0
 8037e0c:	42a6      	cmp	r6, r4
 8037e0e:	d109      	bne.n	8037e24 <__libc_init_array+0x24>
 8037e10:	4d0b      	ldr	r5, [pc, #44]	; (8037e40 <__libc_init_array+0x40>)
 8037e12:	4c0c      	ldr	r4, [pc, #48]	; (8037e44 <__libc_init_array+0x44>)
 8037e14:	f000 f826 	bl	8037e64 <_init>
 8037e18:	1b64      	subs	r4, r4, r5
 8037e1a:	10a4      	asrs	r4, r4, #2
 8037e1c:	2600      	movs	r6, #0
 8037e1e:	42a6      	cmp	r6, r4
 8037e20:	d105      	bne.n	8037e2e <__libc_init_array+0x2e>
 8037e22:	bd70      	pop	{r4, r5, r6, pc}
 8037e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8037e28:	4798      	blx	r3
 8037e2a:	3601      	adds	r6, #1
 8037e2c:	e7ee      	b.n	8037e0c <__libc_init_array+0xc>
 8037e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8037e32:	4798      	blx	r3
 8037e34:	3601      	adds	r6, #1
 8037e36:	e7f2      	b.n	8037e1e <__libc_init_array+0x1e>
 8037e38:	08037f68 	.word	0x08037f68
 8037e3c:	08037f68 	.word	0x08037f68
 8037e40:	08037f68 	.word	0x08037f68
 8037e44:	08037f6c 	.word	0x08037f6c

08037e48 <memcpy>:
 8037e48:	440a      	add	r2, r1
 8037e4a:	4291      	cmp	r1, r2
 8037e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8037e50:	d100      	bne.n	8037e54 <memcpy+0xc>
 8037e52:	4770      	bx	lr
 8037e54:	b510      	push	{r4, lr}
 8037e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8037e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8037e5e:	4291      	cmp	r1, r2
 8037e60:	d1f9      	bne.n	8037e56 <memcpy+0xe>
 8037e62:	bd10      	pop	{r4, pc}

08037e64 <_init>:
 8037e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037e66:	bf00      	nop
 8037e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037e6a:	bc08      	pop	{r3}
 8037e6c:	469e      	mov	lr, r3
 8037e6e:	4770      	bx	lr

08037e70 <_fini>:
 8037e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037e72:	bf00      	nop
 8037e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037e76:	bc08      	pop	{r3}
 8037e78:	469e      	mov	lr, r3
 8037e7a:	4770      	bx	lr
