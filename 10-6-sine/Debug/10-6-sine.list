
10-6-sine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f40  08005f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f48  08005f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001e8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fe93  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000264b  00000000  00000000  0002ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fc0  00000000  00000000  00032560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c52  00000000  00000000  00033520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021d50  00000000  00000000  00034172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013e17  00000000  00000000  00055ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce2b2  00000000  00000000  00069cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004444  00000000  00000000  00137f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b38 	.word	0x08005b38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b38 	.word	0x08005b38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <write_register+0x34>)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <write_register+0x34>)
 80004dc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <write_register+0x34>)
 80004e6:	2194      	movs	r1, #148	; 0x94
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <write_register+0x38>)
 80004ea:	f001 ff73 	bl	80023d4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000028 	.word	0x20000028
 80004fc:	2000002c 	.word	0x2000002c

08000500 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <read_register+0x3c>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <read_register+0x3c>)
 800051a:	2194      	movs	r1, #148	; 0x94
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <read_register+0x40>)
 800051e:	f001 ff59 	bl	80023d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <read_register+0x40>)
 800052e:	f002 f84f 	bl	80025d0 <HAL_I2C_Master_Receive>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028
 8000540:	2000002c 	.word	0x2000002c

08000544 <CS43_Init>:
//-------------- Public Functions ----------------//
// Function(1): Initialisation
//

void CS43_Init(I2C_HandleTypeDef i2c_handle)//, CS43_MODE outputMode) //hardcode -db
{
 8000544:	b084      	sub	sp, #16
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
 800054a:	f107 0c08 	add.w	ip, r7, #8
 800054e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000552:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CS43_Init+0x1fc>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800055a:	4b79      	ldr	r3, [pc, #484]	; (8000740 <CS43_Init+0x1fc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	69da      	ldr	r2, [r3, #28]
 8000560:	4b77      	ldr	r3, [pc, #476]	; (8000740 <CS43_Init+0x1fc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000568:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2110      	movs	r1, #16
 800056e:	4875      	ldr	r0, [pc, #468]	; (8000744 <CS43_Init+0x200>)
 8000570:	f001 fdd2 	bl	8002118 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000574:	4b74      	ldr	r3, [pc, #464]	; (8000748 <CS43_Init+0x204>)
 8000576:	4618      	mov	r0, r3
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2254      	movs	r2, #84	; 0x54
 800057e:	4619      	mov	r1, r3
 8000580:	f004 fd92 	bl	80050a8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000584:	4b71      	ldr	r3, [pc, #452]	; (800074c <CS43_Init+0x208>)
 8000586:	2201      	movs	r2, #1
 8000588:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800058a:	4970      	ldr	r1, [pc, #448]	; (800074c <CS43_Init+0x208>)
 800058c:	2002      	movs	r0, #2
 800058e:	f7ff ff99 	bl	80004c4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000592:	4b6e      	ldr	r3, [pc, #440]	; (800074c <CS43_Init+0x208>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000598:	4b6c      	ldr	r3, [pc, #432]	; (800074c <CS43_Init+0x208>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b6a      	ldr	r3, [pc, #424]	; (800074c <CS43_Init+0x208>)
 80005a4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a6:	4b69      	ldr	r3, [pc, #420]	; (800074c <CS43_Init+0x208>)
 80005a8:	785b      	ldrb	r3, [r3, #1]
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b66      	ldr	r3, [pc, #408]	; (800074c <CS43_Init+0x208>)
 80005b2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b4:	4b65      	ldr	r3, [pc, #404]	; (800074c <CS43_Init+0x208>)
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	f043 0303 	orr.w	r3, r3, #3
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b63      	ldr	r3, [pc, #396]	; (800074c <CS43_Init+0x208>)
 80005c0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005c2:	4963      	ldr	r1, [pc, #396]	; (8000750 <CS43_Init+0x20c>)
 80005c4:	2004      	movs	r0, #4
 80005c6:	f7ff ff7d 	bl	80004c4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ca:	4b60      	ldr	r3, [pc, #384]	; (800074c <CS43_Init+0x208>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005d0:	495f      	ldr	r1, [pc, #380]	; (8000750 <CS43_Init+0x20c>)
 80005d2:	2005      	movs	r0, #5
 80005d4:	f7ff ff76 	bl	80004c4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d8:	495c      	ldr	r1, [pc, #368]	; (800074c <CS43_Init+0x208>)
 80005da:	2006      	movs	r0, #6
 80005dc:	f7ff ff90 	bl	8000500 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e0:	4b5a      	ldr	r3, [pc, #360]	; (800074c <CS43_Init+0x208>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <CS43_Init+0x208>)
 80005ec:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ee:	4b57      	ldr	r3, [pc, #348]	; (800074c <CS43_Init+0x208>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b54      	ldr	r3, [pc, #336]	; (800074c <CS43_Init+0x208>)
 80005fa:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005fc:	4b53      	ldr	r3, [pc, #332]	; (800074c <CS43_Init+0x208>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <CS43_Init+0x208>)
 8000608:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800060a:	4b50      	ldr	r3, [pc, #320]	; (800074c <CS43_Init+0x208>)
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	f023 0310 	bic.w	r3, r3, #16
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b4d      	ldr	r3, [pc, #308]	; (800074c <CS43_Init+0x208>)
 8000616:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000618:	4b4c      	ldr	r3, [pc, #304]	; (800074c <CS43_Init+0x208>)
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	f023 0304 	bic.w	r3, r3, #4
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <CS43_Init+0x208>)
 8000624:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000626:	4b49      	ldr	r3, [pc, #292]	; (800074c <CS43_Init+0x208>)
 8000628:	785b      	ldrb	r3, [r3, #1]
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <CS43_Init+0x208>)
 8000632:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000634:	4b45      	ldr	r3, [pc, #276]	; (800074c <CS43_Init+0x208>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	f043 0303 	orr.w	r3, r3, #3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <CS43_Init+0x208>)
 8000640:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000642:	4943      	ldr	r1, [pc, #268]	; (8000750 <CS43_Init+0x20c>)
 8000644:	2006      	movs	r0, #6
 8000646:	f7ff ff3d 	bl	80004c4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800064a:	4941      	ldr	r1, [pc, #260]	; (8000750 <CS43_Init+0x20c>)
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff57 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000652:	4b3e      	ldr	r3, [pc, #248]	; (800074c <CS43_Init+0x208>)
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b3b      	ldr	r3, [pc, #236]	; (800074c <CS43_Init+0x208>)
 800065e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <CS43_Init+0x208>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <CS43_Init+0x208>)
 800066c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066e:	4938      	ldr	r1, [pc, #224]	; (8000750 <CS43_Init+0x20c>)
 8000670:	2008      	movs	r0, #8
 8000672:	f7ff ff27 	bl	80004c4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000676:	4936      	ldr	r1, [pc, #216]	; (8000750 <CS43_Init+0x20c>)
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff41 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <CS43_Init+0x208>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b30      	ldr	r3, [pc, #192]	; (800074c <CS43_Init+0x208>)
 800068a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <CS43_Init+0x208>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <CS43_Init+0x208>)
 8000698:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800069a:	492d      	ldr	r1, [pc, #180]	; (8000750 <CS43_Init+0x20c>)
 800069c:	2009      	movs	r0, #9
 800069e:	f7ff ff11 	bl	80004c4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006a2:	492b      	ldr	r1, [pc, #172]	; (8000750 <CS43_Init+0x20c>)
 80006a4:	200e      	movs	r0, #14
 80006a6:	f7ff ff2b 	bl	8000500 <read_register>
//	if(outputMode == MODE_ANALOG) //hardcoding
//	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <CS43_Init+0x208>)
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <CS43_Init+0x208>)
 80006b6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <CS43_Init+0x208>)
 80006ba:	785b      	ldrb	r3, [r3, #1]
 80006bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <CS43_Init+0x208>)
 80006c4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <CS43_Init+0x208>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	f023 0320 	bic.w	r3, r3, #32
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <CS43_Init+0x208>)
 80006d2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <CS43_Init+0x208>)
 80006d6:	785b      	ldrb	r3, [r3, #1]
 80006d8:	f023 0310 	bic.w	r3, r3, #16
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <CS43_Init+0x208>)
 80006e0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <CS43_Init+0x208>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	f023 0308 	bic.w	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <CS43_Init+0x208>)
 80006ee:	705a      	strb	r2, [r3, #1]
//	} //hardcoding -db
//	else if(outputMode == MODE_I2S)
//	{
//		iData[1] = 0x02;
//	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006f0:	4917      	ldr	r1, [pc, #92]	; (8000750 <CS43_Init+0x20c>)
 80006f2:	200e      	movs	r0, #14
 80006f4:	f7ff fee6 	bl	80004c4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006f8:	4915      	ldr	r1, [pc, #84]	; (8000750 <CS43_Init+0x20c>)
 80006fa:	200f      	movs	r0, #15
 80006fc:	f7ff ff00 	bl	8000500 <read_register>
	iData[1] = 0x00;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <CS43_Init+0x208>)
 8000702:	2200      	movs	r2, #0
 8000704:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000706:	4912      	ldr	r1, [pc, #72]	; (8000750 <CS43_Init+0x20c>)
 8000708:	200f      	movs	r0, #15
 800070a:	f7ff fedb 	bl	80004c4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <CS43_Init+0x208>)
 8000710:	2200      	movs	r2, #0
 8000712:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000714:	490e      	ldr	r1, [pc, #56]	; (8000750 <CS43_Init+0x20c>)
 8000716:	2014      	movs	r0, #20
 8000718:	f7ff fed4 	bl	80004c4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <CS43_Init+0x20c>)
 800071e:	2015      	movs	r0, #21
 8000720:	f7ff fed0 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000724:	490a      	ldr	r1, [pc, #40]	; (8000750 <CS43_Init+0x20c>)
 8000726:	201a      	movs	r0, #26
 8000728:	f7ff fecc 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800072c:	4908      	ldr	r1, [pc, #32]	; (8000750 <CS43_Init+0x20c>)
 800072e:	201b      	movs	r0, #27
 8000730:	f7ff fec8 	bl	80004c4 <write_register>
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr
 8000740:	200000e8 	.word	0x200000e8
 8000744:	40020c00 	.word	0x40020c00
 8000748:	2000002c 	.word	0x2000002c
 800074c:	20000028 	.word	0x20000028
 8000750:	20000029 	.word	0x20000029

08000754 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d837      	bhi.n	80007d4 <CS43_Enable_RightLeft+0x80>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <CS43_Enable_RightLeft+0x18>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	0800077d 	.word	0x0800077d
 8000770:	08000793 	.word	0x08000793
 8000774:	080007a9 	.word	0x080007a9
 8000778:	080007bf 	.word	0x080007bf
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 800077e:	22c0      	movs	r2, #192	; 0xc0
 8000780:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 800078e:	705a      	strb	r2, [r3, #1]
			break;
 8000790:	e021      	b.n	80007d6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 800079a:	785b      	ldrb	r3, [r3, #1]
 800079c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007a4:	705a      	strb	r2, [r3, #1]
			break;
 80007a6:	e016      	b.n	80007d6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007ba:	705a      	strb	r2, [r3, #1]
			break;
 80007bc:	e00b      	b.n	80007d6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007d0:	705a      	strb	r2, [r3, #1]
			break;
 80007d2:	e000      	b.n	80007d6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007d4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	f043 030c 	orr.w	r3, r3, #12
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007e2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	f043 0303 	orr.w	r3, r3, #3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <CS43_Enable_RightLeft+0xb0>)
 80007f0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80007f2:	4905      	ldr	r1, [pc, #20]	; (8000808 <CS43_Enable_RightLeft+0xb4>)
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff fe65 	bl	80004c4 <write_register>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000028 	.word	0x20000028
 8000808:	20000029 	.word	0x20000029

0800080c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	3b32      	subs	r3, #50	; 0x32
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <CS43_SetVolume+0x78>)
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000830:	4915      	ldr	r1, [pc, #84]	; (8000888 <CS43_SetVolume+0x7c>)
 8000832:	2014      	movs	r0, #20
 8000834:	f7ff fe46 	bl	80004c4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000838:	4913      	ldr	r1, [pc, #76]	; (8000888 <CS43_SetVolume+0x7c>)
 800083a:	2015      	movs	r0, #21
 800083c:	f7ff fe42 	bl	80004c4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b64      	cmp	r3, #100	; 0x64
 8000844:	d80e      	bhi.n	8000864 <CS43_SetVolume+0x58>
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <CS43_SetVolume+0x80>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1152      	asrs	r2, r2, #5
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3b18      	subs	r3, #24
 8000860:	b2db      	uxtb	r3, r3
 8000862:	e000      	b.n	8000866 <CS43_SetVolume+0x5a>
 8000864:	2318      	movs	r3, #24
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <CS43_SetVolume+0x78>)
 8000868:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800086a:	4907      	ldr	r1, [pc, #28]	; (8000888 <CS43_SetVolume+0x7c>)
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff fe29 	bl	80004c4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000872:	4905      	ldr	r1, [pc, #20]	; (8000888 <CS43_SetVolume+0x7c>)
 8000874:	2021      	movs	r0, #33	; 0x21
 8000876:	f7ff fe25 	bl	80004c4 <write_register>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000028 	.word	0x20000028
 8000888:	20000029 	.word	0x20000029
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <CS43_Start+0x7c>)
 8000896:	2299      	movs	r2, #153	; 0x99
 8000898:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800089a:	491d      	ldr	r1, [pc, #116]	; (8000910 <CS43_Start+0x80>)
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe11 	bl	80004c4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <CS43_Start+0x7c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008a8:	4919      	ldr	r1, [pc, #100]	; (8000910 <CS43_Start+0x80>)
 80008aa:	2047      	movs	r0, #71	; 0x47
 80008ac:	f7ff fe0a 	bl	80004c4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008b0:	4917      	ldr	r1, [pc, #92]	; (8000910 <CS43_Start+0x80>)
 80008b2:	2032      	movs	r0, #50	; 0x32
 80008b4:	f7ff fe24 	bl	8000500 <read_register>
	iData[1] |= 0x80;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <CS43_Start+0x7c>)
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <CS43_Start+0x7c>)
 80008c4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <CS43_Start+0x80>)
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f7ff fdfb 	bl	80004c4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ce:	4910      	ldr	r1, [pc, #64]	; (8000910 <CS43_Start+0x80>)
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f7ff fe15 	bl	8000500 <read_register>
	iData[1] &= ~(0x80);
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <CS43_Start+0x7c>)
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <CS43_Start+0x7c>)
 80008e2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008e4:	490a      	ldr	r1, [pc, #40]	; (8000910 <CS43_Start+0x80>)
 80008e6:	2032      	movs	r0, #50	; 0x32
 80008e8:	f7ff fdec 	bl	80004c4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <CS43_Start+0x7c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008f2:	4907      	ldr	r1, [pc, #28]	; (8000910 <CS43_Start+0x80>)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fde5 	bl	80004c4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <CS43_Start+0x7c>)
 80008fc:	229e      	movs	r2, #158	; 0x9e
 80008fe:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000900:	4903      	ldr	r1, [pc, #12]	; (8000910 <CS43_Start+0x80>)
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff fdde 	bl	80004c4 <write_register>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000028 	.word	0x20000028
 8000910:	20000029 	.word	0x20000029

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b093      	sub	sp, #76	; 0x4c
 8000918:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <main+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <main+0x78>)
 800091e:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <main+0x7c>)
 8000922:	22a6      	movs	r2, #166	; 0xa6
 8000924:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fc7f 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f83d 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f000 f997 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000932:	f000 f975 	bl	8000c20 <MX_DMA_Init>
  MX_I2C1_Init();
 8000936:	f000 f8cb 	bl	8000ad0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800093a:	f000 f8f7 	bl	8000b2c <MX_I2S3_Init>
  MX_DAC_Init();
 800093e:	f000 f89d 	bl	8000a7c <MX_DAC_Init>
  MX_TIM2_Init();
 8000942:	f000 f921 	bl	8000b88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1);//, MODE_ANALOG);
 8000946:	4c13      	ldr	r4, [pc, #76]	; (8000994 <main+0x80>)
 8000948:	4668      	mov	r0, sp
 800094a:	f104 0310 	add.w	r3, r4, #16
 800094e:	2244      	movs	r2, #68	; 0x44
 8000950:	4619      	mov	r1, r3
 8000952:	f004 fba9 	bl	80050a8 <memcpy>
 8000956:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800095a:	f7ff fdf3 	bl	8000544 <CS43_Init>
  CS43_SetVolume(50);
 800095e:	2032      	movs	r0, #50	; 0x32
 8000960:	f7ff ff54 	bl	800080c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff fef5 	bl	8000754 <CS43_Enable_RightLeft>
  CS43_Start();
 800096a:	f7ff ff91 	bl	8000890 <CS43_Start>

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_dummy, 4);
 800096e:	2204      	movs	r2, #4
 8000970:	4909      	ldr	r1, [pc, #36]	; (8000998 <main+0x84>)
 8000972:	480a      	ldr	r0, [pc, #40]	; (800099c <main+0x88>)
 8000974:	f002 fcc0 	bl	80032f8 <HAL_I2S_Transmit_DMA>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000978:	2100      	movs	r1, #0
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <main+0x8c>)
 800097c:	f000 fdf9 	bl	8001572 <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <main+0x90>)
 8000982:	f003 ff33 	bl	80047ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000986:	e7fe      	b.n	8000986 <main+0x72>
 8000988:	200001dc 	.word	0x200001dc
 800098c:	3bc49ba6 	.word	0x3bc49ba6
 8000990:	200001e0 	.word	0x200001e0
 8000994:	20000094 	.word	0x20000094
 8000998:	200001e8 	.word	0x200001e8
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	20000080 	.word	0x20000080
 80009a4:	20000190 	.word	0x20000190

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	; 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	; 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 fb4a 	bl	8005050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SystemClock_Config+0xd0>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a26:	2307      	movs	r3, #7
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 f8c8 	bl	8003bc4 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a3a:	f000 f9dd 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fb29 	bl	80040b4 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a68:	f000 f9c6 	bl	8000df8 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	; 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_DAC_Init+0x4c>)
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <MX_DAC_Init+0x50>)
 8000a8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_DAC_Init+0x4c>)
 8000a92:	f000 fd4c 	bl	800152e <HAL_DAC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a9c:	f000 f9ac 	bl	8000df8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_DAC_Init+0x4c>)
 8000ab0:	f000 fdd6 	bl	8001660 <HAL_DAC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000aba:	f000 f99d 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000080 	.word	0x20000080
 8000acc:	40007400 	.word	0x40007400

08000ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f001 fb1d 	bl	800214c <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 f96e 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000094 	.word	0x20000094
 8000b24:	40005400 	.word	0x40005400
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <MX_I2S3_Init+0x58>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b54:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b58:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b6e:	f002 fa83 	bl	8003078 <HAL_I2S_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000b78:	f000 f93e 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000e8 	.word	0x200000e8
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bae:	2253      	movs	r2, #83	; 0x53
 8000bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bba:	2213      	movs	r2, #19
 8000bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bca:	4814      	ldr	r0, [pc, #80]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bcc:	f003 fdbe 	bl	800474c <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f90f 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000be8:	f003 ff78 	bl	8004adc <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 f901 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000c04:	f004 f994 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c0e:	f000 f8f3 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000190 	.word	0x20000190

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2010      	movs	r0, #16
 8000c48:	f000 fc3b 	bl	80014c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f000 fc54 	bl	80014fa <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2d      	ldr	r2, [pc, #180]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_GPIO_Init+0xd4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d02:	2200      	movs	r2, #0
 8000d04:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0xd8>)
 8000d0a:	f001 fa05 	bl	8002118 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d0e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_GPIO_Init+0xd8>)
 8000d28:	f001 f85a 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

	if(htim->Instance == TIM2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d4c:	d13f      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		mySinVal = sinf(i_t * 2 * PI * sample_dt);
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ddc <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d66:	edd3 7a00 	vldr	s15, [r3]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	f004 f9a7 	bl	80050c4 <sinf>
 8000d76:	eef0 7a40 	vmov.f32	s15, s0
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d7c:	edc3 7a00 	vstr	s15, [r3]
		//Convert from float to decimal
		myDacVal = (mySinVal + 1)*127;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d8e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000de8 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d9a:	ee17 2a90 	vmov	r2, s15
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
		//Output the sample to the STM DAC
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, myDacVal);
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2208      	movs	r2, #8
 8000da8:	2100      	movs	r1, #0
 8000daa:	4811      	ldr	r0, [pc, #68]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000dac:	f000 fc33 	bl	8001616 <HAL_DAC_SetValue>

		i_t++;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000dba:	801a      	strh	r2, [r3, #0]
		if(i_t>= sample_N) i_t = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000dbe:	881a      	ldrh	r2, [r3, #0]
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d302      	bcc.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x92>
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
	}

}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001e2 	.word	0x200001e2
 8000ddc:	40490fd0 	.word	0x40490fd0
 8000de0:	200001dc 	.word	0x200001dc
 8000de4:	200001d8 	.word	0x200001d8
 8000de8:	42fe0000 	.word	0x42fe0000
 8000dec:	200001e4 	.word	0x200001e4
 8000df0:	20000080 	.word	0x20000080
 8000df4:	200001e0 	.word	0x200001e0

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 fb32 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_DAC_MspInit+0x7c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d127      	bne.n	8000ec6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_DAC_MspInit+0x80>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_DAC_MspInit+0x84>)
 8000ec2:	f000 ff8d 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40007400 	.word	0x40007400
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_I2C_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12c      	bne.n	8000f58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <HAL_I2C_MspInit+0x8c>)
 8000f38:	f000 ff52 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_I2C_MspInit+0x88>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40005400 	.word	0x40005400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_I2S_MspInit+0x164>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 8095 	bne.w	80010c8 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fa2:	23c0      	movs	r3, #192	; 0xc0
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fa8c 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000fba:	f7ff ff1d 	bl	8000df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a43      	ldr	r2, [pc, #268]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_I2S_MspInit+0x168>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001012:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001024:	2306      	movs	r3, #6
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <HAL_I2S_MspInit+0x16c>)
 8001030:	f000 fed6 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001046:	2306      	movs	r3, #6
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4822      	ldr	r0, [pc, #136]	; (80010dc <HAL_I2S_MspInit+0x170>)
 8001052:	f000 fec5 	bl	8001de0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_I2S_MspInit+0x178>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 8001096:	2204      	movs	r2, #4
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 800109c:	2203      	movs	r2, #3
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 80010ae:	f000 fb27 	bl	8001700 <HAL_DMA_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80010b8:	f7ff fe9e 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_I2S_MspInit+0x174>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40003c00 	.word	0x40003c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000130 	.word	0x20000130
 80010e4:	40026088 	.word	0x40026088

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d115      	bne.n	8001126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_TIM_Base_MspInit+0x48>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_TIM_Base_MspInit+0x48>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_TIM_Base_MspInit+0x48>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	201c      	movs	r0, #28
 800111c:	f000 f9d1 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001120:	201c      	movs	r0, #28
 8001122:	f000 f9ea 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8a4 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Stream5_IRQHandler+0x10>)
 800118e:	f000 fbbd 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000130 	.word	0x20000130

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f003 fb93 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000190 	.word	0x20000190

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f003 ff2d 	bl	8005060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fb85 	bl	8000914 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001218:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 800121c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001220:	200001f4 	.word	0x200001f4

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f92b 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fdd2 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f943 	bl	8001516 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f90b 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	200001f0 	.word	0x200001f0

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001f0 	.word	0x200001f0

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e014      	b.n	800156a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fc7f 	bl	8000e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	795b      	ldrb	r3, [r3, #5]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_DAC_Start+0x16>
 8001584:	2302      	movs	r3, #2
 8001586:	e040      	b.n	800160a <HAL_DAC_Start+0x98>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2201      	movs	r2, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80015bc:	2b3c      	cmp	r3, #60	; 0x3c
 80015be:	d11d      	bne.n	80015fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	e014      	b.n	80015fc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	213c      	movs	r1, #60	; 0x3c
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d107      	bne.n	80015fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0202 	orr.w	r2, r2, #2
 80015fa:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	3308      	adds	r3, #8
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e004      	b.n	800164a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	3314      	adds	r3, #20
 8001648:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_DAC_ConfigChannel+0x18>
 8001674:	2302      	movs	r3, #2
 8001676:	e03c      	b.n	80016f2 <HAL_DAC_ConfigChannel+0x92>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2202      	movs	r2, #2
 8001682:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4013      	ands	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	22c0      	movs	r2, #192	; 0xc0
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff fdf2 	bl	80012f4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e099      	b.n	8001850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	e00f      	b.n	800175e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173e:	f7ff fdd9 	bl	80012f4 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d908      	bls.n	800175e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e078      	b.n	8001850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e8      	bne.n	800173e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_DMA_Init+0x158>)
 8001778:	4013      	ands	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4313      	orrs	r3, r2
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f023 0307 	bic.w	r3, r3, #7
 80017de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d117      	bne.n	8001822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fa6f 	bl	8001ce8 <DMA_CheckFifoParam>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800181e:	2301      	movs	r3, #1
 8001820:	e016      	b.n	8001850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa26 	bl	8001c7c <DMA_CalcBaseAndBitshift>
 8001830:	4603      	mov	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	223f      	movs	r2, #63	; 0x3f
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	f010803f 	.word	0xf010803f

0800185c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_DMA_Start_IT+0x26>
 800187e:	2302      	movs	r3, #2
 8001880:	e040      	b.n	8001904 <HAL_DMA_Start_IT+0xa8>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d12f      	bne.n	80018f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f9b8 	bl	8001c20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	223f      	movs	r2, #63	; 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0216 	orr.w	r2, r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e005      	b.n	8001902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001918:	4b8e      	ldr	r3, [pc, #568]	; (8001b54 <HAL_DMA_IRQHandler+0x248>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a8e      	ldr	r2, [pc, #568]	; (8001b58 <HAL_DMA_IRQHandler+0x24c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a9b      	lsrs	r3, r3, #10
 8001924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2208      	movs	r2, #8
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01a      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2208      	movs	r2, #8
 8001966:	409a      	lsls	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2204      	movs	r2, #4
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f043 0204 	orr.w	r2, r3, #4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2210      	movs	r2, #16
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d043      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03c      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2210      	movs	r2, #16
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e01f      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e016      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0208 	bic.w	r2, r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2220      	movs	r2, #32
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 808f 	beq.w	8001bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8087 	beq.w	8001bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d136      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0216 	bic.w	r2, r2, #22
 8001ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x1da>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	223f      	movs	r2, #63	; 0x3f
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d07e      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
        }
        return;
 8001b22:	e079      	b.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01d      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d031      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e02c      	b.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d023      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e01e      	b.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10f      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0210 	bic.w	r2, r2, #16
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d307      	bcc.n	8001bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f2      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x2cc>
 8001bf2:	e000      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	e000      	b.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c18:	bf00      	nop
    }
  }
}
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d108      	bne.n	8001c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c5e:	e007      	b.n	8001c70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3b10      	subs	r3, #16
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d909      	bls.n	8001cbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	1d1a      	adds	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
 8001cbc:	e007      	b.n	8001cce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cc6:	f023 0303 	bic.w	r3, r3, #3
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	aaaaaaab 	.word	0xaaaaaaab
 8001ce4:	08005b68 	.word	0x08005b68

08001ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11f      	bne.n	8001d42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d856      	bhi.n	8001db6 <DMA_CheckFifoParam+0xce>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <DMA_CheckFifoParam+0x28>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d33 	.word	0x08001d33
 8001d18:	08001d21 	.word	0x08001d21
 8001d1c:	08001db7 	.word	0x08001db7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d046      	beq.n	8001dba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d30:	e043      	b.n	8001dba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3a:	d140      	bne.n	8001dbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d40:	e03d      	b.n	8001dbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d121      	bne.n	8001d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d837      	bhi.n	8001dc2 <DMA_CheckFifoParam+0xda>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <DMA_CheckFifoParam+0x70>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d6f 	.word	0x08001d6f
 8001d60:	08001d69 	.word	0x08001d69
 8001d64:	08001d81 	.word	0x08001d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6c:	e030      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d025      	beq.n	8001dc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7e:	e022      	b.n	8001dc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d88:	d11f      	bne.n	8001dca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8e:	e01c      	b.n	8001dca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d903      	bls.n	8001d9e <DMA_CheckFifoParam+0xb6>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d003      	beq.n	8001da4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d9c:	e018      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
      break;
 8001da2:	e015      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      break;
 8001db4:	e00b      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001db6:	bf00      	nop
 8001db8:	e00a      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e008      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e006      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e004      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x328>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x310>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x334>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e12b      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe feb2 	bl	8000edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b0:	f002 f978 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_I2C_Init+0x274>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d807      	bhi.n	80021d0 <HAL_I2C_Init+0x84>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_I2C_Init+0x278>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e006      	b.n	80021de <HAL_I2C_Init+0x92>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a7d      	ldr	r2, [pc, #500]	; (80023c8 <HAL_I2C_Init+0x27c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e7      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a78      	ldr	r2, [pc, #480]	; (80023cc <HAL_I2C_Init+0x280>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d802      	bhi.n	8002220 <HAL_I2C_Init+0xd4>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	e009      	b.n	8002234 <HAL_I2C_Init+0xe8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_I2C_Init+0x284>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	495c      	ldr	r1, [pc, #368]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002250:	428b      	cmp	r3, r1
 8002252:	d819      	bhi.n	8002288 <HAL_I2C_Init+0x13c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e59      	subs	r1, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002268:	400b      	ands	r3, r1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_Init+0x138>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e59      	subs	r1, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fbb1 f3f3 	udiv	r3, r1, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	e051      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002284:	2304      	movs	r3, #4
 8002286:	e04f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_I2C_Init+0x168>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e012      	b.n	80022da <HAL_I2C_Init+0x18e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x196>
 80022de:	2301      	movs	r3, #1
 80022e0:	e022      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <HAL_I2C_Init+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e58      	subs	r0, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6911      	ldr	r1, [r2, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000186a0 	.word	0x000186a0
 80023c4:	001e847f 	.word	0x001e847f
 80023c8:	003d08ff 	.word	0x003d08ff
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	461a      	mov	r2, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	817b      	strh	r3, [r7, #10]
 80023e4:	4613      	mov	r3, r2
 80023e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7fe ff84 	bl	80012f4 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 80e0 	bne.w	80025bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2319      	movs	r3, #25
 8002402:	2201      	movs	r2, #1
 8002404:	4970      	ldr	r1, [pc, #448]	; (80025c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fc58 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e0d3      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x50>
 8002420:	2302      	movs	r3, #2
 8002422:	e0cc      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d007      	beq.n	800244a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002458:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2210      	movs	r2, #16
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_I2C_Master_Transmit+0x1f8>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800248c:	8979      	ldrh	r1, [r7, #10]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fac2 	bl	8002a1c <I2C_MasterRequestWrite>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e08d      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b8:	e066      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fcd2 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06b      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_I2C_Master_Transmit+0x188>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fcc2 	bl	8002eea <I2C_WaitOnBTFFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e01a      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d194      	bne.n	80024ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7fe fe86 	bl	80012f4 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 820b 	bne.w	8002a0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2319      	movs	r3, #25
 80025fe:	2201      	movs	r2, #1
 8002600:	497c      	ldr	r1, [pc, #496]	; (80027f4 <HAL_I2C_Master_Receive+0x224>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fb5a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	e1fe      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Master_Receive+0x50>
 800261c:	2302      	movs	r3, #2
 800261e:	e1f7      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d007      	beq.n	8002646 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2222      	movs	r2, #34	; 0x22
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2210      	movs	r2, #16
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a5c      	ldr	r2, [pc, #368]	; (80027f8 <HAL_I2C_Master_Receive+0x228>)
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa46 	bl	8002b20 <I2C_MasterRequestRead>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1b8      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d113      	bne.n	80026ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e18c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11b      	bne.n	800270e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e16c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b02      	cmp	r3, #2
 8002714:	d11b      	bne.n	800274e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	e14c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002774:	e138      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 80f1 	bhi.w	8002962 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fbed 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e139      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ce:	e10b      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d14e      	bne.n	8002876 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	2200      	movs	r2, #0
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_I2C_Master_Receive+0x22c>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa6a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e10e      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002874:	e0b8      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	2200      	movs	r2, #0
 800287e:	4966      	ldr	r1, [pc, #408]	; (8002a18 <HAL_I2C_Master_Receive+0x448>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fa1b 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0bf      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	2200      	movs	r2, #0
 80028da:	494f      	ldr	r1, [pc, #316]	; (8002a18 <HAL_I2C_Master_Receive+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f9ed 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e091      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002960:	e042      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fb00 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e04c      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d118      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f aec2 	bne.w	8002776 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010004 	.word	0x00010004

08002a1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d006      	beq.n	8002a46 <I2C_MasterRequestWrite+0x2a>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <I2C_MasterRequestWrite+0x2a>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00b      	b.n	8002a70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d107      	bne.n	8002a70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f91d 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d103      	bne.n	8002aa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e035      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aac:	d108      	bne.n	8002ac0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e01b      	b.n	8002af8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	11db      	asrs	r3, r3, #7
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0306 	and.w	r3, r3, #6
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f063 030f 	orn	r3, r3, #15
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <I2C_MasterRequestWrite+0xfc>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f943 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e010      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4907      	ldr	r1, [pc, #28]	; (8002b1c <I2C_MasterRequestWrite+0x100>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f933 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	00010008 	.word	0x00010008
 8002b1c:	00010002 	.word	0x00010002

08002b20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <I2C_MasterRequestRead+0x3a>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestRead+0x3a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	2b11      	cmp	r3, #17
 8002b72:	d107      	bne.n	8002b84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f893 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e079      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e05f      	b.n	8002c94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4930      	ldr	r1, [pc, #192]	; (8002cb4 <I2C_MasterRequestRead+0x194>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f8b9 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e054      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4929      	ldr	r1, [pc, #164]	; (8002cb8 <I2C_MasterRequestRead+0x198>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8a9 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e044      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f831 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d103      	bne.n	8002c78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e017      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c7c:	897b      	ldrh	r3, [r7, #10]
 8002c7e:	11db      	asrs	r3, r3, #7
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0306 	and.w	r3, r3, #6
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f063 030e 	orn	r3, r3, #14
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <I2C_MasterRequestRead+0x198>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f865 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	00010008 	.word	0x00010008
 8002cb8:	00010002 	.word	0x00010002

08002cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ccc:	e025      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d021      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fe fb0d 	bl	80012f4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e023      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10d      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	e00c      	b.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0b6      	beq.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d78:	e051      	b.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d123      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e046      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d021      	beq.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fa8b 	bl	80012f4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e020      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10c      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e00b      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d18d      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e02d      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8ce 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fa31 	bl	80012f4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d1ca      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef6:	e02d      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f88d 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d021      	beq.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe f9f0 	bl	80012f4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d1ca      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f78:	e042      	b.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d119      	bne.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e029      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe f99a 	bl	80012f4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d1b5      	bne.n	8002f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d11b      	bne.n	8003068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e128      	b.n	80032dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_I2S_Init+0x26c>)
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd ff61 	bl	8000f6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2202      	movs	r2, #2
 80030cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d060      	beq.n	8003198 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030de:	2310      	movs	r3, #16
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e001      	b.n	80030e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d802      	bhi.n	80030f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f001 faca 	bl	8004690 <HAL_RCCEx_GetPeriphCLKFreq>
 80030fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003106:	d125      	bne.n	8003154 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fbb2 f2f3 	udiv	r2, r2, r3
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	3305      	adds	r3, #5
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e01f      	b.n	8003172 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	fbb2 f2f3 	udiv	r2, r2, r3
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	3305      	adds	r3, #5
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e00e      	b.n	8003172 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	3305      	adds	r3, #5
 8003170:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_I2S_Init+0x270>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d902      	bls.n	80031ac <HAL_I2S_Init+0x134>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2bff      	cmp	r3, #255	; 0xff
 80031aa:	d907      	bls.n	80031bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e08f      	b.n	80032dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6851      	ldr	r1, [r2, #4]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6892      	ldr	r2, [r2, #8]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68d2      	ldr	r2, [r2, #12]
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6992      	ldr	r2, [r2, #24]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d161      	bne.n	80032cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_I2S_Init+0x274>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_I2S_Init+0x1a4>
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800321a:	e001      	b.n	8003220 <HAL_I2S_Init+0x1a8>
 800321c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4932      	ldr	r1, [pc, #200]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003228:	428a      	cmp	r2, r1
 800322a:	d101      	bne.n	8003230 <HAL_I2S_Init+0x1b8>
 800322c:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800322e:	e001      	b.n	8003234 <HAL_I2S_Init+0x1bc>
 8003230:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003234:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003238:	f023 030f 	bic.w	r3, r3, #15
 800323c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_I2S_Init+0x1d4>
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800324a:	e001      	b.n	8003250 <HAL_I2S_Init+0x1d8>
 800324c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003250:	2202      	movs	r2, #2
 8003252:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_I2S_Init+0x278>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_I2S_Init+0x1ea>
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_I2S_Init+0x27c>)
 8003260:	e001      	b.n	8003266 <HAL_I2S_Init+0x1ee>
 8003262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003272:	d003      	beq.n	800327c <HAL_I2S_Init+0x204>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e001      	b.n	8003288 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003292:	4313      	orrs	r3, r2
 8003294:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800329c:	4313      	orrs	r3, r2
 800329e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_I2S_Init+0x278>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_I2S_Init+0x24c>
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_I2S_Init+0x27c>)
 80032c2:	e001      	b.n	80032c8 <HAL_I2S_Init+0x250>
 80032c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c8:	897a      	ldrh	r2, [r7, #10]
 80032ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	080035fd 	.word	0x080035fd
 80032e8:	cccccccd 	.word	0xcccccccd
 80032ec:	08003711 	.word	0x08003711
 80032f0:	40003800 	.word	0x40003800
 80032f4:	40003400 	.word	0x40003400

080032f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_I2S_Transmit_DMA+0x1a>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e08e      	b.n	8003434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2S_Transmit_DMA+0x2e>
 8003322:	2302      	movs	r3, #2
 8003324:	e086      	b.n	8003434 <HAL_I2S_Transmit_DMA+0x13c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	e076      	b.n	8003434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d002      	beq.n	8003372 <HAL_I2S_Transmit_DMA+0x7a>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10a      	bne.n	8003388 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003386:	e005      	b.n	8003394 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <HAL_I2S_Transmit_DMA+0x144>)
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_I2S_Transmit_DMA+0x148>)
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_I2S_Transmit_DMA+0x14c>)
 80033aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033b4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033bc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033c4:	f7fe fa4a 	bl	800185c <HAL_DMA_Start_IT>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00f      	beq.n	80033ee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0208 	orr.w	r2, r3, #8
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e022      	b.n	8003434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800340a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0202 	orr.w	r2, r2, #2
 8003428:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	080034db 	.word	0x080034db
 8003440:	08003499 	.word	0x08003499
 8003444:	080034f7 	.word	0x080034f7

08003448 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0202 	bic.w	r2, r2, #2
 80034bc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ffc5 	bl	800345c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ffad 	bl	8003448 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0203 	bic.w	r2, r2, #3
 8003512:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f043 0208 	orr.w	r2, r3, #8
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff ffa5 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	881a      	ldrh	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003586:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff63 	bl	800345c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10e      	bne.n	80035f4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ff3e 	bl	8003470 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b04      	cmp	r3, #4
 8003616:	d13a      	bne.n	800368e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d109      	bne.n	8003636 <I2S_IRQHandler+0x3a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d102      	bne.n	8003636 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ffb4 	bl	800359e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d126      	bne.n	800368e <I2S_IRQHandler+0x92>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d11f      	bne.n	800368e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fefb 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d136      	bne.n	8003708 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d109      	bne.n	80036b8 <I2S_IRQHandler+0xbc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d102      	bne.n	80036b8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff45 	bl	8003542 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d122      	bne.n	8003708 <I2S_IRQHandler+0x10c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d11b      	bne.n	8003708 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036de:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff febe 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a92      	ldr	r2, [pc, #584]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800372a:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800372c:	e001      	b.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800372e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a8b      	ldr	r2, [pc, #556]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003748:	4b8a      	ldr	r3, [pc, #552]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800374a:	e001      	b.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d004      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 8099 	bne.w	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d107      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f925 	bl	80039cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9c8 	bl	8003b2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d13a      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d035      	beq.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6e      	ldr	r2, [pc, #440]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ba:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4969      	ldr	r1, [pc, #420]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037ce:	4b69      	ldr	r3, [pc, #420]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe34 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	f040 80c3 	bne.w	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80bd 	beq.w	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003842:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a49      	ldr	r2, [pc, #292]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003850:	e001      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4944      	ldr	r1, [pc, #272]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385e:	428b      	cmp	r3, r1
 8003860:	d101      	bne.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003862:	4b44      	ldr	r3, [pc, #272]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003864:	e001      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fdf6 	bl	8003484 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003898:	e089      	b.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d107      	bne.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8be 	bl	8003a30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8fd 	bl	8003ac8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d12f      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02a      	beq.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fe:	e001      	b.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4919      	ldr	r1, [pc, #100]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d101      	bne.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003910:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003912:	e001      	b.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fda6 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d136      	bne.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a07      	ldr	r2, [pc, #28]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003958:	e001      	b.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800395a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4902      	ldr	r1, [pc, #8]	; (8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003966:	428b      	cmp	r3, r1
 8003968:	d106      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800396a:	4b02      	ldr	r3, [pc, #8]	; (8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800396c:	e006      	b.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800396e:	bf00      	nop
 8003970:	40003800 	.word	0x40003800
 8003974:	40003400 	.word	0x40003400
 8003978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003980:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003990:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fd6c 	bl	8003484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	e000      	b.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ae:	bf00      	nop
}
 80039b0:	bf00      	nop
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6251      	str	r1, [r2, #36]	; 0x24
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d113      	bne.n	8003a26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffc9 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c99      	adds	r1, r3, #2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6251      	str	r1, [r2, #36]	; 0x24
 8003a42:	8819      	ldrh	r1, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x22>
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a50:	e001      	b.n	8003a56 <I2SEx_TxISR_I2SExt+0x26>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	460a      	mov	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d121      	bne.n	8003ab6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <I2SEx_TxISR_I2SExt+0x50>
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a7e:	e001      	b.n	8003a84 <I2SEx_TxISR_I2SExt+0x54>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d101      	bne.n	8003a94 <I2SEx_TxISR_I2SExt+0x64>
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a92:	e001      	b.n	8003a98 <I2SEx_TxISR_I2SExt+0x68>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff81 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40003800 	.word	0x40003800
 8003ac4:	40003400 	.word	0x40003400

08003ac8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68d8      	ldr	r0, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	1c99      	adds	r1, r3, #2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ae0:	b282      	uxth	r2, r0
 8003ae2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff4a 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <I2SEx_RxISR_I2SExt+0x16>
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b40:	e001      	b.n	8003b46 <I2SEx_RxISR_I2SExt+0x1a>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b46:	68d8      	ldr	r0, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	1c99      	adds	r1, r3, #2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b52:	b282      	uxth	r2, r0
 8003b54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d121      	bne.n	8003bb2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <I2SEx_RxISR_I2SExt+0x50>
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b7a:	e001      	b.n	8003b80 <I2SEx_RxISR_I2SExt+0x54>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <I2SEx_RxISR_I2SExt+0x90>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d101      	bne.n	8003b90 <I2SEx_RxISR_I2SExt+0x64>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b8e:	e001      	b.n	8003b94 <I2SEx_RxISR_I2SExt+0x68>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff03 	bl	80039b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40003800 	.word	0x40003800
 8003bc0:	40003400 	.word	0x40003400

08003bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e267      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d075      	beq.n	8003cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4b85      	ldr	r3, [pc, #532]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b82      	ldr	r3, [pc, #520]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x108>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d157      	bne.n	8003ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e242      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCC_OscConfig+0x74>
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x98>
 8003c42:	4b70      	ldr	r3, [pc, #448]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6f      	ldr	r2, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6c      	ldr	r2, [pc, #432]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a68      	ldr	r2, [pc, #416]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fb3a 	bl	80012f4 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd fb36 	bl	80012f4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e207      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xc0>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fb26 	bl	80012f4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd fb22 	bl	80012f4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1f3      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0xe8>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b44      	ldr	r3, [pc, #272]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1c7      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4937      	ldr	r1, [pc, #220]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCC_OscConfig+0x244>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fadb 	bl	80012f4 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fd fad7 	bl	80012f4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1a8      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4925      	ldr	r1, [pc, #148]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x244>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd faba 	bl	80012f4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fd fab6 	bl	80012f4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e187      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d036      	beq.n	8003e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_RCC_OscConfig+0x248>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fa9a 	bl	80012f4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fd fa96 	bl	80012f4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e167      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x200>
 8003de2:	e01b      	b.n	8003e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_OscConfig+0x248>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fd fa83 	bl	80012f4 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00e      	b.n	8003e10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fd fa7f 	bl	80012f4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d907      	bls.n	8003e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e150      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	42470000 	.word	0x42470000
 8003e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b88      	ldr	r3, [pc, #544]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ea      	bne.n	8003df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8097 	beq.w	8003f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b81      	ldr	r3, [pc, #516]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4b7d      	ldr	r3, [pc, #500]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a7c      	ldr	r2, [pc, #496]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b7a      	ldr	r3, [pc, #488]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b77      	ldr	r3, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b74      	ldr	r3, [pc, #464]	; (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a73      	ldr	r2, [pc, #460]	; (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fd fa3f 	bl	80012f4 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fd fa3b 	bl	80012f4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e10c      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x2ea>
 8003ea0:	4b64      	ldr	r3, [pc, #400]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a63      	ldr	r2, [pc, #396]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x324>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x30c>
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a5e      	ldr	r2, [pc, #376]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5b      	ldr	r2, [pc, #364]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x324>
 8003ed0:	4b58      	ldr	r3, [pc, #352]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a57      	ldr	r2, [pc, #348]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	4b55      	ldr	r3, [pc, #340]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fa00 	bl	80012f4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fd f9fc 	bl	80012f4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0cb      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	4b49      	ldr	r3, [pc, #292]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ee      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x334>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fd f9ea 	bl	80012f4 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fd f9e6 	bl	80012f4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0b5      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	4a38      	ldr	r2, [pc, #224]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a1 	beq.w	80040a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f62:	4b34      	ldr	r3, [pc, #208]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d05c      	beq.n	8004028 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d141      	bne.n	8003ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_RCC_OscConfig+0x478>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd f9ba 	bl	80012f4 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fd f9b6 	bl	80012f4 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e087      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	491b      	ldr	r1, [pc, #108]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x478>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd f98f 	bl	80012f4 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd f98b 	bl	80012f4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e05c      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x416>
 8003ff8:	e054      	b.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_RCC_OscConfig+0x478>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd f978 	bl	80012f4 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd f974 	bl	80012f4 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e045      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_OscConfig+0x470>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x444>
 8004026:	e03d      	b.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e038      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
 8004034:	40023800 	.word	0x40023800
 8004038:	40007000 	.word	0x40007000
 800403c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x4ec>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d028      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d121      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d11a      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	3b01      	subs	r3, #1
 800408a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0cc      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90c      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b65      	ldr	r3, [pc, #404]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b63      	ldr	r3, [pc, #396]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0b8      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004108:	4b59      	ldr	r3, [pc, #356]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a58      	ldr	r2, [pc, #352]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004120:	4b53      	ldr	r3, [pc, #332]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a52      	ldr	r2, [pc, #328]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	494d      	ldr	r1, [pc, #308]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d044      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d119      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e07f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d003      	beq.n	8004172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	2b03      	cmp	r3, #3
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e067      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004192:	4b37      	ldr	r3, [pc, #220]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 0203 	bic.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4934      	ldr	r1, [pc, #208]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a4:	f7fd f8a6 	bl	80012f4 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fd f8a2 	bl	80012f4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 020c 	and.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1eb      	bne.n	80041ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d20c      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e032      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4916      	ldr	r1, [pc, #88]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	490e      	ldr	r1, [pc, #56]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423a:	f000 f821 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490a      	ldr	r1, [pc, #40]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd f806 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023c00 	.word	0x40023c00
 8004270:	40023800 	.word	0x40023800
 8004274:	08005b50 	.word	0x08005b50
 8004278:	20000000 	.word	0x20000000
 800427c:	20000004 	.word	0x20000004

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b094      	sub	sp, #80	; 0x50
 8004286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
 800428c:	2300      	movs	r3, #0
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004290:	2300      	movs	r3, #0
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004298:	4b79      	ldr	r3, [pc, #484]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d00d      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x40>
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	f200 80e1 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x1ec>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x3a>
 80042b2:	e0db      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCC_GetSysClockFreq+0x204>)
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042b8:	e0db      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ba:	4b73      	ldr	r3, [pc, #460]	; (8004488 <HAL_RCC_GetSysClockFreq+0x208>)
 80042bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042be:	e0d8      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c0:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ca:	4b6d      	ldr	r3, [pc, #436]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
 80042ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042f2:	4622      	mov	r2, r4
 80042f4:	462b      	mov	r3, r5
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004304:	0150      	lsls	r0, r2, #5
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4621      	mov	r1, r4
 800430c:	1a51      	subs	r1, r2, r1
 800430e:	6139      	str	r1, [r7, #16]
 8004310:	4629      	mov	r1, r5
 8004312:	eb63 0301 	sbc.w	r3, r3, r1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004324:	4659      	mov	r1, fp
 8004326:	018b      	lsls	r3, r1, #6
 8004328:	4651      	mov	r1, sl
 800432a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800432e:	4651      	mov	r1, sl
 8004330:	018a      	lsls	r2, r1, #6
 8004332:	4651      	mov	r1, sl
 8004334:	ebb2 0801 	subs.w	r8, r2, r1
 8004338:	4659      	mov	r1, fp
 800433a:	eb63 0901 	sbc.w	r9, r3, r1
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800434e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004352:	4690      	mov	r8, r2
 8004354:	4699      	mov	r9, r3
 8004356:	4623      	mov	r3, r4
 8004358:	eb18 0303 	adds.w	r3, r8, r3
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	462b      	mov	r3, r5
 8004360:	eb49 0303 	adc.w	r3, r9, r3
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004372:	4629      	mov	r1, r5
 8004374:	024b      	lsls	r3, r1, #9
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800437c:	4621      	mov	r1, r4
 800437e:	024a      	lsls	r2, r1, #9
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	2200      	movs	r2, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800438c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004390:	f7fb ff1a 	bl	80001c8 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800439c:	e058      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439e:	4b38      	ldr	r3, [pc, #224]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	2200      	movs	r2, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	4611      	mov	r1, r2
 80043aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
 80043b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	f04f 0000 	mov.w	r0, #0
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	0159      	lsls	r1, r3, #5
 80043c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ca:	0150      	lsls	r0, r2, #5
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4641      	mov	r1, r8
 80043d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043f0:	ebb2 040a 	subs.w	r4, r2, sl
 80043f4:	eb63 050b 	sbc.w	r5, r3, fp
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	00eb      	lsls	r3, r5, #3
 8004402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004406:	00e2      	lsls	r2, r4, #3
 8004408:	4614      	mov	r4, r2
 800440a:	461d      	mov	r5, r3
 800440c:	4643      	mov	r3, r8
 800440e:	18e3      	adds	r3, r4, r3
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	464b      	mov	r3, r9
 8004414:	eb45 0303 	adc.w	r3, r5, r3
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004426:	4629      	mov	r1, r5
 8004428:	028b      	lsls	r3, r1, #10
 800442a:	4621      	mov	r1, r4
 800442c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004430:	4621      	mov	r1, r4
 8004432:	028a      	lsls	r2, r1, #10
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443a:	2200      	movs	r2, #0
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	61fa      	str	r2, [r7, #28]
 8004440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004444:	f7fb fec0 	bl	80001c8 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	3301      	adds	r3, #1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetSysClockFreq+0x204>)
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004474:	4618      	mov	r0, r3
 8004476:	3750      	adds	r7, #80	; 0x50
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	00f42400 	.word	0x00f42400
 8004488:	007a1200 	.word	0x007a1200

0800448c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000000 	.word	0x20000000

080044a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044a8:	f7ff fff0 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0a9b      	lsrs	r3, r3, #10
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08005b60 	.word	0x08005b60

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d035      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f4:	4b62      	ldr	r3, [pc, #392]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044fa:	f7fc fefb 	bl	80012f4 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004502:	f7fc fef7 	bl	80012f4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0b0      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004514:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	019a      	lsls	r2, r3, #6
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	071b      	lsls	r3, r3, #28
 800452c:	4955      	ldr	r1, [pc, #340]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004534:	4b52      	ldr	r3, [pc, #328]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fc fedb 	bl	80012f4 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fc fed7 	bl	80012f4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e090      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8083 	beq.w	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b44      	ldr	r3, [pc, #272]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a43      	ldr	r2, [pc, #268]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800458a:	4b3f      	ldr	r3, [pc, #252]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3e      	ldr	r2, [pc, #248]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004596:	f7fc fead 	bl	80012f4 <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fc fea9 	bl	80012f4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e062      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02f      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d028      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ea:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045f0:	4a24      	ldr	r2, [pc, #144]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d114      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004602:	f7fc fe77 	bl	80012f4 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fc fe73 	bl	80012f4 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	; 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e02a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ee      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004638:	d10d      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800464a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464e:	490d      	ldr	r1, [pc, #52]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
 8004654:	e005      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004660:	6093      	str	r3, [r2, #8]
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466e:	4905      	ldr	r1, [pc, #20]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	42470068 	.word	0x42470068
 8004684:	40023800 	.word	0x40023800
 8004688:	40007000 	.word	0x40007000
 800468c:	42470e40 	.word	0x42470e40

08004690 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d13e      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ae:	4b23      	ldr	r3, [pc, #140]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d12f      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046c6:	617b      	str	r3, [r7, #20]
          break;
 80046c8:	e02f      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d6:	d108      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	e007      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	0f1b      	lsrs	r3, r3, #28
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
          break;
 8004722:	e002      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
          break;
 8004728:	bf00      	nop
        }
      }
      break;
 800472a:	bf00      	nop
    }
  }
  return frequency;
 800472c:	697b      	ldr	r3, [r7, #20]
}
 800472e:	4618      	mov	r0, r3
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	00bb8000 	.word	0x00bb8000
 8004744:	007a1200 	.word	0x007a1200
 8004748:	00f42400 	.word	0x00f42400

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fcb8 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fa96 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e04e      	b.n	80048a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d022      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d01d      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_TIM_Base_Start_IT+0xd0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x80>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d111      	bne.n	8004890 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b06      	cmp	r3, #6
 800487c:	d010      	beq.n	80048a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	e007      	b.n	80048a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40001800 	.word	0x40001800

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9b5 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9a7 	bl	8004c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f9b8 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f98b 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f97d 	bl	8004c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f98e 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f961 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f953 	bl	8004c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f964 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0210 	mvn.w	r2, #16
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f937 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f929 	bl	8004c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f93a 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f976 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fae0 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d10e      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8ff 	bl	8004ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d107      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0220 	mvn.w	r2, #32
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 faaa 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_ConfigClockSource+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e0b4      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x186>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b30:	d03e      	beq.n	8004bb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b36:	f200 8087 	bhi.w	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	f000 8086 	beq.w	8004c4e <HAL_TIM_ConfigClockSource+0x172>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	d87f      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b70      	cmp	r3, #112	; 0x70
 8004b4a:	d01a      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0xa6>
 8004b4c:	2b70      	cmp	r3, #112	; 0x70
 8004b4e:	d87b      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b60      	cmp	r3, #96	; 0x60
 8004b52:	d050      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b54:	2b60      	cmp	r3, #96	; 0x60
 8004b56:	d877      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b50      	cmp	r3, #80	; 0x50
 8004b5a:	d03c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b5c:	2b50      	cmp	r3, #80	; 0x50
 8004b5e:	d873      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d058      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x13a>
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d86f      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b30      	cmp	r3, #48	; 0x30
 8004b6a:	d064      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b30      	cmp	r3, #48	; 0x30
 8004b6e:	d86b      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d060      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d867      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d05c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d05a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	e062      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f000 f9ad 	bl	8004ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
      break;
 8004bae:	e04f      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f000 f996 	bl	8004ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd2:	609a      	str	r2, [r3, #8]
      break;
 8004bd4:	e03c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 f90a 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2150      	movs	r1, #80	; 0x50
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f963 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004bf4:	e02c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f000 f929 	bl	8004e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2160      	movs	r1, #96	; 0x60
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f953 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c14:	e01c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 f8ea 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f943 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c34:	e00c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f000 f93a 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a40      	ldr	r2, [pc, #256]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <TIM_Base_SetConfig+0x118>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <TIM_Base_SetConfig+0x11c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <TIM_Base_SetConfig+0x120>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a3a      	ldr	r2, [pc, #232]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d027      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <TIM_Base_SetConfig+0x118>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d023      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <TIM_Base_SetConfig+0x11c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <TIM_Base_SetConfig+0x120>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d017      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <TIM_Base_SetConfig+0x128>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <TIM_Base_SetConfig+0x12c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <TIM_Base_SetConfig+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <TIM_Base_SetConfig+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <TIM_Base_SetConfig+0x138>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0xf8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a0c      	ldr	r2, [pc, #48]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40001800 	.word	0x40001800
 8004df4:	40001c00 	.word	0x40001c00
 8004df8:	40002000 	.word	0x40002000

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e05a      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40001800 	.word	0x40001800

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <memset>:
 8005050:	4402      	add	r2, r0
 8005052:	4603      	mov	r3, r0
 8005054:	4293      	cmp	r3, r2
 8005056:	d100      	bne.n	800505a <memset+0xa>
 8005058:	4770      	bx	lr
 800505a:	f803 1b01 	strb.w	r1, [r3], #1
 800505e:	e7f9      	b.n	8005054 <memset+0x4>

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	; (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	; (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	; (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	; (80050a4 <__libc_init_array+0x44>)
 8005074:	f000 fd60 	bl	8005b38 <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	08005f48 	.word	0x08005f48
 800509c:	08005f48 	.word	0x08005f48
 80050a0:	08005f48 	.word	0x08005f48
 80050a4:	08005f4c 	.word	0x08005f4c

080050a8 <memcpy>:
 80050a8:	440a      	add	r2, r1
 80050aa:	4291      	cmp	r1, r2
 80050ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80050b0:	d100      	bne.n	80050b4 <memcpy+0xc>
 80050b2:	4770      	bx	lr
 80050b4:	b510      	push	{r4, lr}
 80050b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050be:	4291      	cmp	r1, r2
 80050c0:	d1f9      	bne.n	80050b6 <memcpy+0xe>
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <sinf>:
 80050c4:	ee10 3a10 	vmov	r3, s0
 80050c8:	b507      	push	{r0, r1, r2, lr}
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <sinf+0x84>)
 80050cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050d0:	4293      	cmp	r3, r2
 80050d2:	dc07      	bgt.n	80050e4 <sinf+0x20>
 80050d4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800514c <sinf+0x88>
 80050d8:	2000      	movs	r0, #0
 80050da:	b003      	add	sp, #12
 80050dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e0:	f000 b894 	b.w	800520c <__kernel_sinf>
 80050e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80050e8:	db04      	blt.n	80050f4 <sinf+0x30>
 80050ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80050ee:	b003      	add	sp, #12
 80050f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80050f4:	4668      	mov	r0, sp
 80050f6:	f000 f8d1 	bl	800529c <__ieee754_rem_pio2f>
 80050fa:	f000 0003 	and.w	r0, r0, #3
 80050fe:	2801      	cmp	r0, #1
 8005100:	d00a      	beq.n	8005118 <sinf+0x54>
 8005102:	2802      	cmp	r0, #2
 8005104:	d00f      	beq.n	8005126 <sinf+0x62>
 8005106:	b9c0      	cbnz	r0, 800513a <sinf+0x76>
 8005108:	eddd 0a01 	vldr	s1, [sp, #4]
 800510c:	ed9d 0a00 	vldr	s0, [sp]
 8005110:	2001      	movs	r0, #1
 8005112:	f000 f87b 	bl	800520c <__kernel_sinf>
 8005116:	e7ea      	b.n	80050ee <sinf+0x2a>
 8005118:	eddd 0a01 	vldr	s1, [sp, #4]
 800511c:	ed9d 0a00 	vldr	s0, [sp]
 8005120:	f000 f816 	bl	8005150 <__kernel_cosf>
 8005124:	e7e3      	b.n	80050ee <sinf+0x2a>
 8005126:	eddd 0a01 	vldr	s1, [sp, #4]
 800512a:	ed9d 0a00 	vldr	s0, [sp]
 800512e:	2001      	movs	r0, #1
 8005130:	f000 f86c 	bl	800520c <__kernel_sinf>
 8005134:	eeb1 0a40 	vneg.f32	s0, s0
 8005138:	e7d9      	b.n	80050ee <sinf+0x2a>
 800513a:	eddd 0a01 	vldr	s1, [sp, #4]
 800513e:	ed9d 0a00 	vldr	s0, [sp]
 8005142:	f000 f805 	bl	8005150 <__kernel_cosf>
 8005146:	e7f5      	b.n	8005134 <sinf+0x70>
 8005148:	3f490fd8 	.word	0x3f490fd8
 800514c:	00000000 	.word	0x00000000

08005150 <__kernel_cosf>:
 8005150:	ee10 3a10 	vmov	r3, s0
 8005154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005158:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800515c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005160:	da05      	bge.n	800516e <__kernel_cosf+0x1e>
 8005162:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005166:	ee17 2a90 	vmov	r2, s15
 800516a:	2a00      	cmp	r2, #0
 800516c:	d03b      	beq.n	80051e6 <__kernel_cosf+0x96>
 800516e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005172:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80051ec <__kernel_cosf+0x9c>
 8005176:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80051f0 <__kernel_cosf+0xa0>
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <__kernel_cosf+0xa4>)
 800517c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005180:	4293      	cmp	r3, r2
 8005182:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80051f8 <__kernel_cosf+0xa8>
 8005186:	eee6 7a07 	vfma.f32	s15, s12, s14
 800518a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80051fc <__kernel_cosf+0xac>
 800518e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005192:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8005200 <__kernel_cosf+0xb0>
 8005196:	eee6 7a07 	vfma.f32	s15, s12, s14
 800519a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8005204 <__kernel_cosf+0xb4>
 800519e:	eea7 6a87 	vfma.f32	s12, s15, s14
 80051a2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80051a6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80051aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80051ae:	eee7 0a06 	vfma.f32	s1, s14, s12
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	dc04      	bgt.n	80051c2 <__kernel_cosf+0x72>
 80051b8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80051bc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80051c0:	4770      	bx	lr
 80051c2:	4a11      	ldr	r2, [pc, #68]	; (8005208 <__kernel_cosf+0xb8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfda      	itte	le
 80051c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80051cc:	ee07 3a10 	vmovle	s14, r3
 80051d0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80051d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051d8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80051dc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80051e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80051e4:	4770      	bx	lr
 80051e6:	eeb0 0a66 	vmov.f32	s0, s13
 80051ea:	4770      	bx	lr
 80051ec:	ad47d74e 	.word	0xad47d74e
 80051f0:	310f74f6 	.word	0x310f74f6
 80051f4:	3e999999 	.word	0x3e999999
 80051f8:	b493f27c 	.word	0xb493f27c
 80051fc:	37d00d01 	.word	0x37d00d01
 8005200:	bab60b61 	.word	0xbab60b61
 8005204:	3d2aaaab 	.word	0x3d2aaaab
 8005208:	3f480000 	.word	0x3f480000

0800520c <__kernel_sinf>:
 800520c:	ee10 3a10 	vmov	r3, s0
 8005210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005218:	da04      	bge.n	8005224 <__kernel_sinf+0x18>
 800521a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800521e:	ee17 3a90 	vmov	r3, s15
 8005222:	b35b      	cbz	r3, 800527c <__kernel_sinf+0x70>
 8005224:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005228:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005280 <__kernel_sinf+0x74>
 800522c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005284 <__kernel_sinf+0x78>
 8005230:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005234:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005288 <__kernel_sinf+0x7c>
 8005238:	eee6 7a07 	vfma.f32	s15, s12, s14
 800523c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800528c <__kernel_sinf+0x80>
 8005240:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005244:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005290 <__kernel_sinf+0x84>
 8005248:	ee60 6a07 	vmul.f32	s13, s0, s14
 800524c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005250:	b930      	cbnz	r0, 8005260 <__kernel_sinf+0x54>
 8005252:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005294 <__kernel_sinf+0x88>
 8005256:	eea7 6a27 	vfma.f32	s12, s14, s15
 800525a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800525e:	4770      	bx	lr
 8005260:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005264:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005268:	eee0 7a86 	vfma.f32	s15, s1, s12
 800526c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005270:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005298 <__kernel_sinf+0x8c>
 8005274:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005278:	ee30 0a60 	vsub.f32	s0, s0, s1
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2f2ec9d3 	.word	0x2f2ec9d3
 8005284:	b2d72f34 	.word	0xb2d72f34
 8005288:	3638ef1b 	.word	0x3638ef1b
 800528c:	b9500d01 	.word	0xb9500d01
 8005290:	3c088889 	.word	0x3c088889
 8005294:	be2aaaab 	.word	0xbe2aaaab
 8005298:	3e2aaaab 	.word	0x3e2aaaab

0800529c <__ieee754_rem_pio2f>:
 800529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529e:	ee10 6a10 	vmov	r6, s0
 80052a2:	4b86      	ldr	r3, [pc, #536]	; (80054bc <__ieee754_rem_pio2f+0x220>)
 80052a4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80052a8:	429d      	cmp	r5, r3
 80052aa:	b087      	sub	sp, #28
 80052ac:	4604      	mov	r4, r0
 80052ae:	dc05      	bgt.n	80052bc <__ieee754_rem_pio2f+0x20>
 80052b0:	2300      	movs	r3, #0
 80052b2:	ed80 0a00 	vstr	s0, [r0]
 80052b6:	6043      	str	r3, [r0, #4]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e020      	b.n	80052fe <__ieee754_rem_pio2f+0x62>
 80052bc:	4b80      	ldr	r3, [pc, #512]	; (80054c0 <__ieee754_rem_pio2f+0x224>)
 80052be:	429d      	cmp	r5, r3
 80052c0:	dc38      	bgt.n	8005334 <__ieee754_rem_pio2f+0x98>
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80054c4 <__ieee754_rem_pio2f+0x228>
 80052c8:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <__ieee754_rem_pio2f+0x22c>)
 80052ca:	f025 050f 	bic.w	r5, r5, #15
 80052ce:	dd18      	ble.n	8005302 <__ieee754_rem_pio2f+0x66>
 80052d0:	429d      	cmp	r5, r3
 80052d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80052d6:	bf09      	itett	eq
 80052d8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80054cc <__ieee754_rem_pio2f+0x230>
 80052dc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80054d0 <__ieee754_rem_pio2f+0x234>
 80052e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80052e4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80054d4 <__ieee754_rem_pio2f+0x238>
 80052e8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80052ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80052f0:	edc0 6a00 	vstr	s13, [r0]
 80052f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80052fc:	2001      	movs	r0, #1
 80052fe:	b007      	add	sp, #28
 8005300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005302:	429d      	cmp	r5, r3
 8005304:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005308:	bf09      	itett	eq
 800530a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80054cc <__ieee754_rem_pio2f+0x230>
 800530e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80054d0 <__ieee754_rem_pio2f+0x234>
 8005312:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005316:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80054d4 <__ieee754_rem_pio2f+0x238>
 800531a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800531e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005322:	edc0 6a00 	vstr	s13, [r0]
 8005326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800532a:	edc0 7a01 	vstr	s15, [r0, #4]
 800532e:	f04f 30ff 	mov.w	r0, #4294967295
 8005332:	e7e4      	b.n	80052fe <__ieee754_rem_pio2f+0x62>
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <__ieee754_rem_pio2f+0x23c>)
 8005336:	429d      	cmp	r5, r3
 8005338:	dc71      	bgt.n	800541e <__ieee754_rem_pio2f+0x182>
 800533a:	f000 f8db 	bl	80054f4 <fabsf>
 800533e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80054dc <__ieee754_rem_pio2f+0x240>
 8005342:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005346:	eee0 7a07 	vfma.f32	s15, s0, s14
 800534a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800534e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005352:	ee17 0a90 	vmov	r0, s15
 8005356:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80054c4 <__ieee754_rem_pio2f+0x228>
 800535a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800535e:	281f      	cmp	r0, #31
 8005360:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80054d0 <__ieee754_rem_pio2f+0x234>
 8005364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005368:	eeb1 6a47 	vneg.f32	s12, s14
 800536c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005370:	ee16 2a90 	vmov	r2, s13
 8005374:	dc1c      	bgt.n	80053b0 <__ieee754_rem_pio2f+0x114>
 8005376:	495a      	ldr	r1, [pc, #360]	; (80054e0 <__ieee754_rem_pio2f+0x244>)
 8005378:	1e47      	subs	r7, r0, #1
 800537a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800537e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005382:	428b      	cmp	r3, r1
 8005384:	d014      	beq.n	80053b0 <__ieee754_rem_pio2f+0x114>
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	ed94 7a00 	vldr	s14, [r4]
 800538c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005390:	2e00      	cmp	r6, #0
 8005392:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005396:	ed84 0a01 	vstr	s0, [r4, #4]
 800539a:	dab0      	bge.n	80052fe <__ieee754_rem_pio2f+0x62>
 800539c:	eeb1 7a47 	vneg.f32	s14, s14
 80053a0:	eeb1 0a40 	vneg.f32	s0, s0
 80053a4:	ed84 7a00 	vstr	s14, [r4]
 80053a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80053ac:	4240      	negs	r0, r0
 80053ae:	e7a6      	b.n	80052fe <__ieee754_rem_pio2f+0x62>
 80053b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80053b4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80053b8:	2908      	cmp	r1, #8
 80053ba:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80053be:	dde2      	ble.n	8005386 <__ieee754_rem_pio2f+0xea>
 80053c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80054cc <__ieee754_rem_pio2f+0x230>
 80053c4:	eef0 6a40 	vmov.f32	s13, s0
 80053c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80053cc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80053d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80053d4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80054d4 <__ieee754_rem_pio2f+0x238>
 80053d8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80053dc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80053e0:	ee15 2a90 	vmov	r2, s11
 80053e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80053e8:	1a5b      	subs	r3, r3, r1
 80053ea:	2b19      	cmp	r3, #25
 80053ec:	dc04      	bgt.n	80053f8 <__ieee754_rem_pio2f+0x15c>
 80053ee:	edc4 5a00 	vstr	s11, [r4]
 80053f2:	eeb0 0a66 	vmov.f32	s0, s13
 80053f6:	e7c7      	b.n	8005388 <__ieee754_rem_pio2f+0xec>
 80053f8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80054e4 <__ieee754_rem_pio2f+0x248>
 80053fc:	eeb0 0a66 	vmov.f32	s0, s13
 8005400:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005404:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005408:	eddf 6a37 	vldr	s13, [pc, #220]	; 80054e8 <__ieee754_rem_pio2f+0x24c>
 800540c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005410:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005414:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005418:	ed84 7a00 	vstr	s14, [r4]
 800541c:	e7b4      	b.n	8005388 <__ieee754_rem_pio2f+0xec>
 800541e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005422:	db06      	blt.n	8005432 <__ieee754_rem_pio2f+0x196>
 8005424:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005428:	edc0 7a01 	vstr	s15, [r0, #4]
 800542c:	edc0 7a00 	vstr	s15, [r0]
 8005430:	e742      	b.n	80052b8 <__ieee754_rem_pio2f+0x1c>
 8005432:	15ea      	asrs	r2, r5, #23
 8005434:	3a86      	subs	r2, #134	; 0x86
 8005436:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005442:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80054ec <__ieee754_rem_pio2f+0x250>
 8005446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800544a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800544e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005456:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800545a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800545e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005462:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800546a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	edcd 7a05 	vstr	s15, [sp, #20]
 8005476:	d11e      	bne.n	80054b6 <__ieee754_rem_pio2f+0x21a>
 8005478:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005480:	bf14      	ite	ne
 8005482:	2302      	movne	r3, #2
 8005484:	2301      	moveq	r3, #1
 8005486:	491a      	ldr	r1, [pc, #104]	; (80054f0 <__ieee754_rem_pio2f+0x254>)
 8005488:	9101      	str	r1, [sp, #4]
 800548a:	2102      	movs	r1, #2
 800548c:	9100      	str	r1, [sp, #0]
 800548e:	a803      	add	r0, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	f000 f837 	bl	8005504 <__kernel_rem_pio2f>
 8005496:	2e00      	cmp	r6, #0
 8005498:	f6bf af31 	bge.w	80052fe <__ieee754_rem_pio2f+0x62>
 800549c:	edd4 7a00 	vldr	s15, [r4]
 80054a0:	eef1 7a67 	vneg.f32	s15, s15
 80054a4:	edc4 7a00 	vstr	s15, [r4]
 80054a8:	edd4 7a01 	vldr	s15, [r4, #4]
 80054ac:	eef1 7a67 	vneg.f32	s15, s15
 80054b0:	edc4 7a01 	vstr	s15, [r4, #4]
 80054b4:	e77a      	b.n	80053ac <__ieee754_rem_pio2f+0x110>
 80054b6:	2303      	movs	r3, #3
 80054b8:	e7e5      	b.n	8005486 <__ieee754_rem_pio2f+0x1ea>
 80054ba:	bf00      	nop
 80054bc:	3f490fd8 	.word	0x3f490fd8
 80054c0:	4016cbe3 	.word	0x4016cbe3
 80054c4:	3fc90f80 	.word	0x3fc90f80
 80054c8:	3fc90fd0 	.word	0x3fc90fd0
 80054cc:	37354400 	.word	0x37354400
 80054d0:	37354443 	.word	0x37354443
 80054d4:	2e85a308 	.word	0x2e85a308
 80054d8:	43490f80 	.word	0x43490f80
 80054dc:	3f22f984 	.word	0x3f22f984
 80054e0:	08005b70 	.word	0x08005b70
 80054e4:	2e85a300 	.word	0x2e85a300
 80054e8:	248d3132 	.word	0x248d3132
 80054ec:	43800000 	.word	0x43800000
 80054f0:	08005bf0 	.word	0x08005bf0

080054f4 <fabsf>:
 80054f4:	ee10 3a10 	vmov	r3, s0
 80054f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054fc:	ee00 3a10 	vmov	s0, r3
 8005500:	4770      	bx	lr
	...

08005504 <__kernel_rem_pio2f>:
 8005504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005508:	ed2d 8b04 	vpush	{d8-d9}
 800550c:	b0d9      	sub	sp, #356	; 0x164
 800550e:	4688      	mov	r8, r1
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	49b8      	ldr	r1, [pc, #736]	; (80057f4 <__kernel_rem_pio2f+0x2f0>)
 8005514:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8005520:	f101 3bff 	add.w	fp, r1, #4294967295
 8005524:	1d11      	adds	r1, r2, #4
 8005526:	db25      	blt.n	8005574 <__kernel_rem_pio2f+0x70>
 8005528:	1ed0      	subs	r0, r2, #3
 800552a:	bf48      	it	mi
 800552c:	1d10      	addmi	r0, r2, #4
 800552e:	10c0      	asrs	r0, r0, #3
 8005530:	1c45      	adds	r5, r0, #1
 8005532:	00e9      	lsls	r1, r5, #3
 8005534:	eba0 070b 	sub.w	r7, r0, fp
 8005538:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8005804 <__kernel_rem_pio2f+0x300>
 800553c:	9103      	str	r1, [sp, #12]
 800553e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005542:	eb0a 0c0b 	add.w	ip, sl, fp
 8005546:	ae1c      	add	r6, sp, #112	; 0x70
 8005548:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800554c:	2400      	movs	r4, #0
 800554e:	4564      	cmp	r4, ip
 8005550:	dd12      	ble.n	8005578 <__kernel_rem_pio2f+0x74>
 8005552:	9901      	ldr	r1, [sp, #4]
 8005554:	ac1c      	add	r4, sp, #112	; 0x70
 8005556:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800555a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800555e:	f04f 0c00 	mov.w	ip, #0
 8005562:	45d4      	cmp	ip, sl
 8005564:	dc27      	bgt.n	80055b6 <__kernel_rem_pio2f+0xb2>
 8005566:	f8dd e008 	ldr.w	lr, [sp, #8]
 800556a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8005804 <__kernel_rem_pio2f+0x300>
 800556e:	4627      	mov	r7, r4
 8005570:	2600      	movs	r6, #0
 8005572:	e016      	b.n	80055a2 <__kernel_rem_pio2f+0x9e>
 8005574:	2000      	movs	r0, #0
 8005576:	e7db      	b.n	8005530 <__kernel_rem_pio2f+0x2c>
 8005578:	42e7      	cmn	r7, r4
 800557a:	bf5d      	ittte	pl
 800557c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8005580:	ee07 1a90 	vmovpl	s15, r1
 8005584:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005588:	eef0 7a47 	vmovmi.f32	s15, s14
 800558c:	ece6 7a01 	vstmia	r6!, {s15}
 8005590:	3401      	adds	r4, #1
 8005592:	e7dc      	b.n	800554e <__kernel_rem_pio2f+0x4a>
 8005594:	ecfe 6a01 	vldmia	lr!, {s13}
 8005598:	ed97 7a00 	vldr	s14, [r7]
 800559c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055a0:	3601      	adds	r6, #1
 80055a2:	455e      	cmp	r6, fp
 80055a4:	f1a7 0704 	sub.w	r7, r7, #4
 80055a8:	ddf4      	ble.n	8005594 <__kernel_rem_pio2f+0x90>
 80055aa:	ece9 7a01 	vstmia	r9!, {s15}
 80055ae:	f10c 0c01 	add.w	ip, ip, #1
 80055b2:	3404      	adds	r4, #4
 80055b4:	e7d5      	b.n	8005562 <__kernel_rem_pio2f+0x5e>
 80055b6:	a908      	add	r1, sp, #32
 80055b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80055c0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8005800 <__kernel_rem_pio2f+0x2fc>
 80055c4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80057fc <__kernel_rem_pio2f+0x2f8>
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	4656      	mov	r6, sl
 80055ce:	00b3      	lsls	r3, r6, #2
 80055d0:	9306      	str	r3, [sp, #24]
 80055d2:	ab58      	add	r3, sp, #352	; 0x160
 80055d4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80055d8:	ac08      	add	r4, sp, #32
 80055da:	ab44      	add	r3, sp, #272	; 0x110
 80055dc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80055e0:	46a4      	mov	ip, r4
 80055e2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80055e6:	4637      	mov	r7, r6
 80055e8:	2f00      	cmp	r7, #0
 80055ea:	f1a0 0004 	sub.w	r0, r0, #4
 80055ee:	dc4a      	bgt.n	8005686 <__kernel_rem_pio2f+0x182>
 80055f0:	4628      	mov	r0, r5
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	f000 f9f8 	bl	80059e8 <scalbnf>
 80055f8:	eeb0 8a40 	vmov.f32	s16, s0
 80055fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005600:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005604:	f000 fa56 	bl	8005ab4 <floorf>
 8005608:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800560c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005610:	2d00      	cmp	r5, #0
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005618:	ee17 9a90 	vmov	r9, s15
 800561c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005620:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005624:	dd41      	ble.n	80056aa <__kernel_rem_pio2f+0x1a6>
 8005626:	f106 3cff 	add.w	ip, r6, #4294967295
 800562a:	ab08      	add	r3, sp, #32
 800562c:	f1c5 0e08 	rsb	lr, r5, #8
 8005630:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005634:	fa47 f00e 	asr.w	r0, r7, lr
 8005638:	4481      	add	r9, r0
 800563a:	fa00 f00e 	lsl.w	r0, r0, lr
 800563e:	1a3f      	subs	r7, r7, r0
 8005640:	f1c5 0007 	rsb	r0, r5, #7
 8005644:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005648:	4107      	asrs	r7, r0
 800564a:	2f00      	cmp	r7, #0
 800564c:	dd3c      	ble.n	80056c8 <__kernel_rem_pio2f+0x1c4>
 800564e:	f04f 0e00 	mov.w	lr, #0
 8005652:	f109 0901 	add.w	r9, r9, #1
 8005656:	4671      	mov	r1, lr
 8005658:	4576      	cmp	r6, lr
 800565a:	dc67      	bgt.n	800572c <__kernel_rem_pio2f+0x228>
 800565c:	2d00      	cmp	r5, #0
 800565e:	dd03      	ble.n	8005668 <__kernel_rem_pio2f+0x164>
 8005660:	2d01      	cmp	r5, #1
 8005662:	d074      	beq.n	800574e <__kernel_rem_pio2f+0x24a>
 8005664:	2d02      	cmp	r5, #2
 8005666:	d07b      	beq.n	8005760 <__kernel_rem_pio2f+0x25c>
 8005668:	2f02      	cmp	r7, #2
 800566a:	d12d      	bne.n	80056c8 <__kernel_rem_pio2f+0x1c4>
 800566c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005670:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005674:	b341      	cbz	r1, 80056c8 <__kernel_rem_pio2f+0x1c4>
 8005676:	4628      	mov	r0, r5
 8005678:	9207      	str	r2, [sp, #28]
 800567a:	f000 f9b5 	bl	80059e8 <scalbnf>
 800567e:	9a07      	ldr	r2, [sp, #28]
 8005680:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005684:	e020      	b.n	80056c8 <__kernel_rem_pio2f+0x1c4>
 8005686:	ee60 7a28 	vmul.f32	s15, s0, s17
 800568a:	3f01      	subs	r7, #1
 800568c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005694:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005698:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800569c:	ecac 0a01 	vstmia	ip!, {s0}
 80056a0:	ed90 0a00 	vldr	s0, [r0]
 80056a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80056a8:	e79e      	b.n	80055e8 <__kernel_rem_pio2f+0xe4>
 80056aa:	d105      	bne.n	80056b8 <__kernel_rem_pio2f+0x1b4>
 80056ac:	1e70      	subs	r0, r6, #1
 80056ae:	ab08      	add	r3, sp, #32
 80056b0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80056b4:	11ff      	asrs	r7, r7, #7
 80056b6:	e7c8      	b.n	800564a <__kernel_rem_pio2f+0x146>
 80056b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80056bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c4:	da30      	bge.n	8005728 <__kernel_rem_pio2f+0x224>
 80056c6:	2700      	movs	r7, #0
 80056c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80056cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d0:	f040 809a 	bne.w	8005808 <__kernel_rem_pio2f+0x304>
 80056d4:	1e74      	subs	r4, r6, #1
 80056d6:	46a4      	mov	ip, r4
 80056d8:	2100      	movs	r1, #0
 80056da:	45d4      	cmp	ip, sl
 80056dc:	da47      	bge.n	800576e <__kernel_rem_pio2f+0x26a>
 80056de:	2900      	cmp	r1, #0
 80056e0:	d063      	beq.n	80057aa <__kernel_rem_pio2f+0x2a6>
 80056e2:	ab08      	add	r3, sp, #32
 80056e4:	3d08      	subs	r5, #8
 80056e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d07f      	beq.n	80057ee <__kernel_rem_pio2f+0x2ea>
 80056ee:	4628      	mov	r0, r5
 80056f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80056f4:	f000 f978 	bl	80059e8 <scalbnf>
 80056f8:	1c63      	adds	r3, r4, #1
 80056fa:	aa44      	add	r2, sp, #272	; 0x110
 80056fc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005800 <__kernel_rem_pio2f+0x2fc>
 8005700:	0099      	lsls	r1, r3, #2
 8005702:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005706:	4623      	mov	r3, r4
 8005708:	2b00      	cmp	r3, #0
 800570a:	f280 80ad 	bge.w	8005868 <__kernel_rem_pio2f+0x364>
 800570e:	4623      	mov	r3, r4
 8005710:	2b00      	cmp	r3, #0
 8005712:	f2c0 80cb 	blt.w	80058ac <__kernel_rem_pio2f+0x3a8>
 8005716:	aa44      	add	r2, sp, #272	; 0x110
 8005718:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800571c:	4e36      	ldr	r6, [pc, #216]	; (80057f8 <__kernel_rem_pio2f+0x2f4>)
 800571e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005804 <__kernel_rem_pio2f+0x300>
 8005722:	2000      	movs	r0, #0
 8005724:	1ae2      	subs	r2, r4, r3
 8005726:	e0b6      	b.n	8005896 <__kernel_rem_pio2f+0x392>
 8005728:	2702      	movs	r7, #2
 800572a:	e790      	b.n	800564e <__kernel_rem_pio2f+0x14a>
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	b949      	cbnz	r1, 8005744 <__kernel_rem_pio2f+0x240>
 8005730:	b118      	cbz	r0, 800573a <__kernel_rem_pio2f+0x236>
 8005732:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005736:	6020      	str	r0, [r4, #0]
 8005738:	2001      	movs	r0, #1
 800573a:	f10e 0e01 	add.w	lr, lr, #1
 800573e:	3404      	adds	r4, #4
 8005740:	4601      	mov	r1, r0
 8005742:	e789      	b.n	8005658 <__kernel_rem_pio2f+0x154>
 8005744:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005748:	6020      	str	r0, [r4, #0]
 800574a:	4608      	mov	r0, r1
 800574c:	e7f5      	b.n	800573a <__kernel_rem_pio2f+0x236>
 800574e:	1e74      	subs	r4, r6, #1
 8005750:	ab08      	add	r3, sp, #32
 8005752:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005756:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800575a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800575e:	e783      	b.n	8005668 <__kernel_rem_pio2f+0x164>
 8005760:	1e74      	subs	r4, r6, #1
 8005762:	ab08      	add	r3, sp, #32
 8005764:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005768:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800576c:	e7f5      	b.n	800575a <__kernel_rem_pio2f+0x256>
 800576e:	ab08      	add	r3, sp, #32
 8005770:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8005774:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005778:	4301      	orrs	r1, r0
 800577a:	e7ae      	b.n	80056da <__kernel_rem_pio2f+0x1d6>
 800577c:	3001      	adds	r0, #1
 800577e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8005782:	2f00      	cmp	r7, #0
 8005784:	d0fa      	beq.n	800577c <__kernel_rem_pio2f+0x278>
 8005786:	9b06      	ldr	r3, [sp, #24]
 8005788:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800578c:	eb0d 0403 	add.w	r4, sp, r3
 8005790:	9b01      	ldr	r3, [sp, #4]
 8005792:	18f7      	adds	r7, r6, r3
 8005794:	ab1c      	add	r3, sp, #112	; 0x70
 8005796:	f106 0c01 	add.w	ip, r6, #1
 800579a:	3c4c      	subs	r4, #76	; 0x4c
 800579c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057a0:	4430      	add	r0, r6
 80057a2:	4560      	cmp	r0, ip
 80057a4:	da04      	bge.n	80057b0 <__kernel_rem_pio2f+0x2ac>
 80057a6:	4606      	mov	r6, r0
 80057a8:	e711      	b.n	80055ce <__kernel_rem_pio2f+0xca>
 80057aa:	9c05      	ldr	r4, [sp, #20]
 80057ac:	2001      	movs	r0, #1
 80057ae:	e7e6      	b.n	800577e <__kernel_rem_pio2f+0x27a>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80057b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80057ba:	9306      	str	r3, [sp, #24]
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c4:	2600      	movs	r6, #0
 80057c6:	ece7 7a01 	vstmia	r7!, {s15}
 80057ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005804 <__kernel_rem_pio2f+0x300>
 80057ce:	46b9      	mov	r9, r7
 80057d0:	455e      	cmp	r6, fp
 80057d2:	dd04      	ble.n	80057de <__kernel_rem_pio2f+0x2da>
 80057d4:	ece4 7a01 	vstmia	r4!, {s15}
 80057d8:	f10c 0c01 	add.w	ip, ip, #1
 80057dc:	e7e1      	b.n	80057a2 <__kernel_rem_pio2f+0x29e>
 80057de:	ecfe 6a01 	vldmia	lr!, {s13}
 80057e2:	ed39 7a01 	vldmdb	r9!, {s14}
 80057e6:	3601      	adds	r6, #1
 80057e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80057ec:	e7f0      	b.n	80057d0 <__kernel_rem_pio2f+0x2cc>
 80057ee:	3c01      	subs	r4, #1
 80057f0:	e777      	b.n	80056e2 <__kernel_rem_pio2f+0x1de>
 80057f2:	bf00      	nop
 80057f4:	08005f34 	.word	0x08005f34
 80057f8:	08005f08 	.word	0x08005f08
 80057fc:	43800000 	.word	0x43800000
 8005800:	3b800000 	.word	0x3b800000
 8005804:	00000000 	.word	0x00000000
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	eeb0 0a48 	vmov.f32	s0, s16
 800580e:	1a98      	subs	r0, r3, r2
 8005810:	f000 f8ea 	bl	80059e8 <scalbnf>
 8005814:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80057fc <__kernel_rem_pio2f+0x2f8>
 8005818:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	db19      	blt.n	8005856 <__kernel_rem_pio2f+0x352>
 8005822:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005800 <__kernel_rem_pio2f+0x2fc>
 8005826:	ee60 7a27 	vmul.f32	s15, s0, s15
 800582a:	aa08      	add	r2, sp, #32
 800582c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005830:	1c74      	adds	r4, r6, #1
 8005832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005836:	3508      	adds	r5, #8
 8005838:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800583c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005840:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005844:	ee10 3a10 	vmov	r3, s0
 8005848:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800584c:	ee17 3a90 	vmov	r3, s15
 8005850:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005854:	e74b      	b.n	80056ee <__kernel_rem_pio2f+0x1ea>
 8005856:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800585a:	aa08      	add	r2, sp, #32
 800585c:	ee10 3a10 	vmov	r3, s0
 8005860:	4634      	mov	r4, r6
 8005862:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005866:	e742      	b.n	80056ee <__kernel_rem_pio2f+0x1ea>
 8005868:	a808      	add	r0, sp, #32
 800586a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800586e:	9001      	str	r0, [sp, #4]
 8005870:	ee07 0a90 	vmov	s15, r0
 8005874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005878:	3b01      	subs	r3, #1
 800587a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800587e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005882:	ed62 7a01 	vstmdb	r2!, {s15}
 8005886:	e73f      	b.n	8005708 <__kernel_rem_pio2f+0x204>
 8005888:	ecf6 6a01 	vldmia	r6!, {s13}
 800588c:	ecb5 7a01 	vldmia	r5!, {s14}
 8005890:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005894:	3001      	adds	r0, #1
 8005896:	4550      	cmp	r0, sl
 8005898:	dc01      	bgt.n	800589e <__kernel_rem_pio2f+0x39a>
 800589a:	4290      	cmp	r0, r2
 800589c:	ddf4      	ble.n	8005888 <__kernel_rem_pio2f+0x384>
 800589e:	a858      	add	r0, sp, #352	; 0x160
 80058a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058a4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80058a8:	3b01      	subs	r3, #1
 80058aa:	e731      	b.n	8005710 <__kernel_rem_pio2f+0x20c>
 80058ac:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	dc09      	bgt.n	80058c6 <__kernel_rem_pio2f+0x3c2>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dc2b      	bgt.n	800590e <__kernel_rem_pio2f+0x40a>
 80058b6:	d044      	beq.n	8005942 <__kernel_rem_pio2f+0x43e>
 80058b8:	f009 0007 	and.w	r0, r9, #7
 80058bc:	b059      	add	sp, #356	; 0x164
 80058be:	ecbd 8b04 	vpop	{d8-d9}
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d1f5      	bne.n	80058b8 <__kernel_rem_pio2f+0x3b4>
 80058cc:	aa30      	add	r2, sp, #192	; 0xc0
 80058ce:	1f0b      	subs	r3, r1, #4
 80058d0:	4413      	add	r3, r2
 80058d2:	461a      	mov	r2, r3
 80058d4:	4620      	mov	r0, r4
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f1a2 0204 	sub.w	r2, r2, #4
 80058dc:	dc52      	bgt.n	8005984 <__kernel_rem_pio2f+0x480>
 80058de:	4622      	mov	r2, r4
 80058e0:	2a01      	cmp	r2, #1
 80058e2:	f1a3 0304 	sub.w	r3, r3, #4
 80058e6:	dc5d      	bgt.n	80059a4 <__kernel_rem_pio2f+0x4a0>
 80058e8:	ab30      	add	r3, sp, #192	; 0xc0
 80058ea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8005804 <__kernel_rem_pio2f+0x300>
 80058ee:	440b      	add	r3, r1
 80058f0:	2c01      	cmp	r4, #1
 80058f2:	dc67      	bgt.n	80059c4 <__kernel_rem_pio2f+0x4c0>
 80058f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80058f8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	d167      	bne.n	80059d0 <__kernel_rem_pio2f+0x4cc>
 8005900:	edc8 6a00 	vstr	s13, [r8]
 8005904:	ed88 7a01 	vstr	s14, [r8, #4]
 8005908:	edc8 7a02 	vstr	s15, [r8, #8]
 800590c:	e7d4      	b.n	80058b8 <__kernel_rem_pio2f+0x3b4>
 800590e:	ab30      	add	r3, sp, #192	; 0xc0
 8005910:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8005804 <__kernel_rem_pio2f+0x300>
 8005914:	440b      	add	r3, r1
 8005916:	4622      	mov	r2, r4
 8005918:	2a00      	cmp	r2, #0
 800591a:	da24      	bge.n	8005966 <__kernel_rem_pio2f+0x462>
 800591c:	b34f      	cbz	r7, 8005972 <__kernel_rem_pio2f+0x46e>
 800591e:	eef1 7a47 	vneg.f32	s15, s14
 8005922:	edc8 7a00 	vstr	s15, [r8]
 8005926:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800592a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800592e:	aa31      	add	r2, sp, #196	; 0xc4
 8005930:	2301      	movs	r3, #1
 8005932:	429c      	cmp	r4, r3
 8005934:	da20      	bge.n	8005978 <__kernel_rem_pio2f+0x474>
 8005936:	b10f      	cbz	r7, 800593c <__kernel_rem_pio2f+0x438>
 8005938:	eef1 7a67 	vneg.f32	s15, s15
 800593c:	edc8 7a01 	vstr	s15, [r8, #4]
 8005940:	e7ba      	b.n	80058b8 <__kernel_rem_pio2f+0x3b4>
 8005942:	ab30      	add	r3, sp, #192	; 0xc0
 8005944:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8005804 <__kernel_rem_pio2f+0x300>
 8005948:	440b      	add	r3, r1
 800594a:	2c00      	cmp	r4, #0
 800594c:	da05      	bge.n	800595a <__kernel_rem_pio2f+0x456>
 800594e:	b10f      	cbz	r7, 8005954 <__kernel_rem_pio2f+0x450>
 8005950:	eef1 7a67 	vneg.f32	s15, s15
 8005954:	edc8 7a00 	vstr	s15, [r8]
 8005958:	e7ae      	b.n	80058b8 <__kernel_rem_pio2f+0x3b4>
 800595a:	ed33 7a01 	vldmdb	r3!, {s14}
 800595e:	3c01      	subs	r4, #1
 8005960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005964:	e7f1      	b.n	800594a <__kernel_rem_pio2f+0x446>
 8005966:	ed73 7a01 	vldmdb	r3!, {s15}
 800596a:	3a01      	subs	r2, #1
 800596c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005970:	e7d2      	b.n	8005918 <__kernel_rem_pio2f+0x414>
 8005972:	eef0 7a47 	vmov.f32	s15, s14
 8005976:	e7d4      	b.n	8005922 <__kernel_rem_pio2f+0x41e>
 8005978:	ecb2 7a01 	vldmia	r2!, {s14}
 800597c:	3301      	adds	r3, #1
 800597e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005982:	e7d6      	b.n	8005932 <__kernel_rem_pio2f+0x42e>
 8005984:	edd2 7a00 	vldr	s15, [r2]
 8005988:	edd2 6a01 	vldr	s13, [r2, #4]
 800598c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005990:	3801      	subs	r0, #1
 8005992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005996:	ed82 7a00 	vstr	s14, [r2]
 800599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599e:	edc2 7a01 	vstr	s15, [r2, #4]
 80059a2:	e798      	b.n	80058d6 <__kernel_rem_pio2f+0x3d2>
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80059ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80059b0:	3a01      	subs	r2, #1
 80059b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b6:	ed83 7a00 	vstr	s14, [r3]
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	edc3 7a01 	vstr	s15, [r3, #4]
 80059c2:	e78d      	b.n	80058e0 <__kernel_rem_pio2f+0x3dc>
 80059c4:	ed33 7a01 	vldmdb	r3!, {s14}
 80059c8:	3c01      	subs	r4, #1
 80059ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059ce:	e78f      	b.n	80058f0 <__kernel_rem_pio2f+0x3ec>
 80059d0:	eef1 6a66 	vneg.f32	s13, s13
 80059d4:	eeb1 7a47 	vneg.f32	s14, s14
 80059d8:	edc8 6a00 	vstr	s13, [r8]
 80059dc:	ed88 7a01 	vstr	s14, [r8, #4]
 80059e0:	eef1 7a67 	vneg.f32	s15, s15
 80059e4:	e790      	b.n	8005908 <__kernel_rem_pio2f+0x404>
 80059e6:	bf00      	nop

080059e8 <scalbnf>:
 80059e8:	ee10 3a10 	vmov	r3, s0
 80059ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80059f0:	d02b      	beq.n	8005a4a <scalbnf+0x62>
 80059f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80059f6:	d302      	bcc.n	80059fe <scalbnf+0x16>
 80059f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059fc:	4770      	bx	lr
 80059fe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005a02:	d123      	bne.n	8005a4c <scalbnf+0x64>
 8005a04:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <scalbnf+0xb0>)
 8005a06:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005a9c <scalbnf+0xb4>
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005a10:	db17      	blt.n	8005a42 <scalbnf+0x5a>
 8005a12:	ee10 3a10 	vmov	r3, s0
 8005a16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005a1a:	3a19      	subs	r2, #25
 8005a1c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005a20:	4288      	cmp	r0, r1
 8005a22:	dd15      	ble.n	8005a50 <scalbnf+0x68>
 8005a24:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005aa0 <scalbnf+0xb8>
 8005a28:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005aa4 <scalbnf+0xbc>
 8005a2c:	ee10 3a10 	vmov	r3, s0
 8005a30:	eeb0 7a67 	vmov.f32	s14, s15
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfb8      	it	lt
 8005a38:	eef0 7a66 	vmovlt.f32	s15, s13
 8005a3c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005a40:	4770      	bx	lr
 8005a42:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005aa8 <scalbnf+0xc0>
 8005a46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005a4a:	4770      	bx	lr
 8005a4c:	0dd2      	lsrs	r2, r2, #23
 8005a4e:	e7e5      	b.n	8005a1c <scalbnf+0x34>
 8005a50:	4410      	add	r0, r2
 8005a52:	28fe      	cmp	r0, #254	; 0xfe
 8005a54:	dce6      	bgt.n	8005a24 <scalbnf+0x3c>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	dd06      	ble.n	8005a68 <scalbnf+0x80>
 8005a5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a5e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005a62:	ee00 3a10 	vmov	s0, r3
 8005a66:	4770      	bx	lr
 8005a68:	f110 0f16 	cmn.w	r0, #22
 8005a6c:	da09      	bge.n	8005a82 <scalbnf+0x9a>
 8005a6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005aa8 <scalbnf+0xc0>
 8005a72:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005aac <scalbnf+0xc4>
 8005a76:	ee10 3a10 	vmov	r3, s0
 8005a7a:	eeb0 7a67 	vmov.f32	s14, s15
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	e7d9      	b.n	8005a36 <scalbnf+0x4e>
 8005a82:	3019      	adds	r0, #25
 8005a84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a88:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005a8c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005ab0 <scalbnf+0xc8>
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	e7d7      	b.n	8005a46 <scalbnf+0x5e>
 8005a96:	bf00      	nop
 8005a98:	ffff3cb0 	.word	0xffff3cb0
 8005a9c:	4c000000 	.word	0x4c000000
 8005aa0:	7149f2ca 	.word	0x7149f2ca
 8005aa4:	f149f2ca 	.word	0xf149f2ca
 8005aa8:	0da24260 	.word	0x0da24260
 8005aac:	8da24260 	.word	0x8da24260
 8005ab0:	33000000 	.word	0x33000000

08005ab4 <floorf>:
 8005ab4:	ee10 3a10 	vmov	r3, s0
 8005ab8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005abc:	3a7f      	subs	r2, #127	; 0x7f
 8005abe:	2a16      	cmp	r2, #22
 8005ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ac4:	dc2a      	bgt.n	8005b1c <floorf+0x68>
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	da11      	bge.n	8005aee <floorf+0x3a>
 8005aca:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005b2c <floorf+0x78>
 8005ace:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ad2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ada:	dd05      	ble.n	8005ae8 <floorf+0x34>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da23      	bge.n	8005b28 <floorf+0x74>
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <floorf+0x7c>)
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	bf18      	it	ne
 8005ae6:	4613      	movne	r3, r2
 8005ae8:	ee00 3a10 	vmov	s0, r3
 8005aec:	4770      	bx	lr
 8005aee:	4911      	ldr	r1, [pc, #68]	; (8005b34 <floorf+0x80>)
 8005af0:	4111      	asrs	r1, r2
 8005af2:	420b      	tst	r3, r1
 8005af4:	d0fa      	beq.n	8005aec <floorf+0x38>
 8005af6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005b2c <floorf+0x78>
 8005afa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005afe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	ddef      	ble.n	8005ae8 <floorf+0x34>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbe      	ittt	lt
 8005b0c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005b10:	fa40 f202 	asrlt.w	r2, r0, r2
 8005b14:	189b      	addlt	r3, r3, r2
 8005b16:	ea23 0301 	bic.w	r3, r3, r1
 8005b1a:	e7e5      	b.n	8005ae8 <floorf+0x34>
 8005b1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005b20:	d3e4      	bcc.n	8005aec <floorf+0x38>
 8005b22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005b26:	4770      	bx	lr
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e7dd      	b.n	8005ae8 <floorf+0x34>
 8005b2c:	7149f2ca 	.word	0x7149f2ca
 8005b30:	bf800000 	.word	0xbf800000
 8005b34:	007fffff 	.word	0x007fffff

08005b38 <_init>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr

08005b44 <_fini>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr
