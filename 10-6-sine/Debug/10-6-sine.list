
10-6-sine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myAudioFiles 00007a12  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005170  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  08011b84  08011b84  00021b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011c68  08011c68  00030010  2**0
                  CONTENTS
  5 .ARM          00000008  08011c68  08011c68  00021c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011c70  08011c70  00030010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011c70  08011c70  00021c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011c74  08011c74  00021c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20000000  08011c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00030010  2**0
                  CONTENTS
 11 .bss          00000204  20000010  20000010  00030010  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000214  20000214  00030010  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 15 .debug_info   00010271  00000000  00000000  00030083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000279f  00000000  00000000  000402f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000fe8  00000000  00000000  00042a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c7c  00000000  00000000  00043a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00021fe2  00000000  00000000  000446fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014766  00000000  00000000  000666de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce460  00000000  00000000  0007ae44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004338  00000000  00000000  001492a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0014d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800ca14 <__do_global_dtors_aux>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4c05      	ldr	r4, [pc, #20]	; (800ca2c <__do_global_dtors_aux+0x18>)
 800ca18:	7823      	ldrb	r3, [r4, #0]
 800ca1a:	b933      	cbnz	r3, 800ca2a <__do_global_dtors_aux+0x16>
 800ca1c:	4b04      	ldr	r3, [pc, #16]	; (800ca30 <__do_global_dtors_aux+0x1c>)
 800ca1e:	b113      	cbz	r3, 800ca26 <__do_global_dtors_aux+0x12>
 800ca20:	4804      	ldr	r0, [pc, #16]	; (800ca34 <__do_global_dtors_aux+0x20>)
 800ca22:	f3af 8000 	nop.w
 800ca26:	2301      	movs	r3, #1
 800ca28:	7023      	strb	r3, [r4, #0]
 800ca2a:	bd10      	pop	{r4, pc}
 800ca2c:	20000010 	.word	0x20000010
 800ca30:	00000000 	.word	0x00000000
 800ca34:	08011b6c 	.word	0x08011b6c

0800ca38 <frame_dummy>:
 800ca38:	b508      	push	{r3, lr}
 800ca3a:	4b03      	ldr	r3, [pc, #12]	; (800ca48 <frame_dummy+0x10>)
 800ca3c:	b11b      	cbz	r3, 800ca46 <frame_dummy+0xe>
 800ca3e:	4903      	ldr	r1, [pc, #12]	; (800ca4c <frame_dummy+0x14>)
 800ca40:	4803      	ldr	r0, [pc, #12]	; (800ca50 <frame_dummy+0x18>)
 800ca42:	f3af 8000 	nop.w
 800ca46:	bd08      	pop	{r3, pc}
 800ca48:	00000000 	.word	0x00000000
 800ca4c:	20000014 	.word	0x20000014
 800ca50:	08011b6c 	.word	0x08011b6c

0800ca54 <__aeabi_uldivmod>:
 800ca54:	b953      	cbnz	r3, 800ca6c <__aeabi_uldivmod+0x18>
 800ca56:	b94a      	cbnz	r2, 800ca6c <__aeabi_uldivmod+0x18>
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	bf08      	it	eq
 800ca5c:	2800      	cmpeq	r0, #0
 800ca5e:	bf1c      	itt	ne
 800ca60:	f04f 31ff 	movne.w	r1, #4294967295
 800ca64:	f04f 30ff 	movne.w	r0, #4294967295
 800ca68:	f000 b970 	b.w	800cd4c <__aeabi_idiv0>
 800ca6c:	f1ad 0c08 	sub.w	ip, sp, #8
 800ca70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800ca74:	f000 f806 	bl	800ca84 <__udivmoddi4>
 800ca78:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ca7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca80:	b004      	add	sp, #16
 800ca82:	4770      	bx	lr

0800ca84 <__udivmoddi4>:
 800ca84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca88:	9e08      	ldr	r6, [sp, #32]
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	460f      	mov	r7, r1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d14a      	bne.n	800cb2a <__udivmoddi4+0xa6>
 800ca94:	428a      	cmp	r2, r1
 800ca96:	4694      	mov	ip, r2
 800ca98:	d965      	bls.n	800cb66 <__udivmoddi4+0xe2>
 800ca9a:	fab2 f382 	clz	r3, r2
 800ca9e:	b143      	cbz	r3, 800cab2 <__udivmoddi4+0x2e>
 800caa0:	fa02 fc03 	lsl.w	ip, r2, r3
 800caa4:	f1c3 0220 	rsb	r2, r3, #32
 800caa8:	409f      	lsls	r7, r3
 800caaa:	fa20 f202 	lsr.w	r2, r0, r2
 800caae:	4317      	orrs	r7, r2
 800cab0:	409c      	lsls	r4, r3
 800cab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800cab6:	fa1f f58c 	uxth.w	r5, ip
 800caba:	fbb7 f1fe 	udiv	r1, r7, lr
 800cabe:	0c22      	lsrs	r2, r4, #16
 800cac0:	fb0e 7711 	mls	r7, lr, r1, r7
 800cac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800cac8:	fb01 f005 	mul.w	r0, r1, r5
 800cacc:	4290      	cmp	r0, r2
 800cace:	d90a      	bls.n	800cae6 <__udivmoddi4+0x62>
 800cad0:	eb1c 0202 	adds.w	r2, ip, r2
 800cad4:	f101 37ff 	add.w	r7, r1, #4294967295
 800cad8:	f080 811c 	bcs.w	800cd14 <__udivmoddi4+0x290>
 800cadc:	4290      	cmp	r0, r2
 800cade:	f240 8119 	bls.w	800cd14 <__udivmoddi4+0x290>
 800cae2:	3902      	subs	r1, #2
 800cae4:	4462      	add	r2, ip
 800cae6:	1a12      	subs	r2, r2, r0
 800cae8:	b2a4      	uxth	r4, r4
 800caea:	fbb2 f0fe 	udiv	r0, r2, lr
 800caee:	fb0e 2210 	mls	r2, lr, r0, r2
 800caf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800caf6:	fb00 f505 	mul.w	r5, r0, r5
 800cafa:	42a5      	cmp	r5, r4
 800cafc:	d90a      	bls.n	800cb14 <__udivmoddi4+0x90>
 800cafe:	eb1c 0404 	adds.w	r4, ip, r4
 800cb02:	f100 32ff 	add.w	r2, r0, #4294967295
 800cb06:	f080 8107 	bcs.w	800cd18 <__udivmoddi4+0x294>
 800cb0a:	42a5      	cmp	r5, r4
 800cb0c:	f240 8104 	bls.w	800cd18 <__udivmoddi4+0x294>
 800cb10:	4464      	add	r4, ip
 800cb12:	3802      	subs	r0, #2
 800cb14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800cb18:	1b64      	subs	r4, r4, r5
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	b11e      	cbz	r6, 800cb26 <__udivmoddi4+0xa2>
 800cb1e:	40dc      	lsrs	r4, r3
 800cb20:	2300      	movs	r3, #0
 800cb22:	e9c6 4300 	strd	r4, r3, [r6]
 800cb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2a:	428b      	cmp	r3, r1
 800cb2c:	d908      	bls.n	800cb40 <__udivmoddi4+0xbc>
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	f000 80ed 	beq.w	800cd0e <__udivmoddi4+0x28a>
 800cb34:	2100      	movs	r1, #0
 800cb36:	e9c6 0500 	strd	r0, r5, [r6]
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb40:	fab3 f183 	clz	r1, r3
 800cb44:	2900      	cmp	r1, #0
 800cb46:	d149      	bne.n	800cbdc <__udivmoddi4+0x158>
 800cb48:	42ab      	cmp	r3, r5
 800cb4a:	d302      	bcc.n	800cb52 <__udivmoddi4+0xce>
 800cb4c:	4282      	cmp	r2, r0
 800cb4e:	f200 80f8 	bhi.w	800cd42 <__udivmoddi4+0x2be>
 800cb52:	1a84      	subs	r4, r0, r2
 800cb54:	eb65 0203 	sbc.w	r2, r5, r3
 800cb58:	2001      	movs	r0, #1
 800cb5a:	4617      	mov	r7, r2
 800cb5c:	2e00      	cmp	r6, #0
 800cb5e:	d0e2      	beq.n	800cb26 <__udivmoddi4+0xa2>
 800cb60:	e9c6 4700 	strd	r4, r7, [r6]
 800cb64:	e7df      	b.n	800cb26 <__udivmoddi4+0xa2>
 800cb66:	b902      	cbnz	r2, 800cb6a <__udivmoddi4+0xe6>
 800cb68:	deff      	udf	#255	; 0xff
 800cb6a:	fab2 f382 	clz	r3, r2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f040 8090 	bne.w	800cc94 <__udivmoddi4+0x210>
 800cb74:	1a8a      	subs	r2, r1, r2
 800cb76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800cb7a:	fa1f fe8c 	uxth.w	lr, ip
 800cb7e:	2101      	movs	r1, #1
 800cb80:	fbb2 f5f7 	udiv	r5, r2, r7
 800cb84:	fb07 2015 	mls	r0, r7, r5, r2
 800cb88:	0c22      	lsrs	r2, r4, #16
 800cb8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cb8e:	fb0e f005 	mul.w	r0, lr, r5
 800cb92:	4290      	cmp	r0, r2
 800cb94:	d908      	bls.n	800cba8 <__udivmoddi4+0x124>
 800cb96:	eb1c 0202 	adds.w	r2, ip, r2
 800cb9a:	f105 38ff 	add.w	r8, r5, #4294967295
 800cb9e:	d202      	bcs.n	800cba6 <__udivmoddi4+0x122>
 800cba0:	4290      	cmp	r0, r2
 800cba2:	f200 80cb 	bhi.w	800cd3c <__udivmoddi4+0x2b8>
 800cba6:	4645      	mov	r5, r8
 800cba8:	1a12      	subs	r2, r2, r0
 800cbaa:	b2a4      	uxth	r4, r4
 800cbac:	fbb2 f0f7 	udiv	r0, r2, r7
 800cbb0:	fb07 2210 	mls	r2, r7, r0, r2
 800cbb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cbb8:	fb0e fe00 	mul.w	lr, lr, r0
 800cbbc:	45a6      	cmp	lr, r4
 800cbbe:	d908      	bls.n	800cbd2 <__udivmoddi4+0x14e>
 800cbc0:	eb1c 0404 	adds.w	r4, ip, r4
 800cbc4:	f100 32ff 	add.w	r2, r0, #4294967295
 800cbc8:	d202      	bcs.n	800cbd0 <__udivmoddi4+0x14c>
 800cbca:	45a6      	cmp	lr, r4
 800cbcc:	f200 80bb 	bhi.w	800cd46 <__udivmoddi4+0x2c2>
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	eba4 040e 	sub.w	r4, r4, lr
 800cbd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800cbda:	e79f      	b.n	800cb1c <__udivmoddi4+0x98>
 800cbdc:	f1c1 0720 	rsb	r7, r1, #32
 800cbe0:	408b      	lsls	r3, r1
 800cbe2:	fa22 fc07 	lsr.w	ip, r2, r7
 800cbe6:	ea4c 0c03 	orr.w	ip, ip, r3
 800cbea:	fa05 f401 	lsl.w	r4, r5, r1
 800cbee:	fa20 f307 	lsr.w	r3, r0, r7
 800cbf2:	40fd      	lsrs	r5, r7
 800cbf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800cbf8:	4323      	orrs	r3, r4
 800cbfa:	fbb5 f8f9 	udiv	r8, r5, r9
 800cbfe:	fa1f fe8c 	uxth.w	lr, ip
 800cc02:	fb09 5518 	mls	r5, r9, r8, r5
 800cc06:	0c1c      	lsrs	r4, r3, #16
 800cc08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800cc0c:	fb08 f50e 	mul.w	r5, r8, lr
 800cc10:	42a5      	cmp	r5, r4
 800cc12:	fa02 f201 	lsl.w	r2, r2, r1
 800cc16:	fa00 f001 	lsl.w	r0, r0, r1
 800cc1a:	d90b      	bls.n	800cc34 <__udivmoddi4+0x1b0>
 800cc1c:	eb1c 0404 	adds.w	r4, ip, r4
 800cc20:	f108 3aff 	add.w	sl, r8, #4294967295
 800cc24:	f080 8088 	bcs.w	800cd38 <__udivmoddi4+0x2b4>
 800cc28:	42a5      	cmp	r5, r4
 800cc2a:	f240 8085 	bls.w	800cd38 <__udivmoddi4+0x2b4>
 800cc2e:	f1a8 0802 	sub.w	r8, r8, #2
 800cc32:	4464      	add	r4, ip
 800cc34:	1b64      	subs	r4, r4, r5
 800cc36:	b29d      	uxth	r5, r3
 800cc38:	fbb4 f3f9 	udiv	r3, r4, r9
 800cc3c:	fb09 4413 	mls	r4, r9, r3, r4
 800cc40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800cc44:	fb03 fe0e 	mul.w	lr, r3, lr
 800cc48:	45a6      	cmp	lr, r4
 800cc4a:	d908      	bls.n	800cc5e <__udivmoddi4+0x1da>
 800cc4c:	eb1c 0404 	adds.w	r4, ip, r4
 800cc50:	f103 35ff 	add.w	r5, r3, #4294967295
 800cc54:	d26c      	bcs.n	800cd30 <__udivmoddi4+0x2ac>
 800cc56:	45a6      	cmp	lr, r4
 800cc58:	d96a      	bls.n	800cd30 <__udivmoddi4+0x2ac>
 800cc5a:	3b02      	subs	r3, #2
 800cc5c:	4464      	add	r4, ip
 800cc5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800cc62:	fba3 9502 	umull	r9, r5, r3, r2
 800cc66:	eba4 040e 	sub.w	r4, r4, lr
 800cc6a:	42ac      	cmp	r4, r5
 800cc6c:	46c8      	mov	r8, r9
 800cc6e:	46ae      	mov	lr, r5
 800cc70:	d356      	bcc.n	800cd20 <__udivmoddi4+0x29c>
 800cc72:	d053      	beq.n	800cd1c <__udivmoddi4+0x298>
 800cc74:	b156      	cbz	r6, 800cc8c <__udivmoddi4+0x208>
 800cc76:	ebb0 0208 	subs.w	r2, r0, r8
 800cc7a:	eb64 040e 	sbc.w	r4, r4, lr
 800cc7e:	fa04 f707 	lsl.w	r7, r4, r7
 800cc82:	40ca      	lsrs	r2, r1
 800cc84:	40cc      	lsrs	r4, r1
 800cc86:	4317      	orrs	r7, r2
 800cc88:	e9c6 7400 	strd	r7, r4, [r6]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	2100      	movs	r1, #0
 800cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc94:	f1c3 0120 	rsb	r1, r3, #32
 800cc98:	fa02 fc03 	lsl.w	ip, r2, r3
 800cc9c:	fa20 f201 	lsr.w	r2, r0, r1
 800cca0:	fa25 f101 	lsr.w	r1, r5, r1
 800cca4:	409d      	lsls	r5, r3
 800cca6:	432a      	orrs	r2, r5
 800cca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800ccac:	fa1f fe8c 	uxth.w	lr, ip
 800ccb0:	fbb1 f0f7 	udiv	r0, r1, r7
 800ccb4:	fb07 1510 	mls	r5, r7, r0, r1
 800ccb8:	0c11      	lsrs	r1, r2, #16
 800ccba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800ccbe:	fb00 f50e 	mul.w	r5, r0, lr
 800ccc2:	428d      	cmp	r5, r1
 800ccc4:	fa04 f403 	lsl.w	r4, r4, r3
 800ccc8:	d908      	bls.n	800ccdc <__udivmoddi4+0x258>
 800ccca:	eb1c 0101 	adds.w	r1, ip, r1
 800ccce:	f100 38ff 	add.w	r8, r0, #4294967295
 800ccd2:	d22f      	bcs.n	800cd34 <__udivmoddi4+0x2b0>
 800ccd4:	428d      	cmp	r5, r1
 800ccd6:	d92d      	bls.n	800cd34 <__udivmoddi4+0x2b0>
 800ccd8:	3802      	subs	r0, #2
 800ccda:	4461      	add	r1, ip
 800ccdc:	1b49      	subs	r1, r1, r5
 800ccde:	b292      	uxth	r2, r2
 800cce0:	fbb1 f5f7 	udiv	r5, r1, r7
 800cce4:	fb07 1115 	mls	r1, r7, r5, r1
 800cce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ccec:	fb05 f10e 	mul.w	r1, r5, lr
 800ccf0:	4291      	cmp	r1, r2
 800ccf2:	d908      	bls.n	800cd06 <__udivmoddi4+0x282>
 800ccf4:	eb1c 0202 	adds.w	r2, ip, r2
 800ccf8:	f105 38ff 	add.w	r8, r5, #4294967295
 800ccfc:	d216      	bcs.n	800cd2c <__udivmoddi4+0x2a8>
 800ccfe:	4291      	cmp	r1, r2
 800cd00:	d914      	bls.n	800cd2c <__udivmoddi4+0x2a8>
 800cd02:	3d02      	subs	r5, #2
 800cd04:	4462      	add	r2, ip
 800cd06:	1a52      	subs	r2, r2, r1
 800cd08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800cd0c:	e738      	b.n	800cb80 <__udivmoddi4+0xfc>
 800cd0e:	4631      	mov	r1, r6
 800cd10:	4630      	mov	r0, r6
 800cd12:	e708      	b.n	800cb26 <__udivmoddi4+0xa2>
 800cd14:	4639      	mov	r1, r7
 800cd16:	e6e6      	b.n	800cae6 <__udivmoddi4+0x62>
 800cd18:	4610      	mov	r0, r2
 800cd1a:	e6fb      	b.n	800cb14 <__udivmoddi4+0x90>
 800cd1c:	4548      	cmp	r0, r9
 800cd1e:	d2a9      	bcs.n	800cc74 <__udivmoddi4+0x1f0>
 800cd20:	ebb9 0802 	subs.w	r8, r9, r2
 800cd24:	eb65 0e0c 	sbc.w	lr, r5, ip
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	e7a3      	b.n	800cc74 <__udivmoddi4+0x1f0>
 800cd2c:	4645      	mov	r5, r8
 800cd2e:	e7ea      	b.n	800cd06 <__udivmoddi4+0x282>
 800cd30:	462b      	mov	r3, r5
 800cd32:	e794      	b.n	800cc5e <__udivmoddi4+0x1da>
 800cd34:	4640      	mov	r0, r8
 800cd36:	e7d1      	b.n	800ccdc <__udivmoddi4+0x258>
 800cd38:	46d0      	mov	r8, sl
 800cd3a:	e77b      	b.n	800cc34 <__udivmoddi4+0x1b0>
 800cd3c:	3d02      	subs	r5, #2
 800cd3e:	4462      	add	r2, ip
 800cd40:	e732      	b.n	800cba8 <__udivmoddi4+0x124>
 800cd42:	4608      	mov	r0, r1
 800cd44:	e70a      	b.n	800cb5c <__udivmoddi4+0xd8>
 800cd46:	4464      	add	r4, ip
 800cd48:	3802      	subs	r0, #2
 800cd4a:	e742      	b.n	800cbd2 <__udivmoddi4+0x14e>

0800cd4c <__aeabi_idiv0>:
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	4603      	mov	r3, r0
 800cd58:	6039      	str	r1, [r7, #0]
 800cd5a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800cd5c:	4a09      	ldr	r2, [pc, #36]	; (800cd84 <write_register+0x34>)
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781a      	ldrb	r2, [r3, #0]
 800cd66:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <write_register+0x34>)
 800cd68:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800cd6a:	2364      	movs	r3, #100	; 0x64
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	2302      	movs	r3, #2
 800cd70:	4a04      	ldr	r2, [pc, #16]	; (800cd84 <write_register+0x34>)
 800cd72:	2194      	movs	r1, #148	; 0x94
 800cd74:	4804      	ldr	r0, [pc, #16]	; (800cd88 <write_register+0x38>)
 800cd76:	f002 f881 	bl	800ee7c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 800cd7a:	bf00      	nop
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	2000002c 	.word	0x2000002c
 800cd88:	20000030 	.word	0x20000030

0800cd8c <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800cd98:	4a0b      	ldr	r2, [pc, #44]	; (800cdc8 <read_register+0x3c>)
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800cd9e:	2364      	movs	r3, #100	; 0x64
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	2301      	movs	r3, #1
 800cda4:	4a08      	ldr	r2, [pc, #32]	; (800cdc8 <read_register+0x3c>)
 800cda6:	2194      	movs	r1, #148	; 0x94
 800cda8:	4808      	ldr	r0, [pc, #32]	; (800cdcc <read_register+0x40>)
 800cdaa:	f002 f867 	bl	800ee7c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800cdae:	2364      	movs	r3, #100	; 0x64
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	2194      	movs	r1, #148	; 0x94
 800cdb8:	4804      	ldr	r0, [pc, #16]	; (800cdcc <read_register+0x40>)
 800cdba:	f002 f95d 	bl	800f078 <HAL_I2C_Master_Receive>
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2000002c 	.word	0x2000002c
 800cdcc:	20000030 	.word	0x20000030

0800cdd0 <CS43_Init>:
//-------------- Public Functions ----------------//
// Function(1): Initialisation
//

void CS43_Init(I2C_HandleTypeDef i2c_handle)//, CS43_MODE outputMode) //hardcode -db
{
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	f107 0c08 	add.w	ip, r7, #8
 800cdda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800cdde:	4b7b      	ldr	r3, [pc, #492]	; (800cfcc <CS43_Init+0x1fc>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800cde6:	4b79      	ldr	r3, [pc, #484]	; (800cfcc <CS43_Init+0x1fc>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69da      	ldr	r2, [r3, #28]
 800cdec:	4b77      	ldr	r3, [pc, #476]	; (800cfcc <CS43_Init+0x1fc>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdf4:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	2110      	movs	r1, #16
 800cdfa:	4875      	ldr	r0, [pc, #468]	; (800cfd0 <CS43_Init+0x200>)
 800cdfc:	f001 fee0 	bl	800ebc0 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800ce00:	4b74      	ldr	r3, [pc, #464]	; (800cfd4 <CS43_Init+0x204>)
 800ce02:	4618      	mov	r0, r3
 800ce04:	f107 0308 	add.w	r3, r7, #8
 800ce08:	2254      	movs	r2, #84	; 0x54
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	f004 fea0 	bl	8011b50 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800ce10:	4b71      	ldr	r3, [pc, #452]	; (800cfd8 <CS43_Init+0x208>)
 800ce12:	2201      	movs	r2, #1
 800ce14:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800ce16:	4970      	ldr	r1, [pc, #448]	; (800cfd8 <CS43_Init+0x208>)
 800ce18:	2002      	movs	r0, #2
 800ce1a:	f7ff ff99 	bl	800cd50 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800ce1e:	4b6e      	ldr	r3, [pc, #440]	; (800cfd8 <CS43_Init+0x208>)
 800ce20:	2280      	movs	r2, #128	; 0x80
 800ce22:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800ce24:	4b6c      	ldr	r3, [pc, #432]	; (800cfd8 <CS43_Init+0x208>)
 800ce26:	785b      	ldrb	r3, [r3, #1]
 800ce28:	f043 0320 	orr.w	r3, r3, #32
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	4b6a      	ldr	r3, [pc, #424]	; (800cfd8 <CS43_Init+0x208>)
 800ce30:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800ce32:	4b69      	ldr	r3, [pc, #420]	; (800cfd8 <CS43_Init+0x208>)
 800ce34:	785b      	ldrb	r3, [r3, #1]
 800ce36:	f043 030c 	orr.w	r3, r3, #12
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	4b66      	ldr	r3, [pc, #408]	; (800cfd8 <CS43_Init+0x208>)
 800ce3e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800ce40:	4b65      	ldr	r3, [pc, #404]	; (800cfd8 <CS43_Init+0x208>)
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	f043 0303 	orr.w	r3, r3, #3
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	4b63      	ldr	r3, [pc, #396]	; (800cfd8 <CS43_Init+0x208>)
 800ce4c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800ce4e:	4963      	ldr	r1, [pc, #396]	; (800cfdc <CS43_Init+0x20c>)
 800ce50:	2004      	movs	r0, #4
 800ce52:	f7ff ff7d 	bl	800cd50 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800ce56:	4b60      	ldr	r3, [pc, #384]	; (800cfd8 <CS43_Init+0x208>)
 800ce58:	2280      	movs	r2, #128	; 0x80
 800ce5a:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800ce5c:	495f      	ldr	r1, [pc, #380]	; (800cfdc <CS43_Init+0x20c>)
 800ce5e:	2005      	movs	r0, #5
 800ce60:	f7ff ff76 	bl	800cd50 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 800ce64:	495c      	ldr	r1, [pc, #368]	; (800cfd8 <CS43_Init+0x208>)
 800ce66:	2006      	movs	r0, #6
 800ce68:	f7ff ff90 	bl	800cd8c <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800ce6c:	4b5a      	ldr	r3, [pc, #360]	; (800cfd8 <CS43_Init+0x208>)
 800ce6e:	785b      	ldrb	r3, [r3, #1]
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	4b58      	ldr	r3, [pc, #352]	; (800cfd8 <CS43_Init+0x208>)
 800ce78:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 800ce7a:	4b57      	ldr	r3, [pc, #348]	; (800cfd8 <CS43_Init+0x208>)
 800ce7c:	785b      	ldrb	r3, [r3, #1]
 800ce7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	4b54      	ldr	r3, [pc, #336]	; (800cfd8 <CS43_Init+0x208>)
 800ce86:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 800ce88:	4b53      	ldr	r3, [pc, #332]	; (800cfd8 <CS43_Init+0x208>)
 800ce8a:	785b      	ldrb	r3, [r3, #1]
 800ce8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	4b51      	ldr	r3, [pc, #324]	; (800cfd8 <CS43_Init+0x208>)
 800ce94:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800ce96:	4b50      	ldr	r3, [pc, #320]	; (800cfd8 <CS43_Init+0x208>)
 800ce98:	785b      	ldrb	r3, [r3, #1]
 800ce9a:	f023 0310 	bic.w	r3, r3, #16
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	4b4d      	ldr	r3, [pc, #308]	; (800cfd8 <CS43_Init+0x208>)
 800cea2:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800cea4:	4b4c      	ldr	r3, [pc, #304]	; (800cfd8 <CS43_Init+0x208>)
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	f023 0304 	bic.w	r3, r3, #4
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	4b4a      	ldr	r3, [pc, #296]	; (800cfd8 <CS43_Init+0x208>)
 800ceb0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800ceb2:	4b49      	ldr	r3, [pc, #292]	; (800cfd8 <CS43_Init+0x208>)
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	f043 0304 	orr.w	r3, r3, #4
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	4b46      	ldr	r3, [pc, #280]	; (800cfd8 <CS43_Init+0x208>)
 800cebe:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800cec0:	4b45      	ldr	r3, [pc, #276]	; (800cfd8 <CS43_Init+0x208>)
 800cec2:	785b      	ldrb	r3, [r3, #1]
 800cec4:	f043 0303 	orr.w	r3, r3, #3
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b43      	ldr	r3, [pc, #268]	; (800cfd8 <CS43_Init+0x208>)
 800cecc:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800cece:	4943      	ldr	r1, [pc, #268]	; (800cfdc <CS43_Init+0x20c>)
 800ced0:	2006      	movs	r0, #6
 800ced2:	f7ff ff3d 	bl	800cd50 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800ced6:	4941      	ldr	r1, [pc, #260]	; (800cfdc <CS43_Init+0x20c>)
 800ced8:	2008      	movs	r0, #8
 800ceda:	f7ff ff57 	bl	800cd8c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800cede:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <CS43_Init+0x208>)
 800cee0:	785b      	ldrb	r3, [r3, #1]
 800cee2:	f023 030f 	bic.w	r3, r3, #15
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b3b      	ldr	r3, [pc, #236]	; (800cfd8 <CS43_Init+0x208>)
 800ceea:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800ceec:	4b3a      	ldr	r3, [pc, #232]	; (800cfd8 <CS43_Init+0x208>)
 800ceee:	785b      	ldrb	r3, [r3, #1]
 800cef0:	f043 0301 	orr.w	r3, r3, #1
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	4b38      	ldr	r3, [pc, #224]	; (800cfd8 <CS43_Init+0x208>)
 800cef8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800cefa:	4938      	ldr	r1, [pc, #224]	; (800cfdc <CS43_Init+0x20c>)
 800cefc:	2008      	movs	r0, #8
 800cefe:	f7ff ff27 	bl	800cd50 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800cf02:	4936      	ldr	r1, [pc, #216]	; (800cfdc <CS43_Init+0x20c>)
 800cf04:	2009      	movs	r0, #9
 800cf06:	f7ff ff41 	bl	800cd8c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800cf0a:	4b33      	ldr	r3, [pc, #204]	; (800cfd8 <CS43_Init+0x208>)
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	f023 030f 	bic.w	r3, r3, #15
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	4b30      	ldr	r3, [pc, #192]	; (800cfd8 <CS43_Init+0x208>)
 800cf16:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800cf18:	4b2f      	ldr	r3, [pc, #188]	; (800cfd8 <CS43_Init+0x208>)
 800cf1a:	785b      	ldrb	r3, [r3, #1]
 800cf1c:	f043 0301 	orr.w	r3, r3, #1
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	4b2d      	ldr	r3, [pc, #180]	; (800cfd8 <CS43_Init+0x208>)
 800cf24:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800cf26:	492d      	ldr	r1, [pc, #180]	; (800cfdc <CS43_Init+0x20c>)
 800cf28:	2009      	movs	r0, #9
 800cf2a:	f7ff ff11 	bl	800cd50 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800cf2e:	492b      	ldr	r1, [pc, #172]	; (800cfdc <CS43_Init+0x20c>)
 800cf30:	200e      	movs	r0, #14
 800cf32:	f7ff ff2b 	bl	800cd8c <read_register>
//	if(outputMode == MODE_ANALOG) //hardcoding
//	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800cf36:	4b28      	ldr	r3, [pc, #160]	; (800cfd8 <CS43_Init+0x208>)
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	4b25      	ldr	r3, [pc, #148]	; (800cfd8 <CS43_Init+0x208>)
 800cf42:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800cf44:	4b24      	ldr	r3, [pc, #144]	; (800cfd8 <CS43_Init+0x208>)
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	4b22      	ldr	r3, [pc, #136]	; (800cfd8 <CS43_Init+0x208>)
 800cf50:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800cf52:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <CS43_Init+0x208>)
 800cf54:	785b      	ldrb	r3, [r3, #1]
 800cf56:	f023 0320 	bic.w	r3, r3, #32
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	4b1e      	ldr	r3, [pc, #120]	; (800cfd8 <CS43_Init+0x208>)
 800cf5e:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800cf60:	4b1d      	ldr	r3, [pc, #116]	; (800cfd8 <CS43_Init+0x208>)
 800cf62:	785b      	ldrb	r3, [r3, #1]
 800cf64:	f023 0310 	bic.w	r3, r3, #16
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	4b1b      	ldr	r3, [pc, #108]	; (800cfd8 <CS43_Init+0x208>)
 800cf6c:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	; (800cfd8 <CS43_Init+0x208>)
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	f023 0308 	bic.w	r3, r3, #8
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <CS43_Init+0x208>)
 800cf7a:	705a      	strb	r2, [r3, #1]
//	} //hardcoding -db
//	else if(outputMode == MODE_I2S)
//	{
//		iData[1] = 0x02;
//	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800cf7c:	4917      	ldr	r1, [pc, #92]	; (800cfdc <CS43_Init+0x20c>)
 800cf7e:	200e      	movs	r0, #14
 800cf80:	f7ff fee6 	bl	800cd50 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800cf84:	4915      	ldr	r1, [pc, #84]	; (800cfdc <CS43_Init+0x20c>)
 800cf86:	200f      	movs	r0, #15
 800cf88:	f7ff ff00 	bl	800cd8c <read_register>
	iData[1] = 0x00;
 800cf8c:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <CS43_Init+0x208>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800cf92:	4912      	ldr	r1, [pc, #72]	; (800cfdc <CS43_Init+0x20c>)
 800cf94:	200f      	movs	r0, #15
 800cf96:	f7ff fedb 	bl	800cd50 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <CS43_Init+0x208>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800cfa0:	490e      	ldr	r1, [pc, #56]	; (800cfdc <CS43_Init+0x20c>)
 800cfa2:	2014      	movs	r0, #20
 800cfa4:	f7ff fed4 	bl	800cd50 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800cfa8:	490c      	ldr	r1, [pc, #48]	; (800cfdc <CS43_Init+0x20c>)
 800cfaa:	2015      	movs	r0, #21
 800cfac:	f7ff fed0 	bl	800cd50 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800cfb0:	490a      	ldr	r1, [pc, #40]	; (800cfdc <CS43_Init+0x20c>)
 800cfb2:	201a      	movs	r0, #26
 800cfb4:	f7ff fecc 	bl	800cd50 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800cfb8:	4908      	ldr	r1, [pc, #32]	; (800cfdc <CS43_Init+0x20c>)
 800cfba:	201b      	movs	r0, #27
 800cfbc:	f7ff fec8 	bl	800cd50 <write_register>
}
 800cfc0:	bf00      	nop
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfc8:	b004      	add	sp, #16
 800cfca:	4770      	bx	lr
 800cfcc:	20000104 	.word	0x20000104
 800cfd0:	40020c00 	.word	0x40020c00
 800cfd4:	20000030 	.word	0x20000030
 800cfd8:	2000002c 	.word	0x2000002c
 800cfdc:	2000002d 	.word	0x2000002d

0800cfe0 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d837      	bhi.n	800d060 <CS43_Enable_RightLeft+0x80>
 800cff0:	a201      	add	r2, pc, #4	; (adr r2, 800cff8 <CS43_Enable_RightLeft+0x18>)
 800cff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff6:	bf00      	nop
 800cff8:	0800d009 	.word	0x0800d009
 800cffc:	0800d01f 	.word	0x0800d01f
 800d000:	0800d035 	.word	0x0800d035
 800d004:	0800d04b 	.word	0x0800d04b
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800d008:	4b21      	ldr	r3, [pc, #132]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d00a:	22c0      	movs	r2, #192	; 0xc0
 800d00c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800d00e:	4b20      	ldr	r3, [pc, #128]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d010:	785b      	ldrb	r3, [r3, #1]
 800d012:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800d016:	b2da      	uxtb	r2, r3
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d01a:	705a      	strb	r2, [r3, #1]
			break;
 800d01c:	e021      	b.n	800d062 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800d01e:	4b1c      	ldr	r3, [pc, #112]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d020:	2280      	movs	r2, #128	; 0x80
 800d022:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800d024:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	4b18      	ldr	r3, [pc, #96]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d030:	705a      	strb	r2, [r3, #1]
			break;
 800d032:	e016      	b.n	800d062 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800d034:	4b16      	ldr	r3, [pc, #88]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d036:	22c0      	movs	r2, #192	; 0xc0
 800d038:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800d03a:	4b15      	ldr	r3, [pc, #84]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	f043 0320 	orr.w	r3, r3, #32
 800d042:	b2da      	uxtb	r2, r3
 800d044:	4b12      	ldr	r3, [pc, #72]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d046:	705a      	strb	r2, [r3, #1]
			break;
 800d048:	e00b      	b.n	800d062 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800d04a:	4b11      	ldr	r3, [pc, #68]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d04c:	2280      	movs	r2, #128	; 0x80
 800d04e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800d050:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	f043 0320 	orr.w	r3, r3, #32
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d05c:	705a      	strb	r2, [r3, #1]
			break;
 800d05e:	e000      	b.n	800d062 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800d060:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800d062:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	f043 030c 	orr.w	r3, r3, #12
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	4b08      	ldr	r3, [pc, #32]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d06e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	f043 0303 	orr.w	r3, r3, #3
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <CS43_Enable_RightLeft+0xb0>)
 800d07c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800d07e:	4905      	ldr	r1, [pc, #20]	; (800d094 <CS43_Enable_RightLeft+0xb4>)
 800d080:	2004      	movs	r0, #4
 800d082:	f7ff fe65 	bl	800cd50 <write_register>
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000002c 	.word	0x2000002c
 800d094:	2000002d 	.word	0x2000002d

0800d098 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	3b32      	subs	r3, #50	; 0x32
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800d0b6:	4a16      	ldr	r2, [pc, #88]	; (800d110 <CS43_SetVolume+0x78>)
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800d0bc:	4915      	ldr	r1, [pc, #84]	; (800d114 <CS43_SetVolume+0x7c>)
 800d0be:	2014      	movs	r0, #20
 800d0c0:	f7ff fe46 	bl	800cd50 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800d0c4:	4913      	ldr	r1, [pc, #76]	; (800d114 <CS43_SetVolume+0x7c>)
 800d0c6:	2015      	movs	r0, #21
 800d0c8:	f7ff fe42 	bl	800cd50 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	2b64      	cmp	r3, #100	; 0x64
 800d0d0:	d80e      	bhi.n	800d0f0 <CS43_SetVolume+0x58>
 800d0d2:	79fa      	ldrb	r2, [r7, #7]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	4a0e      	ldr	r2, [pc, #56]	; (800d118 <CS43_SetVolume+0x80>)
 800d0de:	fb82 1203 	smull	r1, r2, r2, r3
 800d0e2:	1152      	asrs	r2, r2, #5
 800d0e4:	17db      	asrs	r3, r3, #31
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	3b18      	subs	r3, #24
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	e000      	b.n	800d0f2 <CS43_SetVolume+0x5a>
 800d0f0:	2318      	movs	r3, #24
 800d0f2:	4a07      	ldr	r2, [pc, #28]	; (800d110 <CS43_SetVolume+0x78>)
 800d0f4:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800d0f6:	4907      	ldr	r1, [pc, #28]	; (800d114 <CS43_SetVolume+0x7c>)
 800d0f8:	2020      	movs	r0, #32
 800d0fa:	f7ff fe29 	bl	800cd50 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800d0fe:	4905      	ldr	r1, [pc, #20]	; (800d114 <CS43_SetVolume+0x7c>)
 800d100:	2021      	movs	r0, #33	; 0x21
 800d102:	f7ff fe25 	bl	800cd50 <write_register>
}
 800d106:	bf00      	nop
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	2000002c 	.word	0x2000002c
 800d114:	2000002d 	.word	0x2000002d
 800d118:	51eb851f 	.word	0x51eb851f

0800d11c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800d120:	4b1d      	ldr	r3, [pc, #116]	; (800d198 <CS43_Start+0x7c>)
 800d122:	2299      	movs	r2, #153	; 0x99
 800d124:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800d126:	491d      	ldr	r1, [pc, #116]	; (800d19c <CS43_Start+0x80>)
 800d128:	2000      	movs	r0, #0
 800d12a:	f7ff fe11 	bl	800cd50 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800d12e:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <CS43_Start+0x7c>)
 800d130:	2280      	movs	r2, #128	; 0x80
 800d132:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 800d134:	4919      	ldr	r1, [pc, #100]	; (800d19c <CS43_Start+0x80>)
 800d136:	2047      	movs	r0, #71	; 0x47
 800d138:	f7ff fe0a 	bl	800cd50 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800d13c:	4917      	ldr	r1, [pc, #92]	; (800d19c <CS43_Start+0x80>)
 800d13e:	2032      	movs	r0, #50	; 0x32
 800d140:	f7ff fe24 	bl	800cd8c <read_register>
	iData[1] |= 0x80;
 800d144:	4b14      	ldr	r3, [pc, #80]	; (800d198 <CS43_Start+0x7c>)
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <CS43_Start+0x7c>)
 800d150:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800d152:	4912      	ldr	r1, [pc, #72]	; (800d19c <CS43_Start+0x80>)
 800d154:	2032      	movs	r0, #50	; 0x32
 800d156:	f7ff fdfb 	bl	800cd50 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800d15a:	4910      	ldr	r1, [pc, #64]	; (800d19c <CS43_Start+0x80>)
 800d15c:	2032      	movs	r0, #50	; 0x32
 800d15e:	f7ff fe15 	bl	800cd8c <read_register>
	iData[1] &= ~(0x80);
 800d162:	4b0d      	ldr	r3, [pc, #52]	; (800d198 <CS43_Start+0x7c>)
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <CS43_Start+0x7c>)
 800d16e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800d170:	490a      	ldr	r1, [pc, #40]	; (800d19c <CS43_Start+0x80>)
 800d172:	2032      	movs	r0, #50	; 0x32
 800d174:	f7ff fdec 	bl	800cd50 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 800d178:	4b07      	ldr	r3, [pc, #28]	; (800d198 <CS43_Start+0x7c>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800d17e:	4907      	ldr	r1, [pc, #28]	; (800d19c <CS43_Start+0x80>)
 800d180:	2000      	movs	r0, #0
 800d182:	f7ff fde5 	bl	800cd50 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800d186:	4b04      	ldr	r3, [pc, #16]	; (800d198 <CS43_Start+0x7c>)
 800d188:	229e      	movs	r2, #158	; 0x9e
 800d18a:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800d18c:	4903      	ldr	r1, [pc, #12]	; (800d19c <CS43_Start+0x80>)
 800d18e:	2002      	movs	r0, #2
 800d190:	f7ff fdde 	bl	800cd50 <write_register>
}
 800d194:	bf00      	nop
 800d196:	bd80      	pop	{r7, pc}
 800d198:	2000002c 	.word	0x2000002c
 800d19c:	2000002d 	.word	0x2000002d

0800d1a0 <ADPCM_Decode>:
  * @brief  ADPCM_Decode.
  * @param code: a byte containing a 4-bit ADPCM sample. 
  * @retval : 16-bit ADPCM sample
  */
int16_t ADPCM_Decode(uint8_t code)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
  static int16_t  index = 0;
  static int32_t predsample = 0;
  uint16_t step=0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	817b      	strh	r3, [r7, #10]
  int32_t diffq=0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]
  
  step = StepSizeTable[index];
 800d1b2:	4b3b      	ldr	r3, [pc, #236]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d1b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4b3a      	ldr	r3, [pc, #232]	; (800d2a4 <ADPCM_Decode+0x104>)
 800d1bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d1c0:	817b      	strh	r3, [r7, #10]

  /* 2. inverse code into diff */
  diffq = step>> 3;
 800d1c2:	897b      	ldrh	r3, [r7, #10]
 800d1c4:	08db      	lsrs	r3, r3, #3
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	60fb      	str	r3, [r7, #12]
  if (code&4)
 800d1ca:	79fb      	ldrb	r3, [r7, #7]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <ADPCM_Decode+0x3c>
  {
    diffq += step;
 800d1d4:	897b      	ldrh	r3, [r7, #10]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	4413      	add	r3, r2
 800d1da:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&2)
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d006      	beq.n	800d1f4 <ADPCM_Decode+0x54>
  {
    diffq += step>>1;
 800d1e6:	897b      	ldrh	r3, [r7, #10]
 800d1e8:	085b      	lsrs	r3, r3, #1
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&1)
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	f003 0301 	and.w	r3, r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <ADPCM_Decode+0x6c>
  {
    diffq += step>>2;
 800d1fe:	897b      	ldrh	r3, [r7, #10]
 800d200:	089b      	lsrs	r3, r3, #2
 800d202:	b29b      	uxth	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	4413      	add	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
  }

  /* 3. add diff to predicted sample*/
  if (code&8)
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	f003 0308 	and.w	r3, r3, #8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d006      	beq.n	800d224 <ADPCM_Decode+0x84>
  {
    predsample -= diffq;
 800d216:	4b24      	ldr	r3, [pc, #144]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	e005      	b.n	800d230 <ADPCM_Decode+0x90>
  }
  else
  {
    predsample += diffq;
 800d224:	4b20      	ldr	r3, [pc, #128]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4413      	add	r3, r2
 800d22c:	4a1e      	ldr	r2, [pc, #120]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d22e:	6013      	str	r3, [r2, #0]
  }
  
  /* check for overflow*/
  if (predsample > 32767)
 800d230:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d238:	db04      	blt.n	800d244 <ADPCM_Decode+0xa4>
  {
    predsample = 32767;
 800d23a:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d23c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	e007      	b.n	800d254 <ADPCM_Decode+0xb4>
  }
  else if (predsample < -32768)
 800d244:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d24c:	da02      	bge.n	800d254 <ADPCM_Decode+0xb4>
  {
    predsample = -32768;
 800d24e:	4b16      	ldr	r3, [pc, #88]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d250:	4a16      	ldr	r2, [pc, #88]	; (800d2ac <ADPCM_Decode+0x10c>)
 800d252:	601a      	str	r2, [r3, #0]
  }

  /* 4. find new quantizer step size */
  index += IndexTable [code];
 800d254:	79fb      	ldrb	r3, [r7, #7]
 800d256:	4a16      	ldr	r2, [pc, #88]	; (800d2b0 <ADPCM_Decode+0x110>)
 800d258:	56d3      	ldrsb	r3, [r2, r3]
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d25e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d262:	b29b      	uxth	r3, r3
 800d264:	4413      	add	r3, r2
 800d266:	b29b      	uxth	r3, r3
 800d268:	b21a      	sxth	r2, r3
 800d26a:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d26c:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (index < 0)
 800d26e:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d270:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d274:	2b00      	cmp	r3, #0
 800d276:	da02      	bge.n	800d27e <ADPCM_Decode+0xde>
  {
    index = 0;
 800d278:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	801a      	strh	r2, [r3, #0]
  }
  if (index > 88)
 800d27e:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d280:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d284:	2b58      	cmp	r3, #88	; 0x58
 800d286:	dd02      	ble.n	800d28e <ADPCM_Decode+0xee>
  {
    index = 88;
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <ADPCM_Decode+0x100>)
 800d28a:	2258      	movs	r2, #88	; 0x58
 800d28c:	801a      	strh	r2, [r3, #0]
  
  /* 5. save predict sample and index for next iteration */
  /* done! static variables */
  
  /* 6. return new speech sample*/
  return ((int16_t)predsample);
 800d28e:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <ADPCM_Decode+0x108>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	b21b      	sxth	r3, r3
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20000084 	.word	0x20000084
 800d2a4:	08011b84 	.word	0x08011b84
 800d2a8:	20000088 	.word	0x20000088
 800d2ac:	ffff8000 	.word	0xffff8000
 800d2b0:	08011c38 	.word	0x08011c38

0800d2b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d2b4:	b590      	push	{r4, r7, lr}
 800d2b6:	b095      	sub	sp, #84	; 0x54
 800d2b8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800d2ba:	4b21      	ldr	r3, [pc, #132]	; (800d340 <main+0x8c>)
 800d2bc:	4a21      	ldr	r2, [pc, #132]	; (800d344 <main+0x90>)
 800d2be:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 800d2c0:	4b21      	ldr	r3, [pc, #132]	; (800d348 <main+0x94>)
 800d2c2:	22a6      	movs	r2, #166	; 0xa6
 800d2c4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d2c6:	f000 fd03 	bl	800dcd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d2ca:	f000 f851 	bl	800d370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d2ce:	f000 f9ab 	bl	800d628 <MX_GPIO_Init>
  MX_DMA_Init();
 800d2d2:	f000 f989 	bl	800d5e8 <MX_DMA_Init>
  MX_I2C1_Init();
 800d2d6:	f000 f8df 	bl	800d498 <MX_I2C1_Init>
  MX_I2S3_Init();
 800d2da:	f000 f90b 	bl	800d4f4 <MX_I2S3_Init>
  MX_DAC_Init();
 800d2de:	f000 f8b1 	bl	800d444 <MX_DAC_Init>
  MX_TIM2_Init();
 800d2e2:	f000 f935 	bl	800d550 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1);//, MODE_ANALOG);
 800d2e6:	4c19      	ldr	r4, [pc, #100]	; (800d34c <main+0x98>)
 800d2e8:	4668      	mov	r0, sp
 800d2ea:	f104 0310 	add.w	r3, r4, #16
 800d2ee:	2244      	movs	r2, #68	; 0x44
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f004 fc2d 	bl	8011b50 <memcpy>
 800d2f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d2fa:	f7ff fd69 	bl	800cdd0 <CS43_Init>
  CS43_SetVolume(50);
 800d2fe:	2032      	movs	r0, #50	; 0x32
 800d300:	f7ff feca 	bl	800d098 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800d304:	2003      	movs	r0, #3
 800d306:	f7ff fe6b 	bl	800cfe0 <CS43_Enable_RightLeft>
  CS43_Start();
 800d30a:	f7ff ff07 	bl	800d11c <CS43_Start>

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_dummy, 4);
 800d30e:	2204      	movs	r2, #4
 800d310:	490f      	ldr	r1, [pc, #60]	; (800d350 <main+0x9c>)
 800d312:	4810      	ldr	r0, [pc, #64]	; (800d354 <main+0xa0>)
 800d314:	f002 fd44 	bl	800fda0 <HAL_I2S_Transmit_DMA>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800d318:	2100      	movs	r1, #0
 800d31a:	480f      	ldr	r0, [pc, #60]	; (800d358 <main+0xa4>)
 800d31c:	f000 fe7d 	bl	800e01a <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 800d320:	480e      	ldr	r0, [pc, #56]	; (800d35c <main+0xa8>)
 800d322:	f003 ffb7 	bl	8011294 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	AudioFile.AudioFiles[0] = (uint32_t)&afnm;
 800d326:	4a0e      	ldr	r2, [pc, #56]	; (800d360 <main+0xac>)
 800d328:	4b0e      	ldr	r3, [pc, #56]	; (800d364 <main+0xb0>)
 800d32a:	601a      	str	r2, [r3, #0]
	AudioFile.AudioSize[0] = NELEMS(afnm);
 800d32c:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <main+0xb0>)
 800d32e:	f647 2212 	movw	r2, #31250	; 0x7a12
 800d332:	605a      	str	r2, [r3, #4]

  char* first = (char*)(0x08005000);
 800d334:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <main+0xb4>)
 800d336:	607b      	str	r3, [r7, #4]
  char* second = (char*)(0x08005001);
 800d338:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <main+0xb8>)
 800d33a:	603b      	str	r3, [r7, #0]
  while (1)
 800d33c:	e7fe      	b.n	800d33c <main+0x88>
 800d33e:	bf00      	nop
 800d340:	200001f4 	.word	0x200001f4
 800d344:	3bc49ba6 	.word	0x3bc49ba6
 800d348:	200001f8 	.word	0x200001f8
 800d34c:	200000b0 	.word	0x200000b0
 800d350:	200001fc 	.word	0x200001fc
 800d354:	20000104 	.word	0x20000104
 800d358:	2000009c 	.word	0x2000009c
 800d35c:	200001ac 	.word	0x200001ac
 800d360:	08005000 	.word	0x08005000
 800d364:	20000090 	.word	0x20000090
 800d368:	08005000 	.word	0x08005000
 800d36c:	08005001 	.word	0x08005001

0800d370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b094      	sub	sp, #80	; 0x50
 800d374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d376:	f107 0320 	add.w	r3, r7, #32
 800d37a:	2230      	movs	r2, #48	; 0x30
 800d37c:	2100      	movs	r1, #0
 800d37e:	4618      	mov	r0, r3
 800d380:	f004 fbba 	bl	8011af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d384:	f107 030c 	add.w	r3, r7, #12
 800d388:	2200      	movs	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]
 800d38c:	605a      	str	r2, [r3, #4]
 800d38e:	609a      	str	r2, [r3, #8]
 800d390:	60da      	str	r2, [r3, #12]
 800d392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d394:	2300      	movs	r3, #0
 800d396:	60bb      	str	r3, [r7, #8]
 800d398:	4b28      	ldr	r3, [pc, #160]	; (800d43c <SystemClock_Config+0xcc>)
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	4a27      	ldr	r2, [pc, #156]	; (800d43c <SystemClock_Config+0xcc>)
 800d39e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3a2:	6413      	str	r3, [r2, #64]	; 0x40
 800d3a4:	4b25      	ldr	r3, [pc, #148]	; (800d43c <SystemClock_Config+0xcc>)
 800d3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3ac:	60bb      	str	r3, [r7, #8]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	607b      	str	r3, [r7, #4]
 800d3b4:	4b22      	ldr	r3, [pc, #136]	; (800d440 <SystemClock_Config+0xd0>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a21      	ldr	r2, [pc, #132]	; (800d440 <SystemClock_Config+0xd0>)
 800d3ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	4b1f      	ldr	r3, [pc, #124]	; (800d440 <SystemClock_Config+0xd0>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3c8:	607b      	str	r3, [r7, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d3d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d3da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d3e0:	2304      	movs	r3, #4
 800d3e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800d3e4:	2340      	movs	r3, #64	; 0x40
 800d3e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d3ec:	2307      	movs	r3, #7
 800d3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d3f0:	f107 0320 	add.w	r3, r7, #32
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f003 f939 	bl	801066c <HAL_RCC_OscConfig>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d400:	f000 fa4e 	bl	800d8a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d404:	230f      	movs	r3, #15
 800d406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d408:	2302      	movs	r3, #2
 800d40a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d40c:	2300      	movs	r3, #0
 800d40e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d41a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d41c:	f107 030c 	add.w	r3, r7, #12
 800d420:	2102      	movs	r1, #2
 800d422:	4618      	mov	r0, r3
 800d424:	f003 fb9a 	bl	8010b5c <HAL_RCC_ClockConfig>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d42e:	f000 fa37 	bl	800d8a0 <Error_Handler>
  }
}
 800d432:	bf00      	nop
 800d434:	3750      	adds	r7, #80	; 0x50
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	40023800 	.word	0x40023800
 800d440:	40007000 	.word	0x40007000

0800d444 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800d44a:	463b      	mov	r3, r7
 800d44c:	2200      	movs	r2, #0
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800d452:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <MX_DAC_Init+0x4c>)
 800d454:	4a0f      	ldr	r2, [pc, #60]	; (800d494 <MX_DAC_Init+0x50>)
 800d456:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800d458:	480d      	ldr	r0, [pc, #52]	; (800d490 <MX_DAC_Init+0x4c>)
 800d45a:	f000 fdbc 	bl	800dfd6 <HAL_DAC_Init>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800d464:	f000 fa1c 	bl	800d8a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800d468:	2300      	movs	r3, #0
 800d46a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800d470:	463b      	mov	r3, r7
 800d472:	2200      	movs	r2, #0
 800d474:	4619      	mov	r1, r3
 800d476:	4806      	ldr	r0, [pc, #24]	; (800d490 <MX_DAC_Init+0x4c>)
 800d478:	f000 fe46 	bl	800e108 <HAL_DAC_ConfigChannel>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800d482:	f000 fa0d 	bl	800d8a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	2000009c 	.word	0x2000009c
 800d494:	40007400 	.word	0x40007400

0800d498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d49c:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d49e:	4a13      	ldr	r2, [pc, #76]	; (800d4ec <MX_I2C1_Init+0x54>)
 800d4a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d4a2:	4b11      	ldr	r3, [pc, #68]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4a4:	4a12      	ldr	r2, [pc, #72]	; (800d4f0 <MX_I2C1_Init+0x58>)
 800d4a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d4a8:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d4c2:	4b09      	ldr	r3, [pc, #36]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d4ce:	4b06      	ldr	r3, [pc, #24]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d4d4:	4804      	ldr	r0, [pc, #16]	; (800d4e8 <MX_I2C1_Init+0x50>)
 800d4d6:	f001 fb8d 	bl	800ebf4 <HAL_I2C_Init>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d4e0:	f000 f9de 	bl	800d8a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d4e4:	bf00      	nop
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	200000b0 	.word	0x200000b0
 800d4ec:	40005400 	.word	0x40005400
 800d4f0:	000186a0 	.word	0x000186a0

0800d4f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <MX_I2S3_Init+0x54>)
 800d4fa:	4a14      	ldr	r2, [pc, #80]	; (800d54c <MX_I2S3_Init+0x58>)
 800d4fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800d4fe:	4b12      	ldr	r3, [pc, #72]	; (800d548 <MX_I2S3_Init+0x54>)
 800d500:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d504:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800d506:	4b10      	ldr	r3, [pc, #64]	; (800d548 <MX_I2S3_Init+0x54>)
 800d508:	2200      	movs	r2, #0
 800d50a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800d50c:	4b0e      	ldr	r3, [pc, #56]	; (800d548 <MX_I2S3_Init+0x54>)
 800d50e:	2200      	movs	r2, #0
 800d510:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800d512:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <MX_I2S3_Init+0x54>)
 800d514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d518:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <MX_I2S3_Init+0x54>)
 800d51c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800d520:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800d522:	4b09      	ldr	r3, [pc, #36]	; (800d548 <MX_I2S3_Init+0x54>)
 800d524:	2200      	movs	r2, #0
 800d526:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800d528:	4b07      	ldr	r3, [pc, #28]	; (800d548 <MX_I2S3_Init+0x54>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800d52e:	4b06      	ldr	r3, [pc, #24]	; (800d548 <MX_I2S3_Init+0x54>)
 800d530:	2200      	movs	r2, #0
 800d532:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800d534:	4804      	ldr	r0, [pc, #16]	; (800d548 <MX_I2S3_Init+0x54>)
 800d536:	f002 faf3 	bl	800fb20 <HAL_I2S_Init>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800d540:	f000 f9ae 	bl	800d8a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800d544:	bf00      	nop
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20000104 	.word	0x20000104
 800d54c:	40003c00 	.word	0x40003c00

0800d550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	605a      	str	r2, [r3, #4]
 800d560:	609a      	str	r2, [r3, #8]
 800d562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d564:	463b      	mov	r3, r7
 800d566:	2200      	movs	r2, #0
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d56c:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d56e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800d574:	4b1b      	ldr	r3, [pc, #108]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d576:	2201      	movs	r2, #1
 800d578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d57a:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800d580:	4b18      	ldr	r3, [pc, #96]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d586:	4b17      	ldr	r3, [pc, #92]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d588:	2200      	movs	r2, #0
 800d58a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d58c:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d58e:	2200      	movs	r2, #0
 800d590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d592:	4814      	ldr	r0, [pc, #80]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d594:	f003 fe2e 	bl	80111f4 <HAL_TIM_Base_Init>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800d59e:	f000 f97f 	bl	800d8a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	480d      	ldr	r0, [pc, #52]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d5b0:	f003 ffe8 	bl	8011584 <HAL_TIM_ConfigClockSource>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800d5ba:	f000 f971 	bl	800d8a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d5be:	2320      	movs	r3, #32
 800d5c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4806      	ldr	r0, [pc, #24]	; (800d5e4 <MX_TIM2_Init+0x94>)
 800d5cc:	f004 fa04 	bl	80119d8 <HAL_TIMEx_MasterConfigSynchronization>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800d5d6:	f000 f963 	bl	800d8a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d5da:	bf00      	nop
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	200001ac 	.word	0x200001ac

0800d5e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <MX_DMA_Init+0x3c>)
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f6:	4a0b      	ldr	r2, [pc, #44]	; (800d624 <MX_DMA_Init+0x3c>)
 800d5f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5fc:	6313      	str	r3, [r2, #48]	; 0x30
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <MX_DMA_Init+0x3c>)
 800d600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d606:	607b      	str	r3, [r7, #4]
 800d608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800d60a:	2200      	movs	r2, #0
 800d60c:	2100      	movs	r1, #0
 800d60e:	2010      	movs	r0, #16
 800d610:	f000 fcab 	bl	800df6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800d614:	2010      	movs	r0, #16
 800d616:	f000 fcc4 	bl	800dfa2 <HAL_NVIC_EnableIRQ>

}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	40023800 	.word	0x40023800

0800d628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d62e:	f107 0314 	add.w	r3, r7, #20
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	605a      	str	r2, [r3, #4]
 800d638:	609a      	str	r2, [r3, #8]
 800d63a:	60da      	str	r2, [r3, #12]
 800d63c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d63e:	2300      	movs	r3, #0
 800d640:	613b      	str	r3, [r7, #16]
 800d642:	4b2e      	ldr	r3, [pc, #184]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	4a2d      	ldr	r2, [pc, #180]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d64c:	6313      	str	r3, [r2, #48]	; 0x30
 800d64e:	4b2b      	ldr	r3, [pc, #172]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d65a:	2300      	movs	r3, #0
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	4b27      	ldr	r3, [pc, #156]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d662:	4a26      	ldr	r2, [pc, #152]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d664:	f043 0301 	orr.w	r3, r3, #1
 800d668:	6313      	str	r3, [r2, #48]	; 0x30
 800d66a:	4b24      	ldr	r3, [pc, #144]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]
 800d67a:	4b20      	ldr	r3, [pc, #128]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	4a1f      	ldr	r2, [pc, #124]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d680:	f043 0308 	orr.w	r3, r3, #8
 800d684:	6313      	str	r3, [r2, #48]	; 0x30
 800d686:	4b1d      	ldr	r3, [pc, #116]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	f003 0308 	and.w	r3, r3, #8
 800d68e:	60bb      	str	r3, [r7, #8]
 800d690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d692:	2300      	movs	r3, #0
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	4b19      	ldr	r3, [pc, #100]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	4a18      	ldr	r2, [pc, #96]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d69c:	f043 0304 	orr.w	r3, r3, #4
 800d6a0:	6313      	str	r3, [r2, #48]	; 0x30
 800d6a2:	4b16      	ldr	r3, [pc, #88]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	607b      	str	r3, [r7, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	603b      	str	r3, [r7, #0]
 800d6b2:	4b12      	ldr	r3, [pc, #72]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	4a11      	ldr	r2, [pc, #68]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d6be:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <MX_GPIO_Init+0xd4>)
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	f003 0302 	and.w	r3, r3, #2
 800d6c6:	603b      	str	r3, [r7, #0]
 800d6c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 800d6d0:	480b      	ldr	r0, [pc, #44]	; (800d700 <MX_GPIO_Init+0xd8>)
 800d6d2:	f001 fa75 	bl	800ebc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800d6d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 800d6da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d6e8:	f107 0314 	add.w	r3, r7, #20
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4804      	ldr	r0, [pc, #16]	; (800d700 <MX_GPIO_Init+0xd8>)
 800d6f0:	f001 f8ca 	bl	800e888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d6f4:	bf00      	nop
 800d6f6:	3728      	adds	r7, #40	; 0x28
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	40023800 	.word	0x40023800
 800d700:	40020c00 	.word	0x40020c00

0800d704 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
//		i_t++;
//		if(i_t>= sample_N) i_t = 0;
//	}


	if(htim->Instance == TIM2)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d714:	f040 80ac 	bne.w	800d870 <HAL_TIM_PeriodElapsedCallback+0x16c>
		static uint8_t repetition = 0;
		static uint16_t sample_position = 0;
		static unsigned char *RawAudio;
		static uint8_t PrevAudioFileToPlay = 0xFF;

		if(PrevAudioFileToPlay != AudioFileToPlay)
 800d718:	4b57      	ldr	r3, [pc, #348]	; (800d878 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800d71a:	781a      	ldrb	r2, [r3, #0]
 800d71c:	4b57      	ldr	r3, [pc, #348]	; (800d87c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d015      	beq.n	800d750 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			PrevAudioFileToPlay = AudioFileToPlay;
 800d724:	4b55      	ldr	r3, [pc, #340]	; (800d87c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800d726:	781a      	ldrb	r2, [r3, #0]
 800d728:	4b53      	ldr	r3, [pc, #332]	; (800d878 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800d72a:	701a      	strb	r2, [r3, #0]
			nibble = 1;
 800d72c:	4b54      	ldr	r3, [pc, #336]	; (800d880 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800d72e:	2201      	movs	r2, #1
 800d730:	701a      	strb	r2, [r3, #0]
			repetition = 0;
 800d732:	4b54      	ldr	r3, [pc, #336]	; (800d884 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
			sample_position = 0;
 800d738:	4b53      	ldr	r3, [pc, #332]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	801a      	strh	r2, [r3, #0]
			RawAudio = (unsigned char *)AudioFile.AudioFiles[AudioFileToPlay];
 800d73e:	4b4f      	ldr	r3, [pc, #316]	; (800d87c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	461a      	mov	r2, r3
 800d744:	4b51      	ldr	r3, [pc, #324]	; (800d88c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800d746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74a:	461a      	mov	r2, r3
 800d74c:	4b50      	ldr	r3, [pc, #320]	; (800d890 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800d74e:	601a      	str	r2, [r3, #0]
		}



			if ((repetition==0) & (sample_position < AudioFile.AudioSize[AudioFileToPlay]))
 800d750:	4b4c      	ldr	r3, [pc, #304]	; (800d884 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	bf0c      	ite	eq
 800d758:	2301      	moveq	r3, #1
 800d75a:	2300      	movne	r3, #0
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	4b4a      	ldr	r3, [pc, #296]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	4b45      	ldr	r3, [pc, #276]	; (800d87c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	4948      	ldr	r1, [pc, #288]	; (800d88c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	440b      	add	r3, r1
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	4298      	cmp	r0, r3
 800d772:	bf34      	ite	cc
 800d774:	2301      	movcc	r3, #1
 800d776:	2300      	movcs	r3, #0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	4013      	ands	r3, r2
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d04b      	beq.n	800d81a <HAL_TIM_PeriodElapsedCallback+0x116>
			{  // new sample is generated
				repetition = 7;	// reinitialize repetition down counter
 800d782:	4b40      	ldr	r3, [pc, #256]	; (800d884 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800d784:	2207      	movs	r2, #7
 800d786:	701a      	strb	r2, [r3, #0]
				if (nibble)
 800d788:	4b3d      	ldr	r3, [pc, #244]	; (800d880 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d008      	beq.n	800d7a2 <HAL_TIM_PeriodElapsedCallback+0x9e>
				{   // first 4 bits of the ADPCM byte decoded
					adpcmSample = (uint8_t)(RawAudio[sample_position] >> 4);
 800d790:	4b3f      	ldr	r3, [pc, #252]	; (800d890 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a3c      	ldr	r2, [pc, #240]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d796:	8812      	ldrh	r2, [r2, #0]
 800d798:	4413      	add	r3, r2
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	091b      	lsrs	r3, r3, #4
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	e00e      	b.n	800d7c0 <HAL_TIM_PeriodElapsedCallback+0xbc>
				}
				else
				{   // last 4 bits of the ADPCM byte decoded
					adpcmSample = (uint8_t)(RawAudio[sample_position] & 0x0F);
 800d7a2:	4b3b      	ldr	r3, [pc, #236]	; (800d890 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a38      	ldr	r2, [pc, #224]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d7a8:	8812      	ldrh	r2, [r2, #0]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	73fb      	strb	r3, [r7, #15]
					sample_position++ ;
 800d7b4:	4b34      	ldr	r3, [pc, #208]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	4b32      	ldr	r3, [pc, #200]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d7be:	801a      	strh	r2, [r3, #0]
				}

				nibble = (uint8_t)(!nibble);/* indicator inverted mean next interrupt will handle
 800d7c0:	4b2f      	ldr	r3, [pc, #188]	; (800d880 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bf0c      	ite	eq
 800d7c8:	2301      	moveq	r3, #1
 800d7ca:	2300      	movne	r3, #0
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	4b2b      	ldr	r3, [pc, #172]	; (800d880 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800d7d2:	701a      	strb	r2, [r3, #0]
																						 the second part of the byte.  */
				pcmSample = ADPCM_Decode(adpcmSample);
 800d7d4:	7bfb      	ldrb	r3, [r7, #15]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fce2 	bl	800d1a0 <ADPCM_Decode>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	4b2c      	ldr	r3, [pc, #176]	; (800d894 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800d7e2:	801a      	strh	r2, [r3, #0]

				// update sample
				newSample.uShort = (uint16_t)32768 + pcmSample;
 800d7e4:	4b2b      	ldr	r3, [pc, #172]	; (800d894 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	4b2a      	ldr	r3, [pc, #168]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d7f0:	801a      	strh	r2, [r3, #0]
				TIM2->CCR2 = newSample.uBytes[0]; //LSB
 800d7f2:	4b29      	ldr	r3, [pc, #164]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d7f4:	781a      	ldrb	r2, [r3, #0]
 800d7f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR1 = newSample.uBytes[1]; //MSB
 800d7fc:	4b26      	ldr	r3, [pc, #152]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d7fe:	785a      	ldrb	r2, [r3, #1]
 800d800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d804:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort)>>4);
 800d806:	4b24      	ldr	r3, [pc, #144]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	091b      	lsrs	r3, r3, #4
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	2200      	movs	r2, #0
 800d810:	2100      	movs	r1, #0
 800d812:	4822      	ldr	r0, [pc, #136]	; (800d89c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800d814:	f000 fc53 	bl	800e0be <HAL_DAC_SetValue>

	  /* USER CODE END TIM3_IRQn 0 */
	  /* USER CODE BEGIN TIM3_IRQn 1 */
	}
	  /* USER CODE END TIM3_IRQn 1 */
}
 800d818:	e02a      	b.n	800d870 <HAL_TIM_PeriodElapsedCallback+0x16c>
			else if (sample_position < AudioFile.AudioSize[AudioFileToPlay])
 800d81a:	4b1b      	ldr	r3, [pc, #108]	; (800d888 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	4b16      	ldr	r3, [pc, #88]	; (800d87c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4a19      	ldr	r2, [pc, #100]	; (800d88c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	4299      	cmp	r1, r3
 800d82e:	d21f      	bcs.n	800d870 <HAL_TIM_PeriodElapsedCallback+0x16c>
				repetition--;
 800d830:	4b14      	ldr	r3, [pc, #80]	; (800d884 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	3b01      	subs	r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	4b12      	ldr	r3, [pc, #72]	; (800d884 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800d83a:	701a      	strb	r2, [r3, #0]
				newSample.uShort = (uint16_t)32768 + pcmSample;
 800d83c:	4b15      	ldr	r3, [pc, #84]	; (800d894 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d844:	b29a      	uxth	r2, r3
 800d846:	4b14      	ldr	r3, [pc, #80]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d848:	801a      	strh	r2, [r3, #0]
				TIM2->CCR2 = newSample.uBytes[0]; //LSB
 800d84a:	4b13      	ldr	r3, [pc, #76]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d84c:	781a      	ldrb	r2, [r3, #0]
 800d84e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d852:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR1 = newSample.uBytes[1]; //MSB
 800d854:	4b10      	ldr	r3, [pc, #64]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d856:	785a      	ldrb	r2, [r3, #1]
 800d858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d85c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort)>>4);
 800d85e:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	091b      	lsrs	r3, r3, #4
 800d864:	b29b      	uxth	r3, r3
 800d866:	2200      	movs	r2, #0
 800d868:	2100      	movs	r1, #0
 800d86a:	480c      	ldr	r0, [pc, #48]	; (800d89c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800d86c:	f000 fc27 	bl	800e0be <HAL_DAC_SetValue>
}
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20000000 	.word	0x20000000
 800d87c:	20000098 	.word	0x20000098
 800d880:	20000001 	.word	0x20000001
 800d884:	20000204 	.word	0x20000204
 800d888:	20000206 	.word	0x20000206
 800d88c:	20000090 	.word	0x20000090
 800d890:	20000208 	.word	0x20000208
 800d894:	2000020c 	.word	0x2000020c
 800d898:	2000008c 	.word	0x2000008c
 800d89c:	2000009c 	.word	0x2000009c

0800d8a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d8a4:	b672      	cpsid	i
}
 800d8a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d8a8:	e7fe      	b.n	800d8a8 <Error_Handler+0x8>
	...

0800d8ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	607b      	str	r3, [r7, #4]
 800d8b6:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ba:	4a0f      	ldr	r2, [pc, #60]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8c0:	6453      	str	r3, [r2, #68]	; 0x44
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8ca:	607b      	str	r3, [r7, #4]
 800d8cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	603b      	str	r3, [r7, #0]
 800d8d2:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d6:	4a08      	ldr	r2, [pc, #32]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8dc:	6413      	str	r3, [r2, #64]	; 0x40
 800d8de:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <HAL_MspInit+0x4c>)
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e6:	603b      	str	r3, [r7, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800d8ea:	2007      	movs	r0, #7
 800d8ec:	f000 fb32 	bl	800df54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	40023800 	.word	0x40023800

0800d8fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	; 0x28
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d904:	f107 0314 	add.w	r3, r7, #20
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	605a      	str	r2, [r3, #4]
 800d90e:	609a      	str	r2, [r3, #8]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a17      	ldr	r2, [pc, #92]	; (800d978 <HAL_DAC_MspInit+0x7c>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d127      	bne.n	800d96e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800d91e:	2300      	movs	r3, #0
 800d920:	613b      	str	r3, [r7, #16]
 800d922:	4b16      	ldr	r3, [pc, #88]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d926:	4a15      	ldr	r2, [pc, #84]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d92c:	6413      	str	r3, [r2, #64]	; 0x40
 800d92e:	4b13      	ldr	r3, [pc, #76]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d936:	613b      	str	r3, [r7, #16]
 800d938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	4b0f      	ldr	r3, [pc, #60]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d942:	4a0e      	ldr	r2, [pc, #56]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d944:	f043 0301 	orr.w	r3, r3, #1
 800d948:	6313      	str	r3, [r2, #48]	; 0x30
 800d94a:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <HAL_DAC_MspInit+0x80>)
 800d94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d956:	2310      	movs	r3, #16
 800d958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d95a:	2303      	movs	r3, #3
 800d95c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d962:	f107 0314 	add.w	r3, r7, #20
 800d966:	4619      	mov	r1, r3
 800d968:	4805      	ldr	r0, [pc, #20]	; (800d980 <HAL_DAC_MspInit+0x84>)
 800d96a:	f000 ff8d 	bl	800e888 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800d96e:	bf00      	nop
 800d970:	3728      	adds	r7, #40	; 0x28
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	40007400 	.word	0x40007400
 800d97c:	40023800 	.word	0x40023800
 800d980:	40020000 	.word	0x40020000

0800d984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	; 0x28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d98c:	f107 0314 	add.w	r3, r7, #20
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	605a      	str	r2, [r3, #4]
 800d996:	609a      	str	r2, [r3, #8]
 800d998:	60da      	str	r2, [r3, #12]
 800d99a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a19      	ldr	r2, [pc, #100]	; (800da08 <HAL_I2C_MspInit+0x84>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d12c      	bne.n	800da00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	4b18      	ldr	r3, [pc, #96]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ae:	4a17      	ldr	r2, [pc, #92]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9b0:	f043 0302 	orr.w	r3, r3, #2
 800d9b4:	6313      	str	r3, [r2, #48]	; 0x30
 800d9b6:	4b15      	ldr	r3, [pc, #84]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	613b      	str	r3, [r7, #16]
 800d9c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800d9c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 800d9c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d9c8:	2312      	movs	r3, #18
 800d9ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d9d4:	2304      	movs	r3, #4
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9d8:	f107 0314 	add.w	r3, r7, #20
 800d9dc:	4619      	mov	r1, r3
 800d9de:	480c      	ldr	r0, [pc, #48]	; (800da10 <HAL_I2C_MspInit+0x8c>)
 800d9e0:	f000 ff52 	bl	800e888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	4b08      	ldr	r3, [pc, #32]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ec:	4a07      	ldr	r2, [pc, #28]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9f2:	6413      	str	r3, [r2, #64]	; 0x40
 800d9f4:	4b05      	ldr	r3, [pc, #20]	; (800da0c <HAL_I2C_MspInit+0x88>)
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800da00:	bf00      	nop
 800da02:	3728      	adds	r7, #40	; 0x28
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	40005400 	.word	0x40005400
 800da0c:	40023800 	.word	0x40023800
 800da10:	40020400 	.word	0x40020400

0800da14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08e      	sub	sp, #56	; 0x38
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	605a      	str	r2, [r3, #4]
 800da26:	609a      	str	r2, [r3, #8]
 800da28:	60da      	str	r2, [r3, #12]
 800da2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da2c:	f107 0314 	add.w	r3, r7, #20
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	605a      	str	r2, [r3, #4]
 800da36:	609a      	str	r2, [r3, #8]
 800da38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a4e      	ldr	r2, [pc, #312]	; (800db78 <HAL_I2S_MspInit+0x164>)
 800da40:	4293      	cmp	r3, r2
 800da42:	f040 8095 	bne.w	800db70 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800da46:	2301      	movs	r3, #1
 800da48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800da4a:	2332      	movs	r3, #50	; 0x32
 800da4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800da4e:	2302      	movs	r3, #2
 800da50:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da52:	f107 0314 	add.w	r3, r7, #20
 800da56:	4618      	mov	r0, r3
 800da58:	f003 fa8c 	bl	8010f74 <HAL_RCCEx_PeriphCLKConfig>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800da62:	f7ff ff1d 	bl	800d8a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800da66:	2300      	movs	r3, #0
 800da68:	613b      	str	r3, [r7, #16]
 800da6a:	4b44      	ldr	r3, [pc, #272]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6e:	4a43      	ldr	r2, [pc, #268]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da74:	6413      	str	r3, [r2, #64]	; 0x40
 800da76:	4b41      	ldr	r3, [pc, #260]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da7e:	613b      	str	r3, [r7, #16]
 800da80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	4b3d      	ldr	r3, [pc, #244]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	4a3c      	ldr	r2, [pc, #240]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da8c:	f043 0304 	orr.w	r3, r3, #4
 800da90:	6313      	str	r3, [r2, #48]	; 0x30
 800da92:	4b3a      	ldr	r3, [pc, #232]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800da94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da96:	f003 0304 	and.w	r3, r3, #4
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da9e:	2300      	movs	r3, #0
 800daa0:	60bb      	str	r3, [r7, #8]
 800daa2:	4b36      	ldr	r3, [pc, #216]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800daa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa6:	4a35      	ldr	r2, [pc, #212]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800daa8:	f043 0301 	orr.w	r3, r3, #1
 800daac:	6313      	str	r3, [r2, #48]	; 0x30
 800daae:	4b33      	ldr	r3, [pc, #204]	; (800db7c <HAL_I2S_MspInit+0x168>)
 800dab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	60bb      	str	r3, [r7, #8]
 800dab8:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800daba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dac0:	2302      	movs	r3, #2
 800dac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dac8:	2300      	movs	r3, #0
 800daca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800dacc:	2306      	movs	r3, #6
 800dace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dad4:	4619      	mov	r1, r3
 800dad6:	482a      	ldr	r0, [pc, #168]	; (800db80 <HAL_I2S_MspInit+0x16c>)
 800dad8:	f000 fed6 	bl	800e888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800dadc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dae2:	2302      	movs	r3, #2
 800dae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800daea:	2300      	movs	r3, #0
 800daec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800daee:	2306      	movs	r3, #6
 800daf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daf6:	4619      	mov	r1, r3
 800daf8:	4822      	ldr	r0, [pc, #136]	; (800db84 <HAL_I2S_MspInit+0x170>)
 800dafa:	f000 fec5 	bl	800e888 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800dafe:	4b22      	ldr	r3, [pc, #136]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db00:	4a22      	ldr	r2, [pc, #136]	; (800db8c <HAL_I2S_MspInit+0x178>)
 800db02:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800db04:	4b20      	ldr	r3, [pc, #128]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db06:	2200      	movs	r2, #0
 800db08:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800db0a:	4b1f      	ldr	r3, [pc, #124]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db0c:	2240      	movs	r2, #64	; 0x40
 800db0e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800db10:	4b1d      	ldr	r3, [pc, #116]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db12:	2200      	movs	r2, #0
 800db14:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800db16:	4b1c      	ldr	r3, [pc, #112]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db1c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800db1e:	4b1a      	ldr	r3, [pc, #104]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db24:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800db26:	4b18      	ldr	r3, [pc, #96]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800db2c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800db2e:	4b16      	ldr	r3, [pc, #88]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db34:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db38:	2200      	movs	r2, #0
 800db3a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800db3c:	4b12      	ldr	r3, [pc, #72]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db3e:	2204      	movs	r2, #4
 800db40:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800db42:	4b11      	ldr	r3, [pc, #68]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db44:	2203      	movs	r2, #3
 800db46:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800db48:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800db4e:	4b0e      	ldr	r3, [pc, #56]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db50:	2200      	movs	r2, #0
 800db52:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800db54:	480c      	ldr	r0, [pc, #48]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db56:	f000 fb27 	bl	800e1a8 <HAL_DMA_Init>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 800db60:	f7ff fe9e 	bl	800d8a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a08      	ldr	r2, [pc, #32]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db68:	639a      	str	r2, [r3, #56]	; 0x38
 800db6a:	4a07      	ldr	r2, [pc, #28]	; (800db88 <HAL_I2S_MspInit+0x174>)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800db70:	bf00      	nop
 800db72:	3738      	adds	r7, #56	; 0x38
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	40003c00 	.word	0x40003c00
 800db7c:	40023800 	.word	0x40023800
 800db80:	40020800 	.word	0x40020800
 800db84:	40020000 	.word	0x40020000
 800db88:	2000014c 	.word	0x2000014c
 800db8c:	40026088 	.word	0x40026088

0800db90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dba0:	d115      	bne.n	800dbce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	4b0c      	ldr	r3, [pc, #48]	; (800dbd8 <HAL_TIM_Base_MspInit+0x48>)
 800dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbaa:	4a0b      	ldr	r2, [pc, #44]	; (800dbd8 <HAL_TIM_Base_MspInit+0x48>)
 800dbac:	f043 0301 	orr.w	r3, r3, #1
 800dbb0:	6413      	str	r3, [r2, #64]	; 0x40
 800dbb2:	4b09      	ldr	r3, [pc, #36]	; (800dbd8 <HAL_TIM_Base_MspInit+0x48>)
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	201c      	movs	r0, #28
 800dbc4:	f000 f9d1 	bl	800df6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800dbc8:	201c      	movs	r0, #28
 800dbca:	f000 f9ea 	bl	800dfa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	40023800 	.word	0x40023800

0800dbdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dbe0:	e7fe      	b.n	800dbe0 <NMI_Handler+0x4>

0800dbe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbe6:	e7fe      	b.n	800dbe6 <HardFault_Handler+0x4>

0800dbe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dbec:	e7fe      	b.n	800dbec <MemManage_Handler+0x4>

0800dbee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dbf2:	e7fe      	b.n	800dbf2 <BusFault_Handler+0x4>

0800dbf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dbf8:	e7fe      	b.n	800dbf8 <UsageFault_Handler+0x4>

0800dbfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dbfe:	bf00      	nop
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dc0c:	bf00      	nop
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dc16:	b480      	push	{r7}
 800dc18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc1a:	bf00      	nop
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc28:	f000 f8a4 	bl	800dd74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dc2c:	bf00      	nop
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800dc34:	4802      	ldr	r0, [pc, #8]	; (800dc40 <DMA1_Stream5_IRQHandler+0x10>)
 800dc36:	f000 fbbd 	bl	800e3b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800dc3a:	bf00      	nop
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	2000014c 	.word	0x2000014c

0800dc44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800dc48:	4802      	ldr	r0, [pc, #8]	; (800dc54 <TIM2_IRQHandler+0x10>)
 800dc4a:	f003 fb93 	bl	8011374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800dc4e:	bf00      	nop
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	200001ac 	.word	0x200001ac

0800dc58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dc5c:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <SystemInit+0x20>)
 800dc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc62:	4a05      	ldr	r2, [pc, #20]	; (800dc78 <SystemInit+0x20>)
 800dc64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dc6c:	bf00      	nop
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	e000ed00 	.word	0xe000ed00

0800dc7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800dc7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dcb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800dc80:	480d      	ldr	r0, [pc, #52]	; (800dcb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800dc82:	490e      	ldr	r1, [pc, #56]	; (800dcbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800dc84:	4a0e      	ldr	r2, [pc, #56]	; (800dcc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800dc86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dc88:	e002      	b.n	800dc90 <LoopCopyDataInit>

0800dc8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dc8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dc8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dc8e:	3304      	adds	r3, #4

0800dc90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dc90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dc92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dc94:	d3f9      	bcc.n	800dc8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dc96:	4a0b      	ldr	r2, [pc, #44]	; (800dcc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800dc98:	4c0b      	ldr	r4, [pc, #44]	; (800dcc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800dc9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dc9c:	e001      	b.n	800dca2 <LoopFillZerobss>

0800dc9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dc9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dca0:	3204      	adds	r2, #4

0800dca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dca4:	d3fb      	bcc.n	800dc9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dca6:	f7ff ffd7 	bl	800dc58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dcaa:	f003 ff2d 	bl	8011b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dcae:	f7ff fb01 	bl	800d2b4 <main>
  bx  lr    
 800dcb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800dcb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dcb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dcbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800dcc0:	08011c78 	.word	0x08011c78
  ldr r2, =_sbss
 800dcc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800dcc8:	20000214 	.word	0x20000214

0800dccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dccc:	e7fe      	b.n	800dccc <ADC_IRQHandler>
	...

0800dcd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dcd4:	4b0e      	ldr	r3, [pc, #56]	; (800dd10 <HAL_Init+0x40>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a0d      	ldr	r2, [pc, #52]	; (800dd10 <HAL_Init+0x40>)
 800dcda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800dce0:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <HAL_Init+0x40>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a0a      	ldr	r2, [pc, #40]	; (800dd10 <HAL_Init+0x40>)
 800dce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dcec:	4b08      	ldr	r3, [pc, #32]	; (800dd10 <HAL_Init+0x40>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a07      	ldr	r2, [pc, #28]	; (800dd10 <HAL_Init+0x40>)
 800dcf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dcf8:	2003      	movs	r0, #3
 800dcfa:	f000 f92b 	bl	800df54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dcfe:	2000      	movs	r0, #0
 800dd00:	f000 f808 	bl	800dd14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dd04:	f7ff fdd2 	bl	800d8ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	40023c00 	.word	0x40023c00

0800dd14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dd1c:	4b12      	ldr	r3, [pc, #72]	; (800dd68 <HAL_InitTick+0x54>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <HAL_InitTick+0x58>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	4619      	mov	r1, r3
 800dd26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 f943 	bl	800dfbe <HAL_SYSTICK_Config>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e00e      	b.n	800dd60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b0f      	cmp	r3, #15
 800dd46:	d80a      	bhi.n	800dd5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dd48:	2200      	movs	r2, #0
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd50:	f000 f90b 	bl	800df6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800dd54:	4a06      	ldr	r2, [pc, #24]	; (800dd70 <HAL_InitTick+0x5c>)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e000      	b.n	800dd60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	20000004 	.word	0x20000004
 800dd6c:	2000000c 	.word	0x2000000c
 800dd70:	20000008 	.word	0x20000008

0800dd74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dd78:	4b06      	ldr	r3, [pc, #24]	; (800dd94 <HAL_IncTick+0x20>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <HAL_IncTick+0x24>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4413      	add	r3, r2
 800dd84:	4a04      	ldr	r2, [pc, #16]	; (800dd98 <HAL_IncTick+0x24>)
 800dd86:	6013      	str	r3, [r2, #0]
}
 800dd88:	bf00      	nop
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	2000000c 	.word	0x2000000c
 800dd98:	20000210 	.word	0x20000210

0800dd9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
  return uwTick;
 800dda0:	4b03      	ldr	r3, [pc, #12]	; (800ddb0 <HAL_GetTick+0x14>)
 800dda2:	681b      	ldr	r3, [r3, #0]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	20000210 	.word	0x20000210

0800ddb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <__NVIC_SetPriorityGrouping+0x44>)
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dde0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dde4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dde6:	4a04      	ldr	r2, [pc, #16]	; (800ddf8 <__NVIC_SetPriorityGrouping+0x44>)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	60d3      	str	r3, [r2, #12]
}
 800ddec:	bf00      	nop
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	e000ed00 	.word	0xe000ed00

0800ddfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800de00:	4b04      	ldr	r3, [pc, #16]	; (800de14 <__NVIC_GetPriorityGrouping+0x18>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	f003 0307 	and.w	r3, r3, #7
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	e000ed00 	.word	0xe000ed00

0800de18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	4603      	mov	r3, r0
 800de20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de26:	2b00      	cmp	r3, #0
 800de28:	db0b      	blt.n	800de42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	f003 021f 	and.w	r2, r3, #31
 800de30:	4907      	ldr	r1, [pc, #28]	; (800de50 <__NVIC_EnableIRQ+0x38>)
 800de32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	2001      	movs	r0, #1
 800de3a:	fa00 f202 	lsl.w	r2, r0, r2
 800de3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800de42:	bf00      	nop
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	e000e100 	.word	0xe000e100

0800de54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	4603      	mov	r3, r0
 800de5c:	6039      	str	r1, [r7, #0]
 800de5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de64:	2b00      	cmp	r3, #0
 800de66:	db0a      	blt.n	800de7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	490c      	ldr	r1, [pc, #48]	; (800dea0 <__NVIC_SetPriority+0x4c>)
 800de6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de72:	0112      	lsls	r2, r2, #4
 800de74:	b2d2      	uxtb	r2, r2
 800de76:	440b      	add	r3, r1
 800de78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800de7c:	e00a      	b.n	800de94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	b2da      	uxtb	r2, r3
 800de82:	4908      	ldr	r1, [pc, #32]	; (800dea4 <__NVIC_SetPriority+0x50>)
 800de84:	79fb      	ldrb	r3, [r7, #7]
 800de86:	f003 030f 	and.w	r3, r3, #15
 800de8a:	3b04      	subs	r3, #4
 800de8c:	0112      	lsls	r2, r2, #4
 800de8e:	b2d2      	uxtb	r2, r2
 800de90:	440b      	add	r3, r1
 800de92:	761a      	strb	r2, [r3, #24]
}
 800de94:	bf00      	nop
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	e000e100 	.word	0xe000e100
 800dea4:	e000ed00 	.word	0xe000ed00

0800dea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b089      	sub	sp, #36	; 0x24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	f1c3 0307 	rsb	r3, r3, #7
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	bf28      	it	cs
 800dec6:	2304      	movcs	r3, #4
 800dec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	3304      	adds	r3, #4
 800dece:	2b06      	cmp	r3, #6
 800ded0:	d902      	bls.n	800ded8 <NVIC_EncodePriority+0x30>
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	3b03      	subs	r3, #3
 800ded6:	e000      	b.n	800deda <NVIC_EncodePriority+0x32>
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dedc:	f04f 32ff 	mov.w	r2, #4294967295
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	fa02 f303 	lsl.w	r3, r2, r3
 800dee6:	43da      	mvns	r2, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	401a      	ands	r2, r3
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800def0:	f04f 31ff 	mov.w	r1, #4294967295
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	fa01 f303 	lsl.w	r3, r1, r3
 800defa:	43d9      	mvns	r1, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df00:	4313      	orrs	r3, r2
         );
}
 800df02:	4618      	mov	r0, r3
 800df04:	3724      	adds	r7, #36	; 0x24
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
	...

0800df10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df20:	d301      	bcc.n	800df26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800df22:	2301      	movs	r3, #1
 800df24:	e00f      	b.n	800df46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800df26:	4a0a      	ldr	r2, [pc, #40]	; (800df50 <SysTick_Config+0x40>)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800df2e:	210f      	movs	r1, #15
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	f7ff ff8e 	bl	800de54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800df38:	4b05      	ldr	r3, [pc, #20]	; (800df50 <SysTick_Config+0x40>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800df3e:	4b04      	ldr	r3, [pc, #16]	; (800df50 <SysTick_Config+0x40>)
 800df40:	2207      	movs	r2, #7
 800df42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	e000e010 	.word	0xe000e010

0800df54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff ff29 	bl	800ddb4 <__NVIC_SetPriorityGrouping>
}
 800df62:	bf00      	nop
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	4603      	mov	r3, r0
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	607a      	str	r2, [r7, #4]
 800df76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800df7c:	f7ff ff3e 	bl	800ddfc <__NVIC_GetPriorityGrouping>
 800df80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	68b9      	ldr	r1, [r7, #8]
 800df86:	6978      	ldr	r0, [r7, #20]
 800df88:	f7ff ff8e 	bl	800dea8 <NVIC_EncodePriority>
 800df8c:	4602      	mov	r2, r0
 800df8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df92:	4611      	mov	r1, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff ff5d 	bl	800de54 <__NVIC_SetPriority>
}
 800df9a:	bf00      	nop
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dfac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff ff31 	bl	800de18 <__NVIC_EnableIRQ>
}
 800dfb6:	bf00      	nop
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff ffa2 	bl	800df10 <SysTick_Config>
 800dfcc:	4603      	mov	r3, r0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e014      	b.n	800e012 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	791b      	ldrb	r3, [r3, #4]
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d105      	bne.n	800dffe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff fc7f 	bl	800d8fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2202      	movs	r2, #2
 800e002:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	795b      	ldrb	r3, [r3, #5]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d101      	bne.n	800e030 <HAL_DAC_Start+0x16>
 800e02c:	2302      	movs	r3, #2
 800e02e:	e040      	b.n	800e0b2 <HAL_DAC_Start+0x98>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2202      	movs	r2, #2
 800e03a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	2201      	movs	r2, #1
 800e04a:	409a      	lsls	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	430a      	orrs	r2, r1
 800e052:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10f      	bne.n	800e07a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800e064:	2b3c      	cmp	r3, #60	; 0x3c
 800e066:	d11d      	bne.n	800e0a4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	685a      	ldr	r2, [r3, #4]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0201 	orr.w	r2, r2, #1
 800e076:	605a      	str	r2, [r3, #4]
 800e078:	e014      	b.n	800e0a4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	f003 0310 	and.w	r3, r3, #16
 800e08a:	213c      	movs	r1, #60	; 0x3c
 800e08c:	fa01 f303 	lsl.w	r3, r1, r3
 800e090:	429a      	cmp	r2, r3
 800e092:	d107      	bne.n	800e0a4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f042 0202 	orr.w	r2, r2, #2
 800e0a2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b087      	sub	sp, #28
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	60f8      	str	r0, [r7, #12]
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	607a      	str	r2, [r7, #4]
 800e0ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d105      	bne.n	800e0e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e004      	b.n	800e0f2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	3314      	adds	r3, #20
 800e0f0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	371c      	adds	r7, #28
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	795b      	ldrb	r3, [r3, #5]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d101      	bne.n	800e120 <HAL_DAC_ConfigChannel+0x18>
 800e11c:	2302      	movs	r3, #2
 800e11e:	e03c      	b.n	800e19a <HAL_DAC_ConfigChannel+0x92>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2201      	movs	r2, #1
 800e124:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2202      	movs	r2, #2
 800e12a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f003 0310 	and.w	r3, r3, #16
 800e13a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800e13e:	fa02 f303 	lsl.w	r3, r2, r3
 800e142:	43db      	mvns	r3, r3
 800e144:	697a      	ldr	r2, [r7, #20]
 800e146:	4013      	ands	r3, r2
 800e148:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	4313      	orrs	r3, r2
 800e154:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f003 0310 	and.w	r3, r3, #16
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	fa02 f303 	lsl.w	r3, r2, r3
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	4313      	orrs	r3, r2
 800e166:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6819      	ldr	r1, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f003 0310 	and.w	r3, r3, #16
 800e17c:	22c0      	movs	r2, #192	; 0xc0
 800e17e:	fa02 f303 	lsl.w	r3, r2, r3
 800e182:	43da      	mvns	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	400a      	ands	r2, r1
 800e18a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2201      	movs	r2, #1
 800e190:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e1b4:	f7ff fdf2 	bl	800dd9c <HAL_GetTick>
 800e1b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e099      	b.n	800e2f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f022 0201 	bic.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e1e4:	e00f      	b.n	800e206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e1e6:	f7ff fdd9 	bl	800dd9c <HAL_GetTick>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	2b05      	cmp	r3, #5
 800e1f2:	d908      	bls.n	800e206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2220      	movs	r2, #32
 800e1f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2203      	movs	r2, #3
 800e1fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e202:	2303      	movs	r3, #3
 800e204:	e078      	b.n	800e2f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1e8      	bne.n	800e1e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	4b38      	ldr	r3, [pc, #224]	; (800e300 <HAL_DMA_Init+0x158>)
 800e220:	4013      	ands	r3, r2
 800e222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e23e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e24a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a1b      	ldr	r3, [r3, #32]
 800e250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	4313      	orrs	r3, r2
 800e256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d107      	bne.n	800e270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e268:	4313      	orrs	r3, r2
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f023 0307 	bic.w	r3, r3, #7
 800e286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	4313      	orrs	r3, r2
 800e290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	2b04      	cmp	r3, #4
 800e298:	d117      	bne.n	800e2ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00e      	beq.n	800e2ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 fa6f 	bl	800e790 <DMA_CheckFifoParam>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d008      	beq.n	800e2ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2240      	movs	r2, #64	; 0x40
 800e2bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e016      	b.n	800e2f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa26 	bl	800e724 <DMA_CalcBaseAndBitshift>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2e0:	223f      	movs	r2, #63	; 0x3f
 800e2e2:	409a      	lsls	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	f010803f 	.word	0xf010803f

0800e304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e312:	2300      	movs	r3, #0
 800e314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e322:	2b01      	cmp	r3, #1
 800e324:	d101      	bne.n	800e32a <HAL_DMA_Start_IT+0x26>
 800e326:	2302      	movs	r3, #2
 800e328:	e040      	b.n	800e3ac <HAL_DMA_Start_IT+0xa8>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d12f      	bne.n	800e39e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2202      	movs	r2, #2
 800e342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	68b9      	ldr	r1, [r7, #8]
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f000 f9b8 	bl	800e6c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e35c:	223f      	movs	r2, #63	; 0x3f
 800e35e:	409a      	lsls	r2, r3
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f042 0216 	orr.w	r2, r2, #22
 800e372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d007      	beq.n	800e38c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f042 0208 	orr.w	r2, r2, #8
 800e38a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f042 0201 	orr.w	r2, r2, #1
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	e005      	b.n	800e3aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b086      	sub	sp, #24
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e3c0:	4b8e      	ldr	r3, [pc, #568]	; (800e5fc <HAL_DMA_IRQHandler+0x248>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a8e      	ldr	r2, [pc, #568]	; (800e600 <HAL_DMA_IRQHandler+0x24c>)
 800e3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ca:	0a9b      	lsrs	r3, r3, #10
 800e3cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3de:	2208      	movs	r2, #8
 800e3e0:	409a      	lsls	r2, r3
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d01a      	beq.n	800e420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f003 0304 	and.w	r3, r3, #4
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d013      	beq.n	800e420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f022 0204 	bic.w	r2, r2, #4
 800e406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e40c:	2208      	movs	r2, #8
 800e40e:	409a      	lsls	r2, r3
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e418:	f043 0201 	orr.w	r2, r3, #1
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e424:	2201      	movs	r2, #1
 800e426:	409a      	lsls	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	4013      	ands	r3, r2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d012      	beq.n	800e456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00b      	beq.n	800e456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e442:	2201      	movs	r2, #1
 800e444:	409a      	lsls	r2, r3
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44e:	f043 0202 	orr.w	r2, r3, #2
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e45a:	2204      	movs	r2, #4
 800e45c:	409a      	lsls	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	4013      	ands	r3, r2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d012      	beq.n	800e48c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f003 0302 	and.w	r3, r3, #2
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00b      	beq.n	800e48c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e478:	2204      	movs	r2, #4
 800e47a:	409a      	lsls	r2, r3
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e484:	f043 0204 	orr.w	r2, r3, #4
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e490:	2210      	movs	r2, #16
 800e492:	409a      	lsls	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4013      	ands	r3, r2
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d043      	beq.n	800e524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0308 	and.w	r3, r3, #8
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d03c      	beq.n	800e524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ae:	2210      	movs	r2, #16
 800e4b0:	409a      	lsls	r2, r3
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d018      	beq.n	800e4f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d108      	bne.n	800e4e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d024      	beq.n	800e524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	4798      	blx	r3
 800e4e2:	e01f      	b.n	800e524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d01b      	beq.n	800e524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	4798      	blx	r3
 800e4f4:	e016      	b.n	800e524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e500:	2b00      	cmp	r3, #0
 800e502:	d107      	bne.n	800e514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f022 0208 	bic.w	r2, r2, #8
 800e512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e528:	2220      	movs	r2, #32
 800e52a:	409a      	lsls	r2, r3
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4013      	ands	r3, r2
 800e530:	2b00      	cmp	r3, #0
 800e532:	f000 808f 	beq.w	800e654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f003 0310 	and.w	r3, r3, #16
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 8087 	beq.w	800e654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e54a:	2220      	movs	r2, #32
 800e54c:	409a      	lsls	r2, r3
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b05      	cmp	r3, #5
 800e55c:	d136      	bne.n	800e5cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f022 0216 	bic.w	r2, r2, #22
 800e56c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	695a      	ldr	r2, [r3, #20]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e57c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <HAL_DMA_IRQHandler+0x1da>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d007      	beq.n	800e59e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f022 0208 	bic.w	r2, r2, #8
 800e59c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5a2:	223f      	movs	r2, #63	; 0x3f
 800e5a4:	409a      	lsls	r2, r3
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d07e      	beq.n	800e6c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	4798      	blx	r3
        }
        return;
 800e5ca:	e079      	b.n	800e6c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d01d      	beq.n	800e616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10d      	bne.n	800e604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d031      	beq.n	800e654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	4798      	blx	r3
 800e5f8:	e02c      	b.n	800e654 <HAL_DMA_IRQHandler+0x2a0>
 800e5fa:	bf00      	nop
 800e5fc:	20000004 	.word	0x20000004
 800e600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d023      	beq.n	800e654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	4798      	blx	r3
 800e614:	e01e      	b.n	800e654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10f      	bne.n	800e644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f022 0210 	bic.w	r2, r2, #16
 800e632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d032      	beq.n	800e6c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e660:	f003 0301 	and.w	r3, r3, #1
 800e664:	2b00      	cmp	r3, #0
 800e666:	d022      	beq.n	800e6ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2205      	movs	r2, #5
 800e66c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f022 0201 	bic.w	r2, r2, #1
 800e67e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	3301      	adds	r3, #1
 800e684:	60bb      	str	r3, [r7, #8]
 800e686:	697a      	ldr	r2, [r7, #20]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d307      	bcc.n	800e69c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f003 0301 	and.w	r3, r3, #1
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1f2      	bne.n	800e680 <HAL_DMA_IRQHandler+0x2cc>
 800e69a:	e000      	b.n	800e69e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800e69c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d005      	beq.n	800e6c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	4798      	blx	r3
 800e6be:	e000      	b.n	800e6c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800e6c0:	bf00      	nop
    }
  }
}
 800e6c2:	3718      	adds	r7, #24
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
 800e6d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e6e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	2b40      	cmp	r3, #64	; 0x40
 800e6f4:	d108      	bne.n	800e708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e706:	e007      	b.n	800e718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68ba      	ldr	r2, [r7, #8]
 800e70e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	60da      	str	r2, [r3, #12]
}
 800e718:	bf00      	nop
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	b2db      	uxtb	r3, r3
 800e732:	3b10      	subs	r3, #16
 800e734:	4a14      	ldr	r2, [pc, #80]	; (800e788 <DMA_CalcBaseAndBitshift+0x64>)
 800e736:	fba2 2303 	umull	r2, r3, r2, r3
 800e73a:	091b      	lsrs	r3, r3, #4
 800e73c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e73e:	4a13      	ldr	r2, [pc, #76]	; (800e78c <DMA_CalcBaseAndBitshift+0x68>)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4413      	add	r3, r2
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d909      	bls.n	800e766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e75a:	f023 0303 	bic.w	r3, r3, #3
 800e75e:	1d1a      	adds	r2, r3, #4
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	659a      	str	r2, [r3, #88]	; 0x58
 800e764:	e007      	b.n	800e776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e76e:	f023 0303 	bic.w	r3, r3, #3
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	aaaaaaab 	.word	0xaaaaaaab
 800e78c:	08011c60 	.word	0x08011c60

0800e790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d11f      	bne.n	800e7ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	2b03      	cmp	r3, #3
 800e7ae:	d856      	bhi.n	800e85e <DMA_CheckFifoParam+0xce>
 800e7b0:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <DMA_CheckFifoParam+0x28>)
 800e7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b6:	bf00      	nop
 800e7b8:	0800e7c9 	.word	0x0800e7c9
 800e7bc:	0800e7db 	.word	0x0800e7db
 800e7c0:	0800e7c9 	.word	0x0800e7c9
 800e7c4:	0800e85f 	.word	0x0800e85f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d046      	beq.n	800e862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7d8:	e043      	b.n	800e862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e7e2:	d140      	bne.n	800e866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7e8:	e03d      	b.n	800e866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7f2:	d121      	bne.n	800e838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d837      	bhi.n	800e86a <DMA_CheckFifoParam+0xda>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <DMA_CheckFifoParam+0x70>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e811 	.word	0x0800e811
 800e804:	0800e817 	.word	0x0800e817
 800e808:	0800e811 	.word	0x0800e811
 800e80c:	0800e829 	.word	0x0800e829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	73fb      	strb	r3, [r7, #15]
      break;
 800e814:	e030      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d025      	beq.n	800e86e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e826:	e022      	b.n	800e86e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e830:	d11f      	bne.n	800e872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e836:	e01c      	b.n	800e872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d903      	bls.n	800e846 <DMA_CheckFifoParam+0xb6>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b03      	cmp	r3, #3
 800e842:	d003      	beq.n	800e84c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e844:	e018      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	73fb      	strb	r3, [r7, #15]
      break;
 800e84a:	e015      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00e      	beq.n	800e876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e858:	2301      	movs	r3, #1
 800e85a:	73fb      	strb	r3, [r7, #15]
      break;
 800e85c:	e00b      	b.n	800e876 <DMA_CheckFifoParam+0xe6>
      break;
 800e85e:	bf00      	nop
 800e860:	e00a      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;
 800e862:	bf00      	nop
 800e864:	e008      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;
 800e866:	bf00      	nop
 800e868:	e006      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;
 800e86a:	bf00      	nop
 800e86c:	e004      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;
 800e86e:	bf00      	nop
 800e870:	e002      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;   
 800e872:	bf00      	nop
 800e874:	e000      	b.n	800e878 <DMA_CheckFifoParam+0xe8>
      break;
 800e876:	bf00      	nop
    }
  } 
  
  return status; 
 800e878:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop

0800e888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e888:	b480      	push	{r7}
 800e88a:	b089      	sub	sp, #36	; 0x24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e892:	2300      	movs	r3, #0
 800e894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e896:	2300      	movs	r3, #0
 800e898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e89a:	2300      	movs	r3, #0
 800e89c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e89e:	2300      	movs	r3, #0
 800e8a0:	61fb      	str	r3, [r7, #28]
 800e8a2:	e16b      	b.n	800eb7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	4013      	ands	r3, r2
 800e8b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	f040 815a 	bne.w	800eb76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f003 0303 	and.w	r3, r3, #3
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d005      	beq.n	800e8da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d130      	bne.n	800e93c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	2203      	movs	r2, #3
 800e8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ea:	43db      	mvns	r3, r3
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	68da      	ldr	r2, [r3, #12]
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fe:	69ba      	ldr	r2, [r7, #24]
 800e900:	4313      	orrs	r3, r2
 800e902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e910:	2201      	movs	r2, #1
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	fa02 f303 	lsl.w	r3, r2, r3
 800e918:	43db      	mvns	r3, r3
 800e91a:	69ba      	ldr	r2, [r7, #24]
 800e91c:	4013      	ands	r3, r2
 800e91e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	091b      	lsrs	r3, r3, #4
 800e926:	f003 0201 	and.w	r2, r3, #1
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	fa02 f303 	lsl.w	r3, r2, r3
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	4313      	orrs	r3, r2
 800e934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69ba      	ldr	r2, [r7, #24]
 800e93a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	f003 0303 	and.w	r3, r3, #3
 800e944:	2b03      	cmp	r3, #3
 800e946:	d017      	beq.n	800e978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	2203      	movs	r2, #3
 800e954:	fa02 f303 	lsl.w	r3, r2, r3
 800e958:	43db      	mvns	r3, r3
 800e95a:	69ba      	ldr	r2, [r7, #24]
 800e95c:	4013      	ands	r3, r2
 800e95e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	689a      	ldr	r2, [r3, #8]
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	fa02 f303 	lsl.w	r3, r2, r3
 800e96c:	69ba      	ldr	r2, [r7, #24]
 800e96e:	4313      	orrs	r3, r2
 800e970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	2b02      	cmp	r3, #2
 800e982:	d123      	bne.n	800e9cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	08da      	lsrs	r2, r3, #3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	3208      	adds	r2, #8
 800e98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	f003 0307 	and.w	r3, r3, #7
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	220f      	movs	r2, #15
 800e99c:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a0:	43db      	mvns	r3, r3
 800e9a2:	69ba      	ldr	r2, [r7, #24]
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	691a      	ldr	r2, [r3, #16]
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	f003 0307 	and.w	r3, r3, #7
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b8:	69ba      	ldr	r2, [r7, #24]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	08da      	lsrs	r2, r3, #3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3208      	adds	r2, #8
 800e9c6:	69b9      	ldr	r1, [r7, #24]
 800e9c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9dc:	43db      	mvns	r3, r3
 800e9de:	69ba      	ldr	r2, [r7, #24]
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	f003 0203 	and.w	r2, r3, #3
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f4:	69ba      	ldr	r2, [r7, #24]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	69ba      	ldr	r2, [r7, #24]
 800e9fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f000 80b4 	beq.w	800eb76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ea0e:	2300      	movs	r3, #0
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	4b60      	ldr	r3, [pc, #384]	; (800eb94 <HAL_GPIO_Init+0x30c>)
 800ea14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea16:	4a5f      	ldr	r2, [pc, #380]	; (800eb94 <HAL_GPIO_Init+0x30c>)
 800ea18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea1c:	6453      	str	r3, [r2, #68]	; 0x44
 800ea1e:	4b5d      	ldr	r3, [pc, #372]	; (800eb94 <HAL_GPIO_Init+0x30c>)
 800ea20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea26:	60fb      	str	r3, [r7, #12]
 800ea28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ea2a:	4a5b      	ldr	r2, [pc, #364]	; (800eb98 <HAL_GPIO_Init+0x310>)
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	089b      	lsrs	r3, r3, #2
 800ea30:	3302      	adds	r3, #2
 800ea32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f003 0303 	and.w	r3, r3, #3
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	220f      	movs	r2, #15
 800ea42:	fa02 f303 	lsl.w	r3, r2, r3
 800ea46:	43db      	mvns	r3, r3
 800ea48:	69ba      	ldr	r2, [r7, #24]
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a52      	ldr	r2, [pc, #328]	; (800eb9c <HAL_GPIO_Init+0x314>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d02b      	beq.n	800eaae <HAL_GPIO_Init+0x226>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a51      	ldr	r2, [pc, #324]	; (800eba0 <HAL_GPIO_Init+0x318>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d025      	beq.n	800eaaa <HAL_GPIO_Init+0x222>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a50      	ldr	r2, [pc, #320]	; (800eba4 <HAL_GPIO_Init+0x31c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d01f      	beq.n	800eaa6 <HAL_GPIO_Init+0x21e>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a4f      	ldr	r2, [pc, #316]	; (800eba8 <HAL_GPIO_Init+0x320>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d019      	beq.n	800eaa2 <HAL_GPIO_Init+0x21a>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a4e      	ldr	r2, [pc, #312]	; (800ebac <HAL_GPIO_Init+0x324>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d013      	beq.n	800ea9e <HAL_GPIO_Init+0x216>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4a4d      	ldr	r2, [pc, #308]	; (800ebb0 <HAL_GPIO_Init+0x328>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d00d      	beq.n	800ea9a <HAL_GPIO_Init+0x212>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a4c      	ldr	r2, [pc, #304]	; (800ebb4 <HAL_GPIO_Init+0x32c>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d007      	beq.n	800ea96 <HAL_GPIO_Init+0x20e>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4a4b      	ldr	r2, [pc, #300]	; (800ebb8 <HAL_GPIO_Init+0x330>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d101      	bne.n	800ea92 <HAL_GPIO_Init+0x20a>
 800ea8e:	2307      	movs	r3, #7
 800ea90:	e00e      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800ea92:	2308      	movs	r3, #8
 800ea94:	e00c      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800ea96:	2306      	movs	r3, #6
 800ea98:	e00a      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800ea9a:	2305      	movs	r3, #5
 800ea9c:	e008      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800ea9e:	2304      	movs	r3, #4
 800eaa0:	e006      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	e004      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	e002      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e000      	b.n	800eab0 <HAL_GPIO_Init+0x228>
 800eaae:	2300      	movs	r3, #0
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	f002 0203 	and.w	r2, r2, #3
 800eab6:	0092      	lsls	r2, r2, #2
 800eab8:	4093      	lsls	r3, r2
 800eaba:	69ba      	ldr	r2, [r7, #24]
 800eabc:	4313      	orrs	r3, r2
 800eabe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800eac0:	4935      	ldr	r1, [pc, #212]	; (800eb98 <HAL_GPIO_Init+0x310>)
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	089b      	lsrs	r3, r3, #2
 800eac6:	3302      	adds	r3, #2
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800eace:	4b3b      	ldr	r3, [pc, #236]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	43db      	mvns	r3, r3
 800ead8:	69ba      	ldr	r2, [r7, #24]
 800eada:	4013      	ands	r3, r2
 800eadc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800eaea:	69ba      	ldr	r2, [r7, #24]
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800eaf2:	4a32      	ldr	r2, [pc, #200]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800eaf8:	4b30      	ldr	r3, [pc, #192]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	43db      	mvns	r3, r3
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	4013      	ands	r3, r2
 800eb06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800eb14:	69ba      	ldr	r2, [r7, #24]
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800eb1c:	4a27      	ldr	r2, [pc, #156]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800eb22:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	43db      	mvns	r3, r3
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	4013      	ands	r3, r2
 800eb30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800eb3e:	69ba      	ldr	r2, [r7, #24]
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	4313      	orrs	r3, r2
 800eb44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800eb46:	4a1d      	ldr	r2, [pc, #116]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	43db      	mvns	r3, r3
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	4013      	ands	r3, r2
 800eb5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800eb68:	69ba      	ldr	r2, [r7, #24]
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800eb70:	4a12      	ldr	r2, [pc, #72]	; (800ebbc <HAL_GPIO_Init+0x334>)
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	61fb      	str	r3, [r7, #28]
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	2b0f      	cmp	r3, #15
 800eb80:	f67f ae90 	bls.w	800e8a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800eb84:	bf00      	nop
 800eb86:	bf00      	nop
 800eb88:	3724      	adds	r7, #36	; 0x24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	40023800 	.word	0x40023800
 800eb98:	40013800 	.word	0x40013800
 800eb9c:	40020000 	.word	0x40020000
 800eba0:	40020400 	.word	0x40020400
 800eba4:	40020800 	.word	0x40020800
 800eba8:	40020c00 	.word	0x40020c00
 800ebac:	40021000 	.word	0x40021000
 800ebb0:	40021400 	.word	0x40021400
 800ebb4:	40021800 	.word	0x40021800
 800ebb8:	40021c00 	.word	0x40021c00
 800ebbc:	40013c00 	.word	0x40013c00

0800ebc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	807b      	strh	r3, [r7, #2]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ebd0:	787b      	ldrb	r3, [r7, #1]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ebd6:	887a      	ldrh	r2, [r7, #2]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ebdc:	e003      	b.n	800ebe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ebde:	887b      	ldrh	r3, [r7, #2]
 800ebe0:	041a      	lsls	r2, r3, #16
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	619a      	str	r2, [r3, #24]
}
 800ebe6:	bf00      	nop
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d101      	bne.n	800ec06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ec02:	2301      	movs	r3, #1
 800ec04:	e12b      	b.n	800ee5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7fe feb2 	bl	800d984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2224      	movs	r2, #36	; 0x24
 800ec24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0201 	bic.w	r2, r2, #1
 800ec36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ec58:	f002 f978 	bl	8010f4c <HAL_RCC_GetPCLK1Freq>
 800ec5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4a81      	ldr	r2, [pc, #516]	; (800ee68 <HAL_I2C_Init+0x274>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d807      	bhi.n	800ec78 <HAL_I2C_Init+0x84>
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4a80      	ldr	r2, [pc, #512]	; (800ee6c <HAL_I2C_Init+0x278>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	bf94      	ite	ls
 800ec70:	2301      	movls	r3, #1
 800ec72:	2300      	movhi	r3, #0
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	e006      	b.n	800ec86 <HAL_I2C_Init+0x92>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	4a7d      	ldr	r2, [pc, #500]	; (800ee70 <HAL_I2C_Init+0x27c>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	bf94      	ite	ls
 800ec80:	2301      	movls	r3, #1
 800ec82:	2300      	movhi	r3, #0
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e0e7      	b.n	800ee5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	4a78      	ldr	r2, [pc, #480]	; (800ee74 <HAL_I2C_Init+0x280>)
 800ec92:	fba2 2303 	umull	r2, r3, r2, r3
 800ec96:	0c9b      	lsrs	r3, r3, #18
 800ec98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6a1b      	ldr	r3, [r3, #32]
 800ecb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	4a6a      	ldr	r2, [pc, #424]	; (800ee68 <HAL_I2C_Init+0x274>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d802      	bhi.n	800ecc8 <HAL_I2C_Init+0xd4>
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	e009      	b.n	800ecdc <HAL_I2C_Init+0xe8>
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ecce:	fb02 f303 	mul.w	r3, r2, r3
 800ecd2:	4a69      	ldr	r2, [pc, #420]	; (800ee78 <HAL_I2C_Init+0x284>)
 800ecd4:	fba2 2303 	umull	r2, r3, r2, r3
 800ecd8:	099b      	lsrs	r3, r3, #6
 800ecda:	3301      	adds	r3, #1
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	6812      	ldr	r2, [r2, #0]
 800ece0:	430b      	orrs	r3, r1
 800ece2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	69db      	ldr	r3, [r3, #28]
 800ecea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ecee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	495c      	ldr	r1, [pc, #368]	; (800ee68 <HAL_I2C_Init+0x274>)
 800ecf8:	428b      	cmp	r3, r1
 800ecfa:	d819      	bhi.n	800ed30 <HAL_I2C_Init+0x13c>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	1e59      	subs	r1, r3, #1
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed0a:	1c59      	adds	r1, r3, #1
 800ed0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ed10:	400b      	ands	r3, r1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <HAL_I2C_Init+0x138>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1e59      	subs	r1, r3, #1
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed24:	3301      	adds	r3, #1
 800ed26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed2a:	e051      	b.n	800edd0 <HAL_I2C_Init+0x1dc>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	e04f      	b.n	800edd0 <HAL_I2C_Init+0x1dc>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d111      	bne.n	800ed5c <HAL_I2C_Init+0x168>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	1e58      	subs	r0, r3, #1
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6859      	ldr	r1, [r3, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	440b      	add	r3, r1
 800ed46:	fbb0 f3f3 	udiv	r3, r0, r3
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	bf0c      	ite	eq
 800ed54:	2301      	moveq	r3, #1
 800ed56:	2300      	movne	r3, #0
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	e012      	b.n	800ed82 <HAL_I2C_Init+0x18e>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	1e58      	subs	r0, r3, #1
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6859      	ldr	r1, [r3, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	440b      	add	r3, r1
 800ed6a:	0099      	lsls	r1, r3, #2
 800ed6c:	440b      	add	r3, r1
 800ed6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ed72:	3301      	adds	r3, #1
 800ed74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bf0c      	ite	eq
 800ed7c:	2301      	moveq	r3, #1
 800ed7e:	2300      	movne	r3, #0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <HAL_I2C_Init+0x196>
 800ed86:	2301      	movs	r3, #1
 800ed88:	e022      	b.n	800edd0 <HAL_I2C_Init+0x1dc>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10e      	bne.n	800edb0 <HAL_I2C_Init+0x1bc>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	1e58      	subs	r0, r3, #1
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6859      	ldr	r1, [r3, #4]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	440b      	add	r3, r1
 800eda0:	fbb0 f3f3 	udiv	r3, r0, r3
 800eda4:	3301      	adds	r3, #1
 800eda6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800edaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edae:	e00f      	b.n	800edd0 <HAL_I2C_Init+0x1dc>
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	1e58      	subs	r0, r3, #1
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6859      	ldr	r1, [r3, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	0099      	lsls	r1, r3, #2
 800edc0:	440b      	add	r3, r1
 800edc2:	fbb0 f3f3 	udiv	r3, r0, r3
 800edc6:	3301      	adds	r3, #1
 800edc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800edcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800edd0:	6879      	ldr	r1, [r7, #4]
 800edd2:	6809      	ldr	r1, [r1, #0]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	69da      	ldr	r2, [r3, #28]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	431a      	orrs	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	430a      	orrs	r2, r1
 800edf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800edfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	6911      	ldr	r1, [r2, #16]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	68d2      	ldr	r2, [r2, #12]
 800ee0a:	4311      	orrs	r1, r2
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	6812      	ldr	r2, [r2, #0]
 800ee10:	430b      	orrs	r3, r1
 800ee12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	695a      	ldr	r2, [r3, #20]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	431a      	orrs	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	430a      	orrs	r2, r1
 800ee2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f042 0201 	orr.w	r2, r2, #1
 800ee3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	000186a0 	.word	0x000186a0
 800ee6c:	001e847f 	.word	0x001e847f
 800ee70:	003d08ff 	.word	0x003d08ff
 800ee74:	431bde83 	.word	0x431bde83
 800ee78:	10624dd3 	.word	0x10624dd3

0800ee7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b088      	sub	sp, #32
 800ee80:	af02      	add	r7, sp, #8
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	607a      	str	r2, [r7, #4]
 800ee86:	461a      	mov	r2, r3
 800ee88:	460b      	mov	r3, r1
 800ee8a:	817b      	strh	r3, [r7, #10]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ee90:	f7fe ff84 	bl	800dd9c <HAL_GetTick>
 800ee94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b20      	cmp	r3, #32
 800eea0:	f040 80e0 	bne.w	800f064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	2319      	movs	r3, #25
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4970      	ldr	r1, [pc, #448]	; (800f070 <HAL_I2C_Master_Transmit+0x1f4>)
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f000 fc58 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800eeba:	2302      	movs	r3, #2
 800eebc:	e0d3      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d101      	bne.n	800eecc <HAL_I2C_Master_Transmit+0x50>
 800eec8:	2302      	movs	r3, #2
 800eeca:	e0cc      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d007      	beq.n	800eef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f042 0201 	orr.w	r2, r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2221      	movs	r2, #33	; 0x21
 800ef06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2210      	movs	r2, #16
 800ef0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	893a      	ldrh	r2, [r7, #8]
 800ef22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	4a50      	ldr	r2, [pc, #320]	; (800f074 <HAL_I2C_Master_Transmit+0x1f8>)
 800ef32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ef34:	8979      	ldrh	r1, [r7, #10]
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	6a3a      	ldr	r2, [r7, #32]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 fac2 	bl	800f4c4 <I2C_MasterRequestWrite>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ef46:	2301      	movs	r3, #1
 800ef48:	e08d      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	695b      	ldr	r3, [r3, #20]
 800ef54:	613b      	str	r3, [r7, #16]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	613b      	str	r3, [r7, #16]
 800ef5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ef60:	e066      	b.n	800f030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	6a39      	ldr	r1, [r7, #32]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f000 fcd2 	bl	800f910 <I2C_WaitOnTXEFlagUntilTimeout>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00d      	beq.n	800ef8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	d107      	bne.n	800ef8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e06b      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef92:	781a      	ldrb	r2, [r3, #0]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9e:	1c5a      	adds	r2, r3, #1
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	3b01      	subs	r3, #1
 800efac:	b29a      	uxth	r2, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b29a      	uxth	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	f003 0304 	and.w	r3, r3, #4
 800efc8:	2b04      	cmp	r3, #4
 800efca:	d11b      	bne.n	800f004 <HAL_I2C_Master_Transmit+0x188>
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d017      	beq.n	800f004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	781a      	ldrb	r2, [r3, #0]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800efee:	b29b      	uxth	r3, r3
 800eff0:	3b01      	subs	r3, #1
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800effc:	3b01      	subs	r3, #1
 800effe:	b29a      	uxth	r2, r3
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f004:	697a      	ldr	r2, [r7, #20]
 800f006:	6a39      	ldr	r1, [r7, #32]
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 fcc2 	bl	800f992 <I2C_WaitOnBTFFlagUntilTimeout>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00d      	beq.n	800f030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d107      	bne.n	800f02c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f02a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f02c:	2301      	movs	r3, #1
 800f02e:	e01a      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f034:	2b00      	cmp	r3, #0
 800f036:	d194      	bne.n	800ef62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2220      	movs	r2, #32
 800f04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	e000      	b.n	800f066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f064:	2302      	movs	r3, #2
  }
}
 800f066:	4618      	mov	r0, r3
 800f068:	3718      	adds	r7, #24
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	00100002 	.word	0x00100002
 800f074:	ffff0000 	.word	0xffff0000

0800f078 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08c      	sub	sp, #48	; 0x30
 800f07c:	af02      	add	r7, sp, #8
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	607a      	str	r2, [r7, #4]
 800f082:	461a      	mov	r2, r3
 800f084:	460b      	mov	r3, r1
 800f086:	817b      	strh	r3, [r7, #10]
 800f088:	4613      	mov	r3, r2
 800f08a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f08c:	f7fe fe86 	bl	800dd9c <HAL_GetTick>
 800f090:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b20      	cmp	r3, #32
 800f09c:	f040 820b 	bne.w	800f4b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	2319      	movs	r3, #25
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	497c      	ldr	r1, [pc, #496]	; (800f29c <HAL_I2C_Master_Receive+0x224>)
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f000 fb5a 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e1fe      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d101      	bne.n	800f0c8 <HAL_I2C_Master_Receive+0x50>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	e1f7      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d007      	beq.n	800f0ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f042 0201 	orr.w	r2, r2, #1
 800f0ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f0fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2222      	movs	r2, #34	; 0x22
 800f102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2210      	movs	r2, #16
 800f10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	893a      	ldrh	r2, [r7, #8]
 800f11e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f124:	b29a      	uxth	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	4a5c      	ldr	r2, [pc, #368]	; (800f2a0 <HAL_I2C_Master_Receive+0x228>)
 800f12e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f130:	8979      	ldrh	r1, [r7, #10]
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 fa46 	bl	800f5c8 <I2C_MasterRequestRead>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	e1b8      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d113      	bne.n	800f176 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f14e:	2300      	movs	r3, #0
 800f150:	623b      	str	r3, [r7, #32]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	695b      	ldr	r3, [r3, #20]
 800f158:	623b      	str	r3, [r7, #32]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	623b      	str	r3, [r7, #32]
 800f162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	e18c      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d11b      	bne.n	800f1b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f18c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f18e:	2300      	movs	r3, #0
 800f190:	61fb      	str	r3, [r7, #28]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	61fb      	str	r3, [r7, #28]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	699b      	ldr	r3, [r3, #24]
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1b2:	601a      	str	r2, [r3, #0]
 800f1b4:	e16c      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d11b      	bne.n	800f1f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f1de:	2300      	movs	r3, #0
 800f1e0:	61bb      	str	r3, [r7, #24]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	695b      	ldr	r3, [r3, #20]
 800f1e8:	61bb      	str	r3, [r7, #24]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	699b      	ldr	r3, [r3, #24]
 800f1f0:	61bb      	str	r3, [r7, #24]
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	e14c      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f206:	2300      	movs	r3, #0
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	617b      	str	r3, [r7, #20]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	617b      	str	r3, [r7, #20]
 800f21a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800f21c:	e138      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f222:	2b03      	cmp	r3, #3
 800f224:	f200 80f1 	bhi.w	800f40a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d123      	bne.n	800f278 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f000 fbed 	bl	800fa14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	e139      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24e:	b2d2      	uxtb	r2, r2
 800f250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	1c5a      	adds	r2, r3, #1
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f260:	3b01      	subs	r3, #1
 800f262:	b29a      	uxth	r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	3b01      	subs	r3, #1
 800f270:	b29a      	uxth	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f276:	e10b      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d14e      	bne.n	800f31e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f286:	2200      	movs	r2, #0
 800f288:	4906      	ldr	r1, [pc, #24]	; (800f2a4 <HAL_I2C_Master_Receive+0x22c>)
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 fa6a 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	e10e      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
 800f29a:	bf00      	nop
 800f29c:	00100002 	.word	0x00100002
 800f2a0:	ffff0000 	.word	0xffff0000
 800f2a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	691a      	ldr	r2, [r3, #16]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	b2d2      	uxtb	r2, r2
 800f2c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	691a      	ldr	r2, [r3, #16]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f306:	3b01      	subs	r3, #1
 800f308:	b29a      	uxth	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f312:	b29b      	uxth	r3, r3
 800f314:	3b01      	subs	r3, #1
 800f316:	b29a      	uxth	r2, r3
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f31c:	e0b8      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	2200      	movs	r2, #0
 800f326:	4966      	ldr	r1, [pc, #408]	; (800f4c0 <HAL_I2C_Master_Receive+0x448>)
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f000 fa1b 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	e0bf      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	691a      	ldr	r2, [r3, #16]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f352:	b2d2      	uxtb	r2, r2
 800f354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35a:	1c5a      	adds	r2, r3, #1
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f364:	3b01      	subs	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f370:	b29b      	uxth	r3, r3
 800f372:	3b01      	subs	r3, #1
 800f374:	b29a      	uxth	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f380:	2200      	movs	r2, #0
 800f382:	494f      	ldr	r1, [pc, #316]	; (800f4c0 <HAL_I2C_Master_Receive+0x448>)
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f000 f9ed 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	e091      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	691a      	ldr	r2, [r3, #16]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ae:	b2d2      	uxtb	r2, r2
 800f3b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	3b01      	subs	r3, #1
 800f402:	b29a      	uxth	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f408:	e042      	b.n	800f490 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f40c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f000 fb00 	bl	800fa14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e04c      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	691a      	ldr	r2, [r3, #16]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f428:	b2d2      	uxtb	r2, r2
 800f42a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f43a:	3b01      	subs	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f446:	b29b      	uxth	r3, r3
 800f448:	3b01      	subs	r3, #1
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	f003 0304 	and.w	r3, r3, #4
 800f45a:	2b04      	cmp	r3, #4
 800f45c:	d118      	bne.n	800f490 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	691a      	ldr	r2, [r3, #16]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	b2d2      	uxtb	r2, r2
 800f46a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f470:	1c5a      	adds	r2, r3, #1
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f486:	b29b      	uxth	r3, r3
 800f488:	3b01      	subs	r3, #1
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f494:	2b00      	cmp	r3, #0
 800f496:	f47f aec2 	bne.w	800f21e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2220      	movs	r2, #32
 800f49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e000      	b.n	800f4b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800f4b6:	2302      	movs	r3, #2
  }
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3728      	adds	r7, #40	; 0x28
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	00010004 	.word	0x00010004

0800f4c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b088      	sub	sp, #32
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	607a      	str	r2, [r7, #4]
 800f4ce:	603b      	str	r3, [r7, #0]
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	d006      	beq.n	800f4ee <I2C_MasterRequestWrite+0x2a>
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d003      	beq.n	800f4ee <I2C_MasterRequestWrite+0x2a>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f4ec:	d108      	bne.n	800f500 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	e00b      	b.n	800f518 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f504:	2b12      	cmp	r3, #18
 800f506:	d107      	bne.n	800f518 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f000 f91d 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00d      	beq.n	800f54c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f53e:	d103      	bne.n	800f548 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f548:	2303      	movs	r3, #3
 800f54a:	e035      	b.n	800f5b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	691b      	ldr	r3, [r3, #16]
 800f550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f554:	d108      	bne.n	800f568 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f556:	897b      	ldrh	r3, [r7, #10]
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	461a      	mov	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f564:	611a      	str	r2, [r3, #16]
 800f566:	e01b      	b.n	800f5a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f568:	897b      	ldrh	r3, [r7, #10]
 800f56a:	11db      	asrs	r3, r3, #7
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	f003 0306 	and.w	r3, r3, #6
 800f572:	b2db      	uxtb	r3, r3
 800f574:	f063 030f 	orn	r3, r3, #15
 800f578:	b2da      	uxtb	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	490e      	ldr	r1, [pc, #56]	; (800f5c0 <I2C_MasterRequestWrite+0xfc>)
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 f943 	bl	800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	e010      	b.n	800f5b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f596:	897b      	ldrh	r3, [r7, #10]
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	4907      	ldr	r1, [pc, #28]	; (800f5c4 <I2C_MasterRequestWrite+0x100>)
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 f933 	bl	800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e000      	b.n	800f5b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	00010008 	.word	0x00010008
 800f5c4:	00010002 	.word	0x00010002

0800f5c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af02      	add	r7, sp, #8
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	607a      	str	r2, [r7, #4]
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f5ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	2b08      	cmp	r3, #8
 800f5f2:	d006      	beq.n	800f602 <I2C_MasterRequestRead+0x3a>
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d003      	beq.n	800f602 <I2C_MasterRequestRead+0x3a>
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f600:	d108      	bne.n	800f614 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	e00b      	b.n	800f62c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f618:	2b11      	cmp	r3, #17
 800f61a:	d107      	bne.n	800f62c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f62a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f893 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00d      	beq.n	800f660 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f652:	d103      	bne.n	800f65c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f65a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f65c:	2303      	movs	r3, #3
 800f65e:	e079      	b.n	800f754 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f668:	d108      	bne.n	800f67c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f66a:	897b      	ldrh	r3, [r7, #10]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f043 0301 	orr.w	r3, r3, #1
 800f672:	b2da      	uxtb	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	611a      	str	r2, [r3, #16]
 800f67a:	e05f      	b.n	800f73c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f67c:	897b      	ldrh	r3, [r7, #10]
 800f67e:	11db      	asrs	r3, r3, #7
 800f680:	b2db      	uxtb	r3, r3
 800f682:	f003 0306 	and.w	r3, r3, #6
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f063 030f 	orn	r3, r3, #15
 800f68c:	b2da      	uxtb	r2, r3
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	4930      	ldr	r1, [pc, #192]	; (800f75c <I2C_MasterRequestRead+0x194>)
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f000 f8b9 	bl	800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e054      	b.n	800f754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f6aa:	897b      	ldrh	r3, [r7, #10]
 800f6ac:	b2da      	uxtb	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	4929      	ldr	r1, [pc, #164]	; (800f760 <I2C_MasterRequestRead+0x198>)
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f000 f8a9 	bl	800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e044      	b.n	800f754 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	613b      	str	r3, [r7, #16]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	613b      	str	r3, [r7, #16]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	699b      	ldr	r3, [r3, #24]
 800f6dc:	613b      	str	r3, [r7, #16]
 800f6de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 f831 	bl	800f764 <I2C_WaitOnFlagUntilTimeout>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00d      	beq.n	800f724 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f716:	d103      	bne.n	800f720 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f71e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800f720:	2303      	movs	r3, #3
 800f722:	e017      	b.n	800f754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800f724:	897b      	ldrh	r3, [r7, #10]
 800f726:	11db      	asrs	r3, r3, #7
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	f003 0306 	and.w	r3, r3, #6
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f063 030e 	orn	r3, r3, #14
 800f734:	b2da      	uxtb	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	4907      	ldr	r1, [pc, #28]	; (800f760 <I2C_MasterRequestRead+0x198>)
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 f865 	bl	800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	e000      	b.n	800f754 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	00010008 	.word	0x00010008
 800f760:	00010002 	.word	0x00010002

0800f764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	603b      	str	r3, [r7, #0]
 800f770:	4613      	mov	r3, r2
 800f772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f774:	e025      	b.n	800f7c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77c:	d021      	beq.n	800f7c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f77e:	f7fe fb0d 	bl	800dd9c <HAL_GetTick>
 800f782:	4602      	mov	r2, r0
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	683a      	ldr	r2, [r7, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d302      	bcc.n	800f794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d116      	bne.n	800f7c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2200      	movs	r2, #0
 800f798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2220      	movs	r2, #32
 800f79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ae:	f043 0220 	orr.w	r2, r3, #32
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e023      	b.n	800f80a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	0c1b      	lsrs	r3, r3, #16
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d10d      	bne.n	800f7e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	43da      	mvns	r2, r3
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	bf0c      	ite	eq
 800f7de:	2301      	moveq	r3, #1
 800f7e0:	2300      	movne	r3, #0
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	e00c      	b.n	800f802 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	699b      	ldr	r3, [r3, #24]
 800f7ee:	43da      	mvns	r2, r3
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	bf0c      	ite	eq
 800f7fa:	2301      	moveq	r3, #1
 800f7fc:	2300      	movne	r3, #0
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	461a      	mov	r2, r3
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	429a      	cmp	r2, r3
 800f806:	d0b6      	beq.n	800f776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f808:	2300      	movs	r3, #0
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b084      	sub	sp, #16
 800f816:	af00      	add	r7, sp, #0
 800f818:	60f8      	str	r0, [r7, #12]
 800f81a:	60b9      	str	r1, [r7, #8]
 800f81c:	607a      	str	r2, [r7, #4]
 800f81e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f820:	e051      	b.n	800f8c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f82c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f830:	d123      	bne.n	800f87a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f840:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f84a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2200      	movs	r2, #0
 800f850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2220      	movs	r2, #32
 800f856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f866:	f043 0204 	orr.w	r2, r3, #4
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e046      	b.n	800f908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f880:	d021      	beq.n	800f8c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f882:	f7fe fa8b 	bl	800dd9c <HAL_GetTick>
 800f886:	4602      	mov	r2, r0
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d302      	bcc.n	800f898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d116      	bne.n	800f8c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2200      	movs	r2, #0
 800f89c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2220      	movs	r2, #32
 800f8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b2:	f043 0220 	orr.w	r2, r3, #32
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e020      	b.n	800f908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	0c1b      	lsrs	r3, r3, #16
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d10c      	bne.n	800f8ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	695b      	ldr	r3, [r3, #20]
 800f8d6:	43da      	mvns	r2, r3
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	4013      	ands	r3, r2
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bf14      	ite	ne
 800f8e2:	2301      	movne	r3, #1
 800f8e4:	2300      	moveq	r3, #0
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	e00b      	b.n	800f902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	43da      	mvns	r2, r3
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	bf14      	ite	ne
 800f8fc:	2301      	movne	r3, #1
 800f8fe:	2300      	moveq	r3, #0
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d18d      	bne.n	800f822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f91c:	e02d      	b.n	800f97a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f000 f8ce 	bl	800fac0 <I2C_IsAcknowledgeFailed>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e02d      	b.n	800f98a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f934:	d021      	beq.n	800f97a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f936:	f7fe fa31 	bl	800dd9c <HAL_GetTick>
 800f93a:	4602      	mov	r2, r0
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	68ba      	ldr	r2, [r7, #8]
 800f942:	429a      	cmp	r2, r3
 800f944:	d302      	bcc.n	800f94c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d116      	bne.n	800f97a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2220      	movs	r2, #32
 800f956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f966:	f043 0220 	orr.w	r2, r3, #32
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f976:	2301      	movs	r3, #1
 800f978:	e007      	b.n	800f98a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	695b      	ldr	r3, [r3, #20]
 800f980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f984:	2b80      	cmp	r3, #128	; 0x80
 800f986:	d1ca      	bne.n	800f91e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	60f8      	str	r0, [r7, #12]
 800f99a:	60b9      	str	r1, [r7, #8]
 800f99c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f99e:	e02d      	b.n	800f9fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f88d 	bl	800fac0 <I2C_IsAcknowledgeFailed>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e02d      	b.n	800fa0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b6:	d021      	beq.n	800f9fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f9b8:	f7fe f9f0 	bl	800dd9c <HAL_GetTick>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d302      	bcc.n	800f9ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d116      	bne.n	800f9fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2220      	movs	r2, #32
 800f9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e8:	f043 0220 	orr.w	r2, r3, #32
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	e007      	b.n	800fa0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	695b      	ldr	r3, [r3, #20]
 800fa02:	f003 0304 	and.w	r3, r3, #4
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	d1ca      	bne.n	800f9a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800fa20:	e042      	b.n	800faa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	695b      	ldr	r3, [r3, #20]
 800fa28:	f003 0310 	and.w	r3, r3, #16
 800fa2c:	2b10      	cmp	r3, #16
 800fa2e:	d119      	bne.n	800fa64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f06f 0210 	mvn.w	r2, #16
 800fa38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2220      	movs	r2, #32
 800fa44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e029      	b.n	800fab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa64:	f7fe f99a 	bl	800dd9c <HAL_GetTick>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d302      	bcc.n	800fa7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d116      	bne.n	800faa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2220      	movs	r2, #32
 800fa84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa94:	f043 0220 	orr.w	r2, r3, #32
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e007      	b.n	800fab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab2:	2b40      	cmp	r3, #64	; 0x40
 800fab4:	d1b5      	bne.n	800fa22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fad6:	d11b      	bne.n	800fb10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2220      	movs	r2, #32
 800faec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fafc:	f043 0204 	orr.w	r2, r3, #4
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	e000      	b.n	800fb12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
	...

0800fb20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d101      	bne.n	800fb32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e128      	b.n	800fd84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d109      	bne.n	800fb52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4a90      	ldr	r2, [pc, #576]	; (800fd8c <HAL_I2S_Init+0x26c>)
 800fb4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7fd ff61 	bl	800da14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2202      	movs	r2, #2
 800fb56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	69db      	ldr	r3, [r3, #28]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	6812      	ldr	r2, [r2, #0]
 800fb64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800fb68:	f023 030f 	bic.w	r3, r3, #15
 800fb6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2202      	movs	r2, #2
 800fb74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	695b      	ldr	r3, [r3, #20]
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d060      	beq.n	800fc40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d102      	bne.n	800fb8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800fb86:	2310      	movs	r3, #16
 800fb88:	617b      	str	r3, [r7, #20]
 800fb8a:	e001      	b.n	800fb90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800fb8c:	2320      	movs	r3, #32
 800fb8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	2b20      	cmp	r3, #32
 800fb96:	d802      	bhi.n	800fb9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800fb9e:	2001      	movs	r0, #1
 800fba0:	f001 faca 	bl	8011138 <HAL_RCCEx_GetPeriphCLKFreq>
 800fba4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbae:	d125      	bne.n	800fbfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d010      	beq.n	800fbda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	fbb2 f2f3 	udiv	r2, r2, r3
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	4413      	add	r3, r2
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	461a      	mov	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbd4:	3305      	adds	r3, #5
 800fbd6:	613b      	str	r3, [r7, #16]
 800fbd8:	e01f      	b.n	800fc1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	fbb2 f2f3 	udiv	r2, r2, r3
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	461a      	mov	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbf6:	3305      	adds	r3, #5
 800fbf8:	613b      	str	r3, [r7, #16]
 800fbfa:	e00e      	b.n	800fc1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	fbb2 f2f3 	udiv	r2, r2, r3
 800fc04:	4613      	mov	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4413      	add	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	695b      	ldr	r3, [r3, #20]
 800fc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc16:	3305      	adds	r3, #5
 800fc18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	4a5c      	ldr	r2, [pc, #368]	; (800fd90 <HAL_I2S_Init+0x270>)
 800fc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc22:	08db      	lsrs	r3, r3, #3
 800fc24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	085b      	lsrs	r3, r3, #1
 800fc36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	021b      	lsls	r3, r3, #8
 800fc3c:	61bb      	str	r3, [r7, #24]
 800fc3e:	e003      	b.n	800fc48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800fc40:	2302      	movs	r3, #2
 800fc42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d902      	bls.n	800fc54 <HAL_I2S_Init+0x134>
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	2bff      	cmp	r3, #255	; 0xff
 800fc52:	d907      	bls.n	800fc64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc58:	f043 0210 	orr.w	r2, r3, #16
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	e08f      	b.n	800fd84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	691a      	ldr	r2, [r3, #16]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	ea42 0103 	orr.w	r1, r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	69fa      	ldr	r2, [r7, #28]
 800fc74:	430a      	orrs	r2, r1
 800fc76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800fc82:	f023 030f 	bic.w	r3, r3, #15
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	6851      	ldr	r1, [r2, #4]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	6892      	ldr	r2, [r2, #8]
 800fc8e:	4311      	orrs	r1, r2
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	68d2      	ldr	r2, [r2, #12]
 800fc94:	4311      	orrs	r1, r2
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	6992      	ldr	r2, [r2, #24]
 800fc9a:	430a      	orrs	r2, r1
 800fc9c:	431a      	orrs	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fca6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a1b      	ldr	r3, [r3, #32]
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d161      	bne.n	800fd74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a38      	ldr	r2, [pc, #224]	; (800fd94 <HAL_I2S_Init+0x274>)
 800fcb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a37      	ldr	r2, [pc, #220]	; (800fd98 <HAL_I2S_Init+0x278>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d101      	bne.n	800fcc4 <HAL_I2S_Init+0x1a4>
 800fcc0:	4b36      	ldr	r3, [pc, #216]	; (800fd9c <HAL_I2S_Init+0x27c>)
 800fcc2:	e001      	b.n	800fcc8 <HAL_I2S_Init+0x1a8>
 800fcc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	6812      	ldr	r2, [r2, #0]
 800fcce:	4932      	ldr	r1, [pc, #200]	; (800fd98 <HAL_I2S_Init+0x278>)
 800fcd0:	428a      	cmp	r2, r1
 800fcd2:	d101      	bne.n	800fcd8 <HAL_I2S_Init+0x1b8>
 800fcd4:	4a31      	ldr	r2, [pc, #196]	; (800fd9c <HAL_I2S_Init+0x27c>)
 800fcd6:	e001      	b.n	800fcdc <HAL_I2S_Init+0x1bc>
 800fcd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800fcdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800fce0:	f023 030f 	bic.w	r3, r3, #15
 800fce4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a2b      	ldr	r2, [pc, #172]	; (800fd98 <HAL_I2S_Init+0x278>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d101      	bne.n	800fcf4 <HAL_I2S_Init+0x1d4>
 800fcf0:	4b2a      	ldr	r3, [pc, #168]	; (800fd9c <HAL_I2S_Init+0x27c>)
 800fcf2:	e001      	b.n	800fcf8 <HAL_I2S_Init+0x1d8>
 800fcf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800fcf8:	2202      	movs	r2, #2
 800fcfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a25      	ldr	r2, [pc, #148]	; (800fd98 <HAL_I2S_Init+0x278>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d101      	bne.n	800fd0a <HAL_I2S_Init+0x1ea>
 800fd06:	4b25      	ldr	r3, [pc, #148]	; (800fd9c <HAL_I2S_Init+0x27c>)
 800fd08:	e001      	b.n	800fd0e <HAL_I2S_Init+0x1ee>
 800fd0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800fd0e:	69db      	ldr	r3, [r3, #28]
 800fd10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd1a:	d003      	beq.n	800fd24 <HAL_I2S_Init+0x204>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d103      	bne.n	800fd2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800fd24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd28:	613b      	str	r3, [r7, #16]
 800fd2a:	e001      	b.n	800fd30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800fd44:	4313      	orrs	r3, r2
 800fd46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	699b      	ldr	r3, [r3, #24]
 800fd4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	897b      	ldrh	r3, [r7, #10]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a0d      	ldr	r2, [pc, #52]	; (800fd98 <HAL_I2S_Init+0x278>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d101      	bne.n	800fd6c <HAL_I2S_Init+0x24c>
 800fd68:	4b0c      	ldr	r3, [pc, #48]	; (800fd9c <HAL_I2S_Init+0x27c>)
 800fd6a:	e001      	b.n	800fd70 <HAL_I2S_Init+0x250>
 800fd6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800fd70:	897a      	ldrh	r2, [r7, #10]
 800fd72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3720      	adds	r7, #32
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	080100a5 	.word	0x080100a5
 800fd90:	cccccccd 	.word	0xcccccccd
 800fd94:	080101b9 	.word	0x080101b9
 800fd98:	40003800 	.word	0x40003800
 800fd9c:	40003400 	.word	0x40003400

0800fda0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d002      	beq.n	800fdba <HAL_I2S_Transmit_DMA+0x1a>
 800fdb4:	88fb      	ldrh	r3, [r7, #6]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d101      	bne.n	800fdbe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e08e      	b.n	800fedc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d101      	bne.n	800fdce <HAL_I2S_Transmit_DMA+0x2e>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e086      	b.n	800fedc <HAL_I2S_Transmit_DMA+0x13c>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d005      	beq.n	800fdee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800fdea:	2302      	movs	r3, #2
 800fdec:	e076      	b.n	800fedc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2203      	movs	r2, #3
 800fdf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	69db      	ldr	r3, [r3, #28]
 800fe08:	f003 0307 	and.w	r3, r3, #7
 800fe0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d002      	beq.n	800fe1a <HAL_I2S_Transmit_DMA+0x7a>
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	2b05      	cmp	r3, #5
 800fe18:	d10a      	bne.n	800fe30 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800fe1a:	88fb      	ldrh	r3, [r7, #6]
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800fe24:	88fb      	ldrh	r3, [r7, #6]
 800fe26:	005b      	lsls	r3, r3, #1
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe2e:	e005      	b.n	800fe3c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	88fa      	ldrh	r2, [r7, #6]
 800fe34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	88fa      	ldrh	r2, [r7, #6]
 800fe3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe40:	4a28      	ldr	r2, [pc, #160]	; (800fee4 <HAL_I2S_Transmit_DMA+0x144>)
 800fe42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe48:	4a27      	ldr	r2, [pc, #156]	; (800fee8 <HAL_I2S_Transmit_DMA+0x148>)
 800fe4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe50:	4a26      	ldr	r2, [pc, #152]	; (800feec <HAL_I2S_Transmit_DMA+0x14c>)
 800fe52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800fe5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800fe64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800fe6c:	f7fe fa4a 	bl	800e304 <HAL_DMA_Start_IT>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00f      	beq.n	800fe96 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe7a:	f043 0208 	orr.w	r2, r3, #8
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e022      	b.n	800fedc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	69db      	ldr	r3, [r3, #28]
 800fe9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d107      	bne.n	800feb4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	69da      	ldr	r2, [r3, #28]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800feb2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	f003 0302 	and.w	r3, r3, #2
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d107      	bne.n	800fed2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	685a      	ldr	r2, [r3, #4]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f042 0202 	orr.w	r2, r2, #2
 800fed0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	0800ff83 	.word	0x0800ff83
 800fee8:	0800ff41 	.word	0x0800ff41
 800feec:	0800ff9f 	.word	0x0800ff9f

0800fef0 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff4c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	69db      	ldr	r3, [r3, #28]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10e      	bne.n	800ff74 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f022 0202 	bic.w	r2, r2, #2
 800ff64:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff ffc5 	bl	800ff04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ff7a:	bf00      	nop
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b084      	sub	sp, #16
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	f7ff ffad 	bl	800fef0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ff96:	bf00      	nop
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b084      	sub	sp, #16
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffaa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f022 0203 	bic.w	r2, r2, #3
 800ffba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd4:	f043 0208 	orr.w	r2, r3, #8
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f7ff ffa5 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ffe2:	bf00      	nop
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b082      	sub	sp, #8
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff6:	881a      	ldrh	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	1c9a      	adds	r2, r3, #2
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801000c:	b29b      	uxth	r3, r3
 801000e:	3b01      	subs	r3, #1
 8010010:	b29a      	uxth	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801001a:	b29b      	uxth	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d10e      	bne.n	801003e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801002e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff ff63 	bl	800ff04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801003e:	bf00      	nop
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b082      	sub	sp, #8
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	68da      	ldr	r2, [r3, #12]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010058:	b292      	uxth	r2, r2
 801005a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010060:	1c9a      	adds	r2, r3, #2
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801006a:	b29b      	uxth	r3, r3
 801006c:	3b01      	subs	r3, #1
 801006e:	b29a      	uxth	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010078:	b29b      	uxth	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d10e      	bne.n	801009c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801008c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7ff ff3e 	bl	800ff18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	689b      	ldr	r3, [r3, #8]
 80100b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	2b04      	cmp	r3, #4
 80100be:	d13a      	bne.n	8010136 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d109      	bne.n	80100de <I2S_IRQHandler+0x3a>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100d4:	2b40      	cmp	r3, #64	; 0x40
 80100d6:	d102      	bne.n	80100de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff ffb4 	bl	8010046 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e4:	2b40      	cmp	r3, #64	; 0x40
 80100e6:	d126      	bne.n	8010136 <I2S_IRQHandler+0x92>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	f003 0320 	and.w	r3, r3, #32
 80100f2:	2b20      	cmp	r3, #32
 80100f4:	d11f      	bne.n	8010136 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	685a      	ldr	r2, [r3, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010104:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8010106:	2300      	movs	r3, #0
 8010108:	613b      	str	r3, [r7, #16]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	613b      	str	r3, [r7, #16]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	613b      	str	r3, [r7, #16]
 801011a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010128:	f043 0202 	orr.w	r2, r3, #2
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff fefb 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b03      	cmp	r3, #3
 8010140:	d136      	bne.n	80101b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f003 0302 	and.w	r3, r3, #2
 8010148:	2b02      	cmp	r3, #2
 801014a:	d109      	bne.n	8010160 <I2S_IRQHandler+0xbc>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010156:	2b80      	cmp	r3, #128	; 0x80
 8010158:	d102      	bne.n	8010160 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff ff45 	bl	800ffea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	f003 0308 	and.w	r3, r3, #8
 8010166:	2b08      	cmp	r3, #8
 8010168:	d122      	bne.n	80101b0 <I2S_IRQHandler+0x10c>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	f003 0320 	and.w	r3, r3, #32
 8010174:	2b20      	cmp	r3, #32
 8010176:	d11b      	bne.n	80101b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	685a      	ldr	r2, [r3, #4]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010186:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8010188:	2300      	movs	r3, #0
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a2:	f043 0204 	orr.w	r2, r3, #4
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff febe 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80101b0:	bf00      	nop
 80101b2:	3718      	adds	r7, #24
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b088      	sub	sp, #32
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a92      	ldr	r2, [pc, #584]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d101      	bne.n	80101d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80101d2:	4b92      	ldr	r3, [pc, #584]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80101d4:	e001      	b.n	80101da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80101d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a8b      	ldr	r2, [pc, #556]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d101      	bne.n	80101f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80101f0:	4b8a      	ldr	r3, [pc, #552]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80101f2:	e001      	b.n	80101f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80101f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010204:	d004      	beq.n	8010210 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	f040 8099 	bne.w	8010342 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	f003 0302 	and.w	r3, r3, #2
 8010216:	2b02      	cmp	r3, #2
 8010218:	d107      	bne.n	801022a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f925 	bl	8010474 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	f003 0301 	and.w	r3, r3, #1
 8010230:	2b01      	cmp	r3, #1
 8010232:	d107      	bne.n	8010244 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801023a:	2b00      	cmp	r3, #0
 801023c:	d002      	beq.n	8010244 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 f9c8 	bl	80105d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801024a:	2b40      	cmp	r3, #64	; 0x40
 801024c:	d13a      	bne.n	80102c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	f003 0320 	and.w	r3, r3, #32
 8010254:	2b00      	cmp	r3, #0
 8010256:	d035      	beq.n	80102c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a6e      	ldr	r2, [pc, #440]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d101      	bne.n	8010266 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8010262:	4b6e      	ldr	r3, [pc, #440]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010264:	e001      	b.n	801026a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8010266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4969      	ldr	r1, [pc, #420]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010272:	428b      	cmp	r3, r1
 8010274:	d101      	bne.n	801027a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8010276:	4b69      	ldr	r3, [pc, #420]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010278:	e001      	b.n	801027e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 801027a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801027e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010282:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010292:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8010294:	2300      	movs	r3, #0
 8010296:	60fb      	str	r3, [r7, #12]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	60fb      	str	r3, [r7, #12]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	60fb      	str	r3, [r7, #12]
 80102a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b6:	f043 0202 	orr.w	r2, r3, #2
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7ff fe34 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	f003 0308 	and.w	r3, r3, #8
 80102ca:	2b08      	cmp	r3, #8
 80102cc:	f040 80c3 	bne.w	8010456 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	f003 0320 	and.w	r3, r3, #32
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f000 80bd 	beq.w	8010456 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	685a      	ldr	r2, [r3, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80102ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a49      	ldr	r2, [pc, #292]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d101      	bne.n	80102fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80102f6:	4b49      	ldr	r3, [pc, #292]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80102f8:	e001      	b.n	80102fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80102fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4944      	ldr	r1, [pc, #272]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8010306:	428b      	cmp	r3, r1
 8010308:	d101      	bne.n	801030e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 801030a:	4b44      	ldr	r3, [pc, #272]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 801030c:	e001      	b.n	8010312 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 801030e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8010312:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010316:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8010318:	2300      	movs	r3, #0
 801031a:	60bb      	str	r3, [r7, #8]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	60bb      	str	r3, [r7, #8]
 8010324:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2201      	movs	r2, #1
 801032a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010332:	f043 0204 	orr.w	r2, r3, #4
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fdf6 	bl	800ff2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010340:	e089      	b.n	8010456 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	f003 0302 	and.w	r3, r3, #2
 8010348:	2b02      	cmp	r3, #2
 801034a:	d107      	bne.n	801035c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010352:	2b00      	cmp	r3, #0
 8010354:	d002      	beq.n	801035c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f8be 	bl	80104d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	2b01      	cmp	r3, #1
 8010364:	d107      	bne.n	8010376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f8fd 	bl	8010570 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801037c:	2b40      	cmp	r3, #64	; 0x40
 801037e:	d12f      	bne.n	80103e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	f003 0320 	and.w	r3, r3, #32
 8010386:	2b00      	cmp	r3, #0
 8010388:	d02a      	beq.n	80103e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	685a      	ldr	r2, [r3, #4]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010398:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a1e      	ldr	r2, [pc, #120]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d101      	bne.n	80103a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80103a4:	4b1d      	ldr	r3, [pc, #116]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80103a6:	e001      	b.n	80103ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80103a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4919      	ldr	r1, [pc, #100]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80103b4:	428b      	cmp	r3, r1
 80103b6:	d101      	bne.n	80103bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80103b8:	4b18      	ldr	r3, [pc, #96]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80103ba:	e001      	b.n	80103c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80103bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80103c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80103c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2201      	movs	r2, #1
 80103ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d2:	f043 0202 	orr.w	r2, r3, #2
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7ff fda6 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	f003 0308 	and.w	r3, r3, #8
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	d136      	bne.n	8010458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f003 0320 	and.w	r3, r3, #32
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d031      	beq.n	8010458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a07      	ldr	r2, [pc, #28]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d101      	bne.n	8010402 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80103fe:	4b07      	ldr	r3, [pc, #28]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010400:	e001      	b.n	8010406 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8010402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8010406:	685a      	ldr	r2, [r3, #4]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4902      	ldr	r1, [pc, #8]	; (8010418 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 801040e:	428b      	cmp	r3, r1
 8010410:	d106      	bne.n	8010420 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8010412:	4b02      	ldr	r3, [pc, #8]	; (801041c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8010414:	e006      	b.n	8010424 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8010416:	bf00      	nop
 8010418:	40003800 	.word	0x40003800
 801041c:	40003400 	.word	0x40003400
 8010420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8010424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010428:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010438:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010446:	f043 0204 	orr.w	r2, r3, #4
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff fd6c 	bl	800ff2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8010454:	e000      	b.n	8010458 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8010456:	bf00      	nop
}
 8010458:	bf00      	nop
 801045a:	3720      	adds	r7, #32
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010480:	1c99      	adds	r1, r3, #2
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	6251      	str	r1, [r2, #36]	; 0x24
 8010486:	881a      	ldrh	r2, [r3, #0]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010492:	b29b      	uxth	r3, r3
 8010494:	3b01      	subs	r3, #1
 8010496:	b29a      	uxth	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d113      	bne.n	80104ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80104b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d106      	bne.n	80104ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff ffc9 	bl	8010460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
	...

080104d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e4:	1c99      	adds	r1, r3, #2
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	6251      	str	r1, [r2, #36]	; 0x24
 80104ea:	8819      	ldrh	r1, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a1d      	ldr	r2, [pc, #116]	; (8010568 <I2SEx_TxISR_I2SExt+0x90>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d101      	bne.n	80104fa <I2SEx_TxISR_I2SExt+0x22>
 80104f6:	4b1d      	ldr	r3, [pc, #116]	; (801056c <I2SEx_TxISR_I2SExt+0x94>)
 80104f8:	e001      	b.n	80104fe <I2SEx_TxISR_I2SExt+0x26>
 80104fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80104fe:	460a      	mov	r2, r1
 8010500:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010506:	b29b      	uxth	r3, r3
 8010508:	3b01      	subs	r3, #1
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010514:	b29b      	uxth	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	d121      	bne.n	801055e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a12      	ldr	r2, [pc, #72]	; (8010568 <I2SEx_TxISR_I2SExt+0x90>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d101      	bne.n	8010528 <I2SEx_TxISR_I2SExt+0x50>
 8010524:	4b11      	ldr	r3, [pc, #68]	; (801056c <I2SEx_TxISR_I2SExt+0x94>)
 8010526:	e001      	b.n	801052c <I2SEx_TxISR_I2SExt+0x54>
 8010528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	490d      	ldr	r1, [pc, #52]	; (8010568 <I2SEx_TxISR_I2SExt+0x90>)
 8010534:	428b      	cmp	r3, r1
 8010536:	d101      	bne.n	801053c <I2SEx_TxISR_I2SExt+0x64>
 8010538:	4b0c      	ldr	r3, [pc, #48]	; (801056c <I2SEx_TxISR_I2SExt+0x94>)
 801053a:	e001      	b.n	8010540 <I2SEx_TxISR_I2SExt+0x68>
 801053c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8010540:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010544:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054a:	b29b      	uxth	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d106      	bne.n	801055e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff ff81 	bl	8010460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801055e:	bf00      	nop
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	40003800 	.word	0x40003800
 801056c:	40003400 	.word	0x40003400

08010570 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68d8      	ldr	r0, [r3, #12]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010582:	1c99      	adds	r1, r3, #2
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	62d1      	str	r1, [r2, #44]	; 0x2c
 8010588:	b282      	uxth	r2, r0
 801058a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010590:	b29b      	uxth	r3, r3
 8010592:	3b01      	subs	r3, #1
 8010594:	b29a      	uxth	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801059e:	b29b      	uxth	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d113      	bne.n	80105cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685a      	ldr	r2, [r3, #4]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80105b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d106      	bne.n	80105cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff ff4a 	bl	8010460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a20      	ldr	r2, [pc, #128]	; (8010664 <I2SEx_RxISR_I2SExt+0x90>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d101      	bne.n	80105ea <I2SEx_RxISR_I2SExt+0x16>
 80105e6:	4b20      	ldr	r3, [pc, #128]	; (8010668 <I2SEx_RxISR_I2SExt+0x94>)
 80105e8:	e001      	b.n	80105ee <I2SEx_RxISR_I2SExt+0x1a>
 80105ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80105ee:	68d8      	ldr	r0, [r3, #12]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f4:	1c99      	adds	r1, r3, #2
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80105fa:	b282      	uxth	r2, r0
 80105fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010602:	b29b      	uxth	r3, r3
 8010604:	3b01      	subs	r3, #1
 8010606:	b29a      	uxth	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010610:	b29b      	uxth	r3, r3
 8010612:	2b00      	cmp	r3, #0
 8010614:	d121      	bne.n	801065a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a12      	ldr	r2, [pc, #72]	; (8010664 <I2SEx_RxISR_I2SExt+0x90>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d101      	bne.n	8010624 <I2SEx_RxISR_I2SExt+0x50>
 8010620:	4b11      	ldr	r3, [pc, #68]	; (8010668 <I2SEx_RxISR_I2SExt+0x94>)
 8010622:	e001      	b.n	8010628 <I2SEx_RxISR_I2SExt+0x54>
 8010624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8010628:	685a      	ldr	r2, [r3, #4]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	490d      	ldr	r1, [pc, #52]	; (8010664 <I2SEx_RxISR_I2SExt+0x90>)
 8010630:	428b      	cmp	r3, r1
 8010632:	d101      	bne.n	8010638 <I2SEx_RxISR_I2SExt+0x64>
 8010634:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <I2SEx_RxISR_I2SExt+0x94>)
 8010636:	e001      	b.n	801063c <I2SEx_RxISR_I2SExt+0x68>
 8010638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801063c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010640:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010646:	b29b      	uxth	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d106      	bne.n	801065a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ff03 	bl	8010460 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801065a:	bf00      	nop
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	40003800 	.word	0x40003800
 8010668:	40003400 	.word	0x40003400

0801066c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b086      	sub	sp, #24
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e267      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	2b00      	cmp	r3, #0
 8010688:	d075      	beq.n	8010776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801068a:	4b88      	ldr	r3, [pc, #544]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f003 030c 	and.w	r3, r3, #12
 8010692:	2b04      	cmp	r3, #4
 8010694:	d00c      	beq.n	80106b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010696:	4b85      	ldr	r3, [pc, #532]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801069e:	2b08      	cmp	r3, #8
 80106a0:	d112      	bne.n	80106c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80106a2:	4b82      	ldr	r3, [pc, #520]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80106ae:	d10b      	bne.n	80106c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80106b0:	4b7e      	ldr	r3, [pc, #504]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d05b      	beq.n	8010774 <HAL_RCC_OscConfig+0x108>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d157      	bne.n	8010774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80106c4:	2301      	movs	r3, #1
 80106c6:	e242      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106d0:	d106      	bne.n	80106e0 <HAL_RCC_OscConfig+0x74>
 80106d2:	4b76      	ldr	r3, [pc, #472]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4a75      	ldr	r2, [pc, #468]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	e01d      	b.n	801071c <HAL_RCC_OscConfig+0xb0>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106e8:	d10c      	bne.n	8010704 <HAL_RCC_OscConfig+0x98>
 80106ea:	4b70      	ldr	r3, [pc, #448]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a6f      	ldr	r2, [pc, #444]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80106f4:	6013      	str	r3, [r2, #0]
 80106f6:	4b6d      	ldr	r3, [pc, #436]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a6c      	ldr	r2, [pc, #432]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80106fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010700:	6013      	str	r3, [r2, #0]
 8010702:	e00b      	b.n	801071c <HAL_RCC_OscConfig+0xb0>
 8010704:	4b69      	ldr	r3, [pc, #420]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4a68      	ldr	r2, [pc, #416]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 801070a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	4b66      	ldr	r3, [pc, #408]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a65      	ldr	r2, [pc, #404]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801071a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d013      	beq.n	801074c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010724:	f7fd fb3a 	bl	800dd9c <HAL_GetTick>
 8010728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801072a:	e008      	b.n	801073e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801072c:	f7fd fb36 	bl	800dd9c <HAL_GetTick>
 8010730:	4602      	mov	r2, r0
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	2b64      	cmp	r3, #100	; 0x64
 8010738:	d901      	bls.n	801073e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801073a:	2303      	movs	r3, #3
 801073c:	e207      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801073e:	4b5b      	ldr	r3, [pc, #364]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d0f0      	beq.n	801072c <HAL_RCC_OscConfig+0xc0>
 801074a:	e014      	b.n	8010776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801074c:	f7fd fb26 	bl	800dd9c <HAL_GetTick>
 8010750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010752:	e008      	b.n	8010766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010754:	f7fd fb22 	bl	800dd9c <HAL_GetTick>
 8010758:	4602      	mov	r2, r0
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	2b64      	cmp	r3, #100	; 0x64
 8010760:	d901      	bls.n	8010766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010762:	2303      	movs	r3, #3
 8010764:	e1f3      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010766:	4b51      	ldr	r3, [pc, #324]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1f0      	bne.n	8010754 <HAL_RCC_OscConfig+0xe8>
 8010772:	e000      	b.n	8010776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 0302 	and.w	r3, r3, #2
 801077e:	2b00      	cmp	r3, #0
 8010780:	d063      	beq.n	801084a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010782:	4b4a      	ldr	r3, [pc, #296]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	f003 030c 	and.w	r3, r3, #12
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00b      	beq.n	80107a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801078e:	4b47      	ldr	r3, [pc, #284]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010796:	2b08      	cmp	r3, #8
 8010798:	d11c      	bne.n	80107d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801079a:	4b44      	ldr	r3, [pc, #272]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d116      	bne.n	80107d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107a6:	4b41      	ldr	r3, [pc, #260]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 0302 	and.w	r3, r3, #2
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d005      	beq.n	80107be <HAL_RCC_OscConfig+0x152>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d001      	beq.n	80107be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e1c7      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80107be:	4b3b      	ldr	r3, [pc, #236]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	691b      	ldr	r3, [r3, #16]
 80107ca:	00db      	lsls	r3, r3, #3
 80107cc:	4937      	ldr	r1, [pc, #220]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80107ce:	4313      	orrs	r3, r2
 80107d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107d2:	e03a      	b.n	801084a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d020      	beq.n	801081e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80107dc:	4b34      	ldr	r3, [pc, #208]	; (80108b0 <HAL_RCC_OscConfig+0x244>)
 80107de:	2201      	movs	r2, #1
 80107e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107e2:	f7fd fadb 	bl	800dd9c <HAL_GetTick>
 80107e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107e8:	e008      	b.n	80107fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107ea:	f7fd fad7 	bl	800dd9c <HAL_GetTick>
 80107ee:	4602      	mov	r2, r0
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	d901      	bls.n	80107fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80107f8:	2303      	movs	r3, #3
 80107fa:	e1a8      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107fc:	4b2b      	ldr	r3, [pc, #172]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f003 0302 	and.w	r3, r3, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	d0f0      	beq.n	80107ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	00db      	lsls	r3, r3, #3
 8010816:	4925      	ldr	r1, [pc, #148]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010818:	4313      	orrs	r3, r2
 801081a:	600b      	str	r3, [r1, #0]
 801081c:	e015      	b.n	801084a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801081e:	4b24      	ldr	r3, [pc, #144]	; (80108b0 <HAL_RCC_OscConfig+0x244>)
 8010820:	2200      	movs	r2, #0
 8010822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010824:	f7fd faba 	bl	800dd9c <HAL_GetTick>
 8010828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801082a:	e008      	b.n	801083e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801082c:	f7fd fab6 	bl	800dd9c <HAL_GetTick>
 8010830:	4602      	mov	r2, r0
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	2b02      	cmp	r3, #2
 8010838:	d901      	bls.n	801083e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801083a:	2303      	movs	r3, #3
 801083c:	e187      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801083e:	4b1b      	ldr	r3, [pc, #108]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f003 0302 	and.w	r3, r3, #2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1f0      	bne.n	801082c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f003 0308 	and.w	r3, r3, #8
 8010852:	2b00      	cmp	r3, #0
 8010854:	d036      	beq.n	80108c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	695b      	ldr	r3, [r3, #20]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d016      	beq.n	801088c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801085e:	4b15      	ldr	r3, [pc, #84]	; (80108b4 <HAL_RCC_OscConfig+0x248>)
 8010860:	2201      	movs	r2, #1
 8010862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010864:	f7fd fa9a 	bl	800dd9c <HAL_GetTick>
 8010868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801086a:	e008      	b.n	801087e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801086c:	f7fd fa96 	bl	800dd9c <HAL_GetTick>
 8010870:	4602      	mov	r2, r0
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	2b02      	cmp	r3, #2
 8010878:	d901      	bls.n	801087e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801087a:	2303      	movs	r3, #3
 801087c:	e167      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801087e:	4b0b      	ldr	r3, [pc, #44]	; (80108ac <HAL_RCC_OscConfig+0x240>)
 8010880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010882:	f003 0302 	and.w	r3, r3, #2
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0f0      	beq.n	801086c <HAL_RCC_OscConfig+0x200>
 801088a:	e01b      	b.n	80108c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801088c:	4b09      	ldr	r3, [pc, #36]	; (80108b4 <HAL_RCC_OscConfig+0x248>)
 801088e:	2200      	movs	r2, #0
 8010890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010892:	f7fd fa83 	bl	800dd9c <HAL_GetTick>
 8010896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010898:	e00e      	b.n	80108b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801089a:	f7fd fa7f 	bl	800dd9c <HAL_GetTick>
 801089e:	4602      	mov	r2, r0
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	d907      	bls.n	80108b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80108a8:	2303      	movs	r3, #3
 80108aa:	e150      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
 80108ac:	40023800 	.word	0x40023800
 80108b0:	42470000 	.word	0x42470000
 80108b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80108b8:	4b88      	ldr	r3, [pc, #544]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80108ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108bc:	f003 0302 	and.w	r3, r3, #2
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1ea      	bne.n	801089a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 0304 	and.w	r3, r3, #4
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 8097 	beq.w	8010a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80108d2:	2300      	movs	r3, #0
 80108d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80108d6:	4b81      	ldr	r3, [pc, #516]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80108d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d10f      	bne.n	8010902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80108e2:	2300      	movs	r3, #0
 80108e4:	60bb      	str	r3, [r7, #8]
 80108e6:	4b7d      	ldr	r3, [pc, #500]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80108e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ea:	4a7c      	ldr	r2, [pc, #496]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80108ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108f0:	6413      	str	r3, [r2, #64]	; 0x40
 80108f2:	4b7a      	ldr	r3, [pc, #488]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80108f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108fa:	60bb      	str	r3, [r7, #8]
 80108fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80108fe:	2301      	movs	r3, #1
 8010900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010902:	4b77      	ldr	r3, [pc, #476]	; (8010ae0 <HAL_RCC_OscConfig+0x474>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801090a:	2b00      	cmp	r3, #0
 801090c:	d118      	bne.n	8010940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801090e:	4b74      	ldr	r3, [pc, #464]	; (8010ae0 <HAL_RCC_OscConfig+0x474>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a73      	ldr	r2, [pc, #460]	; (8010ae0 <HAL_RCC_OscConfig+0x474>)
 8010914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801091a:	f7fd fa3f 	bl	800dd9c <HAL_GetTick>
 801091e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010920:	e008      	b.n	8010934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010922:	f7fd fa3b 	bl	800dd9c <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	2b02      	cmp	r3, #2
 801092e:	d901      	bls.n	8010934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e10c      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010934:	4b6a      	ldr	r3, [pc, #424]	; (8010ae0 <HAL_RCC_OscConfig+0x474>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801093c:	2b00      	cmp	r3, #0
 801093e:	d0f0      	beq.n	8010922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	2b01      	cmp	r3, #1
 8010946:	d106      	bne.n	8010956 <HAL_RCC_OscConfig+0x2ea>
 8010948:	4b64      	ldr	r3, [pc, #400]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801094a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801094c:	4a63      	ldr	r2, [pc, #396]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801094e:	f043 0301 	orr.w	r3, r3, #1
 8010952:	6713      	str	r3, [r2, #112]	; 0x70
 8010954:	e01c      	b.n	8010990 <HAL_RCC_OscConfig+0x324>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	2b05      	cmp	r3, #5
 801095c:	d10c      	bne.n	8010978 <HAL_RCC_OscConfig+0x30c>
 801095e:	4b5f      	ldr	r3, [pc, #380]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010962:	4a5e      	ldr	r2, [pc, #376]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010964:	f043 0304 	orr.w	r3, r3, #4
 8010968:	6713      	str	r3, [r2, #112]	; 0x70
 801096a:	4b5c      	ldr	r3, [pc, #368]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801096c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801096e:	4a5b      	ldr	r2, [pc, #364]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010970:	f043 0301 	orr.w	r3, r3, #1
 8010974:	6713      	str	r3, [r2, #112]	; 0x70
 8010976:	e00b      	b.n	8010990 <HAL_RCC_OscConfig+0x324>
 8010978:	4b58      	ldr	r3, [pc, #352]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801097a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801097c:	4a57      	ldr	r2, [pc, #348]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801097e:	f023 0301 	bic.w	r3, r3, #1
 8010982:	6713      	str	r3, [r2, #112]	; 0x70
 8010984:	4b55      	ldr	r3, [pc, #340]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010988:	4a54      	ldr	r2, [pc, #336]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 801098a:	f023 0304 	bic.w	r3, r3, #4
 801098e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d015      	beq.n	80109c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010998:	f7fd fa00 	bl	800dd9c <HAL_GetTick>
 801099c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801099e:	e00a      	b.n	80109b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80109a0:	f7fd f9fc 	bl	800dd9c <HAL_GetTick>
 80109a4:	4602      	mov	r2, r0
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d901      	bls.n	80109b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e0cb      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80109b6:	4b49      	ldr	r3, [pc, #292]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80109b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ba:	f003 0302 	and.w	r3, r3, #2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0ee      	beq.n	80109a0 <HAL_RCC_OscConfig+0x334>
 80109c2:	e014      	b.n	80109ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80109c4:	f7fd f9ea 	bl	800dd9c <HAL_GetTick>
 80109c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80109ca:	e00a      	b.n	80109e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80109cc:	f7fd f9e6 	bl	800dd9c <HAL_GetTick>
 80109d0:	4602      	mov	r2, r0
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80109da:	4293      	cmp	r3, r2
 80109dc:	d901      	bls.n	80109e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80109de:	2303      	movs	r3, #3
 80109e0:	e0b5      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80109e2:	4b3e      	ldr	r3, [pc, #248]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80109e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109e6:	f003 0302 	and.w	r3, r3, #2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d1ee      	bne.n	80109cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80109ee:	7dfb      	ldrb	r3, [r7, #23]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d105      	bne.n	8010a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80109f4:	4b39      	ldr	r3, [pc, #228]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80109f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f8:	4a38      	ldr	r2, [pc, #224]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 80109fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	699b      	ldr	r3, [r3, #24]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f000 80a1 	beq.w	8010b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010a0a:	4b34      	ldr	r3, [pc, #208]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	f003 030c 	and.w	r3, r3, #12
 8010a12:	2b08      	cmp	r3, #8
 8010a14:	d05c      	beq.n	8010ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	699b      	ldr	r3, [r3, #24]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d141      	bne.n	8010aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a1e:	4b31      	ldr	r3, [pc, #196]	; (8010ae4 <HAL_RCC_OscConfig+0x478>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a24:	f7fd f9ba 	bl	800dd9c <HAL_GetTick>
 8010a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a2a:	e008      	b.n	8010a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a2c:	f7fd f9b6 	bl	800dd9c <HAL_GetTick>
 8010a30:	4602      	mov	r2, r0
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d901      	bls.n	8010a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e087      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a3e:	4b27      	ldr	r3, [pc, #156]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d1f0      	bne.n	8010a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	69da      	ldr	r2, [r3, #28]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6a1b      	ldr	r3, [r3, #32]
 8010a52:	431a      	orrs	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a58:	019b      	lsls	r3, r3, #6
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a60:	085b      	lsrs	r3, r3, #1
 8010a62:	3b01      	subs	r3, #1
 8010a64:	041b      	lsls	r3, r3, #16
 8010a66:	431a      	orrs	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6c:	061b      	lsls	r3, r3, #24
 8010a6e:	491b      	ldr	r1, [pc, #108]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010a70:	4313      	orrs	r3, r2
 8010a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a74:	4b1b      	ldr	r3, [pc, #108]	; (8010ae4 <HAL_RCC_OscConfig+0x478>)
 8010a76:	2201      	movs	r2, #1
 8010a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a7a:	f7fd f98f 	bl	800dd9c <HAL_GetTick>
 8010a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a80:	e008      	b.n	8010a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a82:	f7fd f98b 	bl	800dd9c <HAL_GetTick>
 8010a86:	4602      	mov	r2, r0
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d901      	bls.n	8010a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010a90:	2303      	movs	r3, #3
 8010a92:	e05c      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a94:	4b11      	ldr	r3, [pc, #68]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d0f0      	beq.n	8010a82 <HAL_RCC_OscConfig+0x416>
 8010aa0:	e054      	b.n	8010b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010aa2:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <HAL_RCC_OscConfig+0x478>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010aa8:	f7fd f978 	bl	800dd9c <HAL_GetTick>
 8010aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010aae:	e008      	b.n	8010ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ab0:	f7fd f974 	bl	800dd9c <HAL_GetTick>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d901      	bls.n	8010ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	e045      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ac2:	4b06      	ldr	r3, [pc, #24]	; (8010adc <HAL_RCC_OscConfig+0x470>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1f0      	bne.n	8010ab0 <HAL_RCC_OscConfig+0x444>
 8010ace:	e03d      	b.n	8010b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d107      	bne.n	8010ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e038      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
 8010adc:	40023800 	.word	0x40023800
 8010ae0:	40007000 	.word	0x40007000
 8010ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010ae8:	4b1b      	ldr	r3, [pc, #108]	; (8010b58 <HAL_RCC_OscConfig+0x4ec>)
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	699b      	ldr	r3, [r3, #24]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d028      	beq.n	8010b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d121      	bne.n	8010b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d11a      	bne.n	8010b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010b18:	4013      	ands	r3, r2
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d111      	bne.n	8010b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b2e:	085b      	lsrs	r3, r3, #1
 8010b30:	3b01      	subs	r3, #1
 8010b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d107      	bne.n	8010b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d001      	beq.n	8010b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e000      	b.n	8010b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	40023800 	.word	0x40023800

08010b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d101      	bne.n	8010b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e0cc      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010b70:	4b68      	ldr	r3, [pc, #416]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f003 0307 	and.w	r3, r3, #7
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d90c      	bls.n	8010b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b7e:	4b65      	ldr	r3, [pc, #404]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	b2d2      	uxtb	r2, r2
 8010b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b86:	4b63      	ldr	r3, [pc, #396]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	683a      	ldr	r2, [r7, #0]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d001      	beq.n	8010b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010b94:	2301      	movs	r3, #1
 8010b96:	e0b8      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f003 0302 	and.w	r3, r3, #2
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d020      	beq.n	8010be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f003 0304 	and.w	r3, r3, #4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d005      	beq.n	8010bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010bb0:	4b59      	ldr	r3, [pc, #356]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	4a58      	ldr	r2, [pc, #352]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f003 0308 	and.w	r3, r3, #8
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d005      	beq.n	8010bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010bc8:	4b53      	ldr	r3, [pc, #332]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bca:	689b      	ldr	r3, [r3, #8]
 8010bcc:	4a52      	ldr	r2, [pc, #328]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010bd4:	4b50      	ldr	r3, [pc, #320]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	494d      	ldr	r1, [pc, #308]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010be2:	4313      	orrs	r3, r2
 8010be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d044      	beq.n	8010c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d107      	bne.n	8010c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010bfa:	4b47      	ldr	r3, [pc, #284]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d119      	bne.n	8010c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e07f      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d003      	beq.n	8010c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d107      	bne.n	8010c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c1a:	4b3f      	ldr	r3, [pc, #252]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c26:	2301      	movs	r3, #1
 8010c28:	e06f      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c2a:	4b3b      	ldr	r3, [pc, #236]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f003 0302 	and.w	r3, r3, #2
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d101      	bne.n	8010c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c36:	2301      	movs	r3, #1
 8010c38:	e067      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010c3a:	4b37      	ldr	r3, [pc, #220]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	f023 0203 	bic.w	r2, r3, #3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	4934      	ldr	r1, [pc, #208]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010c4c:	f7fd f8a6 	bl	800dd9c <HAL_GetTick>
 8010c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c52:	e00a      	b.n	8010c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c54:	f7fd f8a2 	bl	800dd9c <HAL_GetTick>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d901      	bls.n	8010c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010c66:	2303      	movs	r3, #3
 8010c68:	e04f      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c6a:	4b2b      	ldr	r3, [pc, #172]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	f003 020c 	and.w	r2, r3, #12
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d1eb      	bne.n	8010c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010c7c:	4b25      	ldr	r3, [pc, #148]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f003 0307 	and.w	r3, r3, #7
 8010c84:	683a      	ldr	r2, [r7, #0]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d20c      	bcs.n	8010ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c8a:	4b22      	ldr	r3, [pc, #136]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010c8c:	683a      	ldr	r2, [r7, #0]
 8010c8e:	b2d2      	uxtb	r2, r2
 8010c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c92:	4b20      	ldr	r3, [pc, #128]	; (8010d14 <HAL_RCC_ClockConfig+0x1b8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f003 0307 	and.w	r3, r3, #7
 8010c9a:	683a      	ldr	r2, [r7, #0]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d001      	beq.n	8010ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e032      	b.n	8010d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f003 0304 	and.w	r3, r3, #4
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d008      	beq.n	8010cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010cb0:	4b19      	ldr	r3, [pc, #100]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	4916      	ldr	r1, [pc, #88]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f003 0308 	and.w	r3, r3, #8
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d009      	beq.n	8010ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010cce:	4b12      	ldr	r3, [pc, #72]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010cd0:	689b      	ldr	r3, [r3, #8]
 8010cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	490e      	ldr	r1, [pc, #56]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010ce2:	f000 f821 	bl	8010d28 <HAL_RCC_GetSysClockFreq>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	4b0b      	ldr	r3, [pc, #44]	; (8010d18 <HAL_RCC_ClockConfig+0x1bc>)
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	091b      	lsrs	r3, r3, #4
 8010cee:	f003 030f 	and.w	r3, r3, #15
 8010cf2:	490a      	ldr	r1, [pc, #40]	; (8010d1c <HAL_RCC_ClockConfig+0x1c0>)
 8010cf4:	5ccb      	ldrb	r3, [r1, r3]
 8010cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cfa:	4a09      	ldr	r2, [pc, #36]	; (8010d20 <HAL_RCC_ClockConfig+0x1c4>)
 8010cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010cfe:	4b09      	ldr	r3, [pc, #36]	; (8010d24 <HAL_RCC_ClockConfig+0x1c8>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fd f806 	bl	800dd14 <HAL_InitTick>

  return HAL_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3710      	adds	r7, #16
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	40023c00 	.word	0x40023c00
 8010d18:	40023800 	.word	0x40023800
 8010d1c:	08011c48 	.word	0x08011c48
 8010d20:	20000004 	.word	0x20000004
 8010d24:	20000008 	.word	0x20000008

08010d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d2c:	b094      	sub	sp, #80	; 0x50
 8010d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010d30:	2300      	movs	r3, #0
 8010d32:	647b      	str	r3, [r7, #68]	; 0x44
 8010d34:	2300      	movs	r3, #0
 8010d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d38:	2300      	movs	r3, #0
 8010d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010d40:	4b79      	ldr	r3, [pc, #484]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	f003 030c 	and.w	r3, r3, #12
 8010d48:	2b08      	cmp	r3, #8
 8010d4a:	d00d      	beq.n	8010d68 <HAL_RCC_GetSysClockFreq+0x40>
 8010d4c:	2b08      	cmp	r3, #8
 8010d4e:	f200 80e1 	bhi.w	8010f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d002      	beq.n	8010d5c <HAL_RCC_GetSysClockFreq+0x34>
 8010d56:	2b04      	cmp	r3, #4
 8010d58:	d003      	beq.n	8010d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8010d5a:	e0db      	b.n	8010f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010d5c:	4b73      	ldr	r3, [pc, #460]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8010d5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8010d60:	e0db      	b.n	8010f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010d62:	4b73      	ldr	r3, [pc, #460]	; (8010f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8010d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010d66:	e0d8      	b.n	8010f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010d68:	4b6f      	ldr	r3, [pc, #444]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010d72:	4b6d      	ldr	r3, [pc, #436]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d063      	beq.n	8010e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d7e:	4b6a      	ldr	r3, [pc, #424]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	099b      	lsrs	r3, r3, #6
 8010d84:	2200      	movs	r2, #0
 8010d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d90:	633b      	str	r3, [r7, #48]	; 0x30
 8010d92:	2300      	movs	r3, #0
 8010d94:	637b      	str	r3, [r7, #52]	; 0x34
 8010d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	462b      	mov	r3, r5
 8010d9e:	f04f 0000 	mov.w	r0, #0
 8010da2:	f04f 0100 	mov.w	r1, #0
 8010da6:	0159      	lsls	r1, r3, #5
 8010da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010dac:	0150      	lsls	r0, r2, #5
 8010dae:	4602      	mov	r2, r0
 8010db0:	460b      	mov	r3, r1
 8010db2:	4621      	mov	r1, r4
 8010db4:	1a51      	subs	r1, r2, r1
 8010db6:	6139      	str	r1, [r7, #16]
 8010db8:	4629      	mov	r1, r5
 8010dba:	eb63 0301 	sbc.w	r3, r3, r1
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	f04f 0200 	mov.w	r2, #0
 8010dc4:	f04f 0300 	mov.w	r3, #0
 8010dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010dcc:	4659      	mov	r1, fp
 8010dce:	018b      	lsls	r3, r1, #6
 8010dd0:	4651      	mov	r1, sl
 8010dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010dd6:	4651      	mov	r1, sl
 8010dd8:	018a      	lsls	r2, r1, #6
 8010dda:	4651      	mov	r1, sl
 8010ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8010de0:	4659      	mov	r1, fp
 8010de2:	eb63 0901 	sbc.w	r9, r3, r1
 8010de6:	f04f 0200 	mov.w	r2, #0
 8010dea:	f04f 0300 	mov.w	r3, #0
 8010dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010dfa:	4690      	mov	r8, r2
 8010dfc:	4699      	mov	r9, r3
 8010dfe:	4623      	mov	r3, r4
 8010e00:	eb18 0303 	adds.w	r3, r8, r3
 8010e04:	60bb      	str	r3, [r7, #8]
 8010e06:	462b      	mov	r3, r5
 8010e08:	eb49 0303 	adc.w	r3, r9, r3
 8010e0c:	60fb      	str	r3, [r7, #12]
 8010e0e:	f04f 0200 	mov.w	r2, #0
 8010e12:	f04f 0300 	mov.w	r3, #0
 8010e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	024b      	lsls	r3, r1, #9
 8010e1e:	4621      	mov	r1, r4
 8010e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8010e24:	4621      	mov	r1, r4
 8010e26:	024a      	lsls	r2, r1, #9
 8010e28:	4610      	mov	r0, r2
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2e:	2200      	movs	r2, #0
 8010e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010e38:	f7fb fe0c 	bl	800ca54 <__aeabi_uldivmod>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	4613      	mov	r3, r2
 8010e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e44:	e058      	b.n	8010ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010e46:	4b38      	ldr	r3, [pc, #224]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	099b      	lsrs	r3, r3, #6
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	4618      	mov	r0, r3
 8010e50:	4611      	mov	r1, r2
 8010e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8010e56:	623b      	str	r3, [r7, #32]
 8010e58:	2300      	movs	r3, #0
 8010e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010e60:	4642      	mov	r2, r8
 8010e62:	464b      	mov	r3, r9
 8010e64:	f04f 0000 	mov.w	r0, #0
 8010e68:	f04f 0100 	mov.w	r1, #0
 8010e6c:	0159      	lsls	r1, r3, #5
 8010e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010e72:	0150      	lsls	r0, r2, #5
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	4641      	mov	r1, r8
 8010e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8010e7e:	4649      	mov	r1, r9
 8010e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8010e84:	f04f 0200 	mov.w	r2, #0
 8010e88:	f04f 0300 	mov.w	r3, #0
 8010e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010e98:	ebb2 040a 	subs.w	r4, r2, sl
 8010e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8010ea0:	f04f 0200 	mov.w	r2, #0
 8010ea4:	f04f 0300 	mov.w	r3, #0
 8010ea8:	00eb      	lsls	r3, r5, #3
 8010eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010eae:	00e2      	lsls	r2, r4, #3
 8010eb0:	4614      	mov	r4, r2
 8010eb2:	461d      	mov	r5, r3
 8010eb4:	4643      	mov	r3, r8
 8010eb6:	18e3      	adds	r3, r4, r3
 8010eb8:	603b      	str	r3, [r7, #0]
 8010eba:	464b      	mov	r3, r9
 8010ebc:	eb45 0303 	adc.w	r3, r5, r3
 8010ec0:	607b      	str	r3, [r7, #4]
 8010ec2:	f04f 0200 	mov.w	r2, #0
 8010ec6:	f04f 0300 	mov.w	r3, #0
 8010eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010ece:	4629      	mov	r1, r5
 8010ed0:	028b      	lsls	r3, r1, #10
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010ed8:	4621      	mov	r1, r4
 8010eda:	028a      	lsls	r2, r1, #10
 8010edc:	4610      	mov	r0, r2
 8010ede:	4619      	mov	r1, r3
 8010ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	61bb      	str	r3, [r7, #24]
 8010ee6:	61fa      	str	r2, [r7, #28]
 8010ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010eec:	f7fb fdb2 	bl	800ca54 <__aeabi_uldivmod>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010ef8:	4b0b      	ldr	r3, [pc, #44]	; (8010f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	0c1b      	lsrs	r3, r3, #16
 8010efe:	f003 0303 	and.w	r3, r3, #3
 8010f02:	3301      	adds	r3, #1
 8010f04:	005b      	lsls	r3, r3, #1
 8010f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8010f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010f12:	e002      	b.n	8010f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010f14:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8010f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3750      	adds	r7, #80	; 0x50
 8010f20:	46bd      	mov	sp, r7
 8010f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010f26:	bf00      	nop
 8010f28:	40023800 	.word	0x40023800
 8010f2c:	00f42400 	.word	0x00f42400
 8010f30:	007a1200 	.word	0x007a1200

08010f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010f34:	b480      	push	{r7}
 8010f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010f38:	4b03      	ldr	r3, [pc, #12]	; (8010f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	20000004 	.word	0x20000004

08010f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010f50:	f7ff fff0 	bl	8010f34 <HAL_RCC_GetHCLKFreq>
 8010f54:	4602      	mov	r2, r0
 8010f56:	4b05      	ldr	r3, [pc, #20]	; (8010f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	0a9b      	lsrs	r3, r3, #10
 8010f5c:	f003 0307 	and.w	r3, r3, #7
 8010f60:	4903      	ldr	r1, [pc, #12]	; (8010f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010f62:	5ccb      	ldrb	r3, [r1, r3]
 8010f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	40023800 	.word	0x40023800
 8010f70:	08011c58 	.word	0x08011c58

08010f74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b086      	sub	sp, #24
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8010f80:	2300      	movs	r3, #0
 8010f82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f003 0301 	and.w	r3, r3, #1
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d105      	bne.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d035      	beq.n	8011008 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8010f9c:	4b62      	ldr	r3, [pc, #392]	; (8011128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010fa2:	f7fc fefb 	bl	800dd9c <HAL_GetTick>
 8010fa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010fa8:	e008      	b.n	8010fbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010faa:	f7fc fef7 	bl	800dd9c <HAL_GetTick>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d901      	bls.n	8010fbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e0b0      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010fbc:	4b5b      	ldr	r3, [pc, #364]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1f0      	bne.n	8010faa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	019a      	lsls	r2, r3, #6
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	689b      	ldr	r3, [r3, #8]
 8010fd2:	071b      	lsls	r3, r3, #28
 8010fd4:	4955      	ldr	r1, [pc, #340]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8010fdc:	4b52      	ldr	r3, [pc, #328]	; (8011128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8010fde:	2201      	movs	r2, #1
 8010fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010fe2:	f7fc fedb 	bl	800dd9c <HAL_GetTick>
 8010fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010fe8:	e008      	b.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010fea:	f7fc fed7 	bl	800dd9c <HAL_GetTick>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	2b02      	cmp	r3, #2
 8010ff6:	d901      	bls.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	e090      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010ffc:	4b4b      	ldr	r3, [pc, #300]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d0f0      	beq.n	8010fea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 0302 	and.w	r3, r3, #2
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 8083 	beq.w	801111c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011016:	2300      	movs	r3, #0
 8011018:	60fb      	str	r3, [r7, #12]
 801101a:	4b44      	ldr	r3, [pc, #272]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801101e:	4a43      	ldr	r2, [pc, #268]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011024:	6413      	str	r3, [r2, #64]	; 0x40
 8011026:	4b41      	ldr	r3, [pc, #260]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801102e:	60fb      	str	r3, [r7, #12]
 8011030:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8011032:	4b3f      	ldr	r3, [pc, #252]	; (8011130 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4a3e      	ldr	r2, [pc, #248]	; (8011130 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8011038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801103c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801103e:	f7fc fead 	bl	800dd9c <HAL_GetTick>
 8011042:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011044:	e008      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011046:	f7fc fea9 	bl	800dd9c <HAL_GetTick>
 801104a:	4602      	mov	r2, r0
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	2b02      	cmp	r3, #2
 8011052:	d901      	bls.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8011054:	2303      	movs	r3, #3
 8011056:	e062      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011058:	4b35      	ldr	r3, [pc, #212]	; (8011130 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0f0      	beq.n	8011046 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011064:	4b31      	ldr	r3, [pc, #196]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801106c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d02f      	beq.n	80110d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	429a      	cmp	r2, r3
 8011080:	d028      	beq.n	80110d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011082:	4b2a      	ldr	r3, [pc, #168]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801108a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801108c:	4b29      	ldr	r3, [pc, #164]	; (8011134 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 801108e:	2201      	movs	r2, #1
 8011090:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011092:	4b28      	ldr	r3, [pc, #160]	; (8011134 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8011094:	2200      	movs	r2, #0
 8011096:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8011098:	4a24      	ldr	r2, [pc, #144]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801109e:	4b23      	ldr	r3, [pc, #140]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80110a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a2:	f003 0301 	and.w	r3, r3, #1
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d114      	bne.n	80110d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80110aa:	f7fc fe77 	bl	800dd9c <HAL_GetTick>
 80110ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110b0:	e00a      	b.n	80110c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110b2:	f7fc fe73 	bl	800dd9c <HAL_GetTick>
 80110b6:	4602      	mov	r2, r0
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	1ad3      	subs	r3, r2, r3
 80110bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d901      	bls.n	80110c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80110c4:	2303      	movs	r3, #3
 80110c6:	e02a      	b.n	801111e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110c8:	4b18      	ldr	r3, [pc, #96]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80110ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110cc:	f003 0302 	and.w	r3, r3, #2
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d0ee      	beq.n	80110b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110e0:	d10d      	bne.n	80110fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80110e2:	4b12      	ldr	r3, [pc, #72]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80110f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110f6:	490d      	ldr	r1, [pc, #52]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80110f8:	4313      	orrs	r3, r2
 80110fa:	608b      	str	r3, [r1, #8]
 80110fc:	e005      	b.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80110fe:	4b0b      	ldr	r3, [pc, #44]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	4a0a      	ldr	r2, [pc, #40]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011104:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8011108:	6093      	str	r3, [r2, #8]
 801110a:	4b08      	ldr	r3, [pc, #32]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801110c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011116:	4905      	ldr	r1, [pc, #20]	; (801112c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8011118:	4313      	orrs	r3, r2
 801111a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3718      	adds	r7, #24
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	42470068 	.word	0x42470068
 801112c:	40023800 	.word	0x40023800
 8011130:	40007000 	.word	0x40007000
 8011134:	42470e40 	.word	0x42470e40

08011138 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011138:	b480      	push	{r7}
 801113a:	b087      	sub	sp, #28
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8011140:	2300      	movs	r3, #0
 8011142:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8011144:	2300      	movs	r3, #0
 8011146:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8011148:	2300      	movs	r3, #0
 801114a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d13e      	bne.n	80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8011156:	4b23      	ldr	r3, [pc, #140]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801115e:	60fb      	str	r3, [r7, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d005      	beq.n	8011172 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d12f      	bne.n	80111cc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 801116c:	4b1e      	ldr	r3, [pc, #120]	; (80111e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801116e:	617b      	str	r3, [r7, #20]
          break;
 8011170:	e02f      	b.n	80111d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011172:	4b1c      	ldr	r3, [pc, #112]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801117a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801117e:	d108      	bne.n	8011192 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8011180:	4b18      	ldr	r3, [pc, #96]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011188:	4a18      	ldr	r2, [pc, #96]	; (80111ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 801118a:	fbb2 f3f3 	udiv	r3, r2, r3
 801118e:	613b      	str	r3, [r7, #16]
 8011190:	e007      	b.n	80111a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8011192:	4b14      	ldr	r3, [pc, #80]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801119a:	4a15      	ldr	r2, [pc, #84]	; (80111f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 801119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80111a0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80111a2:	4b10      	ldr	r3, [pc, #64]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80111a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111a8:	099b      	lsrs	r3, r3, #6
 80111aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	fb02 f303 	mul.w	r3, r2, r3
 80111b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80111b6:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80111b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111bc:	0f1b      	lsrs	r3, r3, #28
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	68ba      	ldr	r2, [r7, #8]
 80111c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80111c8:	617b      	str	r3, [r7, #20]
          break;
 80111ca:	e002      	b.n	80111d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80111cc:	2300      	movs	r3, #0
 80111ce:	617b      	str	r3, [r7, #20]
          break;
 80111d0:	bf00      	nop
        }
      }
      break;
 80111d2:	bf00      	nop
    }
  }
  return frequency;
 80111d4:	697b      	ldr	r3, [r7, #20]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	371c      	adds	r7, #28
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	40023800 	.word	0x40023800
 80111e8:	00bb8000 	.word	0x00bb8000
 80111ec:	007a1200 	.word	0x007a1200
 80111f0:	00f42400 	.word	0x00f42400

080111f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e041      	b.n	801128a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7fc fcb8 	bl	800db90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2202      	movs	r2, #2
 8011224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3304      	adds	r3, #4
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f000 fa96 	bl	8011764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2201      	movs	r2, #1
 801123c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2201      	movs	r2, #1
 801124c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2201      	movs	r2, #1
 8011254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2201      	movs	r2, #1
 801125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2201      	movs	r2, #1
 8011264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2201      	movs	r2, #1
 801127c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011288:	2300      	movs	r3, #0
}
 801128a:	4618      	mov	r0, r3
 801128c:	3708      	adds	r7, #8
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
	...

08011294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d001      	beq.n	80112ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80112a8:	2301      	movs	r3, #1
 80112aa:	e04e      	b.n	801134a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2202      	movs	r2, #2
 80112b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	68da      	ldr	r2, [r3, #12]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f042 0201 	orr.w	r2, r2, #1
 80112c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a23      	ldr	r2, [pc, #140]	; (8011358 <HAL_TIM_Base_Start_IT+0xc4>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d022      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112d6:	d01d      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	4a1f      	ldr	r2, [pc, #124]	; (801135c <HAL_TIM_Base_Start_IT+0xc8>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d018      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a1e      	ldr	r2, [pc, #120]	; (8011360 <HAL_TIM_Base_Start_IT+0xcc>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d013      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a1c      	ldr	r2, [pc, #112]	; (8011364 <HAL_TIM_Base_Start_IT+0xd0>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d00e      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4a1b      	ldr	r2, [pc, #108]	; (8011368 <HAL_TIM_Base_Start_IT+0xd4>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d009      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a19      	ldr	r2, [pc, #100]	; (801136c <HAL_TIM_Base_Start_IT+0xd8>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d004      	beq.n	8011314 <HAL_TIM_Base_Start_IT+0x80>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a18      	ldr	r2, [pc, #96]	; (8011370 <HAL_TIM_Base_Start_IT+0xdc>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d111      	bne.n	8011338 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	f003 0307 	and.w	r3, r3, #7
 801131e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b06      	cmp	r3, #6
 8011324:	d010      	beq.n	8011348 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f042 0201 	orr.w	r2, r2, #1
 8011334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011336:	e007      	b.n	8011348 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f042 0201 	orr.w	r2, r2, #1
 8011346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3714      	adds	r7, #20
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	40010000 	.word	0x40010000
 801135c:	40000400 	.word	0x40000400
 8011360:	40000800 	.word	0x40000800
 8011364:	40000c00 	.word	0x40000c00
 8011368:	40010400 	.word	0x40010400
 801136c:	40014000 	.word	0x40014000
 8011370:	40001800 	.word	0x40001800

08011374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	691b      	ldr	r3, [r3, #16]
 8011382:	f003 0302 	and.w	r3, r3, #2
 8011386:	2b02      	cmp	r3, #2
 8011388:	d122      	bne.n	80113d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	f003 0302 	and.w	r3, r3, #2
 8011394:	2b02      	cmp	r3, #2
 8011396:	d11b      	bne.n	80113d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f06f 0202 	mvn.w	r2, #2
 80113a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2201      	movs	r2, #1
 80113a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	f003 0303 	and.w	r3, r3, #3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d003      	beq.n	80113be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f9b5 	bl	8011726 <HAL_TIM_IC_CaptureCallback>
 80113bc:	e005      	b.n	80113ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 f9a7 	bl	8011712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 f9b8 	bl	801173a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2200      	movs	r2, #0
 80113ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	691b      	ldr	r3, [r3, #16]
 80113d6:	f003 0304 	and.w	r3, r3, #4
 80113da:	2b04      	cmp	r3, #4
 80113dc:	d122      	bne.n	8011424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	f003 0304 	and.w	r3, r3, #4
 80113e8:	2b04      	cmp	r3, #4
 80113ea:	d11b      	bne.n	8011424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f06f 0204 	mvn.w	r2, #4
 80113f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2202      	movs	r2, #2
 80113fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	699b      	ldr	r3, [r3, #24]
 8011402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 f98b 	bl	8011726 <HAL_TIM_IC_CaptureCallback>
 8011410:	e005      	b.n	801141e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f97d 	bl	8011712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f98e 	bl	801173a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	691b      	ldr	r3, [r3, #16]
 801142a:	f003 0308 	and.w	r3, r3, #8
 801142e:	2b08      	cmp	r3, #8
 8011430:	d122      	bne.n	8011478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	f003 0308 	and.w	r3, r3, #8
 801143c:	2b08      	cmp	r3, #8
 801143e:	d11b      	bne.n	8011478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f06f 0208 	mvn.w	r2, #8
 8011448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2204      	movs	r2, #4
 801144e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	69db      	ldr	r3, [r3, #28]
 8011456:	f003 0303 	and.w	r3, r3, #3
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f961 	bl	8011726 <HAL_TIM_IC_CaptureCallback>
 8011464:	e005      	b.n	8011472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f953 	bl	8011712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f964 	bl	801173a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	f003 0310 	and.w	r3, r3, #16
 8011482:	2b10      	cmp	r3, #16
 8011484:	d122      	bne.n	80114cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	f003 0310 	and.w	r3, r3, #16
 8011490:	2b10      	cmp	r3, #16
 8011492:	d11b      	bne.n	80114cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f06f 0210 	mvn.w	r2, #16
 801149c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2208      	movs	r2, #8
 80114a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	69db      	ldr	r3, [r3, #28]
 80114aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d003      	beq.n	80114ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 f937 	bl	8011726 <HAL_TIM_IC_CaptureCallback>
 80114b8:	e005      	b.n	80114c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 f929 	bl	8011712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 f93a 	bl	801173a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	691b      	ldr	r3, [r3, #16]
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d10e      	bne.n	80114f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	f003 0301 	and.w	r3, r3, #1
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d107      	bne.n	80114f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f06f 0201 	mvn.w	r2, #1
 80114f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7fc f906 	bl	800d704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011502:	2b80      	cmp	r3, #128	; 0x80
 8011504:	d10e      	bne.n	8011524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011510:	2b80      	cmp	r3, #128	; 0x80
 8011512:	d107      	bne.n	8011524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801151c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fae0 	bl	8011ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801152e:	2b40      	cmp	r3, #64	; 0x40
 8011530:	d10e      	bne.n	8011550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801153c:	2b40      	cmp	r3, #64	; 0x40
 801153e:	d107      	bne.n	8011550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f8ff 	bl	801174e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	f003 0320 	and.w	r3, r3, #32
 801155a:	2b20      	cmp	r3, #32
 801155c:	d10e      	bne.n	801157c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	f003 0320 	and.w	r3, r3, #32
 8011568:	2b20      	cmp	r3, #32
 801156a:	d107      	bne.n	801157c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f06f 0220 	mvn.w	r2, #32
 8011574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 faaa 	bl	8011ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801157c:	bf00      	nop
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011598:	2b01      	cmp	r3, #1
 801159a:	d101      	bne.n	80115a0 <HAL_TIM_ConfigClockSource+0x1c>
 801159c:	2302      	movs	r3, #2
 801159e:	e0b4      	b.n	801170a <HAL_TIM_ConfigClockSource+0x186>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2201      	movs	r2, #1
 80115a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2202      	movs	r2, #2
 80115ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80115be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80115c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115d8:	d03e      	beq.n	8011658 <HAL_TIM_ConfigClockSource+0xd4>
 80115da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115de:	f200 8087 	bhi.w	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 80115e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115e6:	f000 8086 	beq.w	80116f6 <HAL_TIM_ConfigClockSource+0x172>
 80115ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115ee:	d87f      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 80115f0:	2b70      	cmp	r3, #112	; 0x70
 80115f2:	d01a      	beq.n	801162a <HAL_TIM_ConfigClockSource+0xa6>
 80115f4:	2b70      	cmp	r3, #112	; 0x70
 80115f6:	d87b      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 80115f8:	2b60      	cmp	r3, #96	; 0x60
 80115fa:	d050      	beq.n	801169e <HAL_TIM_ConfigClockSource+0x11a>
 80115fc:	2b60      	cmp	r3, #96	; 0x60
 80115fe:	d877      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 8011600:	2b50      	cmp	r3, #80	; 0x50
 8011602:	d03c      	beq.n	801167e <HAL_TIM_ConfigClockSource+0xfa>
 8011604:	2b50      	cmp	r3, #80	; 0x50
 8011606:	d873      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 8011608:	2b40      	cmp	r3, #64	; 0x40
 801160a:	d058      	beq.n	80116be <HAL_TIM_ConfigClockSource+0x13a>
 801160c:	2b40      	cmp	r3, #64	; 0x40
 801160e:	d86f      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 8011610:	2b30      	cmp	r3, #48	; 0x30
 8011612:	d064      	beq.n	80116de <HAL_TIM_ConfigClockSource+0x15a>
 8011614:	2b30      	cmp	r3, #48	; 0x30
 8011616:	d86b      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 8011618:	2b20      	cmp	r3, #32
 801161a:	d060      	beq.n	80116de <HAL_TIM_ConfigClockSource+0x15a>
 801161c:	2b20      	cmp	r3, #32
 801161e:	d867      	bhi.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
 8011620:	2b00      	cmp	r3, #0
 8011622:	d05c      	beq.n	80116de <HAL_TIM_ConfigClockSource+0x15a>
 8011624:	2b10      	cmp	r3, #16
 8011626:	d05a      	beq.n	80116de <HAL_TIM_ConfigClockSource+0x15a>
 8011628:	e062      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6818      	ldr	r0, [r3, #0]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	6899      	ldr	r1, [r3, #8]
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	685a      	ldr	r2, [r3, #4]
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	f000 f9ad 	bl	8011998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801164c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68ba      	ldr	r2, [r7, #8]
 8011654:	609a      	str	r2, [r3, #8]
      break;
 8011656:	e04f      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	6899      	ldr	r1, [r3, #8]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	f000 f996 	bl	8011998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	689a      	ldr	r2, [r3, #8]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801167a:	609a      	str	r2, [r3, #8]
      break;
 801167c:	e03c      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	6859      	ldr	r1, [r3, #4]
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	461a      	mov	r2, r3
 801168c:	f000 f90a 	bl	80118a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2150      	movs	r1, #80	; 0x50
 8011696:	4618      	mov	r0, r3
 8011698:	f000 f963 	bl	8011962 <TIM_ITRx_SetConfig>
      break;
 801169c:	e02c      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6818      	ldr	r0, [r3, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	6859      	ldr	r1, [r3, #4]
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	461a      	mov	r2, r3
 80116ac:	f000 f929 	bl	8011902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2160      	movs	r1, #96	; 0x60
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 f953 	bl	8011962 <TIM_ITRx_SetConfig>
      break;
 80116bc:	e01c      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6818      	ldr	r0, [r3, #0]
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	6859      	ldr	r1, [r3, #4]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	461a      	mov	r2, r3
 80116cc:	f000 f8ea 	bl	80118a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2140      	movs	r1, #64	; 0x40
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 f943 	bl	8011962 <TIM_ITRx_SetConfig>
      break;
 80116dc:	e00c      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4619      	mov	r1, r3
 80116e8:	4610      	mov	r0, r2
 80116ea:	f000 f93a 	bl	8011962 <TIM_ITRx_SetConfig>
      break;
 80116ee:	e003      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80116f0:	2301      	movs	r3, #1
 80116f2:	73fb      	strb	r3, [r7, #15]
      break;
 80116f4:	e000      	b.n	80116f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80116f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011708:	7bfb      	ldrb	r3, [r7, #15]
}
 801170a:	4618      	mov	r0, r3
 801170c:	3710      	adds	r7, #16
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801171a:	bf00      	nop
 801171c:	370c      	adds	r7, #12
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011726:	b480      	push	{r7}
 8011728:	b083      	sub	sp, #12
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801172e:	bf00      	nop
 8011730:	370c      	adds	r7, #12
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr

0801173a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801173a:	b480      	push	{r7}
 801173c:	b083      	sub	sp, #12
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011742:	bf00      	nop
 8011744:	370c      	adds	r7, #12
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr

0801174e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011756:	bf00      	nop
 8011758:	370c      	adds	r7, #12
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
	...

08011764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4a40      	ldr	r2, [pc, #256]	; (8011878 <TIM_Base_SetConfig+0x114>)
 8011778:	4293      	cmp	r3, r2
 801177a:	d013      	beq.n	80117a4 <TIM_Base_SetConfig+0x40>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011782:	d00f      	beq.n	80117a4 <TIM_Base_SetConfig+0x40>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4a3d      	ldr	r2, [pc, #244]	; (801187c <TIM_Base_SetConfig+0x118>)
 8011788:	4293      	cmp	r3, r2
 801178a:	d00b      	beq.n	80117a4 <TIM_Base_SetConfig+0x40>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4a3c      	ldr	r2, [pc, #240]	; (8011880 <TIM_Base_SetConfig+0x11c>)
 8011790:	4293      	cmp	r3, r2
 8011792:	d007      	beq.n	80117a4 <TIM_Base_SetConfig+0x40>
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	4a3b      	ldr	r2, [pc, #236]	; (8011884 <TIM_Base_SetConfig+0x120>)
 8011798:	4293      	cmp	r3, r2
 801179a:	d003      	beq.n	80117a4 <TIM_Base_SetConfig+0x40>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a3a      	ldr	r2, [pc, #232]	; (8011888 <TIM_Base_SetConfig+0x124>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d108      	bne.n	80117b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	4a2f      	ldr	r2, [pc, #188]	; (8011878 <TIM_Base_SetConfig+0x114>)
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d02b      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117c4:	d027      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4a2c      	ldr	r2, [pc, #176]	; (801187c <TIM_Base_SetConfig+0x118>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d023      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4a2b      	ldr	r2, [pc, #172]	; (8011880 <TIM_Base_SetConfig+0x11c>)
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d01f      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	4a2a      	ldr	r2, [pc, #168]	; (8011884 <TIM_Base_SetConfig+0x120>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d01b      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4a29      	ldr	r2, [pc, #164]	; (8011888 <TIM_Base_SetConfig+0x124>)
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d017      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	4a28      	ldr	r2, [pc, #160]	; (801188c <TIM_Base_SetConfig+0x128>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d013      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4a27      	ldr	r2, [pc, #156]	; (8011890 <TIM_Base_SetConfig+0x12c>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d00f      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4a26      	ldr	r2, [pc, #152]	; (8011894 <TIM_Base_SetConfig+0x130>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d00b      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4a25      	ldr	r2, [pc, #148]	; (8011898 <TIM_Base_SetConfig+0x134>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d007      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4a24      	ldr	r2, [pc, #144]	; (801189c <TIM_Base_SetConfig+0x138>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d003      	beq.n	8011816 <TIM_Base_SetConfig+0xb2>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a23      	ldr	r2, [pc, #140]	; (80118a0 <TIM_Base_SetConfig+0x13c>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d108      	bne.n	8011828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801181c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	4313      	orrs	r3, r2
 8011826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	695b      	ldr	r3, [r3, #20]
 8011832:	4313      	orrs	r3, r2
 8011834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	689a      	ldr	r2, [r3, #8]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	4a0a      	ldr	r2, [pc, #40]	; (8011878 <TIM_Base_SetConfig+0x114>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d003      	beq.n	801185c <TIM_Base_SetConfig+0xf8>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	4a0c      	ldr	r2, [pc, #48]	; (8011888 <TIM_Base_SetConfig+0x124>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d103      	bne.n	8011864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	691a      	ldr	r2, [r3, #16]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2201      	movs	r2, #1
 8011868:	615a      	str	r2, [r3, #20]
}
 801186a:	bf00      	nop
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	40010000 	.word	0x40010000
 801187c:	40000400 	.word	0x40000400
 8011880:	40000800 	.word	0x40000800
 8011884:	40000c00 	.word	0x40000c00
 8011888:	40010400 	.word	0x40010400
 801188c:	40014000 	.word	0x40014000
 8011890:	40014400 	.word	0x40014400
 8011894:	40014800 	.word	0x40014800
 8011898:	40001800 	.word	0x40001800
 801189c:	40001c00 	.word	0x40001c00
 80118a0:	40002000 	.word	0x40002000

080118a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6a1b      	ldr	r3, [r3, #32]
 80118b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6a1b      	ldr	r3, [r3, #32]
 80118ba:	f023 0201 	bic.w	r2, r3, #1
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	699b      	ldr	r3, [r3, #24]
 80118c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80118ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	693a      	ldr	r2, [r7, #16]
 80118d6:	4313      	orrs	r3, r2
 80118d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f023 030a 	bic.w	r3, r3, #10
 80118e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80118e2:	697a      	ldr	r2, [r7, #20]
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	4313      	orrs	r3, r2
 80118e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	693a      	ldr	r2, [r7, #16]
 80118ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	621a      	str	r2, [r3, #32]
}
 80118f6:	bf00      	nop
 80118f8:	371c      	adds	r7, #28
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011902:	b480      	push	{r7}
 8011904:	b087      	sub	sp, #28
 8011906:	af00      	add	r7, sp, #0
 8011908:	60f8      	str	r0, [r7, #12]
 801190a:	60b9      	str	r1, [r7, #8]
 801190c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	6a1b      	ldr	r3, [r3, #32]
 8011912:	f023 0210 	bic.w	r2, r3, #16
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6a1b      	ldr	r3, [r3, #32]
 8011924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801192c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	031b      	lsls	r3, r3, #12
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	4313      	orrs	r3, r2
 8011936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801193e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	693a      	ldr	r2, [r7, #16]
 8011946:	4313      	orrs	r3, r2
 8011948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	697a      	ldr	r2, [r7, #20]
 801194e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	693a      	ldr	r2, [r7, #16]
 8011954:	621a      	str	r2, [r3, #32]
}
 8011956:	bf00      	nop
 8011958:	371c      	adds	r7, #28
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011962:	b480      	push	{r7}
 8011964:	b085      	sub	sp, #20
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	689b      	ldr	r3, [r3, #8]
 8011970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	4313      	orrs	r3, r2
 8011980:	f043 0307 	orr.w	r3, r3, #7
 8011984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	609a      	str	r2, [r3, #8]
}
 801198c:	bf00      	nop
 801198e:	3714      	adds	r7, #20
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr

08011998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011998:	b480      	push	{r7}
 801199a:	b087      	sub	sp, #28
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
 80119a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80119b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	021a      	lsls	r2, r3, #8
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	431a      	orrs	r2, r3
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	4313      	orrs	r3, r2
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	4313      	orrs	r3, r2
 80119c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	697a      	ldr	r2, [r7, #20]
 80119ca:	609a      	str	r2, [r3, #8]
}
 80119cc:	bf00      	nop
 80119ce:	371c      	adds	r7, #28
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr

080119d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d101      	bne.n	80119f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80119ec:	2302      	movs	r3, #2
 80119ee:	e05a      	b.n	8011aa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2201      	movs	r2, #1
 80119f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2202      	movs	r2, #2
 80119fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4a21      	ldr	r2, [pc, #132]	; (8011ab4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d022      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a3c:	d01d      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4a1d      	ldr	r2, [pc, #116]	; (8011ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d018      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4a1b      	ldr	r2, [pc, #108]	; (8011abc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d013      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a1a      	ldr	r2, [pc, #104]	; (8011ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d00e      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a18      	ldr	r2, [pc, #96]	; (8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d009      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4a17      	ldr	r2, [pc, #92]	; (8011ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d004      	beq.n	8011a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a15      	ldr	r2, [pc, #84]	; (8011acc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d10c      	bne.n	8011a94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	68ba      	ldr	r2, [r7, #8]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	40010000 	.word	0x40010000
 8011ab8:	40000400 	.word	0x40000400
 8011abc:	40000800 	.word	0x40000800
 8011ac0:	40000c00 	.word	0x40000c00
 8011ac4:	40010400 	.word	0x40010400
 8011ac8:	40014000 	.word	0x40014000
 8011acc:	40001800 	.word	0x40001800

08011ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011ad8:	bf00      	nop
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011aec:	bf00      	nop
 8011aee:	370c      	adds	r7, #12
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr

08011af8 <memset>:
 8011af8:	4402      	add	r2, r0
 8011afa:	4603      	mov	r3, r0
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d100      	bne.n	8011b02 <memset+0xa>
 8011b00:	4770      	bx	lr
 8011b02:	f803 1b01 	strb.w	r1, [r3], #1
 8011b06:	e7f9      	b.n	8011afc <memset+0x4>

08011b08 <__libc_init_array>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	4d0d      	ldr	r5, [pc, #52]	; (8011b40 <__libc_init_array+0x38>)
 8011b0c:	4c0d      	ldr	r4, [pc, #52]	; (8011b44 <__libc_init_array+0x3c>)
 8011b0e:	1b64      	subs	r4, r4, r5
 8011b10:	10a4      	asrs	r4, r4, #2
 8011b12:	2600      	movs	r6, #0
 8011b14:	42a6      	cmp	r6, r4
 8011b16:	d109      	bne.n	8011b2c <__libc_init_array+0x24>
 8011b18:	4d0b      	ldr	r5, [pc, #44]	; (8011b48 <__libc_init_array+0x40>)
 8011b1a:	4c0c      	ldr	r4, [pc, #48]	; (8011b4c <__libc_init_array+0x44>)
 8011b1c:	f000 f826 	bl	8011b6c <_init>
 8011b20:	1b64      	subs	r4, r4, r5
 8011b22:	10a4      	asrs	r4, r4, #2
 8011b24:	2600      	movs	r6, #0
 8011b26:	42a6      	cmp	r6, r4
 8011b28:	d105      	bne.n	8011b36 <__libc_init_array+0x2e>
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}
 8011b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b30:	4798      	blx	r3
 8011b32:	3601      	adds	r6, #1
 8011b34:	e7ee      	b.n	8011b14 <__libc_init_array+0xc>
 8011b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b3a:	4798      	blx	r3
 8011b3c:	3601      	adds	r6, #1
 8011b3e:	e7f2      	b.n	8011b26 <__libc_init_array+0x1e>
 8011b40:	08011c70 	.word	0x08011c70
 8011b44:	08011c70 	.word	0x08011c70
 8011b48:	08011c70 	.word	0x08011c70
 8011b4c:	08011c74 	.word	0x08011c74

08011b50 <memcpy>:
 8011b50:	440a      	add	r2, r1
 8011b52:	4291      	cmp	r1, r2
 8011b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b58:	d100      	bne.n	8011b5c <memcpy+0xc>
 8011b5a:	4770      	bx	lr
 8011b5c:	b510      	push	{r4, lr}
 8011b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b66:	4291      	cmp	r1, r2
 8011b68:	d1f9      	bne.n	8011b5e <memcpy+0xe>
 8011b6a:	bd10      	pop	{r4, pc}

08011b6c <_init>:
 8011b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6e:	bf00      	nop
 8011b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b72:	bc08      	pop	{r3}
 8011b74:	469e      	mov	lr, r3
 8011b76:	4770      	bx	lr

08011b78 <_fini>:
 8011b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7a:	bf00      	nop
 8011b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7e:	bc08      	pop	{r3}
 8011b80:	469e      	mov	lr, r3
 8011b82:	4770      	bx	lr
