
MLC_firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000539c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005770  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200000b8  08005828  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005828  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f980  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f3  00000000  00000000  0002faa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4d  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012e94  00000000  00000000  0003375d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011671  00000000  00000000  000465f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070af3  00000000  00000000  00057c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bc8  00000000  00000000  000c8758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cc320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b8 	.word	0x200000b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005444 	.word	0x08005444

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000bc 	.word	0x200000bc
 8000104:	08005444 	.word	0x08005444

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80004c4:	250b      	movs	r5, #11
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 80004cc:	197c      	adds	r4, r7, r5
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	224c      	movs	r2, #76	; 0x4c
 80004d2:	2110      	movs	r1, #16
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 f9a9 	bl	800082c <accelerometer_write>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <acc_init+0x30>
 80004e6:	197b      	adds	r3, r7, r5
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	e089      	b.n	8000600 <acc_init+0x144>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80004ec:	250b      	movs	r5, #11
 80004ee:	197c      	adds	r4, r7, r5
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	2111      	movs	r1, #17
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f998 	bl	800082c <accelerometer_write>
 80004fc:	0003      	movs	r3, r0
 80004fe:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK) return status;
 8000500:	197b      	adds	r3, r7, r5
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <acc_init+0x52>
 8000508:	197b      	adds	r3, r7, r5
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	e078      	b.n	8000600 <acc_init+0x144>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 800050e:	250b      	movs	r5, #11
 8000510:	197c      	adds	r4, r7, r5
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2201      	movs	r2, #1
 8000516:	210e      	movs	r1, #14
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f987 	bl	800082c <accelerometer_write>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) return status;
 8000522:	197b      	adds	r3, r7, r5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <acc_init+0x74>
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	e067      	b.n	8000600 <acc_init+0x144>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000530:	250b      	movs	r5, #11
 8000532:	197c      	adds	r4, r7, r5
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2103      	movs	r1, #3
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f867 	bl	800060c <read_axis>
 800053e:	0003      	movs	r3, r0
 8000540:	7023      	strb	r3, [r4, #0]

    // enable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x80);
 8000542:	197c      	adds	r4, r7, r5
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	210d      	movs	r1, #13
 800054a:	0018      	movs	r0, r3
 800054c:	f000 f96e 	bl	800082c <accelerometer_write>
 8000550:	0003      	movs	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000554:	197b      	adds	r3, r7, r5
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <acc_init+0xa6>
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	e04e      	b.n	8000600 <acc_init+0x144>

    // enable MLC
    status = accelerometer_write(acc, MLC_EN, 0x10);
 8000562:	250b      	movs	r5, #11
 8000564:	197c      	adds	r4, r7, r5
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2210      	movs	r2, #16
 800056a:	2105      	movs	r1, #5
 800056c:	0018      	movs	r0, r3
 800056e:	f000 f95d 	bl	800082c <accelerometer_write>
 8000572:	0003      	movs	r3, r0
 8000574:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000576:	197b      	adds	r3, r7, r5
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <acc_init+0xc8>
 800057e:	197b      	adds	r3, r7, r5
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	e03d      	b.n	8000600 <acc_init+0x144>

    // MLC route to INT1
    status = accelerometer_write(acc, MLC_INT1, 0x01);
 8000584:	250b      	movs	r5, #11
 8000586:	197c      	adds	r4, r7, r5
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	210d      	movs	r1, #13
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f94c 	bl	800082c <accelerometer_write>
 8000594:	0003      	movs	r3, r0
 8000596:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000598:	197b      	adds	r3, r7, r5
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <acc_init+0xea>
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	e02c      	b.n	8000600 <acc_init+0x144>

    for (int i = 0; i < (sizeof(mlc_configuration) /
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e010      	b.n	80005ce <acc_init+0x112>
                      sizeof(ucf_line_t) ); i++ ) {
      accelerometer_write(acc, mlc_configuration[i].address, (uint8_t)mlc_configuration[i].data);
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <acc_init+0x14c>)
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	5cd1      	ldrb	r1, [r2, r3]
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <acc_init+0x14c>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f932 	bl	800082c <accelerometer_write>
                      sizeof(ucf_line_t) ); i++ ) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < (sizeof(mlc_configuration) /
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	238e      	movs	r3, #142	; 0x8e
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d9e9      	bls.n	80005ac <acc_init+0xf0>
    }

    // disable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x00);
 80005d8:	250b      	movs	r5, #11
 80005da:	197c      	adds	r4, r7, r5
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	210d      	movs	r1, #13
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 f922 	bl	800082c <accelerometer_write>
 80005e8:	0003      	movs	r3, r0
 80005ea:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <acc_init+0x13e>
 80005f4:	197b      	adds	r3, r7, r5
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	e002      	b.n	8000600 <acc_init+0x144>

    return status;
 80005fa:	230b      	movs	r3, #11
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]

}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	08005484 	.word	0x08005484

0800060c <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	000a      	movs	r2, r1
 8000616:	1cfb      	adds	r3, r7, #3
 8000618:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
}
 800061c:	46c0      	nop			; (mov r8, r8)

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 800061e:	230f      	movs	r3, #15
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]

    switch(axis){
 8000626:	1cfb      	adds	r3, r7, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d00b      	beq.n	8000646 <read_axis+0x3a>
 800062e:	dd00      	ble.n	8000632 <read_axis+0x26>
 8000630:	e0ee      	b.n	8000810 <read_axis+0x204>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d100      	bne.n	8000638 <read_axis+0x2c>
 8000636:	e098      	b.n	800076a <read_axis+0x15e>
 8000638:	dd00      	ble.n	800063c <read_axis+0x30>
 800063a:	e0e9      	b.n	8000810 <read_axis+0x204>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <read_axis+0x3a>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d04a      	beq.n	80006da <read_axis+0xce>
 8000644:	e0e4      	b.n	8000810 <read_axis+0x204>
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	b299      	uxth	r1, r3
 800064e:	250f      	movs	r5, #15
 8000650:	197c      	adds	r4, r7, r5
 8000652:	4874      	ldr	r0, [pc, #464]	; (8000824 <read_axis+0x218>)
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4b72      	ldr	r3, [pc, #456]	; (8000828 <read_axis+0x21c>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2229      	movs	r2, #41	; 0x29
 8000666:	f001 faef 	bl	8001c48 <HAL_I2C_Mem_Read>
 800066a:	0003      	movs	r3, r0
 800066c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800066e:	0028      	movs	r0, r5
 8000670:	183b      	adds	r3, r7, r0
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d000      	beq.n	800067a <read_axis+0x6e>
 8000678:	e0bb      	b.n	80007f2 <read_axis+0x1e6>
		  acc->x_xlr = *read_buffer << 8;
 800067a:	4b6b      	ldr	r3, [pc, #428]	; (8000828 <read_axis+0x21c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b299      	uxth	r1, r3
 800068e:	0005      	movs	r5, r0
 8000690:	183c      	adds	r4, r7, r0
 8000692:	4864      	ldr	r0, [pc, #400]	; (8000824 <read_axis+0x218>)
 8000694:	2301      	movs	r3, #1
 8000696:	425b      	negs	r3, r3
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <read_axis+0x21c>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2228      	movs	r2, #40	; 0x28
 80006a6:	f001 facf 	bl	8001c48 <HAL_I2C_Mem_Read>
 80006aa:	0003      	movs	r3, r0
 80006ac:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <read_axis+0xac>
 80006b6:	e09e      	b.n	80007f6 <read_axis+0x1ea>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b59      	ldr	r3, [pc, #356]	; (8000828 <read_axis+0x21c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	18d3      	adds	r3, r2, r3
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 80006d0:	1cfb      	adds	r3, r7, #3
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d000      	beq.n	80006da <read_axis+0xce>
 80006d8:	e08f      	b.n	80007fa <read_axis+0x1ee>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	b299      	uxth	r1, r3
 80006e2:	250f      	movs	r5, #15
 80006e4:	197c      	adds	r4, r7, r5
 80006e6:	484f      	ldr	r0, [pc, #316]	; (8000824 <read_axis+0x218>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <read_axis+0x21c>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	222b      	movs	r2, #43	; 0x2b
 80006fa:	f001 faa5 	bl	8001c48 <HAL_I2C_Mem_Read>
 80006fe:	0003      	movs	r3, r0
 8000700:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000702:	0028      	movs	r0, r5
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d000      	beq.n	800070e <read_axis+0x102>
 800070c:	e077      	b.n	80007fe <read_axis+0x1f2>
		  acc->y_xlr = *read_buffer << 8;
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <read_axis+0x21c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21a      	sxth	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b299      	uxth	r1, r3
 8000722:	0005      	movs	r5, r0
 8000724:	183c      	adds	r4, r7, r0
 8000726:	483f      	ldr	r0, [pc, #252]	; (8000824 <read_axis+0x218>)
 8000728:	2301      	movs	r3, #1
 800072a:	425b      	negs	r3, r3
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <read_axis+0x21c>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	222a      	movs	r2, #42	; 0x2a
 800073a:	f001 fa85 	bl	8001c48 <HAL_I2C_Mem_Read>
 800073e:	0003      	movs	r3, r0
 8000740:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000742:	197b      	adds	r3, r7, r5
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d15b      	bne.n	8000802 <read_axis+0x1f6>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	889b      	ldrh	r3, [r3, #4]
 800074e:	b21b      	sxth	r3, r3
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <read_axis+0x21c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b29b      	uxth	r3, r3
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d14d      	bne.n	8000806 <read_axis+0x1fa>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	b299      	uxth	r1, r3
 8000772:	250f      	movs	r5, #15
 8000774:	197c      	adds	r4, r7, r5
 8000776:	482b      	ldr	r0, [pc, #172]	; (8000824 <read_axis+0x218>)
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <read_axis+0x21c>)
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	222d      	movs	r2, #45	; 0x2d
 800078a:	f001 fa5d 	bl	8001c48 <HAL_I2C_Mem_Read>
 800078e:	0003      	movs	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000792:	0028      	movs	r0, r5
 8000794:	183b      	adds	r3, r7, r0
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d136      	bne.n	800080a <read_axis+0x1fe>
		  acc->z_xlr = *read_buffer << 8;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <read_axis+0x21c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b299      	uxth	r1, r3
 80007b0:	0005      	movs	r5, r0
 80007b2:	183c      	adds	r4, r7, r0
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <read_axis+0x218>)
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	2301      	movs	r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <read_axis+0x21c>)
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	222c      	movs	r2, #44	; 0x2c
 80007c8:	f001 fa3e 	bl	8001c48 <HAL_I2C_Mem_Read>
 80007cc:	0003      	movs	r3, r0
 80007ce:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80007d0:	197b      	adds	r3, r7, r5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d11a      	bne.n	800080e <read_axis+0x202>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	88db      	ldrh	r3, [r3, #6]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <read_axis+0x21c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	18d3      	adds	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	80da      	strh	r2, [r3, #6]
		  break;
 80007f0:	e00e      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	e00c      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	e00a      	b.n	8000810 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	e008      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	e006      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	e004      	b.n	8000810 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	e002      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	e000      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800080e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8000810:	b662      	cpsie	i
}
 8000812:	46c0      	nop			; (mov r8, r8)
	}

    __enable_irq();

    return status;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	781b      	ldrb	r3, [r3, #0]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bdb0      	pop	{r4, r5, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000d8 	.word	0x200000d8
 8000828:	200000d4 	.word	0x200000d4

0800082c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af04      	add	r7, sp, #16
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	0008      	movs	r0, r1
 8000836:	0011      	movs	r1, r2
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	1c02      	adds	r2, r0, #0
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	1c0a      	adds	r2, r1, #0
 8000842:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 8000848:	250c      	movs	r5, #12
 800084a:	197b      	adds	r3, r7, r5
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <accelerometer_write+0x6c>)
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	701a      	strb	r2, [r3, #0]
	*write_buffer = data;
 8000852:	197b      	adds	r3, r7, r5
 8000854:	1cba      	adds	r2, r7, #2
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b299      	uxth	r1, r3
 8000862:	1cfb      	adds	r3, r7, #3
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b29a      	uxth	r2, r3
 8000868:	260f      	movs	r6, #15
 800086a:	19bc      	adds	r4, r7, r6
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <accelerometer_write+0x70>)
 800086e:	2301      	movs	r3, #1
 8000870:	425b      	negs	r3, r3
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2301      	movs	r3, #1
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	197b      	adds	r3, r7, r5
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	f001 f8b5 	bl	80019ec <HAL_I2C_Mem_Write>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000886:	b662      	cpsie	i
}
 8000888:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
	return status;
 800088a:	19bb      	adds	r3, r7, r6
 800088c:	781b      	ldrb	r3, [r3, #0]
}
 800088e:	0018      	movs	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	b005      	add	sp, #20
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	0800545c 	.word	0x0800545c
 800089c:	200000d8 	.word	0x200000d8

080008a0 <accelerometer_read>:

HAL_StatusTypeDef accelerometer_read(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af04      	add	r7, sp, #16
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	0008      	movs	r0, r1
 80008aa:	0011      	movs	r1, r2
 80008ac:	1cfb      	adds	r3, r7, #3
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1cbb      	adds	r3, r7, #2
 80008b4:	1c0a      	adds	r2, r1, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    uint8_t read_buffer[] = { 0 };
 80008bc:	250c      	movs	r5, #12
 80008be:	197b      	adds	r3, r7, r5
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <accelerometer_read+0x6c>)
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	*read_buffer = data;
 80008c6:	197b      	adds	r3, r7, r5
 80008c8:	1cba      	adds	r2, r7, #2
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, reg, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b299      	uxth	r1, r3
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	260f      	movs	r6, #15
 80008de:	19bc      	adds	r4, r7, r6
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <accelerometer_read+0x70>)
 80008e2:	2301      	movs	r3, #1
 80008e4:	425b      	negs	r3, r3
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	2301      	movs	r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2301      	movs	r3, #1
 80008f2:	f001 f9a9 	bl	8001c48 <HAL_I2C_Mem_Read>
 80008f6:	0003      	movs	r3, r0
 80008f8:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fa:	b662      	cpsie	i
}
 80008fc:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
	return status;
 80008fe:	19bb      	adds	r3, r7, r6
 8000900:	781b      	ldrb	r3, [r3, #0]
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	0800545c 	.word	0x0800545c
 8000910:	200000d8 	.word	0x200000d8

08000914 <lsm6dsox_mlc_out_get>:

/* lsm6dsox_mlc_out_get(volatile accelerometer_t* acc,, uint8_t *buff)
 *  Def: Returns output of MLC decision tree MLC0
 */
uint32_t lsm6dsox_mlc_out_get(volatile accelerometer_t* acc, uint8_t *buff)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  int32_t status;

  status = accelerometer_write(acc, MLC_INT1, 0x80);	// opens CFG
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	210d      	movs	r1, #13
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ff81 	bl	800082c <accelerometer_write>
 800092a:	0003      	movs	r3, r0
 800092c:	60fb      	str	r3, [r7, #12]

  if (status == 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d108      	bne.n	8000946 <lsm6dsox_mlc_out_get+0x32>
  {
	  status = accelerometer_read(acc, MLC0_SRC, (uint8_t)buff);	// reads MLC decision tree output
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2170      	movs	r1, #112	; 0x70
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ffaf 	bl	80008a0 <accelerometer_read>
 8000942:	0003      	movs	r3, r0
 8000944:	60fb      	str	r3, [r7, #12]

  }

  if (status == 0)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d107      	bne.n	800095c <lsm6dsox_mlc_out_get+0x48>
  {
	  status = accelerometer_write(acc, MLC_INT1, 0x00);	// closes CFG
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	210d      	movs	r1, #13
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff ff6a 	bl	800082c <accelerometer_write>
 8000958:	0003      	movs	r3, r0
 800095a:	60fb      	str	r3, [r7, #12]
  }

  return status;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <_write>:
/* USER CODE BEGIN 0 */
static volatile struct accelerometer_t xl_r = {.slave_r_addr = ACC0_R_ADDR, .slave_w_addr = ACC0_W_ADDR, .irq_pin = GPIO_PIN_0};
static volatile struct accelerometer_t xl_l = {.slave_r_addr = ACC1_R_ADDR, .slave_w_addr = ACC1_W_ADDR, .irq_pin = GPIO_PIN_1};
static volatile HAL_StatusTypeDef status;

int _write(int fd, char* ptr, int len) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2301      	movs	r3, #1
 800097a:	425b      	negs	r3, r3
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <_write+0x28>)
 8000980:	f003 f8f6 	bl	8003b70 <HAL_UART_Transmit>
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000012c 	.word	0x2000012c

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800099a:	f000 fc9b 	bl	80012d4 <HAL_Init>
	SystemClock_Config();
 800099e:	f000 f887 	bl	8000ab0 <SystemClock_Config>
	MX_GPIO_Init();
 80009a2:	f000 f961 	bl	8000c68 <MX_GPIO_Init>
	MX_I2C1_Init();
 80009a6:	f000 f8f1 	bl	8000b8c <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 80009aa:	f000 f92f 	bl	8000c0c <MX_LPUART1_UART_Init>

	acc_init(&xl_l);
 80009ae:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <main+0x104>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fd83 	bl	80004bc <acc_init>
	acc_init(&xl_r);
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <main+0x108>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fd7f 	bl	80004bc <acc_init>

	MX_TIM2_Init();
 80009be:	f000 fa1f 	bl	8000e00 <MX_TIM2_Init>
	MX_TIM21_Init();
 80009c2:	f000 fa71 	bl	8000ea8 <MX_TIM21_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	0059      	lsls	r1, r3, #1
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2201      	movs	r2, #1
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ff3b 	bl	800184c <HAL_GPIO_WritePin>

	// start polling the accelerometer(s)
	HAL_TIM_Base_Start_IT(&htim21);
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <main+0x10c>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fd07 	bl	80033ec <HAL_TIM_Base_Start_IT>
	uint8_t status_mlc1 = 0;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	uint8_t old_status_mlc1 = 0;
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]

	uint8_t mlc_out = {0};
 80009ea:	1d7b      	adds	r3, r7, #5
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	uint32_t mlc_status;

	/* check how MLC0-8_SRC knows which is which*/

	while (1) {
		old_status_mlc1 = status_mlc1;
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	701a      	strb	r2, [r3, #0]
		accelerometer_read(&xl_r, MLC_STATUS_MAINPAGE, status_mlc1);
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <main+0x108>)
 80009fe:	2138      	movs	r1, #56	; 0x38
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff4d 	bl	80008a0 <accelerometer_read>
		accelerometer_read(&xl_r, MLC0_SRC, temp);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <main+0x108>)
 8000a0c:	2170      	movs	r1, #112	; 0x70
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff ff46 	bl	80008a0 <accelerometer_read>

		status_mlc1 = status_mlc1 & 0x01;
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
//		printf("MLC0: %d\r\n",temp);

//		if(status_mlc1 != old_status_mlc1)
//			printf("status change: %b\r\n",status_mlc1);

		if (status_mlc1) {
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <main+0xa8>
			mlc_status = lsm6dsox_mlc_out_get(&xl_r, mlc_out); // gets mlc interrupt code
 8000a28:	1d7b      	adds	r3, r7, #5
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <main+0x108>)
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff ff6e 	bl	8000914 <lsm6dsox_mlc_out_get>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	603b      	str	r3, [r7, #0]
//			if (mlc_status == 0)
//				  printf("Detect MLC interrupt code: %02X\r\n", mlc_out);
			//      tx_com(tx_buffer, strlen((char const *)tx_buffer)); // CHANGE
		}

		if(xl_r.z_xlr < -0x100) {
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <main+0x108>)
 8000a3e:	88db      	ldrh	r3, [r3, #6]
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <main+0x110>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	da0b      	bge.n	8000a60 <main+0xcc>
			HAL_TIM_Base_Start_IT(&htim2);
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <main+0x114>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fcce 	bl	80033ec <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	0059      	lsls	r1, r3, #1
 8000a54:	23a0      	movs	r3, #160	; 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fef6 	bl	800184c <HAL_GPIO_WritePin>
//				printf("%d\r\n",xl_r.z_xlr);

		}
		printf("%d\r\n",xl_r.x_xlr);
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <main+0x108>)
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	001a      	movs	r2, r3
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <main+0x118>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 fe45 	bl	80046fc <iprintf>
		printf("%d\r\n",xl_r.y_xlr);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <main+0x108>)
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <main+0x118>)
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fe3c 	bl	80046fc <iprintf>
		printf("%d\r\n",xl_r.z_xlr);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <main+0x108>)
 8000a86:	88db      	ldrh	r3, [r3, #6]
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <main+0x118>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f003 fe33 	bl	80046fc <iprintf>
		old_status_mlc1 = status_mlc1;
 8000a96:	e7ab      	b.n	80009f0 <main+0x5c>
 8000a98:	20000028 	.word	0x20000028
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200001f4 	.word	0x200001f4
 8000aa4:	ffffff00 	.word	0xffffff00
 8000aa8:	200001b4 	.word	0x200001b4
 8000aac:	08005460 	.word	0x08005460

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b099      	sub	sp, #100	; 0x64
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	242c      	movs	r4, #44	; 0x2c
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	2334      	movs	r3, #52	; 0x34
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f003 fe2b 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	0018      	movs	r0, r3
 8000acc:	2314      	movs	r3, #20
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f003 fe23 	bl	800471c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2318      	movs	r3, #24
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f003 fe1c 	bl	800471c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemClock_Config+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <SystemClock_Config+0xd8>)
 8000aea:	401a      	ands	r2, r3
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <SystemClock_Config+0xd4>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0109      	lsls	r1, r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2210      	movs	r2, #16
 8000afc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2201      	movs	r2, #1
 8000b02:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	22a0      	movs	r2, #160	; 0xa0
 8000b0e:	0212      	lsls	r2, r2, #8
 8000b10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fd5a 	bl	80025d4 <HAL_RCC_OscConfig>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b24:	f000 fa16 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	2118      	movs	r1, #24
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 f8bd 	bl	8002ccc <HAL_RCC_ClockConfig>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b56:	f000 f9fd 	bl	8000f54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 fad0 	bl	8003114 <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b78:	f000 f9ec 	bl	8000f54 <Error_Handler>
  }
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b019      	add	sp, #100	; 0x64
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	40007000 	.word	0x40007000
 8000b88:	ffffe7ff 	.word	0xffffe7ff

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <MX_I2C1_Init+0x7c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000b98:	22e1      	movs	r2, #225	; 0xe1
 8000b9a:	00d2      	lsls	r2, r2, #3
 8000b9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fe78 	bl	80018c0 <HAL_I2C_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f9be 	bl	8000f54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fc61 	bl	80024a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000be6:	f000 f9b5 	bl	8000f54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 fca4 	bl	800253c <HAL_I2CEx_ConfigDigitalFilter>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f000 f9ac 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	200000d8 	.word	0x200000d8
 8000c08:	40005400 	.word	0x40005400

08000c0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <MX_LPUART1_UART_Init+0x58>)
 8000c14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c18:	2296      	movs	r2, #150	; 0x96
 8000c1a:	01d2      	lsls	r2, r2, #7
 8000c1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <MX_LPUART1_UART_Init+0x54>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 ff3c 	bl	8003ac8 <HAL_UART_Init>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 f97e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	2000012c 	.word	0x2000012c
 8000c64:	40004800 	.word	0x40004800

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	240c      	movs	r4, #12
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	0018      	movs	r0, r3
 8000c74:	2314      	movs	r3, #20
 8000c76:	001a      	movs	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f003 fd4f 	bl	800471c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_GPIO_Init+0xb8>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	4013      	ands	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	0059      	lsls	r1, r3, #1
 8000cb2:	23a0      	movs	r3, #160	; 0xa0
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fdc7 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT0_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT0_Pin|ACC_INT1_Pin;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2284      	movs	r2, #132	; 0x84
 8000cc8:	0392      	lsls	r2, r2, #14
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <MX_GPIO_Init+0xbc>)
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	0010      	movs	r0, r2
 8000cda:	f000 fc49 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cde:	0021      	movs	r1, r4
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2201      	movs	r2, #1
 8000cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fc34 	bl	8001570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f000 fbfd 	bl	800150c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d12:	2005      	movs	r0, #5
 8000d14:	f000 fc0f 	bl	8001536 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b009      	add	sp, #36	; 0x24
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	50000400 	.word	0x50000400

08000d28 <HAL_GPIO_EXTI_Callback>:
  * @brief Interrupt Callback function
  * @param GPIO_Pin - the pin that triggered the interrupt
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dbb      	adds	r3, r7, #6
 8000d32:	801a      	strh	r2, [r3, #0]

	if(xl_r.irq_pin == GPIO_Pin)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d36:	8c1b      	ldrh	r3, [r3, #32]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	1dba      	adds	r2, r7, #6
 8000d3c:	8812      	ldrh	r2, [r2, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d108      	bne.n	8000d54 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		status = read_axis(&xl_r, ALL_AXIS);
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d44:	2103      	movs	r1, #3
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fc60 	bl	800060c <read_axis>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	001a      	movs	r2, r3
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d52:	701a      	strb	r2, [r3, #0]

	}
	if(xl_l.irq_pin == GPIO_Pin)
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d56:	8c1b      	ldrh	r3, [r3, #32]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1dba      	adds	r2, r7, #6
 8000d5c:	8812      	ldrh	r2, [r2, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d109      	bne.n	8000d76 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		status = read_axis(&xl_l, ALL_AXIS);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d64:	2103      	movs	r1, #3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fc50 	bl	800060c <read_axis>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	001a      	movs	r2, r3
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d72:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46c0      	nop			; (mov r8, r8)
}
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000234 	.word	0x20000234
 8000d88:	20000028 	.word	0x20000028

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief Timer Callback function
  * @param htim - the timer that triggered the callback
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  uint8_t msg[25] = "test\n";
 8000d94:	230c      	movs	r3, #12
 8000d96:	18f9      	adds	r1, r7, r3
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d9a:	000b      	movs	r3, r1
 8000d9c:	6810      	ldr	r0, [r2, #0]
 8000d9e:	6018      	str	r0, [r3, #0]
 8000da0:	8892      	ldrh	r2, [r2, #4]
 8000da2:	809a      	strh	r2, [r3, #4]
 8000da4:	2306      	movs	r3, #6
 8000da6:	18cb      	adds	r3, r1, r3
 8000da8:	2213      	movs	r2, #19
 8000daa:	2100      	movs	r1, #0
 8000dac:	0018      	movs	r0, r3
 8000dae:	f003 fcb5 	bl	800471c <memset>

  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d107      	bne.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	0059      	lsls	r1, r3, #1
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fd41 	bl	800184c <HAL_GPIO_WritePin>
  }
  if (htim == &htim21)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d108      	bne.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
	  status = read_axis(&xl_r, ALL_AXIS);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fc18 	bl	800060c <read_axis>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	001a      	movs	r2, r3
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000de2:	701a      	strb	r2, [r3, #0]
//	  sprintf(msg, "%d,%d,%d", xl_r.x_xlr, xl_r.y_xlr, xl_r.z_xlr);
//	  HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg), 10);
  }
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b00a      	add	sp, #40	; 0x28
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08005468 	.word	0x08005468
 8000df0:	200001b4 	.word	0x200001b4
 8000df4:	200001f4 	.word	0x200001f4
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000234 	.word	0x20000234

08000e00 <MX_TIM2_Init>:

/**
  * @brief TIM2 Initialization Function
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	2308      	movs	r3, #8
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2100      	movs	r1, #0
 8000e12:	f003 fc83 	bl	800471c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e16:	003b      	movs	r3, r7
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f003 fc7c 	bl	800471c <memset>

  htim2.Instance = TIM2;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	05d2      	lsls	r2, r2, #23
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 243;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e2e:	22f3      	movs	r2, #243	; 0xf3
 8000e30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e34:	2210      	movs	r2, #16
 8000e36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 / 2;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <MX_TIM2_Init+0xa4>)
 8000e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f002 fa8d 	bl	800336c <HAL_TIM_Base_Init>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e56:	f000 f87d 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	0152      	lsls	r2, r2, #5
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e64:	187a      	adds	r2, r7, r1
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 fbf2 	bl	8003654 <HAL_TIM_ConfigClockSource>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e74:	f000 f86e 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e84:	003a      	movs	r2, r7
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_TIM2_Init+0xa0>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fdc4 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e94:	f000 f85e 	bl	8000f54 <Error_Handler>
  }

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	00007fff 	.word	0x00007fff

08000ea8 <MX_TIM21_Init>:

/**
  * @brief TIM21 Initialization Function
  */
static void MX_TIM21_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	2308      	movs	r3, #8
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f003 fc2f 	bl	800471c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f003 fc28 	bl	800471c <memset>

  htim21.Instance = TIM21;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <MX_TIM21_Init+0xa4>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 15999;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <MX_TIM21_Init+0xa8>)
 8000ed6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000eda:	2210      	movs	r2, #16
 8000edc:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fa3a 	bl	800336c <HAL_TIM_Base_Init>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 f82a 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	2108      	movs	r1, #8
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0152      	lsls	r2, r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000f0a:	187a      	adds	r2, r7, r1
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f002 fb9f 	bl	8003654 <HAL_TIM_ConfigClockSource>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000f1a:	f000 f81b 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000f2a:	003a      	movs	r2, r7
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_TIM21_Init+0xa0>)
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f002 fd71 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000f3a:	f000 f80b 	bl	8000f54 <Error_Handler>
  }

}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b006      	add	sp, #24
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	200001f4 	.word	0x200001f4
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	00003e7f 	.word	0x00003e7f

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_MspInit+0x24>)
 8000f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x24>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_MspInit+0x24>)
 8000f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_MspInit+0x24>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	0549      	lsls	r1, r1, #21
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	240c      	movs	r4, #12
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	0018      	movs	r0, r3
 8000f96:	2314      	movs	r3, #20
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f003 fbbe 	bl	800471c <memset>
  if(hi2c->Instance==I2C1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <HAL_I2C_MspInit+0x80>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12a      	bne.n	8001000 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	22c0      	movs	r2, #192	; 0xc0
 8000fc6:	00d2      	lsls	r2, r2, #3
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	0021      	movs	r1, r4
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2212      	movs	r2, #18
 8000fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fabf 	bl	8001570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_I2C_MspInit+0x84>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	0389      	lsls	r1, r1, #14
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b009      	add	sp, #36	; 0x24
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	40005400 	.word	0x40005400
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	240c      	movs	r4, #12
 800101a:	193b      	adds	r3, r7, r4
 800101c:	0018      	movs	r0, r3
 800101e:	2314      	movs	r3, #20
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f003 fb7a 	bl	800471c <memset>
  if(huart->Instance==LPUART1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_UART_MspInit+0x80>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d129      	bne.n	8001086 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x84>)
 8001034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x84>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	02c9      	lsls	r1, r1, #11
 800103c:	430a      	orrs	r2, r1
 800103e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0x84>)
 8001042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_UART_MspInit+0x84>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x84>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001058:	0021      	movs	r1, r4
 800105a:	187b      	adds	r3, r7, r1
 800105c:	220c      	movs	r2, #12
 800105e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2202      	movs	r2, #2
 8001064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2203      	movs	r2, #3
 8001070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2206      	movs	r2, #6
 8001076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	187a      	adds	r2, r7, r1
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f000 fa75 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b009      	add	sp, #36	; 0x24
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40004800 	.word	0x40004800
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d10e      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	200f      	movs	r0, #15
 80010be:	f000 fa25 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 fa37 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80010c8:	e012      	b.n	80010f0 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_TIM_Base_MspInit+0x64>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10d      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010da:	2104      	movs	r1, #4
 80010dc:	430a      	orrs	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2014      	movs	r0, #20
 80010e6:	f000 fa11 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f000 fa23 	bl	8001536 <HAL_NVIC_EnableIRQ>
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010800 	.word	0x40010800

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f92a 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT0_Pin);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 fba8 	bl	8001888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001138:	2002      	movs	r0, #2
 800113a:	f000 fba5 	bl	8001888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <TIM2_IRQHandler+0x14>)
 800114a:	0018      	movs	r0, r3
 800114c:	f002 f99a 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	200001b4 	.word	0x200001b4

0800115c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <TIM21_IRQHandler+0x14>)
 8001162:	0018      	movs	r0, r3
 8001164:	f002 f98e 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	200001f4 	.word	0x200001f4

08001174 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001186:	e000      	b.n	800118a <_read+0x16>
 8001188:	bf00      	nop
 800118a:	0001      	movs	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
  }

  return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b006      	add	sp, #24
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	425b      	negs	r3, r3
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	0192      	lsls	r2, r2, #6
 80011d2:	605a      	str	r2, [r3, #4]
  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f003 fa78 	bl	800472c <__errno>
 800123c:	0003      	movs	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	2301      	movs	r3, #1
 8001244:	425b      	negs	r3, r3
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	18d2      	adds	r2, r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20002000 	.word	0x20002000
 8001268:	00000400 	.word	0x00000400
 800126c:	20000238 	.word	0x20000238
 8001270:	20000390 	.word	0x20000390

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001282:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff fff6 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f003 fa43 	bl	8004738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fb6f 	bl	8000994 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
   ldr   r0, =_estack
 80012b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80012c4:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 80012c8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80012cc:	2000038c 	.word	0x2000038c

080012d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_COMP_IRQHandler>
	...

080012d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x3c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Init+0x3c>)
 80012e6:	2140      	movs	r1, #64	; 0x40
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f811 	bl	8001314 <HAL_InitTick>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d003      	beq.n	80012fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e001      	b.n	8001302 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fe:	f7ff fe2f 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_InitTick+0x5c>)
 800131e:	681c      	ldr	r4, [r3, #0]
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_InitTick+0x60>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	0019      	movs	r1, r3
 8001326:	23fa      	movs	r3, #250	; 0xfa
 8001328:	0098      	lsls	r0, r3, #2
 800132a:	f7fe fef7 	bl	800011c <__udivsi3>
 800132e:	0003      	movs	r3, r0
 8001330:	0019      	movs	r1, r3
 8001332:	0020      	movs	r0, r4
 8001334:	f7fe fef2 	bl	800011c <__udivsi3>
 8001338:	0003      	movs	r3, r0
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f90b 	bl	8001556 <HAL_SYSTICK_Config>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d001      	beq.n	8001348 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e00f      	b.n	8001368 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d80b      	bhi.n	8001366 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2200      	movs	r2, #0
 8001356:	0018      	movs	r0, r3
 8001358:	f000 f8d8 	bl	800150c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_InitTick+0x64>)
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	20000050 	.word	0x20000050
 8001374:	20000058 	.word	0x20000058
 8001378:	20000054 	.word	0x20000054

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	18d2      	adds	r2, r2, r3
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_IncTick+0x20>)
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000058 	.word	0x20000058
 800139c:	2000023c 	.word	0x2000023c

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	2000023c 	.word	0x2000023c

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b7f      	cmp	r3, #127	; 0x7f
 80013c6:	d809      	bhi.n	80013dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	001a      	movs	r2, r3
 80013ce:	231f      	movs	r3, #31
 80013d0:	401a      	ands	r2, r3
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_EnableIRQ+0x30>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	4091      	lsls	r1, r2
 80013d8:	000a      	movs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
  }
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	0002      	movs	r2, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b7f      	cmp	r3, #127	; 0x7f
 80013fc:	d828      	bhi.n	8001450 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fe:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <__NVIC_SetPriority+0xd4>)
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b25b      	sxtb	r3, r3
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	33c0      	adds	r3, #192	; 0xc0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	589b      	ldr	r3, [r3, r2]
 800140e:	1dfa      	adds	r2, r7, #7
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	0011      	movs	r1, r2
 8001414:	2203      	movs	r2, #3
 8001416:	400a      	ands	r2, r1
 8001418:	00d2      	lsls	r2, r2, #3
 800141a:	21ff      	movs	r1, #255	; 0xff
 800141c:	4091      	lsls	r1, r2
 800141e:	000a      	movs	r2, r1
 8001420:	43d2      	mvns	r2, r2
 8001422:	401a      	ands	r2, r3
 8001424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	401a      	ands	r2, r3
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	0018      	movs	r0, r3
 8001434:	2303      	movs	r3, #3
 8001436:	4003      	ands	r3, r0
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <__NVIC_SetPriority+0xd4>)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	430a      	orrs	r2, r1
 8001448:	33c0      	adds	r3, #192	; 0xc0
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800144e:	e031      	b.n	80014b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <__NVIC_SetPriority+0xd8>)
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0019      	movs	r1, r3
 8001458:	230f      	movs	r3, #15
 800145a:	400b      	ands	r3, r1
 800145c:	3b08      	subs	r3, #8
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3306      	adds	r3, #6
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1dfa      	adds	r2, r7, #7
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	0011      	movs	r1, r2
 8001470:	2203      	movs	r2, #3
 8001472:	400a      	ands	r2, r1
 8001474:	00d2      	lsls	r2, r2, #3
 8001476:	21ff      	movs	r1, #255	; 0xff
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	43d2      	mvns	r2, r2
 800147e:	401a      	ands	r2, r3
 8001480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	22ff      	movs	r2, #255	; 0xff
 8001488:	401a      	ands	r2, r3
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	0018      	movs	r0, r3
 8001490:	2303      	movs	r3, #3
 8001492:	4003      	ands	r3, r0
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <__NVIC_SetPriority+0xd8>)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	001c      	movs	r4, r3
 80014a0:	230f      	movs	r3, #15
 80014a2:	4023      	ands	r3, r4
 80014a4:	3b08      	subs	r3, #8
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	430a      	orrs	r2, r1
 80014aa:	3306      	adds	r3, #6
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	18c3      	adds	r3, r0, r3
 80014b0:	3304      	adds	r3, #4
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b003      	add	sp, #12
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	045b      	lsls	r3, r3, #17
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d301      	bcc.n	80014dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d8:	2301      	movs	r3, #1
 80014da:	e010      	b.n	80014fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <SysTick_Config+0x44>)
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	3a01      	subs	r2, #1
 80014e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e4:	2301      	movs	r3, #1
 80014e6:	425b      	negs	r3, r3
 80014e8:	2103      	movs	r1, #3
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff7c 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x44>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x44>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	210f      	movs	r1, #15
 8001518:	187b      	adds	r3, r7, r1
 800151a:	1c02      	adds	r2, r0, #0
 800151c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	187b      	adds	r3, r7, r1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	0011      	movs	r1, r2
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	0002      	movs	r2, r0
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ff33 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ffaf 	bl	80014c4 <SysTick_Config>
 8001566:	0003      	movs	r3, r0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001586:	e149      	b.n	800181c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4091      	lsls	r1, r2
 8001592:	000a      	movs	r2, r1
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <HAL_GPIO_Init+0x30>
 800159e:	e13a      	b.n	8001816 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2203      	movs	r2, #3
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	409a      	lsls	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	43da      	mvns	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	43da      	mvns	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	4013      	ands	r3, r2
 8001622:	2b03      	cmp	r3, #3
 8001624:	d017      	beq.n	8001656 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2203      	movs	r2, #3
 800165c:	4013      	ands	r3, r2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d123      	bne.n	80016aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	58d3      	ldr	r3, [r2, r3]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2207      	movs	r2, #7
 8001674:	4013      	ands	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2107      	movs	r1, #7
 800168e:	400b      	ands	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	401a      	ands	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_GPIO_Init+0x17c>
 80016ea:	e094      	b.n	8001816 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_GPIO_Init+0x2c4>)
 80016ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_GPIO_Init+0x2c4>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_GPIO_Init+0x2c8>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	589b      	ldr	r3, [r3, r2]
 8001704:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2203      	movs	r2, #3
 800170a:	4013      	ands	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	409a      	lsls	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	23a0      	movs	r3, #160	; 0xa0
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	429a      	cmp	r2, r3
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x1de>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a44      	ldr	r2, [pc, #272]	; (800183c <HAL_GPIO_Init+0x2cc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x1da>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a43      	ldr	r2, [pc, #268]	; (8001840 <HAL_GPIO_Init+0x2d0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x1d6>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a42      	ldr	r2, [pc, #264]	; (8001844 <HAL_GPIO_Init+0x2d4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x1d2>
 800173e:	2305      	movs	r3, #5
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x1e0>
 8001742:	2306      	movs	r3, #6
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x1e0>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x1e0>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x1e0>
 800174e:	2300      	movs	r3, #0
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	2103      	movs	r1, #3
 8001754:	400a      	ands	r2, r1
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2c8>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	035b      	lsls	r3, r3, #13
 8001786:	4013      	ands	r3, r2
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43da      	mvns	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	039b      	lsls	r3, r3, #14
 80017b0:	4013      	ands	r3, r2
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	4013      	ands	r3, r2
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_GPIO_Init+0x2d8>)
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	40da      	lsrs	r2, r3
 8001824:	1e13      	subs	r3, r2, #0
 8001826:	d000      	beq.n	800182a <HAL_GPIO_Init+0x2ba>
 8001828:	e6ae      	b.n	8001588 <HAL_GPIO_Init+0x18>
  }
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b006      	add	sp, #24
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000
 800183c:	50000400 	.word	0x50000400
 8001840:	50000800 	.word	0x50000800
 8001844:	50001c00 	.word	0x50001c00
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	0008      	movs	r0, r1
 8001856:	0011      	movs	r1, r2
 8001858:	1cbb      	adds	r3, r7, #2
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	1c7b      	adds	r3, r7, #1
 8001860:	1c0a      	adds	r2, r1, #0
 8001862:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001864:	1c7b      	adds	r3, r7, #1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186c:	1cbb      	adds	r3, r7, #2
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	0002      	movs	r2, r0
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	1dba      	adds	r2, r7, #6
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4013      	ands	r3, r2
 800189e:	d008      	beq.n	80018b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80018a2:	1dba      	adds	r2, r7, #6
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fa3b 	bl	8000d28 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e082      	b.n	80019d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2241      	movs	r2, #65	; 0x41
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fb4d 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2241      	movs	r2, #65	; 0x41
 80018f2:	2124      	movs	r1, #36	; 0x24
 80018f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	438a      	bics	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_I2C_Init+0x120>)
 8001910:	400a      	ands	r2, r1
 8001912:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4931      	ldr	r1, [pc, #196]	; (80019e4 <HAL_I2C_Init+0x124>)
 8001920:	400a      	ands	r2, r1
 8001922:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0209      	lsls	r1, r1, #8
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e007      	b.n	800194e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2184      	movs	r1, #132	; 0x84
 8001948:	0209      	lsls	r1, r1, #8
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d104      	bne.n	8001960 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	491f      	ldr	r1, [pc, #124]	; (80019e8 <HAL_I2C_Init+0x128>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	491a      	ldr	r1, [pc, #104]	; (80019e4 <HAL_I2C_Init+0x124>)
 800197c:	400a      	ands	r2, r1
 800197e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	431a      	orrs	r2, r3
 800198a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69d9      	ldr	r1, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2241      	movs	r2, #65	; 0x41
 80019c4:	2120      	movs	r1, #32
 80019c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2242      	movs	r2, #66	; 0x42
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	f0ffffff 	.word	0xf0ffffff
 80019e4:	ffff7fff 	.word	0xffff7fff
 80019e8:	02008000 	.word	0x02008000

080019ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	000c      	movs	r4, r1
 80019f6:	0010      	movs	r0, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	230a      	movs	r3, #10
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	1c22      	adds	r2, r4, #0
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	2308      	movs	r3, #8
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	1c02      	adds	r2, r0, #0
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	1c0a      	adds	r2, r1, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2241      	movs	r2, #65	; 0x41
 8001a14:	5c9b      	ldrb	r3, [r3, r2]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d000      	beq.n	8001a1e <HAL_I2C_Mem_Write+0x32>
 8001a1c:	e10c      	b.n	8001c38 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_I2C_Mem_Write+0x42>
 8001a24:	232c      	movs	r3, #44	; 0x2c
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0ff      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	5c9b      	ldrb	r3, [r3, r2]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2C_Mem_Write+0x5c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0f8      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a50:	f7ff fca6 	bl	80013a0 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	0219      	lsls	r1, r3, #8
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2319      	movs	r3, #25
 8001a64:	2201      	movs	r2, #1
 8001a66:	f000 fb0b 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0e3      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2241      	movs	r2, #65	; 0x41
 8001a76:	2121      	movs	r1, #33	; 0x21
 8001a78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2242      	movs	r2, #66	; 0x42
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	222c      	movs	r2, #44	; 0x2c
 8001a92:	18ba      	adds	r2, r7, r2
 8001a94:	8812      	ldrh	r2, [r2, #0]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a9e:	1dbb      	adds	r3, r7, #6
 8001aa0:	881c      	ldrh	r4, [r3, #0]
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	0023      	movs	r3, r4
 8001aba:	f000 f9f9 	bl	8001eb0 <I2C_RequestMemoryWrite>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0b5      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2bff      	cmp	r3, #255	; 0xff
 8001ad6:	d911      	bls.n	8001afc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	045c      	lsls	r4, r3, #17
 8001ae8:	230a      	movs	r3, #10
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	8819      	ldrh	r1, [r3, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0023      	movs	r3, r4
 8001af6:	f000 fc9b 	bl	8002430 <I2C_TransferConfig>
 8001afa:	e012      	b.n	8001b22 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	049c      	lsls	r4, r3, #18
 8001b10:	230a      	movs	r3, #10
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	0023      	movs	r3, r4
 8001b1e:	f000 fc87 	bl	8002430 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 faf7 	bl	800211c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e081      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03a      	beq.n	8001be6 <HAL_I2C_Mem_Write+0x1fa>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d136      	bne.n	8001be6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	0013      	movs	r3, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	f000 fa7b 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e053      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d911      	bls.n	8001bc0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	045c      	lsls	r4, r3, #17
 8001bac:	230a      	movs	r3, #10
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	8819      	ldrh	r1, [r3, #0]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	0023      	movs	r3, r4
 8001bba:	f000 fc39 	bl	8002430 <I2C_TransferConfig>
 8001bbe:	e012      	b.n	8001be6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	049c      	lsls	r4, r3, #18
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	8819      	ldrh	r1, [r3, #0]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	0023      	movs	r3, r4
 8001be2:	f000 fc25 	bl	8002430 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d198      	bne.n	8001b22 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fad6 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bfc:	1e03      	subs	r3, r0, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01a      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	490b      	ldr	r1, [pc, #44]	; (8001c44 <HAL_I2C_Mem_Write+0x258>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2241      	movs	r2, #65	; 0x41
 8001c20:	2120      	movs	r1, #32
 8001c22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2242      	movs	r2, #66	; 0x42
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2240      	movs	r2, #64	; 0x40
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b007      	add	sp, #28
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	000c      	movs	r4, r1
 8001c52:	0010      	movs	r0, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	230a      	movs	r3, #10
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	1c22      	adds	r2, r4, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	2308      	movs	r3, #8
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	1c02      	adds	r2, r0, #0
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	1c0a      	adds	r2, r1, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2241      	movs	r2, #65	; 0x41
 8001c70:	5c9b      	ldrb	r3, [r3, r2]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d000      	beq.n	8001c7a <HAL_I2C_Mem_Read+0x32>
 8001c78:	e110      	b.n	8001e9c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_I2C_Mem_Read+0x42>
 8001c80:	232c      	movs	r3, #44	; 0x2c
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e103      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	5c9b      	ldrb	r3, [r3, r2]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2C_Mem_Read+0x5c>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0fc      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2240      	movs	r2, #64	; 0x40
 8001ca8:	2101      	movs	r1, #1
 8001caa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cac:	f7ff fb78 	bl	80013a0 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	0219      	lsls	r1, r3, #8
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2319      	movs	r3, #25
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f000 f9dd 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0e7      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2241      	movs	r2, #65	; 0x41
 8001cd2:	2122      	movs	r1, #34	; 0x22
 8001cd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2242      	movs	r2, #66	; 0x42
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	222c      	movs	r2, #44	; 0x2c
 8001cee:	18ba      	adds	r2, r7, r2
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfa:	1dbb      	adds	r3, r7, #6
 8001cfc:	881c      	ldrh	r4, [r3, #0]
 8001cfe:	2308      	movs	r3, #8
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	230a      	movs	r3, #10
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	8819      	ldrh	r1, [r3, #0]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	0023      	movs	r3, r4
 8001d16:	f000 f92f 	bl	8001f78 <I2C_RequestMemoryRead>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0b9      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2bff      	cmp	r3, #255	; 0xff
 8001d32:	d911      	bls.n	8001d58 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	045c      	lsls	r4, r3, #17
 8001d44:	230a      	movs	r3, #10
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	8819      	ldrh	r1, [r3, #0]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <HAL_I2C_Mem_Read+0x260>)
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	0023      	movs	r3, r4
 8001d52:	f000 fb6d 	bl	8002430 <I2C_TransferConfig>
 8001d56:	e012      	b.n	8001d7e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	049c      	lsls	r4, r3, #18
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	8819      	ldrh	r1, [r3, #0]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_I2C_Mem_Read+0x260>)
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	0023      	movs	r3, r4
 8001d7a:	f000 fb59 	bl	8002430 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0013      	movs	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	f000 f978 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e082      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d03a      	beq.n	8001e4a <HAL_I2C_Mem_Read+0x202>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d136      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	0013      	movs	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	f000 f949 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e053      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2bff      	cmp	r3, #255	; 0xff
 8001dfe:	d911      	bls.n	8001e24 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	22ff      	movs	r2, #255	; 0xff
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	045c      	lsls	r4, r3, #17
 8001e10:	230a      	movs	r3, #10
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	8819      	ldrh	r1, [r3, #0]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	0023      	movs	r3, r4
 8001e1e:	f000 fb07 	bl	8002430 <I2C_TransferConfig>
 8001e22:	e012      	b.n	8001e4a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	049c      	lsls	r4, r3, #18
 8001e38:	230a      	movs	r3, #10
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	8819      	ldrh	r1, [r3, #0]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	0023      	movs	r3, r4
 8001e46:	f000 faf3 	bl	8002430 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d194      	bne.n	8001d7e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 f9a4 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01a      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	490c      	ldr	r1, [pc, #48]	; (8001eac <HAL_I2C_Mem_Read+0x264>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2241      	movs	r2, #65	; 0x41
 8001e84:	2120      	movs	r1, #32
 8001e86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2242      	movs	r2, #66	; 0x42
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b007      	add	sp, #28
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	80002400 	.word	0x80002400
 8001eac:	fe00e800 	.word	0xfe00e800

08001eb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	000c      	movs	r4, r1
 8001eba:	0010      	movs	r0, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	250a      	movs	r5, #10
 8001ec0:	197b      	adds	r3, r7, r5
 8001ec2:	1c22      	adds	r2, r4, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	1c02      	adds	r2, r0, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	1c0a      	adds	r2, r1, #0
 8001ed2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	045c      	lsls	r4, r3, #17
 8001ede:	197b      	adds	r3, r7, r5
 8001ee0:	8819      	ldrh	r1, [r3, #0]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <I2C_RequestMemoryWrite+0xc4>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	0023      	movs	r3, r4
 8001eea:	f000 faa1 	bl	8002430 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f911 	bl	800211c <I2C_WaitOnTXISFlagUntilTimeout>
 8001efa:	1e03      	subs	r3, r0, #0
 8001efc:	d001      	beq.n	8001f02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e033      	b.n	8001f6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f02:	1dbb      	adds	r3, r7, #6
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
 8001f18:	e019      	b.n	8001f4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f8f2 	bl	800211c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e014      	b.n	8001f6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f40:	2308      	movs	r3, #8
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	0013      	movs	r3, r2
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	f000 f890 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d001      	beq.n	8001f68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b004      	add	sp, #16
 8001f70:	bdb0      	pop	{r4, r5, r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	80002000 	.word	0x80002000

08001f78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	000c      	movs	r4, r1
 8001f82:	0010      	movs	r0, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	250a      	movs	r5, #10
 8001f88:	197b      	adds	r3, r7, r5
 8001f8a:	1c22      	adds	r2, r4, #0
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	2308      	movs	r3, #8
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	1c02      	adds	r2, r0, #0
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	1c0a      	adds	r2, r1, #0
 8001f9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	197b      	adds	r3, r7, r5
 8001fa4:	8819      	ldrh	r1, [r3, #0]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <I2C_RequestMemoryRead+0xc0>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2300      	movs	r3, #0
 8001fae:	f000 fa3f 	bl	8002430 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	6a39      	ldr	r1, [r7, #32]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 f8af 	bl	800211c <I2C_WaitOnTXISFlagUntilTimeout>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e033      	b.n	800202e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fce:	2308      	movs	r3, #8
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
 8001fdc:	e019      	b.n	8002012 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fde:	2308      	movs	r3, #8
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	6a39      	ldr	r1, [r7, #32]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f890 	bl	800211c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e014      	b.n	800202e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002004:	2308      	movs	r3, #8
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002012:	6a3a      	ldr	r2, [r7, #32]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	0013      	movs	r3, r2
 800201c:	2200      	movs	r2, #0
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	f000 f82e 	bl	8002080 <I2C_WaitOnFlagUntilTimeout>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d001      	beq.n	800202c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	80002000 	.word	0x80002000

0800203c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d103      	bne.n	800205a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	2b01      	cmp	r3, #1
 8002066:	d007      	beq.n	8002078 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	619a      	str	r2, [r3, #24]
  }
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002090:	e030      	b.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	d02d      	beq.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002098:	f7ff f982 	bl	80013a0 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d302      	bcc.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d122      	bne.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4013      	ands	r3, r2
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	425a      	negs	r2, r3
 80020be:	4153      	adcs	r3, r2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	001a      	movs	r2, r3
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d113      	bne.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	2220      	movs	r2, #32
 80020d2:	431a      	orrs	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2241      	movs	r2, #65	; 0x41
 80020dc:	2120      	movs	r1, #32
 80020de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2242      	movs	r2, #66	; 0x42
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e00f      	b.n	8002114 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	425a      	negs	r2, r3
 8002104:	4153      	adcs	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	001a      	movs	r2, r3
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d0bf      	beq.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002128:	e032      	b.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 f87d 	bl	8002230 <I2C_IsErrorOccurred>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d001      	beq.n	800213e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e030      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3301      	adds	r3, #1
 8002142:	d025      	beq.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff f92c 	bl	80013a0 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11a      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	2b02      	cmp	r3, #2
 8002166:	d013      	beq.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2220      	movs	r2, #32
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2241      	movs	r2, #65	; 0x41
 8002178:	2120      	movs	r1, #32
 800217a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2242      	movs	r2, #66	; 0x42
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d1c5      	bne.n	800212a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	e02f      	b.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f837 	bl	8002230 <I2C_IsErrorOccurred>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e02d      	b.n	8002226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff f8e9 	bl	80013a0 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d11a      	bne.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d013      	beq.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	2220      	movs	r2, #32
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	2120      	movs	r1, #32
 8002200:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2242      	movs	r2, #66	; 0x42
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e007      	b.n	8002226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2220      	movs	r2, #32
 800221e:	4013      	ands	r3, r2
 8002220:	2b20      	cmp	r3, #32
 8002222:	d1c8      	bne.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223c:	2327      	movs	r3, #39	; 0x27
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2210      	movs	r2, #16
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <I2C_IsErrorOccurred+0x2e>
 800225c:	e082      	b.n	8002364 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002266:	e060      	b.n	800232a <I2C_IsErrorOccurred+0xfa>
 8002268:	2427      	movs	r4, #39	; 0x27
 800226a:	193b      	adds	r3, r7, r4
 800226c:	193a      	adds	r2, r7, r4
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	d058      	beq.n	800232a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7ff f892 	bl	80013a0 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	d306      	bcc.n	8002296 <I2C_IsErrorOccurred+0x66>
 8002288:	193b      	adds	r3, r7, r4
 800228a:	193a      	adds	r2, r7, r4
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d149      	bne.n	800232a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022a4:	2013      	movs	r0, #19
 80022a6:	183b      	adds	r3, r7, r0
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	2142      	movs	r1, #66	; 0x42
 80022ac:	5c52      	ldrb	r2, [r2, r1]
 80022ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	401a      	ands	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d126      	bne.n	8002312 <I2C_IsErrorOccurred+0xe2>
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d021      	beq.n	8002312 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d01d      	beq.n	8002312 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	01c9      	lsls	r1, r1, #7
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022e8:	f7ff f85a 	bl	80013a0 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f0:	e00f      	b.n	8002312 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022f2:	f7ff f855 	bl	80013a0 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b19      	cmp	r3, #25
 80022fe:	d908      	bls.n	8002312 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2220      	movs	r2, #32
 8002304:	4313      	orrs	r3, r2
 8002306:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002308:	2327      	movs	r3, #39	; 0x27
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]

              break;
 8002310:	e00b      	b.n	800232a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2220      	movs	r2, #32
 800231a:	4013      	ands	r3, r2
 800231c:	2127      	movs	r1, #39	; 0x27
 800231e:	187a      	adds	r2, r7, r1
 8002320:	1879      	adds	r1, r7, r1
 8002322:	7809      	ldrb	r1, [r1, #0]
 8002324:	7011      	strb	r1, [r2, #0]
 8002326:	2b20      	cmp	r3, #32
 8002328:	d1e3      	bne.n	80022f2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2220      	movs	r2, #32
 8002332:	4013      	ands	r3, r2
 8002334:	2b20      	cmp	r3, #32
 8002336:	d004      	beq.n	8002342 <I2C_IsErrorOccurred+0x112>
 8002338:	2327      	movs	r3, #39	; 0x27
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d092      	beq.n	8002268 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002342:	2327      	movs	r3, #39	; 0x27
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2220      	movs	r2, #32
 8002352:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2204      	movs	r2, #4
 8002358:	4313      	orrs	r3, r2
 800235a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800235c:	2327      	movs	r3, #39	; 0x27
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d00c      	beq.n	8002390 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	2201      	movs	r2, #1
 800237a:	4313      	orrs	r3, r2
 800237c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	0052      	lsls	r2, r2, #1
 8002386:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002388:	2327      	movs	r3, #39	; 0x27
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4013      	ands	r3, r2
 8002398:	d00c      	beq.n	80023b4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2208      	movs	r2, #8
 800239e:	4313      	orrs	r3, r2
 80023a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	00d2      	lsls	r2, r2, #3
 80023aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ac:	2327      	movs	r3, #39	; 0x27
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d00c      	beq.n	80023d8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2202      	movs	r2, #2
 80023c2:	4313      	orrs	r3, r2
 80023c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d0:	2327      	movs	r3, #39	; 0x27
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80023d8:	2327      	movs	r3, #39	; 0x27
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01d      	beq.n	800241e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fe29 	bl	800203c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	490d      	ldr	r1, [pc, #52]	; (800242c <I2C_IsErrorOccurred+0x1fc>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2241      	movs	r2, #65	; 0x41
 800240a:	2120      	movs	r1, #32
 800240c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2242      	movs	r2, #66	; 0x42
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800241e:	2327      	movs	r3, #39	; 0x27
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b00b      	add	sp, #44	; 0x2c
 800242a:	bd90      	pop	{r4, r7, pc}
 800242c:	fe00e800 	.word	0xfe00e800

08002430 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	0008      	movs	r0, r1
 800243a:	0011      	movs	r1, r2
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	240a      	movs	r4, #10
 8002440:	193b      	adds	r3, r7, r4
 8002442:	1c02      	adds	r2, r0, #0
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	2009      	movs	r0, #9
 8002448:	183b      	adds	r3, r7, r0
 800244a:	1c0a      	adds	r2, r1, #0
 800244c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244e:	193b      	adds	r3, r7, r4
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	059b      	lsls	r3, r3, #22
 8002454:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002456:	183b      	adds	r3, r7, r0
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	0419      	lsls	r1, r3, #16
 800245c:	23ff      	movs	r3, #255	; 0xff
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002462:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	4313      	orrs	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800247a:	0d51      	lsrs	r1, r2, #21
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	00d2      	lsls	r2, r2, #3
 8002480:	400a      	ands	r2, r1
 8002482:	4907      	ldr	r1, [pc, #28]	; (80024a0 <I2C_TransferConfig+0x70>)
 8002484:	430a      	orrs	r2, r1
 8002486:	43d2      	mvns	r2, r2
 8002488:	401a      	ands	r2, r3
 800248a:	0011      	movs	r1, r2
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b007      	add	sp, #28
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	03ff63ff 	.word	0x03ff63ff

080024a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d138      	bne.n	800252c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e032      	b.n	800252e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2241      	movs	r2, #65	; 0x41
 80024d4:	2124      	movs	r1, #36	; 0x24
 80024d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	438a      	bics	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4911      	ldr	r1, [pc, #68]	; (8002538 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2241      	movs	r2, #65	; 0x41
 800251c:	2120      	movs	r1, #32
 800251e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	ffffefff 	.word	0xffffefff

0800253c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2241      	movs	r2, #65	; 0x41
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	d139      	bne.n	80025c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2240      	movs	r2, #64	; 0x40
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800255c:	2302      	movs	r3, #2
 800255e:	e033      	b.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	; 0x41
 800256c:	2124      	movs	r1, #36	; 0x24
 800256e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	2120      	movs	r1, #32
 80025b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	fffff0ff 	.word	0xfffff0ff

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 fb6c 	bl	8002cc0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4bc8      	ldr	r3, [pc, #800]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f2:	4bc6      	ldr	r3, [pc, #792]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x36>
 8002608:	e07d      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d10d      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4bba      	ldr	r3, [pc, #744]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x5a>
 800262c:	e06a      	b.n	8002704 <HAL_RCC_OscConfig+0x130>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d166      	bne.n	8002704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f000 fb42 	bl	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x84>
 8002648:	4bb0      	ldr	r3, [pc, #704]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4baf      	ldr	r3, [pc, #700]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0249      	lsls	r1, r1, #9
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e027      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	23a0      	movs	r3, #160	; 0xa0
 800265e:	02db      	lsls	r3, r3, #11
 8002660:	429a      	cmp	r2, r3
 8002662:	d10e      	bne.n	8002682 <HAL_RCC_OscConfig+0xae>
 8002664:	4ba9      	ldr	r3, [pc, #676]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4ba8      	ldr	r3, [pc, #672]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	02c9      	lsls	r1, r1, #11
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4ba6      	ldr	r3, [pc, #664]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4ba5      	ldr	r3, [pc, #660]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0249      	lsls	r1, r1, #9
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e012      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002682:	4ba2      	ldr	r3, [pc, #648]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4ba1      	ldr	r3, [pc, #644]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002688:	49a1      	ldr	r1, [pc, #644]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b9f      	ldr	r3, [pc, #636]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4b9b      	ldr	r3, [pc, #620]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b9a      	ldr	r3, [pc, #616]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80026a2:	499c      	ldr	r1, [pc, #624]	; (8002914 <HAL_RCC_OscConfig+0x340>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d014      	beq.n	80026da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fe76 	bl	80013a0 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ba:	f7fe fe71 	bl	80013a0 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	; 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e2f9      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026cc:	4b8f      	ldr	r3, [pc, #572]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0xe6>
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe fe61 	bl	80013a0 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fe5c 	bl	80013a0 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2e4      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x110>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x13e>
 8002710:	e099      	b.n	8002846 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2220      	movs	r2, #32
 800271c:	4013      	ands	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002720:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002726:	2120      	movs	r1, #32
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2220      	movs	r2, #32
 8002730:	4393      	bics	r3, r2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d13e      	bne.n	80027be <HAL_RCC_OscConfig+0x1ea>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d13b      	bne.n	80027be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002746:	4b71      	ldr	r3, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_RCC_OscConfig+0x186>
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e2b2      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_RCC_OscConfig+0x344>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2209      	movs	r2, #9
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002782:	f000 fbeb 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002786:	0001      	movs	r1, r0
 8002788:	4b60      	ldr	r3, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	220f      	movs	r2, #15
 8002790:	4013      	ands	r3, r2
 8002792:	4a62      	ldr	r2, [pc, #392]	; (800291c <HAL_RCC_OscConfig+0x348>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	000a      	movs	r2, r1
 8002798:	40da      	lsrs	r2, r3
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <HAL_RCC_OscConfig+0x34c>)
 800279c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_RCC_OscConfig+0x350>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2513      	movs	r5, #19
 80027a4:	197c      	adds	r4, r7, r5
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fe fdb4 	bl	8001314 <HAL_InitTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027b0:	197b      	adds	r3, r7, r5
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d046      	beq.n	8002846 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	e280      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d027      	beq.n	8002814 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2209      	movs	r2, #9
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	4b4f      	ldr	r3, [pc, #316]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80027d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fde3 	bl	80013a0 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe fdde 	bl	80013a0 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e266      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0f1      	beq.n	80027e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a45      	ldr	r2, [pc, #276]	; (8002918 <HAL_RCC_OscConfig+0x344>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	021a      	lsls	r2, r3, #8
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002814:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800281a:	2101      	movs	r1, #1
 800281c:	438a      	bics	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fdbe 	bl	80013a0 <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282a:	f7fe fdb9 	bl	80013a0 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e241      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d1f1      	bne.n	800282a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	4013      	ands	r3, r2
 800284e:	d100      	bne.n	8002852 <HAL_RCC_OscConfig+0x27e>
 8002850:	e0a1      	b.n	8002996 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d140      	bne.n	80028da <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002858:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCC_OscConfig+0x338>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x29c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e227      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	0a19      	lsrs	r1, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	061a      	lsls	r2, r3, #24
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCC_OscConfig+0x338>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	0b5b      	lsrs	r3, r3, #13
 800289e:	3301      	adds	r3, #1
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	0212      	lsls	r2, r2, #8
 80028a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	210f      	movs	r1, #15
 80028ae:	400b      	ands	r3, r1
 80028b0:	491a      	ldr	r1, [pc, #104]	; (800291c <HAL_RCC_OscConfig+0x348>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_OscConfig+0x34c>)
 80028b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x350>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2513      	movs	r5, #19
 80028c0:	197c      	adds	r4, r7, r5
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fe fd26 	bl	8001314 <HAL_InitTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d060      	beq.n	8002996 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80028d4:	197b      	adds	r3, r7, r5
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	e1f2      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03f      	beq.n	8002962 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x338>)
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0049      	lsls	r1, r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fd56 	bl	80013a0 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028f8:	e018      	b.n	800292c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd51 	bl	80013a0 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d911      	bls.n	800292c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1d9      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
 800290c:	40021000 	.word	0x40021000
 8002910:	fffeffff 	.word	0xfffeffff
 8002914:	fffbffff 	.word	0xfffbffff
 8002918:	ffffe0ff 	.word	0xffffe0ff
 800291c:	080056c0 	.word	0x080056c0
 8002920:	20000050 	.word	0x20000050
 8002924:	20000054 	.word	0x20000054
 8002928:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800292c:	4bc9      	ldr	r3, [pc, #804]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d0e0      	beq.n	80028fa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002938:	4bc6      	ldr	r3, [pc, #792]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4ac6      	ldr	r2, [pc, #792]	; (8002c58 <HAL_RCC_OscConfig+0x684>)
 800293e:	4013      	ands	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	4bc3      	ldr	r3, [pc, #780]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294c:	4bc1      	ldr	r3, [pc, #772]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	0a19      	lsrs	r1, r3, #8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	061a      	lsls	r2, r3, #24
 800295a:	4bbe      	ldr	r3, [pc, #760]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	e019      	b.n	8002996 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002962:	4bbc      	ldr	r3, [pc, #752]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4bbb      	ldr	r3, [pc, #748]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002968:	49bc      	ldr	r1, [pc, #752]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 800296a:	400a      	ands	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe fd17 	bl	80013a0 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7fe fd12 	bl	80013a0 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e19a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800298a:	4bb2      	ldr	r3, [pc, #712]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	4013      	ands	r3, r2
 800299e:	d036      	beq.n	8002a0e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d019      	beq.n	80029dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a8:	4baa      	ldr	r3, [pc, #680]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 80029aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ac:	4ba9      	ldr	r3, [pc, #676]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fcf4 	bl	80013a0 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe fcef 	bl	80013a0 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e177      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d0:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	d0f1      	beq.n	80029be <HAL_RCC_OscConfig+0x3ea>
 80029da:	e018      	b.n	8002a0e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b9d      	ldr	r3, [pc, #628]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 80029de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e0:	4b9c      	ldr	r3, [pc, #624]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	438a      	bics	r2, r1
 80029e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7fe fcda 	bl	80013a0 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fcd5 	bl	80013a0 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e15d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a04:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d1f1      	bne.n	80029f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2204      	movs	r2, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d100      	bne.n	8002a1a <HAL_RCC_OscConfig+0x446>
 8002a18:	e0ae      	b.n	8002b78 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2023      	movs	r0, #35	; 0x23
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	055b      	lsls	r3, r3, #21
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0549      	lsls	r1, r1, #21
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a3c:	183b      	adds	r3, r7, r0
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d11a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b84      	ldr	r3, [pc, #528]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0049      	lsls	r1, r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fca0 	bl	80013a0 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fc9b 	bl	80013a0 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e123      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4cc>
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a94:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a9e:	e031      	b.n	8002b04 <HAL_RCC_OscConfig+0x530>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4ee>
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aac:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002aae:	496b      	ldr	r1, [pc, #428]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ab4:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002aba:	496a      	ldr	r1, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x690>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac0:	e020      	b.n	8002b04 <HAL_RCC_OscConfig+0x530>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	23a0      	movs	r3, #160	; 0xa0
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10e      	bne.n	8002aec <HAL_RCC_OscConfig+0x518>
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002ad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad2:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	00c9      	lsls	r1, r1, #3
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	651a      	str	r2, [r3, #80]	; 0x50
 8002adc:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0049      	lsls	r1, r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0x530>
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002af2:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002afe:	4959      	ldr	r1, [pc, #356]	; (8002c64 <HAL_RCC_OscConfig+0x690>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d015      	beq.n	8002b38 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fc48 	bl	80013a0 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fc43 	bl	80013a0 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0ca      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d0ef      	beq.n	8002b16 <HAL_RCC_OscConfig+0x542>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7fe fc32 	bl	80013a0 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fc2d 	bl	80013a0 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a46      	ldr	r2, [pc, #280]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0b4      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d1ef      	bne.n	8002b42 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b62:	2323      	movs	r3, #35	; 0x23
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b70:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b72:	493e      	ldr	r1, [pc, #248]	; (8002c6c <HAL_RCC_OscConfig+0x698>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d100      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5ae>
 8002b80:	e09d      	b.n	8002cbe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x5b6>
 8002b88:	e076      	b.n	8002c78 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d145      	bne.n	8002c1e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b98:	4935      	ldr	r1, [pc, #212]	; (8002c70 <HAL_RCC_OscConfig+0x69c>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fbff 	bl	80013a0 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fbfa 	bl	80013a0 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e082      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	049b      	lsls	r3, r3, #18
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x6a0>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	431a      	orrs	r2, r3
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0449      	lsls	r1, r1, #17
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fbd4 	bl	80013a0 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fbcf 	bl	80013a0 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e057      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	049b      	lsls	r3, r3, #18
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x62a>
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002c24:	4912      	ldr	r1, [pc, #72]	; (8002c70 <HAL_RCC_OscConfig+0x69c>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fbb9 	bl	80013a0 <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fbb4 	bl	80013a0 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e03c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c46:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	049b      	lsls	r3, r3, #18
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x660>
 8002c52:	e034      	b.n	8002cbe <HAL_RCC_OscConfig+0x6ea>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	ffff1fff 	.word	0xffff1fff
 8002c5c:	fffffeff 	.word	0xfffffeff
 8002c60:	40007000 	.word	0x40007000
 8002c64:	fffffbff 	.word	0xfffffbff
 8002c68:	00001388 	.word	0x00001388
 8002c6c:	efffffff 	.word	0xefffffff
 8002c70:	feffffff 	.word	0xfeffffff
 8002c74:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCC_OscConfig+0x6f4>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	025b      	lsls	r3, r3, #9
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10f      	bne.n	8002cba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	23f0      	movs	r3, #240	; 0xf0
 8002c9e:	039b      	lsls	r3, r3, #14
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	23c0      	movs	r3, #192	; 0xc0
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b00a      	add	sp, #40	; 0x28
 8002cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e128      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d91e      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b93      	ldr	r3, [pc, #588]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	4b90      	ldr	r3, [pc, #576]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fb4e 	bl	80013a0 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	e009      	b.n	8002d1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fb49 	bl	80013a0 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	4a8a      	ldr	r2, [pc, #552]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e109      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b87      	ldr	r3, [pc, #540]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d36:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	22f0      	movs	r2, #240	; 0xf0
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b7f      	ldr	r3, [pc, #508]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d100      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
 8002d54:	e089      	b.n	8002e6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d5e:	4b79      	ldr	r3, [pc, #484]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	029b      	lsls	r3, r3, #10
 8002d66:	4013      	ands	r3, r2
 8002d68:	d120      	bne.n	8002dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0e1      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d76:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	049b      	lsls	r3, r3, #18
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d114      	bne.n	8002dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0d5      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	d109      	bne.n	8002dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0ca      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d9c:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0c2      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dac:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2203      	movs	r2, #3
 8002db2:	4393      	bics	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe faee 	bl	80013a0 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d111      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe fae5 	bl	80013a0 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0a5      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	220c      	movs	r2, #12
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d1ef      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x106>
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7fe facf 	bl	80013a0 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e08f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	220c      	movs	r2, #12
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d1ef      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x132>
 8002e1e:	e024      	b.n	8002e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11b      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e28:	e009      	b.n	8002e3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2a:	f7fe fab9 	bl	80013a0 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e079      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	220c      	movs	r2, #12
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1ef      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x15e>
 8002e4a:	e00e      	b.n	8002e6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe faa8 	bl	80013a0 <HAL_GetTick>
 8002e50:	0002      	movs	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e068      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e60:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	220c      	movs	r2, #12
 8002e66:	4013      	ands	r3, r2
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d21e      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4393      	bics	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe fa89 	bl	80013a0 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe fa84 	bl	80013a0 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e044      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_RCC_ClockConfig+0x27c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	4013      	ands	r3, r2
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_RCC_ClockConfig+0x280>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00da      	lsls	r2, r3, #3
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ef4:	f000 f832 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002ef8:	0001      	movs	r1, r0
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x278>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	220f      	movs	r2, #15
 8002f02:	4013      	ands	r3, r2
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x284>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	000a      	movs	r2, r1
 8002f0a:	40da      	lsrs	r2, r3
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_RCC_ClockConfig+0x288>)
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_ClockConfig+0x28c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	250b      	movs	r5, #11
 8002f16:	197c      	adds	r4, r7, r5
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fe f9fb 	bl	8001314 <HAL_InitTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f22:	197b      	adds	r3, r7, r5
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f2a:	197b      	adds	r3, r7, r5
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	00001388 	.word	0x00001388
 8002f44:	40021000 	.word	0x40021000
 8002f48:	fffff8ff 	.word	0xfffff8ff
 8002f4c:	ffffc7ff 	.word	0xffffc7ff
 8002f50:	080056c0 	.word	0x080056c0
 8002f54:	20000050 	.word	0x20000050
 8002f58:	20000054 	.word	0x20000054

08002f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d014      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x40>
 8002f72:	d900      	bls.n	8002f76 <HAL_RCC_GetSysClockFreq+0x1a>
 8002f74:	e07b      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x112>
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x24>
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7e:	e076      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f80:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	4013      	ands	r3, r2
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002f8e:	e07c      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCC_GetSysClockFreq+0x140>)
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f94:	e079      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f9a:	e076      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	0c9a      	lsrs	r2, r3, #18
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x148>)
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	0d9a      	lsrs	r2, r3, #22
 8002fae:	2303      	movs	r3, #3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	025b      	lsls	r3, r3, #9
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d01a      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	4a35      	ldr	r2, [pc, #212]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	69b8      	ldr	r0, [r7, #24]
 8002fd0:	69f9      	ldr	r1, [r7, #28]
 8002fd2:	f7fd f94f 	bl	8000274 <__aeabi_lmul>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	000b      	movs	r3, r1
 8002fda:	0010      	movs	r0, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f7fd f923 	bl	8000234 <__aeabi_uldivmod>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	000b      	movs	r3, r1
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff6:	e037      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d01a      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_RCC_GetSysClockFreq+0x13c>)
 800300c:	2300      	movs	r3, #0
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	f7fd f92f 	bl	8000274 <__aeabi_lmul>
 8003016:	0002      	movs	r2, r0
 8003018:	000b      	movs	r3, r1
 800301a:	0010      	movs	r0, r2
 800301c:	0019      	movs	r1, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f7fd f903 	bl	8000234 <__aeabi_uldivmod>
 800302e:	0002      	movs	r2, r0
 8003030:	000b      	movs	r3, r1
 8003032:	0013      	movs	r3, r2
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	e017      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	0018      	movs	r0, r3
 800303c:	2300      	movs	r3, #0
 800303e:	0019      	movs	r1, r3
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_RCC_GetSysClockFreq+0x140>)
 8003042:	2300      	movs	r3, #0
 8003044:	f7fd f916 	bl	8000274 <__aeabi_lmul>
 8003048:	0002      	movs	r2, r0
 800304a:	000b      	movs	r3, r1
 800304c:	0010      	movs	r0, r2
 800304e:	0019      	movs	r1, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	001c      	movs	r4, r3
 8003054:	2300      	movs	r3, #0
 8003056:	001d      	movs	r5, r3
 8003058:	0022      	movs	r2, r4
 800305a:	002b      	movs	r3, r5
 800305c:	f7fd f8ea 	bl	8000234 <__aeabi_uldivmod>
 8003060:	0002      	movs	r2, r0
 8003062:	000b      	movs	r3, r1
 8003064:	0013      	movs	r3, r2
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800306c:	e00d      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_GetSysClockFreq+0x138>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	2207      	movs	r2, #7
 8003076:	4013      	ands	r3, r2
 8003078:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	3301      	adds	r3, #1
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	0212      	lsls	r2, r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	0013      	movs	r3, r2
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003088:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b00e      	add	sp, #56	; 0x38
 8003092:	bdb0      	pop	{r4, r5, r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	003d0900 	.word	0x003d0900
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	080056d8 	.word	0x080056d8

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000050 	.word	0x20000050

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff2 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c4:	0001      	movs	r1, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	2207      	movs	r2, #7
 80030ce:	4013      	ands	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	40d9      	lsrs	r1, r3
 80030d6:	000b      	movs	r3, r1
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080056d0 	.word	0x080056d0

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffdc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f0:	0001      	movs	r1, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	2207      	movs	r2, #7
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	40d9      	lsrs	r1, r3
 8003102:	000b      	movs	r3, r1
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	40021000 	.word	0x40021000
 8003110:	080056d0 	.word	0x080056d0

08003114 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800311c:	2017      	movs	r0, #23
 800311e:	183b      	adds	r3, r7, r0
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2220      	movs	r2, #32
 800312a:	4013      	ands	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800312e:	e0c7      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4b84      	ldr	r3, [pc, #528]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	055b      	lsls	r3, r3, #21
 8003138:	4013      	ands	r3, r2
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	0549      	lsls	r1, r1, #21
 8003146:	430a      	orrs	r2, r1
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800314a:	183b      	adds	r3, r7, r0
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b7d      	ldr	r3, [pc, #500]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d11a      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315c:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b79      	ldr	r3, [pc, #484]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316a:	f7fe f919 	bl	80013a0 <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	e008      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fe f914 	bl	80013a0 <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0d9      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b70      	ldr	r3, [pc, #448]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d0f0      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	23c0      	movs	r3, #192	; 0xc0
 8003198:	039b      	lsls	r3, r3, #14
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	039b      	lsls	r3, r3, #14
 80031a6:	4013      	ands	r3, r2
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d013      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	23c0      	movs	r3, #192	; 0xc0
 80031b4:	029b      	lsls	r3, r3, #10
 80031b6:	401a      	ands	r2, r3
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	429a      	cmp	r2, r3
 80031be:	d10a      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	029b      	lsls	r3, r3, #10
 80031c8:	401a      	ands	r2, r3
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0b1      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80031d6:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031da:	23c0      	movs	r3, #192	; 0xc0
 80031dc:	029b      	lsls	r3, r3, #10
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d03b      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	23c0      	movs	r3, #192	; 0xc0
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	4013      	ands	r3, r2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d033      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2220      	movs	r2, #32
 80031fe:	4013      	ands	r3, r2
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003202:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	4a51      	ldr	r2, [pc, #324]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320c:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800320e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0309      	lsls	r1, r1, #12
 8003216:	430a      	orrs	r2, r1
 8003218:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b4a      	ldr	r3, [pc, #296]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800321c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003220:	494b      	ldr	r1, [pc, #300]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003222:	400a      	ands	r2, r1
 8003224:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d014      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe f8b3 	bl	80013a0 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f8ae 	bl	80013a0 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e072      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d0ef      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2220      	movs	r2, #32
 8003266:	4013      	ands	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	401a      	ands	r2, r3
 8003274:	23c0      	movs	r3, #192	; 0xc0
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	429a      	cmp	r2, r3
 800327a:	d10c      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800327c:	4b31      	ldr	r3, [pc, #196]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	039b      	lsls	r3, r3, #14
 800328e:	401a      	ands	r2, r3
 8003290:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003298:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	23c0      	movs	r3, #192	; 0xc0
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	401a      	ands	r2, r3
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032aa:	2317      	movs	r3, #23
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032ba:	4928      	ldr	r1, [pc, #160]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032bc:	400a      	ands	r2, r1
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	220c      	movs	r2, #12
 80032d0:	4393      	bics	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	4013      	ands	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003316:	430a      	orrs	r2, r1
 8003318:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	4013      	ands	r3, r2
 8003322:	d009      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003334:	430a      	orrs	r2, r1
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
 800334c:	fffcffff 	.word	0xfffcffff
 8003350:	fff7ffff 	.word	0xfff7ffff
 8003354:	00001388 	.word	0x00001388
 8003358:	ffcfffff 	.word	0xffcfffff
 800335c:	efffffff 	.word	0xefffffff
 8003360:	fffff3ff 	.word	0xfffff3ff
 8003364:	ffffcfff 	.word	0xffffcfff
 8003368:	fff3ffff 	.word	0xfff3ffff

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e032      	b.n	80033e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2239      	movs	r2, #57	; 0x39
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2238      	movs	r2, #56	; 0x38
 800338e:	2100      	movs	r1, #0
 8003390:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f7fd fe7f 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2239      	movs	r2, #57	; 0x39
 800339e:	2102      	movs	r1, #2
 80033a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	0019      	movs	r1, r3
 80033ac:	0010      	movs	r0, r2
 80033ae:	f000 fa45 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223e      	movs	r2, #62	; 0x3e
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223a      	movs	r2, #58	; 0x3a
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223b      	movs	r2, #59	; 0x3b
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223c      	movs	r2, #60	; 0x3c
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	; 0x3d
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2239      	movs	r2, #57	; 0x39
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2239      	movs	r2, #57	; 0x39
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d001      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e036      	b.n	8003472 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2239      	movs	r2, #57	; 0x39
 8003408:	2102      	movs	r1, #2
 800340a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	429a      	cmp	r2, r3
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x50>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <HAL_TIM_Base_Start_IT+0x90>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x50>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_TIM_Base_Start_IT+0x94>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2207      	movs	r2, #7
 8003444:	4013      	ands	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2101      	movs	r1, #1
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	40010800 	.word	0x40010800
 8003480:	40011400 	.word	0x40011400

08003484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2202      	movs	r2, #2
 8003494:	4013      	ands	r3, r2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d124      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d11d      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4252      	negs	r2, r2
 80034b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2203      	movs	r2, #3
 80034c0:	4013      	ands	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 f9a0 	bl	800380c <HAL_TIM_IC_CaptureCallback>
 80034cc:	e007      	b.n	80034de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f993 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f99f 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2204      	movs	r2, #4
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d125      	bne.n	800353e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11e      	bne.n	800353e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2205      	movs	r2, #5
 8003506:	4252      	negs	r2, r2
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f973 	bl	800380c <HAL_TIM_IC_CaptureCallback>
 8003526:	e007      	b.n	8003538 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f966 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f972 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2208      	movs	r2, #8
 8003546:	4013      	ands	r3, r2
 8003548:	2b08      	cmp	r3, #8
 800354a:	d124      	bne.n	8003596 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2208      	movs	r2, #8
 8003554:	4013      	ands	r3, r2
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11d      	bne.n	8003596 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2209      	movs	r2, #9
 8003560:	4252      	negs	r2, r2
 8003562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2204      	movs	r2, #4
 8003568:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2203      	movs	r2, #3
 8003572:	4013      	ands	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f947 	bl	800380c <HAL_TIM_IC_CaptureCallback>
 800357e:	e007      	b.n	8003590 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 f93a 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f946 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2210      	movs	r2, #16
 800359e:	4013      	ands	r3, r2
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d125      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2210      	movs	r2, #16
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d11e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2211      	movs	r2, #17
 80035b8:	4252      	negs	r2, r2
 80035ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2208      	movs	r2, #8
 80035c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	23c0      	movs	r3, #192	; 0xc0
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f91a 	bl	800380c <HAL_TIM_IC_CaptureCallback>
 80035d8:	e007      	b.n	80035ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 f90d 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f919 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2201      	movs	r2, #1
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10f      	bne.n	800361e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	4013      	ands	r3, r2
 8003608:	2b01      	cmp	r3, #1
 800360a:	d108      	bne.n	800361e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2202      	movs	r2, #2
 8003612:	4252      	negs	r2, r2
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fd fbb7 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2240      	movs	r2, #64	; 0x40
 8003626:	4013      	ands	r3, r2
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d10f      	bne.n	800364c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	4013      	ands	r3, r2
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d108      	bne.n	800364c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2241      	movs	r2, #65	; 0x41
 8003640:	4252      	negs	r2, r2
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f8f0 	bl	800382c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	230f      	movs	r3, #15
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2238      	movs	r2, #56	; 0x38
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIM_ConfigClockSource+0x20>
 8003670:	2302      	movs	r3, #2
 8003672:	e0bc      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x19a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2238      	movs	r2, #56	; 0x38
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2239      	movs	r2, #57	; 0x39
 8003680:	2102      	movs	r1, #2
 8003682:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2277      	movs	r2, #119	; 0x77
 8003690:	4393      	bics	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0192      	lsls	r2, r2, #6
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d040      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0xde>
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	0192      	lsls	r2, r2, #6
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d900      	bls.n	80036ba <HAL_TIM_ConfigClockSource+0x66>
 80036b8:	e088      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	0152      	lsls	r2, r2, #5
 80036be:	4293      	cmp	r3, r2
 80036c0:	d100      	bne.n	80036c4 <HAL_TIM_ConfigClockSource+0x70>
 80036c2:	e088      	b.n	80037d6 <HAL_TIM_ConfigClockSource+0x182>
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	0152      	lsls	r2, r2, #5
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d900      	bls.n	80036ce <HAL_TIM_ConfigClockSource+0x7a>
 80036cc:	e07e      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036ce:	2b70      	cmp	r3, #112	; 0x70
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_ConfigClockSource+0xb0>
 80036d2:	d900      	bls.n	80036d6 <HAL_TIM_ConfigClockSource+0x82>
 80036d4:	e07a      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036d6:	2b60      	cmp	r3, #96	; 0x60
 80036d8:	d04f      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x126>
 80036da:	d900      	bls.n	80036de <HAL_TIM_ConfigClockSource+0x8a>
 80036dc:	e076      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036de:	2b50      	cmp	r3, #80	; 0x50
 80036e0:	d03b      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x106>
 80036e2:	d900      	bls.n	80036e6 <HAL_TIM_ConfigClockSource+0x92>
 80036e4:	e072      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d057      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x146>
 80036ea:	d900      	bls.n	80036ee <HAL_TIM_ConfigClockSource+0x9a>
 80036ec:	e06e      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036ee:	2b30      	cmp	r3, #48	; 0x30
 80036f0:	d063      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x166>
 80036f2:	d86b      	bhi.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d060      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x166>
 80036f8:	d868      	bhi.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d05d      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x166>
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d05b      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x166>
 8003702:	e063      	b.n	80037cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	f000 f960 	bl	80039d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2277      	movs	r2, #119	; 0x77
 8003724:	4313      	orrs	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
      break;
 8003730:	e052      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003742:	f000 f949 	bl	80039d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2180      	movs	r1, #128	; 0x80
 8003752:	01c9      	lsls	r1, r1, #7
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
      break;
 8003758:	e03e      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	001a      	movs	r2, r3
 8003768:	f000 f8bc 	bl	80038e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2150      	movs	r1, #80	; 0x50
 8003772:	0018      	movs	r0, r3
 8003774:	f000 f916 	bl	80039a4 <TIM_ITRx_SetConfig>
      break;
 8003778:	e02e      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003786:	001a      	movs	r2, r3
 8003788:	f000 f8da 	bl	8003940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2160      	movs	r1, #96	; 0x60
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f906 	bl	80039a4 <TIM_ITRx_SetConfig>
      break;
 8003798:	e01e      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a6:	001a      	movs	r2, r3
 80037a8:	f000 f89c 	bl	80038e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2140      	movs	r1, #64	; 0x40
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f8f6 	bl	80039a4 <TIM_ITRx_SetConfig>
      break;
 80037b8:	e00e      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0019      	movs	r1, r3
 80037c4:	0010      	movs	r0, r2
 80037c6:	f000 f8ed 	bl	80039a4 <TIM_ITRx_SetConfig>
      break;
 80037ca:	e005      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037cc:	230f      	movs	r3, #15
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80037d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2239      	movs	r2, #57	; 0x39
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2238      	movs	r2, #56	; 0x38
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

  return status;
 80037e8:	230f      	movs	r3, #15
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	781b      	ldrb	r3, [r3, #0]
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	ffff00ff 	.word	0xffff00ff

080037fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	429a      	cmp	r2, r3
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0x2a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <TIM_Base_SetConfig+0x9c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0x2a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <TIM_Base_SetConfig+0xa0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2270      	movs	r2, #112	; 0x70
 800386a:	4393      	bics	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	429a      	cmp	r2, r3
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0x56>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <TIM_Base_SetConfig+0x9c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0x56>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <TIM_Base_SetConfig+0xa0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <TIM_Base_SetConfig+0xa4>)
 8003896:	4013      	ands	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	4393      	bics	r3, r2
 80038aa:	001a      	movs	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	615a      	str	r2, [r3, #20]
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40010800 	.word	0x40010800
 80038dc:	40011400 	.word	0x40011400
 80038e0:	fffffcff 	.word	0xfffffcff

080038e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	2201      	movs	r2, #1
 80038fc:	4393      	bics	r3, r2
 80038fe:	001a      	movs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	22f0      	movs	r2, #240	; 0xf0
 800390e:	4393      	bics	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	220a      	movs	r2, #10
 8003920:	4393      	bics	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b006      	add	sp, #24
 800393e:	bd80      	pop	{r7, pc}

08003940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	2210      	movs	r2, #16
 8003952:	4393      	bics	r3, r2
 8003954:	001a      	movs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <TIM_TI2_ConfigInputStage+0x60>)
 800396a:	4013      	ands	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	031b      	lsls	r3, r3, #12
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	22a0      	movs	r2, #160	; 0xa0
 800397c:	4393      	bics	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b006      	add	sp, #24
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	ffff0fff 	.word	0xffff0fff

080039a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2270      	movs	r2, #112	; 0x70
 80039b8:	4393      	bics	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	2207      	movs	r2, #7
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <TIM_ETR_SetConfig+0x3c>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	021a      	lsls	r2, r3, #8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b006      	add	sp, #24
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	ffff00ff 	.word	0xffff00ff

08003a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2238      	movs	r2, #56	; 0x38
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e042      	b.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2238      	movs	r2, #56	; 0x38
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2239      	movs	r2, #57	; 0x39
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2270      	movs	r2, #112	; 0x70
 8003a54:	4393      	bics	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	05db      	lsls	r3, r3, #23
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d009      	beq.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10c      	bne.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	4393      	bics	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2239      	movs	r2, #57	; 0x39
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2238      	movs	r2, #56	; 0x38
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	40010800 	.word	0x40010800
 8003ac4:	40011400 	.word	0x40011400

08003ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e044      	b.n	8003b64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2278      	movs	r2, #120	; 0x78
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7fd fa8f 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f8d0 	bl	8003cb0 <UART_SetConfig>
 8003b10:	0003      	movs	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e024      	b.n	8003b64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fb0d 	bl	8004144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	490d      	ldr	r1, [pc, #52]	; (8003b6c <HAL_UART_Init+0xa4>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	212a      	movs	r1, #42	; 0x2a
 8003b46:	438a      	bics	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 fba5 	bl	80042ac <UART_CheckIdleState>
 8003b62:	0003      	movs	r3, r0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	ffffb7ff 	.word	0xffffb7ff

08003b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d000      	beq.n	8003b8a <HAL_UART_Transmit+0x1a>
 8003b88:	e08c      	b.n	8003ca4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_UART_Transmit+0x28>
 8003b90:	1dbb      	adds	r3, r7, #6
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e084      	b.n	8003ca6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	015b      	lsls	r3, r3, #5
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d109      	bne.n	8003bbc <HAL_UART_Transmit+0x4c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d001      	beq.n	8003bbc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e074      	b.n	8003ca6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2284      	movs	r2, #132	; 0x84
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bca:	f7fd fbe9 	bl	80013a0 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1dba      	adds	r2, r7, #6
 8003bd6:	2150      	movs	r1, #80	; 0x50
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1dba      	adds	r2, r7, #6
 8003be0:	2152      	movs	r1, #82	; 0x52
 8003be2:	8812      	ldrh	r2, [r2, #0]
 8003be4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	015b      	lsls	r3, r3, #5
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d108      	bne.n	8003c04 <HAL_UART_Transmit+0x94>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e003      	b.n	8003c0c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c0c:	e02f      	b.n	8003c6e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	0013      	movs	r3, r2
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	f000 fbee 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 8003c20:	1e03      	subs	r3, r0, #0
 8003c22:	d004      	beq.n	8003c2e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e03b      	b.n	8003ca6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	001a      	movs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	05d2      	lsls	r2, r2, #23
 8003c40:	0dd2      	lsrs	r2, r2, #23
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3302      	adds	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e007      	b.n	8003c5c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2252      	movs	r2, #82	; 0x52
 8003c60:	5a9b      	ldrh	r3, [r3, r2]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b299      	uxth	r1, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2252      	movs	r2, #82	; 0x52
 8003c6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2252      	movs	r2, #82	; 0x52
 8003c72:	5a9b      	ldrh	r3, [r3, r2]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1c9      	bne.n	8003c0e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0013      	movs	r3, r2
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	f000 fbb8 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d004      	beq.n	8003c9a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e005      	b.n	8003ca6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b008      	add	sp, #32
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	b5b0      	push	{r4, r5, r7, lr}
 8003cb2:	b08e      	sub	sp, #56	; 0x38
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb8:	231a      	movs	r3, #26
 8003cba:	2218      	movs	r2, #24
 8003cbc:	189b      	adds	r3, r3, r2
 8003cbe:	19db      	adds	r3, r3, r7
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4ab4      	ldr	r2, [pc, #720]	; (8003fb4 <UART_SetConfig+0x304>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4aaf      	ldr	r2, [pc, #700]	; (8003fb8 <UART_SetConfig+0x308>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4aa9      	ldr	r2, [pc, #676]	; (8003fbc <UART_SetConfig+0x30c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d20:	4313      	orrs	r3, r2
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4aa5      	ldr	r2, [pc, #660]	; (8003fc0 <UART_SetConfig+0x310>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d36:	430a      	orrs	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4aa1      	ldr	r2, [pc, #644]	; (8003fc4 <UART_SetConfig+0x314>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d131      	bne.n	8003da8 <UART_SetConfig+0xf8>
 8003d44:	4ba0      	ldr	r3, [pc, #640]	; (8003fc8 <UART_SetConfig+0x318>)
 8003d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d48:	220c      	movs	r2, #12
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d01d      	beq.n	8003d8c <UART_SetConfig+0xdc>
 8003d50:	d823      	bhi.n	8003d9a <UART_SetConfig+0xea>
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d00c      	beq.n	8003d70 <UART_SetConfig+0xc0>
 8003d56:	d820      	bhi.n	8003d9a <UART_SetConfig+0xea>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <UART_SetConfig+0xb2>
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d00e      	beq.n	8003d7e <UART_SetConfig+0xce>
 8003d60:	e01b      	b.n	8003d9a <UART_SetConfig+0xea>
 8003d62:	231b      	movs	r3, #27
 8003d64:	2218      	movs	r2, #24
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e065      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2218      	movs	r2, #24
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e05e      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2218      	movs	r2, #24
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2204      	movs	r2, #4
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e057      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2218      	movs	r2, #24
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	2208      	movs	r2, #8
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	e050      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003d9a:	231b      	movs	r3, #27
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	19db      	adds	r3, r3, r7
 8003da2:	2210      	movs	r2, #16
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e049      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a83      	ldr	r2, [pc, #524]	; (8003fbc <UART_SetConfig+0x30c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d13e      	bne.n	8003e30 <UART_SetConfig+0x180>
 8003db2:	4b85      	ldr	r3, [pc, #532]	; (8003fc8 <UART_SetConfig+0x318>)
 8003db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	4013      	ands	r3, r2
 8003dbc:	22c0      	movs	r2, #192	; 0xc0
 8003dbe:	0112      	lsls	r2, r2, #4
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <UART_SetConfig+0x164>
 8003dc4:	22c0      	movs	r2, #192	; 0xc0
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d82a      	bhi.n	8003e22 <UART_SetConfig+0x172>
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d011      	beq.n	8003df8 <UART_SetConfig+0x148>
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d822      	bhi.n	8003e22 <UART_SetConfig+0x172>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <UART_SetConfig+0x13a>
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	00d2      	lsls	r2, r2, #3
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <UART_SetConfig+0x156>
 8003de8:	e01b      	b.n	8003e22 <UART_SetConfig+0x172>
 8003dea:	231b      	movs	r3, #27
 8003dec:	2218      	movs	r2, #24
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e021      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	2218      	movs	r2, #24
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	19db      	adds	r3, r3, r7
 8003e00:	2202      	movs	r2, #2
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	e01a      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003e06:	231b      	movs	r3, #27
 8003e08:	2218      	movs	r2, #24
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	19db      	adds	r3, r3, r7
 8003e0e:	2204      	movs	r2, #4
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e013      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003e14:	231b      	movs	r3, #27
 8003e16:	2218      	movs	r2, #24
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003e22:	231b      	movs	r3, #27
 8003e24:	2218      	movs	r2, #24
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e005      	b.n	8003e3c <UART_SetConfig+0x18c>
 8003e30:	231b      	movs	r3, #27
 8003e32:	2218      	movs	r2, #24
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2210      	movs	r2, #16
 8003e3a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <UART_SetConfig+0x30c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d000      	beq.n	8003e48 <UART_SetConfig+0x198>
 8003e46:	e084      	b.n	8003f52 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e48:	231b      	movs	r3, #27
 8003e4a:	2218      	movs	r2, #24
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d01d      	beq.n	8003e92 <UART_SetConfig+0x1e2>
 8003e56:	dc20      	bgt.n	8003e9a <UART_SetConfig+0x1ea>
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d015      	beq.n	8003e88 <UART_SetConfig+0x1d8>
 8003e5c:	dc1d      	bgt.n	8003e9a <UART_SetConfig+0x1ea>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x1b8>
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d005      	beq.n	8003e72 <UART_SetConfig+0x1c2>
 8003e66:	e018      	b.n	8003e9a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7ff f928 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e70:	e01c      	b.n	8003eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e72:	4b55      	ldr	r3, [pc, #340]	; (8003fc8 <UART_SetConfig+0x318>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d002      	beq.n	8003e82 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <UART_SetConfig+0x31c>)
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e80:	e014      	b.n	8003eac <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003e82:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <UART_SetConfig+0x320>)
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e86:	e011      	b.n	8003eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e88:	f7ff f868 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e90:	e00c      	b.n	8003eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e98:	e008      	b.n	8003eac <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e9e:	231a      	movs	r3, #26
 8003ea0:	2218      	movs	r2, #24
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
        break;
 8003eaa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d100      	bne.n	8003eb4 <UART_SetConfig+0x204>
 8003eb2:	e12f      	b.n	8004114 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	0013      	movs	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d305      	bcc.n	8003ed0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d906      	bls.n	8003ede <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003ed0:	231a      	movs	r3, #26
 8003ed2:	2218      	movs	r2, #24
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e11a      	b.n	8004114 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	000b      	movs	r3, r1
 8003eec:	0e1b      	lsrs	r3, r3, #24
 8003eee:	0010      	movs	r0, r2
 8003ef0:	0205      	lsls	r5, r0, #8
 8003ef2:	431d      	orrs	r5, r3
 8003ef4:	000b      	movs	r3, r1
 8003ef6:	021c      	lsls	r4, r3, #8
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68b8      	ldr	r0, [r7, #8]
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	1900      	adds	r0, r0, r4
 8003f0a:	4169      	adcs	r1, r5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f7fc f98b 	bl	8000234 <__aeabi_uldivmod>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	000b      	movs	r3, r1
 8003f22:	0013      	movs	r3, r2
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f28:	23c0      	movs	r3, #192	; 0xc0
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d309      	bcc.n	8003f44 <UART_SetConfig+0x294>
 8003f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	035b      	lsls	r3, r3, #13
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d204      	bcs.n	8003f44 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	e0e7      	b.n	8004114 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003f44:	231a      	movs	r3, #26
 8003f46:	2218      	movs	r2, #24
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e0e0      	b.n	8004114 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d000      	beq.n	8003f60 <UART_SetConfig+0x2b0>
 8003f5e:	e082      	b.n	8004066 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003f60:	231b      	movs	r3, #27
 8003f62:	2218      	movs	r2, #24
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d834      	bhi.n	8003fd8 <UART_SetConfig+0x328>
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <UART_SetConfig+0x324>)
 8003f72:	18d3      	adds	r3, r2, r3
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7ff f8a0 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f80:	e033      	b.n	8003fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f82:	f7ff f8b1 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8003f86:	0003      	movs	r3, r0
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f8a:	e02e      	b.n	8003fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <UART_SetConfig+0x318>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d002      	beq.n	8003f9c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <UART_SetConfig+0x31c>)
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f9a:	e026      	b.n	8003fea <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <UART_SetConfig+0x320>)
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fa0:	e023      	b.n	8003fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe ffdb 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003faa:	e01e      	b.n	8003fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fb2:	e01a      	b.n	8003fea <UART_SetConfig+0x33a>
 8003fb4:	efff69f3 	.word	0xefff69f3
 8003fb8:	ffffcfff 	.word	0xffffcfff
 8003fbc:	40004800 	.word	0x40004800
 8003fc0:	fffff4ff 	.word	0xfffff4ff
 8003fc4:	40004400 	.word	0x40004400
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	003d0900 	.word	0x003d0900
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	080056e4 	.word	0x080056e4
      default:
        pclk = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003fdc:	231a      	movs	r3, #26
 8003fde:	2218      	movs	r2, #24
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
        break;
 8003fe8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d100      	bne.n	8003ff2 <UART_SetConfig+0x342>
 8003ff0:	e090      	b.n	8004114 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	005a      	lsls	r2, r3, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	18d2      	adds	r2, r2, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f7fc f889 	bl	800011c <__udivsi3>
 800400a:	0003      	movs	r3, r0
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d921      	bls.n	8004058 <UART_SetConfig+0x3a8>
 8004014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	025b      	lsls	r3, r3, #9
 800401a:	429a      	cmp	r2, r3
 800401c:	d21c      	bcs.n	8004058 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	b29a      	uxth	r2, r3
 8004022:	200e      	movs	r0, #14
 8004024:	2418      	movs	r4, #24
 8004026:	1903      	adds	r3, r0, r4
 8004028:	19db      	adds	r3, r3, r7
 800402a:	210f      	movs	r1, #15
 800402c:	438a      	bics	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	b299      	uxth	r1, r3
 800403c:	1903      	adds	r3, r0, r4
 800403e:	19db      	adds	r3, r3, r7
 8004040:	1902      	adds	r2, r0, r4
 8004042:	19d2      	adds	r2, r2, r7
 8004044:	8812      	ldrh	r2, [r2, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1902      	adds	r2, r0, r4
 8004050:	19d2      	adds	r2, r2, r7
 8004052:	8812      	ldrh	r2, [r2, #0]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e05d      	b.n	8004114 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	231a      	movs	r3, #26
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e056      	b.n	8004114 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004066:	231b      	movs	r3, #27
 8004068:	2218      	movs	r2, #24
 800406a:	189b      	adds	r3, r3, r2
 800406c:	19db      	adds	r3, r3, r7
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d822      	bhi.n	80040ba <UART_SetConfig+0x40a>
 8004074:	009a      	lsls	r2, r3, #2
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <UART_SetConfig+0x484>)
 8004078:	18d3      	adds	r3, r2, r3
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407e:	f7ff f81d 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8004082:	0003      	movs	r3, r0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004086:	e021      	b.n	80040cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7ff f82e 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 800408c:	0003      	movs	r3, r0
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004090:	e01c      	b.n	80040cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004092:	4b29      	ldr	r3, [pc, #164]	; (8004138 <UART_SetConfig+0x488>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2210      	movs	r2, #16
 8004098:	4013      	ands	r3, r2
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <UART_SetConfig+0x48c>)
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80040a0:	e014      	b.n	80040cc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80040a2:	4b27      	ldr	r3, [pc, #156]	; (8004140 <UART_SetConfig+0x490>)
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040a6:	e011      	b.n	80040cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a8:	f7fe ff58 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 80040ac:	0003      	movs	r3, r0
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b0:	e00c      	b.n	80040cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b8:	e008      	b.n	80040cc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040be:	231a      	movs	r3, #26
 80040c0:	2218      	movs	r2, #24
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	19db      	adds	r3, r3, r7
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
        break;
 80040ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085a      	lsrs	r2, r3, #1
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	18d2      	adds	r2, r2, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	0019      	movs	r1, r3
 80040e2:	0010      	movs	r0, r2
 80040e4:	f7fc f81a 	bl	800011c <__udivsi3>
 80040e8:	0003      	movs	r3, r0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d90a      	bls.n	8004108 <UART_SetConfig+0x458>
 80040f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	025b      	lsls	r3, r3, #9
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d205      	bcs.n	8004108 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	b29a      	uxth	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e005      	b.n	8004114 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004108:	231a      	movs	r3, #26
 800410a:	2218      	movs	r2, #24
 800410c:	189b      	adds	r3, r3, r2
 800410e:	19db      	adds	r3, r3, r7
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2200      	movs	r2, #0
 8004118:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2200      	movs	r2, #0
 800411e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004120:	231a      	movs	r3, #26
 8004122:	2218      	movs	r2, #24
 8004124:	189b      	adds	r3, r3, r2
 8004126:	19db      	adds	r3, r3, r7
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b00e      	add	sp, #56	; 0x38
 8004130:	bdb0      	pop	{r4, r5, r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08005708 	.word	0x08005708
 8004138:	40021000 	.word	0x40021000
 800413c:	003d0900 	.word	0x003d0900
 8004140:	00f42400 	.word	0x00f42400

08004144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	d00b      	beq.n	800416e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a4a      	ldr	r2, [pc, #296]	; (8004288 <UART_AdvFeatureConfig+0x144>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2202      	movs	r2, #2
 8004174:	4013      	ands	r3, r2
 8004176:	d00b      	beq.n	8004190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a43      	ldr	r2, [pc, #268]	; (800428c <UART_AdvFeatureConfig+0x148>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2204      	movs	r2, #4
 8004196:	4013      	ands	r3, r2
 8004198:	d00b      	beq.n	80041b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <UART_AdvFeatureConfig+0x14c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2208      	movs	r2, #8
 80041b8:	4013      	ands	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <UART_AdvFeatureConfig+0x150>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <UART_AdvFeatureConfig+0x154>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2220      	movs	r2, #32
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00b      	beq.n	8004218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	4a25      	ldr	r2, [pc, #148]	; (800429c <UART_AdvFeatureConfig+0x158>)
 8004208:	4013      	ands	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	4013      	ands	r3, r2
 8004220:	d01d      	beq.n	800425e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <UART_AdvFeatureConfig+0x15c>)
 800422a:	4013      	ands	r3, r2
 800422c:	0019      	movs	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	035b      	lsls	r3, r3, #13
 8004242:	429a      	cmp	r2, r3
 8004244:	d10b      	bne.n	800425e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <UART_AdvFeatureConfig+0x160>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2280      	movs	r2, #128	; 0x80
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <UART_AdvFeatureConfig+0x164>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fffdffff 	.word	0xfffdffff
 800428c:	fffeffff 	.word	0xfffeffff
 8004290:	fffbffff 	.word	0xfffbffff
 8004294:	ffff7fff 	.word	0xffff7fff
 8004298:	ffffefff 	.word	0xffffefff
 800429c:	ffffdfff 	.word	0xffffdfff
 80042a0:	ffefffff 	.word	0xffefffff
 80042a4:	ff9fffff 	.word	0xff9fffff
 80042a8:	fff7ffff 	.word	0xfff7ffff

080042ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b092      	sub	sp, #72	; 0x48
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2284      	movs	r2, #132	; 0x84
 80042b8:	2100      	movs	r1, #0
 80042ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042bc:	f7fd f870 	bl	80013a0 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2208      	movs	r2, #8
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d12c      	bne.n	800432c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	0391      	lsls	r1, r2, #14
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4a46      	ldr	r2, [pc, #280]	; (80043f4 <UART_CheckIdleState+0x148>)
 80042dc:	9200      	str	r2, [sp, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	f000 f88c 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d021      	beq.n	800432c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f2:	2301      	movs	r3, #1
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	438a      	bics	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2278      	movs	r2, #120	; 0x78
 8004324:	2100      	movs	r1, #0
 8004326:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e05f      	b.n	80043ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2204      	movs	r2, #4
 8004334:	4013      	ands	r3, r2
 8004336:	2b04      	cmp	r3, #4
 8004338:	d146      	bne.n	80043c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	03d1      	lsls	r1, r2, #15
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <UART_CheckIdleState+0x148>)
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	f000 f858 	bl	80043fc <UART_WaitOnFlagUntilTimeout>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d03b      	beq.n	80043c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004350:	f3ef 8310 	mrs	r3, PRIMASK
 8004354:	60fb      	str	r3, [r7, #12]
  return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	2301      	movs	r3, #1
 800435c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4921      	ldr	r1, [pc, #132]	; (80043f8 <UART_CheckIdleState+0x14c>)
 8004372:	400a      	ands	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004382:	f3ef 8310 	mrs	r3, PRIMASK
 8004386:	61bb      	str	r3, [r7, #24]
  return(result);
 8004388:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
 800438c:	2301      	movs	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	438a      	bics	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	2120      	movs	r1, #32
 80043ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2278      	movs	r2, #120	; 0x78
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e011      	b.n	80043ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	2120      	movs	r1, #32
 80043d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2278      	movs	r2, #120	; 0x78
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b010      	add	sp, #64	; 0x40
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	01ffffff 	.word	0x01ffffff
 80043f8:	fffffedf 	.word	0xfffffedf

080043fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440c:	e04b      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3301      	adds	r3, #1
 8004412:	d048      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004414:	f7fc ffc4 	bl	80013a0 <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04b      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2204      	movs	r2, #4
 8004436:	4013      	ands	r3, r2
 8004438:	d035      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2208      	movs	r2, #8
 8004442:	4013      	ands	r3, r2
 8004444:	2b08      	cmp	r3, #8
 8004446:	d111      	bne.n	800446c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2208      	movs	r2, #8
 800444e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	0018      	movs	r0, r3
 8004454:	f000 f83c 	bl	80044d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2284      	movs	r2, #132	; 0x84
 800445c:	2108      	movs	r1, #8
 800445e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2278      	movs	r2, #120	; 0x78
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e02c      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	401a      	ands	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	429a      	cmp	r2, r3
 800447e:	d112      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f81f 	bl	80044d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2284      	movs	r2, #132	; 0x84
 8004496:	2120      	movs	r1, #32
 8004498:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2278      	movs	r2, #120	; 0x78
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	425a      	negs	r2, r3
 80044b6:	4153      	adcs	r3, r2
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	001a      	movs	r2, r3
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0a4      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d8:	f3ef 8310 	mrs	r3, PRIMASK
 80044dc:	617b      	str	r3, [r7, #20]
  return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4926      	ldr	r1, [pc, #152]	; (8004594 <UART_EndRxTransfer+0xc4>)
 80044fa:	400a      	ands	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	623b      	str	r3, [r7, #32]
  return(result);
 8004510:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	633b      	str	r3, [r7, #48]	; 0x30
 8004514:	2301      	movs	r3, #1
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2101      	movs	r1, #1
 800452c:	438a      	bics	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	2b01      	cmp	r3, #1
 8004542:	d118      	bne.n	8004576 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004544:	f3ef 8310 	mrs	r3, PRIMASK
 8004548:	60bb      	str	r3, [r7, #8]
  return(result);
 800454a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	2301      	movs	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f383 8810 	msr	PRIMASK, r3
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2110      	movs	r1, #16
 8004566:	438a      	bics	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f383 8810 	msr	PRIMASK, r3
}
 8004574:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2280      	movs	r2, #128	; 0x80
 800457a:	2120      	movs	r1, #32
 800457c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	669a      	str	r2, [r3, #104]	; 0x68
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b00e      	add	sp, #56	; 0x38
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	fffffedf 	.word	0xfffffedf

08004598 <std>:
 8004598:	2300      	movs	r3, #0
 800459a:	b510      	push	{r4, lr}
 800459c:	0004      	movs	r4, r0
 800459e:	6003      	str	r3, [r0, #0]
 80045a0:	6043      	str	r3, [r0, #4]
 80045a2:	6083      	str	r3, [r0, #8]
 80045a4:	8181      	strh	r1, [r0, #12]
 80045a6:	6643      	str	r3, [r0, #100]	; 0x64
 80045a8:	0019      	movs	r1, r3
 80045aa:	81c2      	strh	r2, [r0, #14]
 80045ac:	6103      	str	r3, [r0, #16]
 80045ae:	6143      	str	r3, [r0, #20]
 80045b0:	6183      	str	r3, [r0, #24]
 80045b2:	2208      	movs	r2, #8
 80045b4:	305c      	adds	r0, #92	; 0x5c
 80045b6:	f000 f8b1 	bl	800471c <memset>
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <std+0x38>)
 80045bc:	6224      	str	r4, [r4, #32]
 80045be:	6263      	str	r3, [r4, #36]	; 0x24
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <std+0x3c>)
 80045c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <std+0x40>)
 80045c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <std+0x44>)
 80045ca:	6323      	str	r3, [r4, #48]	; 0x30
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	08004fe1 	.word	0x08004fe1
 80045d4:	08005009 	.word	0x08005009
 80045d8:	08005041 	.word	0x08005041
 80045dc:	0800506d 	.word	0x0800506d

080045e0 <stdio_exit_handler>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <stdio_exit_handler+0x10>)
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <stdio_exit_handler+0x14>)
 80045e6:	4804      	ldr	r0, [pc, #16]	; (80045f8 <stdio_exit_handler+0x18>)
 80045e8:	f000 f86c 	bl	80046c4 <_fwalk_sglue>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	2000005c 	.word	0x2000005c
 80045f4:	08004f69 	.word	0x08004f69
 80045f8:	20000068 	.word	0x20000068

080045fc <cleanup_stdio>:
 80045fc:	6841      	ldr	r1, [r0, #4]
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <cleanup_stdio+0x30>)
 8004600:	b510      	push	{r4, lr}
 8004602:	0004      	movs	r4, r0
 8004604:	4299      	cmp	r1, r3
 8004606:	d001      	beq.n	800460c <cleanup_stdio+0x10>
 8004608:	f000 fcae 	bl	8004f68 <_fflush_r>
 800460c:	68a1      	ldr	r1, [r4, #8]
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <cleanup_stdio+0x34>)
 8004610:	4299      	cmp	r1, r3
 8004612:	d002      	beq.n	800461a <cleanup_stdio+0x1e>
 8004614:	0020      	movs	r0, r4
 8004616:	f000 fca7 	bl	8004f68 <_fflush_r>
 800461a:	68e1      	ldr	r1, [r4, #12]
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <cleanup_stdio+0x38>)
 800461e:	4299      	cmp	r1, r3
 8004620:	d002      	beq.n	8004628 <cleanup_stdio+0x2c>
 8004622:	0020      	movs	r0, r4
 8004624:	f000 fca0 	bl	8004f68 <_fflush_r>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	20000240 	.word	0x20000240
 8004630:	200002a8 	.word	0x200002a8
 8004634:	20000310 	.word	0x20000310

08004638 <global_stdio_init.part.0>:
 8004638:	b510      	push	{r4, lr}
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <global_stdio_init.part.0+0x28>)
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <global_stdio_init.part.0+0x2c>)
 800463e:	2104      	movs	r1, #4
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	4809      	ldr	r0, [pc, #36]	; (8004668 <global_stdio_init.part.0+0x30>)
 8004644:	2200      	movs	r2, #0
 8004646:	f7ff ffa7 	bl	8004598 <std>
 800464a:	2201      	movs	r2, #1
 800464c:	2109      	movs	r1, #9
 800464e:	4807      	ldr	r0, [pc, #28]	; (800466c <global_stdio_init.part.0+0x34>)
 8004650:	f7ff ffa2 	bl	8004598 <std>
 8004654:	2202      	movs	r2, #2
 8004656:	2112      	movs	r1, #18
 8004658:	4805      	ldr	r0, [pc, #20]	; (8004670 <global_stdio_init.part.0+0x38>)
 800465a:	f7ff ff9d 	bl	8004598 <std>
 800465e:	bd10      	pop	{r4, pc}
 8004660:	20000378 	.word	0x20000378
 8004664:	080045e1 	.word	0x080045e1
 8004668:	20000240 	.word	0x20000240
 800466c:	200002a8 	.word	0x200002a8
 8004670:	20000310 	.word	0x20000310

08004674 <__sfp_lock_acquire>:
 8004674:	b510      	push	{r4, lr}
 8004676:	4802      	ldr	r0, [pc, #8]	; (8004680 <__sfp_lock_acquire+0xc>)
 8004678:	f000 f882 	bl	8004780 <__retarget_lock_acquire_recursive>
 800467c:	bd10      	pop	{r4, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	2000037d 	.word	0x2000037d

08004684 <__sfp_lock_release>:
 8004684:	b510      	push	{r4, lr}
 8004686:	4802      	ldr	r0, [pc, #8]	; (8004690 <__sfp_lock_release+0xc>)
 8004688:	f000 f87b 	bl	8004782 <__retarget_lock_release_recursive>
 800468c:	bd10      	pop	{r4, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	2000037d 	.word	0x2000037d

08004694 <__sinit>:
 8004694:	b510      	push	{r4, lr}
 8004696:	0004      	movs	r4, r0
 8004698:	f7ff ffec 	bl	8004674 <__sfp_lock_acquire>
 800469c:	6a23      	ldr	r3, [r4, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <__sinit+0x14>
 80046a2:	f7ff ffef 	bl	8004684 <__sfp_lock_release>
 80046a6:	bd10      	pop	{r4, pc}
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <__sinit+0x28>)
 80046aa:	6223      	str	r3, [r4, #32]
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <__sinit+0x2c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f6      	bne.n	80046a2 <__sinit+0xe>
 80046b4:	f7ff ffc0 	bl	8004638 <global_stdio_init.part.0>
 80046b8:	e7f3      	b.n	80046a2 <__sinit+0xe>
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	080045fd 	.word	0x080045fd
 80046c0:	20000378 	.word	0x20000378

080046c4 <_fwalk_sglue>:
 80046c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c6:	0014      	movs	r4, r2
 80046c8:	2600      	movs	r6, #0
 80046ca:	9000      	str	r0, [sp, #0]
 80046cc:	9101      	str	r1, [sp, #4]
 80046ce:	68a5      	ldr	r5, [r4, #8]
 80046d0:	6867      	ldr	r7, [r4, #4]
 80046d2:	3f01      	subs	r7, #1
 80046d4:	d504      	bpl.n	80046e0 <_fwalk_sglue+0x1c>
 80046d6:	6824      	ldr	r4, [r4, #0]
 80046d8:	2c00      	cmp	r4, #0
 80046da:	d1f8      	bne.n	80046ce <_fwalk_sglue+0xa>
 80046dc:	0030      	movs	r0, r6
 80046de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046e0:	89ab      	ldrh	r3, [r5, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d908      	bls.n	80046f8 <_fwalk_sglue+0x34>
 80046e6:	220e      	movs	r2, #14
 80046e8:	5eab      	ldrsh	r3, [r5, r2]
 80046ea:	3301      	adds	r3, #1
 80046ec:	d004      	beq.n	80046f8 <_fwalk_sglue+0x34>
 80046ee:	0029      	movs	r1, r5
 80046f0:	9800      	ldr	r0, [sp, #0]
 80046f2:	9b01      	ldr	r3, [sp, #4]
 80046f4:	4798      	blx	r3
 80046f6:	4306      	orrs	r6, r0
 80046f8:	3568      	adds	r5, #104	; 0x68
 80046fa:	e7ea      	b.n	80046d2 <_fwalk_sglue+0xe>

080046fc <iprintf>:
 80046fc:	b40f      	push	{r0, r1, r2, r3}
 80046fe:	b507      	push	{r0, r1, r2, lr}
 8004700:	4905      	ldr	r1, [pc, #20]	; (8004718 <iprintf+0x1c>)
 8004702:	ab04      	add	r3, sp, #16
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	cb04      	ldmia	r3!, {r2}
 8004708:	6881      	ldr	r1, [r0, #8]
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	f000 f862 	bl	80047d4 <_vfiprintf_r>
 8004710:	b003      	add	sp, #12
 8004712:	bc08      	pop	{r3}
 8004714:	b004      	add	sp, #16
 8004716:	4718      	bx	r3
 8004718:	200000b4 	.word	0x200000b4

0800471c <memset>:
 800471c:	0003      	movs	r3, r0
 800471e:	1882      	adds	r2, r0, r2
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__errno>:
 800472c:	4b01      	ldr	r3, [pc, #4]	; (8004734 <__errno+0x8>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	4770      	bx	lr
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	200000b4 	.word	0x200000b4

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4c0c      	ldr	r4, [pc, #48]	; (8004770 <__libc_init_array+0x38>)
 800473e:	4d0d      	ldr	r5, [pc, #52]	; (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	2600      	movs	r6, #0
 800474a:	f000 fe7b 	bl	8005444 <_init>
 800474e:	4c0a      	ldr	r4, [pc, #40]	; (8004778 <__libc_init_array+0x40>)
 8004750:	4d0a      	ldr	r5, [pc, #40]	; (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	00b3      	lsls	r3, r6, #2
 800475e:	58eb      	ldr	r3, [r5, r3]
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	00b3      	lsls	r3, r6, #2
 8004768:	58eb      	ldr	r3, [r5, r3]
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	08005768 	.word	0x08005768
 8004774:	08005768 	.word	0x08005768
 8004778:	0800576c 	.word	0x0800576c
 800477c:	08005768 	.word	0x08005768

08004780 <__retarget_lock_acquire_recursive>:
 8004780:	4770      	bx	lr

08004782 <__retarget_lock_release_recursive>:
 8004782:	4770      	bx	lr

08004784 <__sfputc_r>:
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	b510      	push	{r4, lr}
 8004788:	3b01      	subs	r3, #1
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	da04      	bge.n	800479a <__sfputc_r+0x16>
 8004790:	6994      	ldr	r4, [r2, #24]
 8004792:	42a3      	cmp	r3, r4
 8004794:	db07      	blt.n	80047a6 <__sfputc_r+0x22>
 8004796:	290a      	cmp	r1, #10
 8004798:	d005      	beq.n	80047a6 <__sfputc_r+0x22>
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	1c58      	adds	r0, r3, #1
 800479e:	6010      	str	r0, [r2, #0]
 80047a0:	7019      	strb	r1, [r3, #0]
 80047a2:	0008      	movs	r0, r1
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	f000 fc67 	bl	8005078 <__swbuf_r>
 80047aa:	0001      	movs	r1, r0
 80047ac:	e7f9      	b.n	80047a2 <__sfputc_r+0x1e>

080047ae <__sfputs_r>:
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b0:	0006      	movs	r6, r0
 80047b2:	000f      	movs	r7, r1
 80047b4:	0014      	movs	r4, r2
 80047b6:	18d5      	adds	r5, r2, r3
 80047b8:	42ac      	cmp	r4, r5
 80047ba:	d101      	bne.n	80047c0 <__sfputs_r+0x12>
 80047bc:	2000      	movs	r0, #0
 80047be:	e007      	b.n	80047d0 <__sfputs_r+0x22>
 80047c0:	7821      	ldrb	r1, [r4, #0]
 80047c2:	003a      	movs	r2, r7
 80047c4:	0030      	movs	r0, r6
 80047c6:	f7ff ffdd 	bl	8004784 <__sfputc_r>
 80047ca:	3401      	adds	r4, #1
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d1f3      	bne.n	80047b8 <__sfputs_r+0xa>
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d4 <_vfiprintf_r>:
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	b0a1      	sub	sp, #132	; 0x84
 80047d8:	000f      	movs	r7, r1
 80047da:	0015      	movs	r5, r2
 80047dc:	001e      	movs	r6, r3
 80047de:	9003      	str	r0, [sp, #12]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d004      	beq.n	80047ee <_vfiprintf_r+0x1a>
 80047e4:	6a03      	ldr	r3, [r0, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <_vfiprintf_r+0x1a>
 80047ea:	f7ff ff53 	bl	8004694 <__sinit>
 80047ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f0:	07db      	lsls	r3, r3, #31
 80047f2:	d405      	bmi.n	8004800 <_vfiprintf_r+0x2c>
 80047f4:	89bb      	ldrh	r3, [r7, #12]
 80047f6:	059b      	lsls	r3, r3, #22
 80047f8:	d402      	bmi.n	8004800 <_vfiprintf_r+0x2c>
 80047fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80047fc:	f7ff ffc0 	bl	8004780 <__retarget_lock_acquire_recursive>
 8004800:	89bb      	ldrh	r3, [r7, #12]
 8004802:	071b      	lsls	r3, r3, #28
 8004804:	d502      	bpl.n	800480c <_vfiprintf_r+0x38>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <_vfiprintf_r+0x60>
 800480c:	0039      	movs	r1, r7
 800480e:	9803      	ldr	r0, [sp, #12]
 8004810:	f000 fc74 	bl	80050fc <__swsetup_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	d00d      	beq.n	8004834 <_vfiprintf_r+0x60>
 8004818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	d503      	bpl.n	8004826 <_vfiprintf_r+0x52>
 800481e:	2001      	movs	r0, #1
 8004820:	4240      	negs	r0, r0
 8004822:	b021      	add	sp, #132	; 0x84
 8004824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004826:	89bb      	ldrh	r3, [r7, #12]
 8004828:	059b      	lsls	r3, r3, #22
 800482a:	d4f8      	bmi.n	800481e <_vfiprintf_r+0x4a>
 800482c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800482e:	f7ff ffa8 	bl	8004782 <__retarget_lock_release_recursive>
 8004832:	e7f4      	b.n	800481e <_vfiprintf_r+0x4a>
 8004834:	2300      	movs	r3, #0
 8004836:	ac08      	add	r4, sp, #32
 8004838:	6163      	str	r3, [r4, #20]
 800483a:	3320      	adds	r3, #32
 800483c:	7663      	strb	r3, [r4, #25]
 800483e:	3310      	adds	r3, #16
 8004840:	76a3      	strb	r3, [r4, #26]
 8004842:	9607      	str	r6, [sp, #28]
 8004844:	002e      	movs	r6, r5
 8004846:	7833      	ldrb	r3, [r6, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <_vfiprintf_r+0x7c>
 800484c:	2b25      	cmp	r3, #37	; 0x25
 800484e:	d148      	bne.n	80048e2 <_vfiprintf_r+0x10e>
 8004850:	1b73      	subs	r3, r6, r5
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	42ae      	cmp	r6, r5
 8004856:	d00b      	beq.n	8004870 <_vfiprintf_r+0x9c>
 8004858:	002a      	movs	r2, r5
 800485a:	0039      	movs	r1, r7
 800485c:	9803      	ldr	r0, [sp, #12]
 800485e:	f7ff ffa6 	bl	80047ae <__sfputs_r>
 8004862:	3001      	adds	r0, #1
 8004864:	d100      	bne.n	8004868 <_vfiprintf_r+0x94>
 8004866:	e0af      	b.n	80049c8 <_vfiprintf_r+0x1f4>
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	9a05      	ldr	r2, [sp, #20]
 800486c:	189b      	adds	r3, r3, r2
 800486e:	6163      	str	r3, [r4, #20]
 8004870:	7833      	ldrb	r3, [r6, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d100      	bne.n	8004878 <_vfiprintf_r+0xa4>
 8004876:	e0a7      	b.n	80049c8 <_vfiprintf_r+0x1f4>
 8004878:	2201      	movs	r2, #1
 800487a:	2300      	movs	r3, #0
 800487c:	4252      	negs	r2, r2
 800487e:	6062      	str	r2, [r4, #4]
 8004880:	a904      	add	r1, sp, #16
 8004882:	3254      	adds	r2, #84	; 0x54
 8004884:	1852      	adds	r2, r2, r1
 8004886:	1c75      	adds	r5, r6, #1
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	60e3      	str	r3, [r4, #12]
 800488c:	60a3      	str	r3, [r4, #8]
 800488e:	7013      	strb	r3, [r2, #0]
 8004890:	65a3      	str	r3, [r4, #88]	; 0x58
 8004892:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <_vfiprintf_r+0x224>)
 8004894:	2205      	movs	r2, #5
 8004896:	0018      	movs	r0, r3
 8004898:	7829      	ldrb	r1, [r5, #0]
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f000 fd7c 	bl	8005398 <memchr>
 80048a0:	1c6e      	adds	r6, r5, #1
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d11f      	bne.n	80048e6 <_vfiprintf_r+0x112>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	06d3      	lsls	r3, r2, #27
 80048aa:	d504      	bpl.n	80048b6 <_vfiprintf_r+0xe2>
 80048ac:	2353      	movs	r3, #83	; 0x53
 80048ae:	a904      	add	r1, sp, #16
 80048b0:	185b      	adds	r3, r3, r1
 80048b2:	2120      	movs	r1, #32
 80048b4:	7019      	strb	r1, [r3, #0]
 80048b6:	0713      	lsls	r3, r2, #28
 80048b8:	d504      	bpl.n	80048c4 <_vfiprintf_r+0xf0>
 80048ba:	2353      	movs	r3, #83	; 0x53
 80048bc:	a904      	add	r1, sp, #16
 80048be:	185b      	adds	r3, r3, r1
 80048c0:	212b      	movs	r1, #43	; 0x2b
 80048c2:	7019      	strb	r1, [r3, #0]
 80048c4:	782b      	ldrb	r3, [r5, #0]
 80048c6:	2b2a      	cmp	r3, #42	; 0x2a
 80048c8:	d016      	beq.n	80048f8 <_vfiprintf_r+0x124>
 80048ca:	002e      	movs	r6, r5
 80048cc:	2100      	movs	r1, #0
 80048ce:	200a      	movs	r0, #10
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	7832      	ldrb	r2, [r6, #0]
 80048d4:	1c75      	adds	r5, r6, #1
 80048d6:	3a30      	subs	r2, #48	; 0x30
 80048d8:	2a09      	cmp	r2, #9
 80048da:	d94e      	bls.n	800497a <_vfiprintf_r+0x1a6>
 80048dc:	2900      	cmp	r1, #0
 80048de:	d111      	bne.n	8004904 <_vfiprintf_r+0x130>
 80048e0:	e017      	b.n	8004912 <_vfiprintf_r+0x13e>
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7af      	b.n	8004846 <_vfiprintf_r+0x72>
 80048e6:	9b05      	ldr	r3, [sp, #20]
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	1ac0      	subs	r0, r0, r3
 80048ec:	2301      	movs	r3, #1
 80048ee:	4083      	lsls	r3, r0
 80048f0:	4313      	orrs	r3, r2
 80048f2:	0035      	movs	r5, r6
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	e7cc      	b.n	8004892 <_vfiprintf_r+0xbe>
 80048f8:	9b07      	ldr	r3, [sp, #28]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9107      	str	r1, [sp, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	db01      	blt.n	8004908 <_vfiprintf_r+0x134>
 8004904:	930b      	str	r3, [sp, #44]	; 0x2c
 8004906:	e004      	b.n	8004912 <_vfiprintf_r+0x13e>
 8004908:	425b      	negs	r3, r3
 800490a:	60e3      	str	r3, [r4, #12]
 800490c:	2302      	movs	r3, #2
 800490e:	4313      	orrs	r3, r2
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	7833      	ldrb	r3, [r6, #0]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d10a      	bne.n	800492e <_vfiprintf_r+0x15a>
 8004918:	7873      	ldrb	r3, [r6, #1]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d135      	bne.n	800498a <_vfiprintf_r+0x1b6>
 800491e:	9b07      	ldr	r3, [sp, #28]
 8004920:	3602      	adds	r6, #2
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	9207      	str	r2, [sp, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db2b      	blt.n	8004984 <_vfiprintf_r+0x1b0>
 800492c:	9309      	str	r3, [sp, #36]	; 0x24
 800492e:	4d33      	ldr	r5, [pc, #204]	; (80049fc <_vfiprintf_r+0x228>)
 8004930:	2203      	movs	r2, #3
 8004932:	0028      	movs	r0, r5
 8004934:	7831      	ldrb	r1, [r6, #0]
 8004936:	f000 fd2f 	bl	8005398 <memchr>
 800493a:	2800      	cmp	r0, #0
 800493c:	d006      	beq.n	800494c <_vfiprintf_r+0x178>
 800493e:	2340      	movs	r3, #64	; 0x40
 8004940:	1b40      	subs	r0, r0, r5
 8004942:	4083      	lsls	r3, r0
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	3601      	adds	r6, #1
 8004948:	4313      	orrs	r3, r2
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	7831      	ldrb	r1, [r6, #0]
 800494e:	2206      	movs	r2, #6
 8004950:	482b      	ldr	r0, [pc, #172]	; (8004a00 <_vfiprintf_r+0x22c>)
 8004952:	1c75      	adds	r5, r6, #1
 8004954:	7621      	strb	r1, [r4, #24]
 8004956:	f000 fd1f 	bl	8005398 <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d043      	beq.n	80049e6 <_vfiprintf_r+0x212>
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <_vfiprintf_r+0x230>)
 8004960:	2b00      	cmp	r3, #0
 8004962:	d125      	bne.n	80049b0 <_vfiprintf_r+0x1dc>
 8004964:	2207      	movs	r2, #7
 8004966:	9b07      	ldr	r3, [sp, #28]
 8004968:	3307      	adds	r3, #7
 800496a:	4393      	bics	r3, r2
 800496c:	3308      	adds	r3, #8
 800496e:	9307      	str	r3, [sp, #28]
 8004970:	6963      	ldr	r3, [r4, #20]
 8004972:	9a04      	ldr	r2, [sp, #16]
 8004974:	189b      	adds	r3, r3, r2
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	e764      	b.n	8004844 <_vfiprintf_r+0x70>
 800497a:	4343      	muls	r3, r0
 800497c:	002e      	movs	r6, r5
 800497e:	2101      	movs	r1, #1
 8004980:	189b      	adds	r3, r3, r2
 8004982:	e7a6      	b.n	80048d2 <_vfiprintf_r+0xfe>
 8004984:	2301      	movs	r3, #1
 8004986:	425b      	negs	r3, r3
 8004988:	e7d0      	b.n	800492c <_vfiprintf_r+0x158>
 800498a:	2300      	movs	r3, #0
 800498c:	200a      	movs	r0, #10
 800498e:	001a      	movs	r2, r3
 8004990:	3601      	adds	r6, #1
 8004992:	6063      	str	r3, [r4, #4]
 8004994:	7831      	ldrb	r1, [r6, #0]
 8004996:	1c75      	adds	r5, r6, #1
 8004998:	3930      	subs	r1, #48	; 0x30
 800499a:	2909      	cmp	r1, #9
 800499c:	d903      	bls.n	80049a6 <_vfiprintf_r+0x1d2>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0c5      	beq.n	800492e <_vfiprintf_r+0x15a>
 80049a2:	9209      	str	r2, [sp, #36]	; 0x24
 80049a4:	e7c3      	b.n	800492e <_vfiprintf_r+0x15a>
 80049a6:	4342      	muls	r2, r0
 80049a8:	002e      	movs	r6, r5
 80049aa:	2301      	movs	r3, #1
 80049ac:	1852      	adds	r2, r2, r1
 80049ae:	e7f1      	b.n	8004994 <_vfiprintf_r+0x1c0>
 80049b0:	aa07      	add	r2, sp, #28
 80049b2:	9200      	str	r2, [sp, #0]
 80049b4:	0021      	movs	r1, r4
 80049b6:	003a      	movs	r2, r7
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <_vfiprintf_r+0x234>)
 80049ba:	9803      	ldr	r0, [sp, #12]
 80049bc:	e000      	b.n	80049c0 <_vfiprintf_r+0x1ec>
 80049be:	bf00      	nop
 80049c0:	9004      	str	r0, [sp, #16]
 80049c2:	9b04      	ldr	r3, [sp, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	d1d3      	bne.n	8004970 <_vfiprintf_r+0x19c>
 80049c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ca:	07db      	lsls	r3, r3, #31
 80049cc:	d405      	bmi.n	80049da <_vfiprintf_r+0x206>
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d402      	bmi.n	80049da <_vfiprintf_r+0x206>
 80049d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049d6:	f7ff fed4 	bl	8004782 <__retarget_lock_release_recursive>
 80049da:	89bb      	ldrh	r3, [r7, #12]
 80049dc:	065b      	lsls	r3, r3, #25
 80049de:	d500      	bpl.n	80049e2 <_vfiprintf_r+0x20e>
 80049e0:	e71d      	b.n	800481e <_vfiprintf_r+0x4a>
 80049e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049e4:	e71d      	b.n	8004822 <_vfiprintf_r+0x4e>
 80049e6:	aa07      	add	r2, sp, #28
 80049e8:	9200      	str	r2, [sp, #0]
 80049ea:	0021      	movs	r1, r4
 80049ec:	003a      	movs	r2, r7
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_vfiprintf_r+0x234>)
 80049f0:	9803      	ldr	r0, [sp, #12]
 80049f2:	f000 f91f 	bl	8004c34 <_printf_i>
 80049f6:	e7e3      	b.n	80049c0 <_vfiprintf_r+0x1ec>
 80049f8:	0800572c 	.word	0x0800572c
 80049fc:	08005732 	.word	0x08005732
 8004a00:	08005736 	.word	0x08005736
 8004a04:	00000000 	.word	0x00000000
 8004a08:	080047af 	.word	0x080047af

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0f      	ldr	r6, [pc, #60]	; (8004a4c <sbrk_aligned+0x40>)
 8004a10:	000d      	movs	r5, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	0004      	movs	r4, r0
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d102      	bne.n	8004a20 <sbrk_aligned+0x14>
 8004a1a:	f000 fc97 	bl	800534c <_sbrk_r>
 8004a1e:	6030      	str	r0, [r6, #0]
 8004a20:	0029      	movs	r1, r5
 8004a22:	0020      	movs	r0, r4
 8004a24:	f000 fc92 	bl	800534c <_sbrk_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d00a      	beq.n	8004a42 <sbrk_aligned+0x36>
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	1cc5      	adds	r5, r0, #3
 8004a30:	439d      	bics	r5, r3
 8004a32:	42a8      	cmp	r0, r5
 8004a34:	d007      	beq.n	8004a46 <sbrk_aligned+0x3a>
 8004a36:	1a29      	subs	r1, r5, r0
 8004a38:	0020      	movs	r0, r4
 8004a3a:	f000 fc87 	bl	800534c <_sbrk_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d101      	bne.n	8004a46 <sbrk_aligned+0x3a>
 8004a42:	2501      	movs	r5, #1
 8004a44:	426d      	negs	r5, r5
 8004a46:	0028      	movs	r0, r5
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000384 	.word	0x20000384

08004a50 <_malloc_r>:
 8004a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a52:	2203      	movs	r2, #3
 8004a54:	1ccb      	adds	r3, r1, #3
 8004a56:	4393      	bics	r3, r2
 8004a58:	3308      	adds	r3, #8
 8004a5a:	0006      	movs	r6, r0
 8004a5c:	001f      	movs	r7, r3
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d238      	bcs.n	8004ad4 <_malloc_r+0x84>
 8004a62:	270c      	movs	r7, #12
 8004a64:	42b9      	cmp	r1, r7
 8004a66:	d837      	bhi.n	8004ad8 <_malloc_r+0x88>
 8004a68:	0030      	movs	r0, r6
 8004a6a:	f000 faa9 	bl	8004fc0 <__malloc_lock>
 8004a6e:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <_malloc_r+0x100>)
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	001c      	movs	r4, r3
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d133      	bne.n	8004ae2 <_malloc_r+0x92>
 8004a7a:	0039      	movs	r1, r7
 8004a7c:	0030      	movs	r0, r6
 8004a7e:	f7ff ffc5 	bl	8004a0c <sbrk_aligned>
 8004a82:	0004      	movs	r4, r0
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d15e      	bne.n	8004b46 <_malloc_r+0xf6>
 8004a88:	9b00      	ldr	r3, [sp, #0]
 8004a8a:	681c      	ldr	r4, [r3, #0]
 8004a8c:	0025      	movs	r5, r4
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	d14e      	bne.n	8004b30 <_malloc_r+0xe0>
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d051      	beq.n	8004b3a <_malloc_r+0xea>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	0029      	movs	r1, r5
 8004a9a:	18e3      	adds	r3, r4, r3
 8004a9c:	0030      	movs	r0, r6
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	f000 fc54 	bl	800534c <_sbrk_r>
 8004aa4:	9b01      	ldr	r3, [sp, #4]
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	d147      	bne.n	8004b3a <_malloc_r+0xea>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	0030      	movs	r0, r6
 8004aae:	1aff      	subs	r7, r7, r3
 8004ab0:	0039      	movs	r1, r7
 8004ab2:	f7ff ffab 	bl	8004a0c <sbrk_aligned>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d03f      	beq.n	8004b3a <_malloc_r+0xea>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	9b00      	ldr	r3, [sp, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d040      	beq.n	8004b4a <_malloc_r+0xfa>
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	42a2      	cmp	r2, r4
 8004acc:	d133      	bne.n	8004b36 <_malloc_r+0xe6>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	e014      	b.n	8004afe <_malloc_r+0xae>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dac5      	bge.n	8004a64 <_malloc_r+0x14>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	2500      	movs	r5, #0
 8004adc:	6033      	str	r3, [r6, #0]
 8004ade:	0028      	movs	r0, r5
 8004ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	1bc9      	subs	r1, r1, r7
 8004ae6:	d420      	bmi.n	8004b2a <_malloc_r+0xda>
 8004ae8:	290b      	cmp	r1, #11
 8004aea:	d918      	bls.n	8004b1e <_malloc_r+0xce>
 8004aec:	19e2      	adds	r2, r4, r7
 8004aee:	6027      	str	r7, [r4, #0]
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d112      	bne.n	8004b1a <_malloc_r+0xca>
 8004af4:	9b00      	ldr	r3, [sp, #0]
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	6863      	ldr	r3, [r4, #4]
 8004afa:	6011      	str	r1, [r2, #0]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	0030      	movs	r0, r6
 8004b00:	0025      	movs	r5, r4
 8004b02:	f000 fa65 	bl	8004fd0 <__malloc_unlock>
 8004b06:	2207      	movs	r2, #7
 8004b08:	350b      	adds	r5, #11
 8004b0a:	1d23      	adds	r3, r4, #4
 8004b0c:	4395      	bics	r5, r2
 8004b0e:	1aea      	subs	r2, r5, r3
 8004b10:	429d      	cmp	r5, r3
 8004b12:	d0e4      	beq.n	8004ade <_malloc_r+0x8e>
 8004b14:	1b5b      	subs	r3, r3, r5
 8004b16:	50a3      	str	r3, [r4, r2]
 8004b18:	e7e1      	b.n	8004ade <_malloc_r+0x8e>
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	e7ec      	b.n	8004af8 <_malloc_r+0xa8>
 8004b1e:	6862      	ldr	r2, [r4, #4]
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d1d5      	bne.n	8004ad0 <_malloc_r+0x80>
 8004b24:	9b00      	ldr	r3, [sp, #0]
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e7e9      	b.n	8004afe <_malloc_r+0xae>
 8004b2a:	0023      	movs	r3, r4
 8004b2c:	6864      	ldr	r4, [r4, #4]
 8004b2e:	e7a2      	b.n	8004a76 <_malloc_r+0x26>
 8004b30:	002c      	movs	r4, r5
 8004b32:	686d      	ldr	r5, [r5, #4]
 8004b34:	e7ab      	b.n	8004a8e <_malloc_r+0x3e>
 8004b36:	0013      	movs	r3, r2
 8004b38:	e7c4      	b.n	8004ac4 <_malloc_r+0x74>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	0030      	movs	r0, r6
 8004b3e:	6033      	str	r3, [r6, #0]
 8004b40:	f000 fa46 	bl	8004fd0 <__malloc_unlock>
 8004b44:	e7cb      	b.n	8004ade <_malloc_r+0x8e>
 8004b46:	6027      	str	r7, [r4, #0]
 8004b48:	e7d9      	b.n	8004afe <_malloc_r+0xae>
 8004b4a:	605b      	str	r3, [r3, #4]
 8004b4c:	deff      	udf	#255	; 0xff
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	20000380 	.word	0x20000380

08004b54 <_printf_common>:
 8004b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b56:	0016      	movs	r6, r2
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	688a      	ldr	r2, [r1, #8]
 8004b5c:	690b      	ldr	r3, [r1, #16]
 8004b5e:	000c      	movs	r4, r1
 8004b60:	9000      	str	r0, [sp, #0]
 8004b62:	4293      	cmp	r3, r2
 8004b64:	da00      	bge.n	8004b68 <_printf_common+0x14>
 8004b66:	0013      	movs	r3, r2
 8004b68:	0022      	movs	r2, r4
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	3243      	adds	r2, #67	; 0x43
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	d001      	beq.n	8004b78 <_printf_common+0x24>
 8004b74:	3301      	adds	r3, #1
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	069b      	lsls	r3, r3, #26
 8004b7c:	d502      	bpl.n	8004b84 <_printf_common+0x30>
 8004b7e:	6833      	ldr	r3, [r6, #0]
 8004b80:	3302      	adds	r3, #2
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	6822      	ldr	r2, [r4, #0]
 8004b86:	2306      	movs	r3, #6
 8004b88:	0015      	movs	r5, r2
 8004b8a:	401d      	ands	r5, r3
 8004b8c:	421a      	tst	r2, r3
 8004b8e:	d027      	beq.n	8004be0 <_printf_common+0x8c>
 8004b90:	0023      	movs	r3, r4
 8004b92:	3343      	adds	r3, #67	; 0x43
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	1e5a      	subs	r2, r3, #1
 8004b98:	4193      	sbcs	r3, r2
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	0692      	lsls	r2, r2, #26
 8004b9e:	d430      	bmi.n	8004c02 <_printf_common+0xae>
 8004ba0:	0022      	movs	r2, r4
 8004ba2:	9901      	ldr	r1, [sp, #4]
 8004ba4:	9800      	ldr	r0, [sp, #0]
 8004ba6:	9d08      	ldr	r5, [sp, #32]
 8004ba8:	3243      	adds	r2, #67	; 0x43
 8004baa:	47a8      	blx	r5
 8004bac:	3001      	adds	r0, #1
 8004bae:	d025      	beq.n	8004bfc <_printf_common+0xa8>
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d105      	bne.n	8004bc8 <_printf_common+0x74>
 8004bbc:	6833      	ldr	r3, [r6, #0]
 8004bbe:	68e5      	ldr	r5, [r4, #12]
 8004bc0:	1aed      	subs	r5, r5, r3
 8004bc2:	43eb      	mvns	r3, r5
 8004bc4:	17db      	asrs	r3, r3, #31
 8004bc6:	401d      	ands	r5, r3
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	6922      	ldr	r2, [r4, #16]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	dd01      	ble.n	8004bd4 <_printf_common+0x80>
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	18ed      	adds	r5, r5, r3
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42b5      	cmp	r5, r6
 8004bd8:	d120      	bne.n	8004c1c <_printf_common+0xc8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e010      	b.n	8004c00 <_printf_common+0xac>
 8004bde:	3501      	adds	r5, #1
 8004be0:	68e3      	ldr	r3, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	42ab      	cmp	r3, r5
 8004be8:	ddd2      	ble.n	8004b90 <_printf_common+0x3c>
 8004bea:	0022      	movs	r2, r4
 8004bec:	2301      	movs	r3, #1
 8004bee:	9901      	ldr	r1, [sp, #4]
 8004bf0:	9800      	ldr	r0, [sp, #0]
 8004bf2:	9f08      	ldr	r7, [sp, #32]
 8004bf4:	3219      	adds	r2, #25
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1f0      	bne.n	8004bde <_printf_common+0x8a>
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	4240      	negs	r0, r0
 8004c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c02:	2030      	movs	r0, #48	; 0x30
 8004c04:	18e1      	adds	r1, r4, r3
 8004c06:	3143      	adds	r1, #67	; 0x43
 8004c08:	7008      	strb	r0, [r1, #0]
 8004c0a:	0021      	movs	r1, r4
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	3145      	adds	r1, #69	; 0x45
 8004c10:	7809      	ldrb	r1, [r1, #0]
 8004c12:	18a2      	adds	r2, r4, r2
 8004c14:	3243      	adds	r2, #67	; 0x43
 8004c16:	3302      	adds	r3, #2
 8004c18:	7011      	strb	r1, [r2, #0]
 8004c1a:	e7c1      	b.n	8004ba0 <_printf_common+0x4c>
 8004c1c:	0022      	movs	r2, r4
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9901      	ldr	r1, [sp, #4]
 8004c22:	9800      	ldr	r0, [sp, #0]
 8004c24:	9f08      	ldr	r7, [sp, #32]
 8004c26:	321a      	adds	r2, #26
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0e6      	beq.n	8004bfc <_printf_common+0xa8>
 8004c2e:	3601      	adds	r6, #1
 8004c30:	e7d1      	b.n	8004bd6 <_printf_common+0x82>
	...

08004c34 <_printf_i>:
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	9206      	str	r2, [sp, #24]
 8004c3a:	000a      	movs	r2, r1
 8004c3c:	3243      	adds	r2, #67	; 0x43
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	9005      	str	r0, [sp, #20]
 8004c42:	9204      	str	r2, [sp, #16]
 8004c44:	7e0a      	ldrb	r2, [r1, #24]
 8004c46:	000c      	movs	r4, r1
 8004c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c4a:	2a78      	cmp	r2, #120	; 0x78
 8004c4c:	d809      	bhi.n	8004c62 <_printf_i+0x2e>
 8004c4e:	2a62      	cmp	r2, #98	; 0x62
 8004c50:	d80b      	bhi.n	8004c6a <_printf_i+0x36>
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d100      	bne.n	8004c58 <_printf_i+0x24>
 8004c56:	e0be      	b.n	8004dd6 <_printf_i+0x1a2>
 8004c58:	497c      	ldr	r1, [pc, #496]	; (8004e4c <_printf_i+0x218>)
 8004c5a:	9103      	str	r1, [sp, #12]
 8004c5c:	2a58      	cmp	r2, #88	; 0x58
 8004c5e:	d100      	bne.n	8004c62 <_printf_i+0x2e>
 8004c60:	e093      	b.n	8004d8a <_printf_i+0x156>
 8004c62:	0026      	movs	r6, r4
 8004c64:	3642      	adds	r6, #66	; 0x42
 8004c66:	7032      	strb	r2, [r6, #0]
 8004c68:	e022      	b.n	8004cb0 <_printf_i+0x7c>
 8004c6a:	0010      	movs	r0, r2
 8004c6c:	3863      	subs	r0, #99	; 0x63
 8004c6e:	2815      	cmp	r0, #21
 8004c70:	d8f7      	bhi.n	8004c62 <_printf_i+0x2e>
 8004c72:	f7fb fa49 	bl	8000108 <__gnu_thumb1_case_shi>
 8004c76:	0016      	.short	0x0016
 8004c78:	fff6001f 	.word	0xfff6001f
 8004c7c:	fff6fff6 	.word	0xfff6fff6
 8004c80:	001ffff6 	.word	0x001ffff6
 8004c84:	fff6fff6 	.word	0xfff6fff6
 8004c88:	fff6fff6 	.word	0xfff6fff6
 8004c8c:	003600a3 	.word	0x003600a3
 8004c90:	fff60083 	.word	0xfff60083
 8004c94:	00b4fff6 	.word	0x00b4fff6
 8004c98:	0036fff6 	.word	0x0036fff6
 8004c9c:	fff6fff6 	.word	0xfff6fff6
 8004ca0:	0087      	.short	0x0087
 8004ca2:	0026      	movs	r6, r4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	3642      	adds	r6, #66	; 0x42
 8004ca8:	1d11      	adds	r1, r2, #4
 8004caa:	6019      	str	r1, [r3, #0]
 8004cac:	6813      	ldr	r3, [r2, #0]
 8004cae:	7033      	strb	r3, [r6, #0]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0a2      	b.n	8004dfa <_printf_i+0x1c6>
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	6809      	ldr	r1, [r1, #0]
 8004cb8:	1d02      	adds	r2, r0, #4
 8004cba:	060d      	lsls	r5, r1, #24
 8004cbc:	d50b      	bpl.n	8004cd6 <_printf_i+0xa2>
 8004cbe:	6805      	ldr	r5, [r0, #0]
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	da03      	bge.n	8004cce <_printf_i+0x9a>
 8004cc6:	232d      	movs	r3, #45	; 0x2d
 8004cc8:	9a04      	ldr	r2, [sp, #16]
 8004cca:	426d      	negs	r5, r5
 8004ccc:	7013      	strb	r3, [r2, #0]
 8004cce:	4b5f      	ldr	r3, [pc, #380]	; (8004e4c <_printf_i+0x218>)
 8004cd0:	270a      	movs	r7, #10
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	e01b      	b.n	8004d0e <_printf_i+0xda>
 8004cd6:	6805      	ldr	r5, [r0, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	0649      	lsls	r1, r1, #25
 8004cdc:	d5f1      	bpl.n	8004cc2 <_printf_i+0x8e>
 8004cde:	b22d      	sxth	r5, r5
 8004ce0:	e7ef      	b.n	8004cc2 <_printf_i+0x8e>
 8004ce2:	680d      	ldr	r5, [r1, #0]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	1d08      	adds	r0, r1, #4
 8004ce8:	6018      	str	r0, [r3, #0]
 8004cea:	062e      	lsls	r6, r5, #24
 8004cec:	d501      	bpl.n	8004cf2 <_printf_i+0xbe>
 8004cee:	680d      	ldr	r5, [r1, #0]
 8004cf0:	e003      	b.n	8004cfa <_printf_i+0xc6>
 8004cf2:	066d      	lsls	r5, r5, #25
 8004cf4:	d5fb      	bpl.n	8004cee <_printf_i+0xba>
 8004cf6:	680d      	ldr	r5, [r1, #0]
 8004cf8:	b2ad      	uxth	r5, r5
 8004cfa:	4b54      	ldr	r3, [pc, #336]	; (8004e4c <_printf_i+0x218>)
 8004cfc:	2708      	movs	r7, #8
 8004cfe:	9303      	str	r3, [sp, #12]
 8004d00:	2a6f      	cmp	r2, #111	; 0x6f
 8004d02:	d000      	beq.n	8004d06 <_printf_i+0xd2>
 8004d04:	3702      	adds	r7, #2
 8004d06:	0023      	movs	r3, r4
 8004d08:	2200      	movs	r2, #0
 8004d0a:	3343      	adds	r3, #67	; 0x43
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	60a3      	str	r3, [r4, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db03      	blt.n	8004d1e <_printf_i+0xea>
 8004d16:	2104      	movs	r1, #4
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	6022      	str	r2, [r4, #0]
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d102      	bne.n	8004d28 <_printf_i+0xf4>
 8004d22:	9e04      	ldr	r6, [sp, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00c      	beq.n	8004d42 <_printf_i+0x10e>
 8004d28:	9e04      	ldr	r6, [sp, #16]
 8004d2a:	0028      	movs	r0, r5
 8004d2c:	0039      	movs	r1, r7
 8004d2e:	f7fb fa7b 	bl	8000228 <__aeabi_uidivmod>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	3e01      	subs	r6, #1
 8004d36:	5c5b      	ldrb	r3, [r3, r1]
 8004d38:	7033      	strb	r3, [r6, #0]
 8004d3a:	002b      	movs	r3, r5
 8004d3c:	0005      	movs	r5, r0
 8004d3e:	429f      	cmp	r7, r3
 8004d40:	d9f3      	bls.n	8004d2a <_printf_i+0xf6>
 8004d42:	2f08      	cmp	r7, #8
 8004d44:	d109      	bne.n	8004d5a <_printf_i+0x126>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	07db      	lsls	r3, r3, #31
 8004d4a:	d506      	bpl.n	8004d5a <_printf_i+0x126>
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dc02      	bgt.n	8004d5a <_printf_i+0x126>
 8004d54:	2330      	movs	r3, #48	; 0x30
 8004d56:	3e01      	subs	r6, #1
 8004d58:	7033      	strb	r3, [r6, #0]
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	1b9b      	subs	r3, r3, r6
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	9b07      	ldr	r3, [sp, #28]
 8004d62:	0021      	movs	r1, r4
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	9805      	ldr	r0, [sp, #20]
 8004d68:	9b06      	ldr	r3, [sp, #24]
 8004d6a:	aa09      	add	r2, sp, #36	; 0x24
 8004d6c:	f7ff fef2 	bl	8004b54 <_printf_common>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d147      	bne.n	8004e04 <_printf_i+0x1d0>
 8004d74:	2001      	movs	r0, #1
 8004d76:	4240      	negs	r0, r0
 8004d78:	b00b      	add	sp, #44	; 0x2c
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	6809      	ldr	r1, [r1, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	6022      	str	r2, [r4, #0]
 8004d84:	2278      	movs	r2, #120	; 0x78
 8004d86:	4932      	ldr	r1, [pc, #200]	; (8004e50 <_printf_i+0x21c>)
 8004d88:	9103      	str	r1, [sp, #12]
 8004d8a:	0021      	movs	r1, r4
 8004d8c:	3145      	adds	r1, #69	; 0x45
 8004d8e:	700a      	strb	r2, [r1, #0]
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	c920      	ldmia	r1!, {r5}
 8004d96:	0610      	lsls	r0, r2, #24
 8004d98:	d402      	bmi.n	8004da0 <_printf_i+0x16c>
 8004d9a:	0650      	lsls	r0, r2, #25
 8004d9c:	d500      	bpl.n	8004da0 <_printf_i+0x16c>
 8004d9e:	b2ad      	uxth	r5, r5
 8004da0:	6019      	str	r1, [r3, #0]
 8004da2:	07d3      	lsls	r3, r2, #31
 8004da4:	d502      	bpl.n	8004dac <_printf_i+0x178>
 8004da6:	2320      	movs	r3, #32
 8004da8:	4313      	orrs	r3, r2
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2710      	movs	r7, #16
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	d1a9      	bne.n	8004d06 <_printf_i+0xd2>
 8004db2:	2220      	movs	r2, #32
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	4393      	bics	r3, r2
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	e7a4      	b.n	8004d06 <_printf_i+0xd2>
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	680d      	ldr	r5, [r1, #0]
 8004dc0:	1d10      	adds	r0, r2, #4
 8004dc2:	6949      	ldr	r1, [r1, #20]
 8004dc4:	6018      	str	r0, [r3, #0]
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	062e      	lsls	r6, r5, #24
 8004dca:	d501      	bpl.n	8004dd0 <_printf_i+0x19c>
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	e002      	b.n	8004dd6 <_printf_i+0x1a2>
 8004dd0:	066d      	lsls	r5, r5, #25
 8004dd2:	d5fb      	bpl.n	8004dcc <_printf_i+0x198>
 8004dd4:	8019      	strh	r1, [r3, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9e04      	ldr	r6, [sp, #16]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	e7c0      	b.n	8004d60 <_printf_i+0x12c>
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	1d11      	adds	r1, r2, #4
 8004de2:	6019      	str	r1, [r3, #0]
 8004de4:	6816      	ldr	r6, [r2, #0]
 8004de6:	2100      	movs	r1, #0
 8004de8:	0030      	movs	r0, r6
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	f000 fad4 	bl	8005398 <memchr>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d001      	beq.n	8004df8 <_printf_i+0x1c4>
 8004df4:	1b80      	subs	r0, r0, r6
 8004df6:	6060      	str	r0, [r4, #4]
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9a04      	ldr	r2, [sp, #16]
 8004e00:	7013      	strb	r3, [r2, #0]
 8004e02:	e7ad      	b.n	8004d60 <_printf_i+0x12c>
 8004e04:	0032      	movs	r2, r6
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	9906      	ldr	r1, [sp, #24]
 8004e0a:	9805      	ldr	r0, [sp, #20]
 8004e0c:	9d07      	ldr	r5, [sp, #28]
 8004e0e:	47a8      	blx	r5
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0af      	beq.n	8004d74 <_printf_i+0x140>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	079b      	lsls	r3, r3, #30
 8004e18:	d415      	bmi.n	8004e46 <_printf_i+0x212>
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	68e0      	ldr	r0, [r4, #12]
 8004e1e:	4298      	cmp	r0, r3
 8004e20:	daaa      	bge.n	8004d78 <_printf_i+0x144>
 8004e22:	0018      	movs	r0, r3
 8004e24:	e7a8      	b.n	8004d78 <_printf_i+0x144>
 8004e26:	0022      	movs	r2, r4
 8004e28:	2301      	movs	r3, #1
 8004e2a:	9906      	ldr	r1, [sp, #24]
 8004e2c:	9805      	ldr	r0, [sp, #20]
 8004e2e:	9e07      	ldr	r6, [sp, #28]
 8004e30:	3219      	adds	r2, #25
 8004e32:	47b0      	blx	r6
 8004e34:	3001      	adds	r0, #1
 8004e36:	d09d      	beq.n	8004d74 <_printf_i+0x140>
 8004e38:	3501      	adds	r5, #1
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dcf0      	bgt.n	8004e26 <_printf_i+0x1f2>
 8004e44:	e7e9      	b.n	8004e1a <_printf_i+0x1e6>
 8004e46:	2500      	movs	r5, #0
 8004e48:	e7f7      	b.n	8004e3a <_printf_i+0x206>
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	0800573d 	.word	0x0800573d
 8004e50:	0800574e 	.word	0x0800574e

08004e54 <__sflush_r>:
 8004e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e56:	898b      	ldrh	r3, [r1, #12]
 8004e58:	0005      	movs	r5, r0
 8004e5a:	000c      	movs	r4, r1
 8004e5c:	071a      	lsls	r2, r3, #28
 8004e5e:	d45c      	bmi.n	8004f1a <__sflush_r+0xc6>
 8004e60:	684a      	ldr	r2, [r1, #4]
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	dc04      	bgt.n	8004e70 <__sflush_r+0x1c>
 8004e66:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004e68:	2a00      	cmp	r2, #0
 8004e6a:	dc01      	bgt.n	8004e70 <__sflush_r+0x1c>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004e72:	2f00      	cmp	r7, #0
 8004e74:	d0fa      	beq.n	8004e6c <__sflush_r+0x18>
 8004e76:	2200      	movs	r2, #0
 8004e78:	2080      	movs	r0, #128	; 0x80
 8004e7a:	682e      	ldr	r6, [r5, #0]
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	001a      	movs	r2, r3
 8004e80:	0140      	lsls	r0, r0, #5
 8004e82:	6a21      	ldr	r1, [r4, #32]
 8004e84:	4002      	ands	r2, r0
 8004e86:	4203      	tst	r3, r0
 8004e88:	d034      	beq.n	8004ef4 <__sflush_r+0xa0>
 8004e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	075b      	lsls	r3, r3, #29
 8004e90:	d506      	bpl.n	8004ea0 <__sflush_r+0x4c>
 8004e92:	6863      	ldr	r3, [r4, #4]
 8004e94:	1ac0      	subs	r0, r0, r3
 8004e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <__sflush_r+0x4c>
 8004e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9e:	1ac0      	subs	r0, r0, r3
 8004ea0:	0002      	movs	r2, r0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ea8:	6a21      	ldr	r1, [r4, #32]
 8004eaa:	47b8      	blx	r7
 8004eac:	89a2      	ldrh	r2, [r4, #12]
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d106      	bne.n	8004ec0 <__sflush_r+0x6c>
 8004eb2:	6829      	ldr	r1, [r5, #0]
 8004eb4:	291d      	cmp	r1, #29
 8004eb6:	d82c      	bhi.n	8004f12 <__sflush_r+0xbe>
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <__sflush_r+0x110>)
 8004eba:	410b      	asrs	r3, r1
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d428      	bmi.n	8004f12 <__sflush_r+0xbe>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	04d2      	lsls	r2, r2, #19
 8004eca:	d505      	bpl.n	8004ed8 <__sflush_r+0x84>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <__sflush_r+0x82>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d100      	bne.n	8004ed8 <__sflush_r+0x84>
 8004ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	602e      	str	r6, [r5, #0]
 8004edc:	2900      	cmp	r1, #0
 8004ede:	d0c5      	beq.n	8004e6c <__sflush_r+0x18>
 8004ee0:	0023      	movs	r3, r4
 8004ee2:	3344      	adds	r3, #68	; 0x44
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	d002      	beq.n	8004eee <__sflush_r+0x9a>
 8004ee8:	0028      	movs	r0, r5
 8004eea:	f000 fa61 	bl	80053b0 <_free_r>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ef2:	e7bc      	b.n	8004e6e <__sflush_r+0x1a>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	d1c6      	bne.n	8004e8c <__sflush_r+0x38>
 8004efe:	682b      	ldr	r3, [r5, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0c3      	beq.n	8004e8c <__sflush_r+0x38>
 8004f04:	2b1d      	cmp	r3, #29
 8004f06:	d001      	beq.n	8004f0c <__sflush_r+0xb8>
 8004f08:	2b16      	cmp	r3, #22
 8004f0a:	d101      	bne.n	8004f10 <__sflush_r+0xbc>
 8004f0c:	602e      	str	r6, [r5, #0]
 8004f0e:	e7ad      	b.n	8004e6c <__sflush_r+0x18>
 8004f10:	89a2      	ldrh	r2, [r4, #12]
 8004f12:	2340      	movs	r3, #64	; 0x40
 8004f14:	4313      	orrs	r3, r2
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	e7a9      	b.n	8004e6e <__sflush_r+0x1a>
 8004f1a:	690e      	ldr	r6, [r1, #16]
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d0a5      	beq.n	8004e6c <__sflush_r+0x18>
 8004f20:	680f      	ldr	r7, [r1, #0]
 8004f22:	600e      	str	r6, [r1, #0]
 8004f24:	1bba      	subs	r2, r7, r6
 8004f26:	9201      	str	r2, [sp, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	079b      	lsls	r3, r3, #30
 8004f2c:	d100      	bne.n	8004f30 <__sflush_r+0xdc>
 8004f2e:	694a      	ldr	r2, [r1, #20]
 8004f30:	60a2      	str	r2, [r4, #8]
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dd99      	ble.n	8004e6c <__sflush_r+0x18>
 8004f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f3a:	0032      	movs	r2, r6
 8004f3c:	001f      	movs	r7, r3
 8004f3e:	0028      	movs	r0, r5
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	6a21      	ldr	r1, [r4, #32]
 8004f44:	47b8      	blx	r7
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dc06      	bgt.n	8004f58 <__sflush_r+0x104>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	89a2      	ldrh	r2, [r4, #12]
 8004f50:	4240      	negs	r0, r0
 8004f52:	4313      	orrs	r3, r2
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e78a      	b.n	8004e6e <__sflush_r+0x1a>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	1836      	adds	r6, r6, r0
 8004f5c:	1a1b      	subs	r3, r3, r0
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	e7e7      	b.n	8004f32 <__sflush_r+0xde>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	dfbffffe 	.word	0xdfbffffe

08004f68 <_fflush_r>:
 8004f68:	690b      	ldr	r3, [r1, #16]
 8004f6a:	b570      	push	{r4, r5, r6, lr}
 8004f6c:	0005      	movs	r5, r0
 8004f6e:	000c      	movs	r4, r1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <_fflush_r+0x12>
 8004f74:	2500      	movs	r5, #0
 8004f76:	0028      	movs	r0, r5
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d004      	beq.n	8004f88 <_fflush_r+0x20>
 8004f7e:	6a03      	ldr	r3, [r0, #32]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <_fflush_r+0x20>
 8004f84:	f7ff fb86 	bl	8004694 <__sinit>
 8004f88:	220c      	movs	r2, #12
 8004f8a:	5ea3      	ldrsh	r3, [r4, r2]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f1      	beq.n	8004f74 <_fflush_r+0xc>
 8004f90:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f92:	07d2      	lsls	r2, r2, #31
 8004f94:	d404      	bmi.n	8004fa0 <_fflush_r+0x38>
 8004f96:	059b      	lsls	r3, r3, #22
 8004f98:	d402      	bmi.n	8004fa0 <_fflush_r+0x38>
 8004f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9c:	f7ff fbf0 	bl	8004780 <__retarget_lock_acquire_recursive>
 8004fa0:	0028      	movs	r0, r5
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	f7ff ff56 	bl	8004e54 <__sflush_r>
 8004fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004faa:	0005      	movs	r5, r0
 8004fac:	07db      	lsls	r3, r3, #31
 8004fae:	d4e2      	bmi.n	8004f76 <_fflush_r+0xe>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	059b      	lsls	r3, r3, #22
 8004fb4:	d4df      	bmi.n	8004f76 <_fflush_r+0xe>
 8004fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb8:	f7ff fbe3 	bl	8004782 <__retarget_lock_release_recursive>
 8004fbc:	e7db      	b.n	8004f76 <_fflush_r+0xe>
	...

08004fc0 <__malloc_lock>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4802      	ldr	r0, [pc, #8]	; (8004fcc <__malloc_lock+0xc>)
 8004fc4:	f7ff fbdc 	bl	8004780 <__retarget_lock_acquire_recursive>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	2000037c 	.word	0x2000037c

08004fd0 <__malloc_unlock>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4802      	ldr	r0, [pc, #8]	; (8004fdc <__malloc_unlock+0xc>)
 8004fd4:	f7ff fbd5 	bl	8004782 <__retarget_lock_release_recursive>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	2000037c 	.word	0x2000037c

08004fe0 <__sread>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	000c      	movs	r4, r1
 8004fe4:	250e      	movs	r5, #14
 8004fe6:	5f49      	ldrsh	r1, [r1, r5]
 8004fe8:	f000 f99c 	bl	8005324 <_read_r>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	db03      	blt.n	8004ff8 <__sread+0x18>
 8004ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ff2:	181b      	adds	r3, r3, r0
 8004ff4:	6563      	str	r3, [r4, #84]	; 0x54
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	4a02      	ldr	r2, [pc, #8]	; (8005004 <__sread+0x24>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	e7f9      	b.n	8004ff6 <__sread+0x16>
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	ffffefff 	.word	0xffffefff

08005008 <__swrite>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	001f      	movs	r7, r3
 800500c:	898b      	ldrh	r3, [r1, #12]
 800500e:	0005      	movs	r5, r0
 8005010:	000c      	movs	r4, r1
 8005012:	0016      	movs	r6, r2
 8005014:	05db      	lsls	r3, r3, #23
 8005016:	d505      	bpl.n	8005024 <__swrite+0x1c>
 8005018:	230e      	movs	r3, #14
 800501a:	5ec9      	ldrsh	r1, [r1, r3]
 800501c:	2200      	movs	r2, #0
 800501e:	2302      	movs	r3, #2
 8005020:	f000 f96c 	bl	80052fc <_lseek_r>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	4a05      	ldr	r2, [pc, #20]	; (800503c <__swrite+0x34>)
 8005028:	0028      	movs	r0, r5
 800502a:	4013      	ands	r3, r2
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	0032      	movs	r2, r6
 8005030:	230e      	movs	r3, #14
 8005032:	5ee1      	ldrsh	r1, [r4, r3]
 8005034:	003b      	movs	r3, r7
 8005036:	f000 f99b 	bl	8005370 <_write_r>
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503c:	ffffefff 	.word	0xffffefff

08005040 <__sseek>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	000c      	movs	r4, r1
 8005044:	250e      	movs	r5, #14
 8005046:	5f49      	ldrsh	r1, [r1, r5]
 8005048:	f000 f958 	bl	80052fc <_lseek_r>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	1c42      	adds	r2, r0, #1
 8005050:	d103      	bne.n	800505a <__sseek+0x1a>
 8005052:	4a05      	ldr	r2, [pc, #20]	; (8005068 <__sseek+0x28>)
 8005054:	4013      	ands	r3, r2
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	bd70      	pop	{r4, r5, r6, pc}
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	0152      	lsls	r2, r2, #5
 800505e:	4313      	orrs	r3, r2
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	6560      	str	r0, [r4, #84]	; 0x54
 8005064:	e7f8      	b.n	8005058 <__sseek+0x18>
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	ffffefff 	.word	0xffffefff

0800506c <__sclose>:
 800506c:	b510      	push	{r4, lr}
 800506e:	230e      	movs	r3, #14
 8005070:	5ec9      	ldrsh	r1, [r1, r3]
 8005072:	f000 f90d 	bl	8005290 <_close_r>
 8005076:	bd10      	pop	{r4, pc}

08005078 <__swbuf_r>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	0006      	movs	r6, r0
 800507c:	000d      	movs	r5, r1
 800507e:	0014      	movs	r4, r2
 8005080:	2800      	cmp	r0, #0
 8005082:	d004      	beq.n	800508e <__swbuf_r+0x16>
 8005084:	6a03      	ldr	r3, [r0, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <__swbuf_r+0x16>
 800508a:	f7ff fb03 	bl	8004694 <__sinit>
 800508e:	69a3      	ldr	r3, [r4, #24]
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	071b      	lsls	r3, r3, #28
 8005096:	d528      	bpl.n	80050ea <__swbuf_r+0x72>
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d025      	beq.n	80050ea <__swbuf_r+0x72>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	b2ef      	uxtb	r7, r5
 80050a4:	1ac0      	subs	r0, r0, r3
 80050a6:	6963      	ldr	r3, [r4, #20]
 80050a8:	b2ed      	uxtb	r5, r5
 80050aa:	4283      	cmp	r3, r0
 80050ac:	dc05      	bgt.n	80050ba <__swbuf_r+0x42>
 80050ae:	0021      	movs	r1, r4
 80050b0:	0030      	movs	r0, r6
 80050b2:	f7ff ff59 	bl	8004f68 <_fflush_r>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d11d      	bne.n	80050f6 <__swbuf_r+0x7e>
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	3001      	adds	r0, #1
 80050be:	3b01      	subs	r3, #1
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	701f      	strb	r7, [r3, #0]
 80050ca:	6963      	ldr	r3, [r4, #20]
 80050cc:	4283      	cmp	r3, r0
 80050ce:	d004      	beq.n	80050da <__swbuf_r+0x62>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	07db      	lsls	r3, r3, #31
 80050d4:	d507      	bpl.n	80050e6 <__swbuf_r+0x6e>
 80050d6:	2d0a      	cmp	r5, #10
 80050d8:	d105      	bne.n	80050e6 <__swbuf_r+0x6e>
 80050da:	0021      	movs	r1, r4
 80050dc:	0030      	movs	r0, r6
 80050de:	f7ff ff43 	bl	8004f68 <_fflush_r>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d107      	bne.n	80050f6 <__swbuf_r+0x7e>
 80050e6:	0028      	movs	r0, r5
 80050e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ea:	0021      	movs	r1, r4
 80050ec:	0030      	movs	r0, r6
 80050ee:	f000 f805 	bl	80050fc <__swsetup_r>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d0d3      	beq.n	800509e <__swbuf_r+0x26>
 80050f6:	2501      	movs	r5, #1
 80050f8:	426d      	negs	r5, r5
 80050fa:	e7f4      	b.n	80050e6 <__swbuf_r+0x6e>

080050fc <__swsetup_r>:
 80050fc:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <__swsetup_r+0xc4>)
 80050fe:	b570      	push	{r4, r5, r6, lr}
 8005100:	0005      	movs	r5, r0
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	000c      	movs	r4, r1
 8005106:	2800      	cmp	r0, #0
 8005108:	d004      	beq.n	8005114 <__swsetup_r+0x18>
 800510a:	6a03      	ldr	r3, [r0, #32]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <__swsetup_r+0x18>
 8005110:	f7ff fac0 	bl	8004694 <__sinit>
 8005114:	230c      	movs	r3, #12
 8005116:	5ee2      	ldrsh	r2, [r4, r3]
 8005118:	b293      	uxth	r3, r2
 800511a:	0711      	lsls	r1, r2, #28
 800511c:	d423      	bmi.n	8005166 <__swsetup_r+0x6a>
 800511e:	06d9      	lsls	r1, r3, #27
 8005120:	d407      	bmi.n	8005132 <__swsetup_r+0x36>
 8005122:	2309      	movs	r3, #9
 8005124:	2001      	movs	r0, #1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	3337      	adds	r3, #55	; 0x37
 800512a:	4313      	orrs	r3, r2
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	4240      	negs	r0, r0
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	075b      	lsls	r3, r3, #29
 8005134:	d513      	bpl.n	800515e <__swsetup_r+0x62>
 8005136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005138:	2900      	cmp	r1, #0
 800513a:	d008      	beq.n	800514e <__swsetup_r+0x52>
 800513c:	0023      	movs	r3, r4
 800513e:	3344      	adds	r3, #68	; 0x44
 8005140:	4299      	cmp	r1, r3
 8005142:	d002      	beq.n	800514a <__swsetup_r+0x4e>
 8005144:	0028      	movs	r0, r5
 8005146:	f000 f933 	bl	80053b0 <_free_r>
 800514a:	2300      	movs	r3, #0
 800514c:	6363      	str	r3, [r4, #52]	; 0x34
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	4393      	bics	r3, r2
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	2300      	movs	r3, #0
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	2308      	movs	r3, #8
 8005160:	89a2      	ldrh	r2, [r4, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <__swsetup_r+0x88>
 800516c:	21a0      	movs	r1, #160	; 0xa0
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	0089      	lsls	r1, r1, #2
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	400b      	ands	r3, r1
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <__swsetup_r+0x88>
 800517c:	0021      	movs	r1, r4
 800517e:	0028      	movs	r0, r5
 8005180:	f000 f848 	bl	8005214 <__smakebuf_r>
 8005184:	220c      	movs	r2, #12
 8005186:	5ea3      	ldrsh	r3, [r4, r2]
 8005188:	2001      	movs	r0, #1
 800518a:	001a      	movs	r2, r3
 800518c:	b299      	uxth	r1, r3
 800518e:	4002      	ands	r2, r0
 8005190:	4203      	tst	r3, r0
 8005192:	d00f      	beq.n	80051b4 <__swsetup_r+0xb8>
 8005194:	2200      	movs	r2, #0
 8005196:	60a2      	str	r2, [r4, #8]
 8005198:	6962      	ldr	r2, [r4, #20]
 800519a:	4252      	negs	r2, r2
 800519c:	61a2      	str	r2, [r4, #24]
 800519e:	2000      	movs	r0, #0
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	4282      	cmp	r2, r0
 80051a4:	d1c4      	bne.n	8005130 <__swsetup_r+0x34>
 80051a6:	0609      	lsls	r1, r1, #24
 80051a8:	d5c2      	bpl.n	8005130 <__swsetup_r+0x34>
 80051aa:	2240      	movs	r2, #64	; 0x40
 80051ac:	4313      	orrs	r3, r2
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	3801      	subs	r0, #1
 80051b2:	e7bd      	b.n	8005130 <__swsetup_r+0x34>
 80051b4:	0788      	lsls	r0, r1, #30
 80051b6:	d400      	bmi.n	80051ba <__swsetup_r+0xbe>
 80051b8:	6962      	ldr	r2, [r4, #20]
 80051ba:	60a2      	str	r2, [r4, #8]
 80051bc:	e7ef      	b.n	800519e <__swsetup_r+0xa2>
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	200000b4 	.word	0x200000b4

080051c4 <__swhatbuf_r>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	000e      	movs	r6, r1
 80051c8:	001d      	movs	r5, r3
 80051ca:	230e      	movs	r3, #14
 80051cc:	5ec9      	ldrsh	r1, [r1, r3]
 80051ce:	0014      	movs	r4, r2
 80051d0:	b096      	sub	sp, #88	; 0x58
 80051d2:	2900      	cmp	r1, #0
 80051d4:	da0c      	bge.n	80051f0 <__swhatbuf_r+0x2c>
 80051d6:	89b2      	ldrh	r2, [r6, #12]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	0011      	movs	r1, r2
 80051dc:	4019      	ands	r1, r3
 80051de:	421a      	tst	r2, r3
 80051e0:	d013      	beq.n	800520a <__swhatbuf_r+0x46>
 80051e2:	2100      	movs	r1, #0
 80051e4:	3b40      	subs	r3, #64	; 0x40
 80051e6:	2000      	movs	r0, #0
 80051e8:	6029      	str	r1, [r5, #0]
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	b016      	add	sp, #88	; 0x58
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	466a      	mov	r2, sp
 80051f2:	f000 f85f 	bl	80052b4 <_fstat_r>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	dbed      	blt.n	80051d6 <__swhatbuf_r+0x12>
 80051fa:	23f0      	movs	r3, #240	; 0xf0
 80051fc:	9901      	ldr	r1, [sp, #4]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4019      	ands	r1, r3
 8005202:	4b03      	ldr	r3, [pc, #12]	; (8005210 <__swhatbuf_r+0x4c>)
 8005204:	18c9      	adds	r1, r1, r3
 8005206:	424b      	negs	r3, r1
 8005208:	4159      	adcs	r1, r3
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	e7ea      	b.n	80051e6 <__swhatbuf_r+0x22>
 8005210:	ffffe000 	.word	0xffffe000

08005214 <__smakebuf_r>:
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	2602      	movs	r6, #2
 8005218:	898b      	ldrh	r3, [r1, #12]
 800521a:	0005      	movs	r5, r0
 800521c:	000c      	movs	r4, r1
 800521e:	4233      	tst	r3, r6
 8005220:	d006      	beq.n	8005230 <__smakebuf_r+0x1c>
 8005222:	0023      	movs	r3, r4
 8005224:	3347      	adds	r3, #71	; 0x47
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	6123      	str	r3, [r4, #16]
 800522a:	2301      	movs	r3, #1
 800522c:	6163      	str	r3, [r4, #20]
 800522e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005230:	466a      	mov	r2, sp
 8005232:	ab01      	add	r3, sp, #4
 8005234:	f7ff ffc6 	bl	80051c4 <__swhatbuf_r>
 8005238:	9900      	ldr	r1, [sp, #0]
 800523a:	0007      	movs	r7, r0
 800523c:	0028      	movs	r0, r5
 800523e:	f7ff fc07 	bl	8004a50 <_malloc_r>
 8005242:	2800      	cmp	r0, #0
 8005244:	d108      	bne.n	8005258 <__smakebuf_r+0x44>
 8005246:	220c      	movs	r2, #12
 8005248:	5ea3      	ldrsh	r3, [r4, r2]
 800524a:	059a      	lsls	r2, r3, #22
 800524c:	d4ef      	bmi.n	800522e <__smakebuf_r+0x1a>
 800524e:	2203      	movs	r2, #3
 8005250:	4393      	bics	r3, r2
 8005252:	431e      	orrs	r6, r3
 8005254:	81a6      	strh	r6, [r4, #12]
 8005256:	e7e4      	b.n	8005222 <__smakebuf_r+0xe>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	89a2      	ldrh	r2, [r4, #12]
 800525c:	6020      	str	r0, [r4, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	9b00      	ldr	r3, [sp, #0]
 8005264:	6120      	str	r0, [r4, #16]
 8005266:	6163      	str	r3, [r4, #20]
 8005268:	9b01      	ldr	r3, [sp, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <__smakebuf_r+0x74>
 800526e:	0028      	movs	r0, r5
 8005270:	230e      	movs	r3, #14
 8005272:	5ee1      	ldrsh	r1, [r4, r3]
 8005274:	f000 f830 	bl	80052d8 <_isatty_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d005      	beq.n	8005288 <__smakebuf_r+0x74>
 800527c:	2303      	movs	r3, #3
 800527e:	89a2      	ldrh	r2, [r4, #12]
 8005280:	439a      	bics	r2, r3
 8005282:	3b02      	subs	r3, #2
 8005284:	4313      	orrs	r3, r2
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	433b      	orrs	r3, r7
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	e7ce      	b.n	800522e <__smakebuf_r+0x1a>

08005290 <_close_r>:
 8005290:	2300      	movs	r3, #0
 8005292:	b570      	push	{r4, r5, r6, lr}
 8005294:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_close_r+0x20>)
 8005296:	0004      	movs	r4, r0
 8005298:	0008      	movs	r0, r1
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f7fb ff87 	bl	80011ae <_close>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d103      	bne.n	80052ac <_close_r+0x1c>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d000      	beq.n	80052ac <_close_r+0x1c>
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000388 	.word	0x20000388

080052b4 <_fstat_r>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_fstat_r+0x20>)
 80052ba:	0004      	movs	r4, r0
 80052bc:	0008      	movs	r0, r1
 80052be:	0011      	movs	r1, r2
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f7fb ff7e 	bl	80011c2 <_fstat>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d103      	bne.n	80052d2 <_fstat_r+0x1e>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d000      	beq.n	80052d2 <_fstat_r+0x1e>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	20000388 	.word	0x20000388

080052d8 <_isatty_r>:
 80052d8:	2300      	movs	r3, #0
 80052da:	b570      	push	{r4, r5, r6, lr}
 80052dc:	4d06      	ldr	r5, [pc, #24]	; (80052f8 <_isatty_r+0x20>)
 80052de:	0004      	movs	r4, r0
 80052e0:	0008      	movs	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb ff7b 	bl	80011de <_isatty>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d103      	bne.n	80052f4 <_isatty_r+0x1c>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d000      	beq.n	80052f4 <_isatty_r+0x1c>
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	20000388 	.word	0x20000388

080052fc <_lseek_r>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	0004      	movs	r4, r0
 8005300:	0008      	movs	r0, r1
 8005302:	0011      	movs	r1, r2
 8005304:	001a      	movs	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	4d05      	ldr	r5, [pc, #20]	; (8005320 <_lseek_r+0x24>)
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	f7fb ff70 	bl	80011f0 <_lseek>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d103      	bne.n	800531c <_lseek_r+0x20>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d000      	beq.n	800531c <_lseek_r+0x20>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	20000388 	.word	0x20000388

08005324 <_read_r>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	0004      	movs	r4, r0
 8005328:	0008      	movs	r0, r1
 800532a:	0011      	movs	r1, r2
 800532c:	001a      	movs	r2, r3
 800532e:	2300      	movs	r3, #0
 8005330:	4d05      	ldr	r5, [pc, #20]	; (8005348 <_read_r+0x24>)
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fb ff1e 	bl	8001174 <_read>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d103      	bne.n	8005344 <_read_r+0x20>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d000      	beq.n	8005344 <_read_r+0x20>
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	20000388 	.word	0x20000388

0800534c <_sbrk_r>:
 800534c:	2300      	movs	r3, #0
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	4d06      	ldr	r5, [pc, #24]	; (800536c <_sbrk_r+0x20>)
 8005352:	0004      	movs	r4, r0
 8005354:	0008      	movs	r0, r1
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	f7fb ff56 	bl	8001208 <_sbrk>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d103      	bne.n	8005368 <_sbrk_r+0x1c>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d000      	beq.n	8005368 <_sbrk_r+0x1c>
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000388 	.word	0x20000388

08005370 <_write_r>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	0004      	movs	r4, r0
 8005374:	0008      	movs	r0, r1
 8005376:	0011      	movs	r1, r2
 8005378:	001a      	movs	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	4d05      	ldr	r5, [pc, #20]	; (8005394 <_write_r+0x24>)
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fb faf2 	bl	8000968 <_write>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d103      	bne.n	8005390 <_write_r+0x20>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d000      	beq.n	8005390 <_write_r+0x20>
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	20000388 	.word	0x20000388

08005398 <memchr>:
 8005398:	b2c9      	uxtb	r1, r1
 800539a:	1882      	adds	r2, r0, r2
 800539c:	4290      	cmp	r0, r2
 800539e:	d101      	bne.n	80053a4 <memchr+0xc>
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr
 80053a4:	7803      	ldrb	r3, [r0, #0]
 80053a6:	428b      	cmp	r3, r1
 80053a8:	d0fb      	beq.n	80053a2 <memchr+0xa>
 80053aa:	3001      	adds	r0, #1
 80053ac:	e7f6      	b.n	800539c <memchr+0x4>
	...

080053b0 <_free_r>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	0005      	movs	r5, r0
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d010      	beq.n	80053da <_free_r+0x2a>
 80053b8:	1f0c      	subs	r4, r1, #4
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da00      	bge.n	80053c2 <_free_r+0x12>
 80053c0:	18e4      	adds	r4, r4, r3
 80053c2:	0028      	movs	r0, r5
 80053c4:	f7ff fdfc 	bl	8004fc0 <__malloc_lock>
 80053c8:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <_free_r+0x90>)
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <_free_r+0x2c>
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	6014      	str	r4, [r2, #0]
 80053d4:	0028      	movs	r0, r5
 80053d6:	f7ff fdfb 	bl	8004fd0 <__malloc_unlock>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d908      	bls.n	80053f2 <_free_r+0x42>
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	1821      	adds	r1, r4, r0
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d1f3      	bne.n	80053d0 <_free_r+0x20>
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	1809      	adds	r1, r1, r0
 80053ee:	6021      	str	r1, [r4, #0]
 80053f0:	e7ee      	b.n	80053d0 <_free_r+0x20>
 80053f2:	001a      	movs	r2, r3
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <_free_r+0x4e>
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	d9f9      	bls.n	80053f2 <_free_r+0x42>
 80053fe:	6811      	ldr	r1, [r2, #0]
 8005400:	1850      	adds	r0, r2, r1
 8005402:	42a0      	cmp	r0, r4
 8005404:	d10b      	bne.n	800541e <_free_r+0x6e>
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1809      	adds	r1, r1, r0
 800540a:	1850      	adds	r0, r2, r1
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	4283      	cmp	r3, r0
 8005410:	d1e0      	bne.n	80053d4 <_free_r+0x24>
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	1841      	adds	r1, r0, r1
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	e7da      	b.n	80053d4 <_free_r+0x24>
 800541e:	42a0      	cmp	r0, r4
 8005420:	d902      	bls.n	8005428 <_free_r+0x78>
 8005422:	230c      	movs	r3, #12
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	e7d5      	b.n	80053d4 <_free_r+0x24>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	1821      	adds	r1, r4, r0
 800542c:	428b      	cmp	r3, r1
 800542e:	d103      	bne.n	8005438 <_free_r+0x88>
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	1809      	adds	r1, r1, r0
 8005436:	6021      	str	r1, [r4, #0]
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	6054      	str	r4, [r2, #4]
 800543c:	e7ca      	b.n	80053d4 <_free_r+0x24>
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	20000380 	.word	0x20000380

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
