
firmware_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e4  080055e4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055ec  080055ec  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080055f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200000b8  080056ac  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080056ac  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016352  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c00  00000000  00000000  0003647d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00039080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fce  00000000  00000000  0003a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020550  00000000  00000000  0003b486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018520  00000000  00000000  0005b9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce733  00000000  00000000  00073ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e1c  00000000  00000000  0014262c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00148448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800552c 	.word	0x0800552c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000bc 	.word	0x200000bc
 800021c:	0800552c 	.word	0x0800552c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 80005c8:	224c      	movs	r2, #76	; 0x4c
 80005ca:	2110      	movs	r1, #16
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f91d 	bl	800080c <accelerometer_write>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <acc_init+0x24>
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	e01e      	b.n	800061e <acc_init+0x62>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2111      	movs	r1, #17
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f911 	bl	800080c <accelerometer_write>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return status;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <acc_init+0x3c>
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	e012      	b.n	800061e <acc_init+0x62>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 80005f8:	2201      	movs	r2, #1
 80005fa:	210e      	movs	r1, #14
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f905 	bl	800080c <accelerometer_write>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <acc_init+0x54>
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e006      	b.n	800061e <acc_init+0x62>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000610:	2103      	movs	r1, #3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f808 	bl	8000628 <read_axis>
 8000618:	4603      	mov	r3, r0
 800061a:	73fb      	strb	r3, [r7, #15]

    return status;
 800061c:	7bfb      	ldrb	r3, [r7, #15]

}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af04      	add	r7, sp, #16
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

    switch(axis){
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	2b03      	cmp	r3, #3
 8000640:	f200 80d8 	bhi.w	80007f4 <read_axis+0x1cc>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <read_axis+0x24>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800065d 	.word	0x0800065d
 8000650:	080006df 	.word	0x080006df
 8000654:	0800075d 	.word	0x0800075d
 8000658:	0800065d 	.word	0x0800065d
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b299      	uxth	r1, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2301      	movs	r3, #1
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	4b65      	ldr	r3, [pc, #404]	; (8000804 <read_axis+0x1dc>)
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	2229      	movs	r2, #41	; 0x29
 8000676:	4864      	ldr	r0, [pc, #400]	; (8000808 <read_axis+0x1e0>)
 8000678:	f001 fb74 	bl	8001d64 <HAL_I2C_Mem_Read>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 80a7 	bne.w	80007d6 <read_axis+0x1ae>
		  acc->x_xlr = *read_buffer << 8;
 8000688:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <read_axis+0x1dc>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b21a      	sxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	b299      	uxth	r1, r3
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	2301      	movs	r3, #1
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <read_axis+0x1dc>)
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	2228      	movs	r2, #40	; 0x28
 80006ae:	4856      	ldr	r0, [pc, #344]	; (8000808 <read_axis+0x1e0>)
 80006b0:	f001 fb58 	bl	8001d64 <HAL_I2C_Mem_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	f040 808d 	bne.w	80007da <read_axis+0x1b2>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b4e      	ldr	r3, [pc, #312]	; (8000804 <read_axis+0x1dc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d17f      	bne.n	80007de <read_axis+0x1b6>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	b299      	uxth	r1, r3
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <read_axis+0x1dc>)
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	222b      	movs	r2, #43	; 0x2b
 80006f8:	4843      	ldr	r0, [pc, #268]	; (8000808 <read_axis+0x1e0>)
 80006fa:	f001 fb33 	bl	8001d64 <HAL_I2C_Mem_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d16c      	bne.n	80007e2 <read_axis+0x1ba>
		  acc->y_xlr = *read_buffer << 8;
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <read_axis+0x1dc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b299      	uxth	r1, r3
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <read_axis+0x1dc>)
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	222a      	movs	r2, #42	; 0x2a
 800072e:	4836      	ldr	r0, [pc, #216]	; (8000808 <read_axis+0x1e0>)
 8000730:	f001 fb18 	bl	8001d64 <HAL_I2C_Mem_Read>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d153      	bne.n	80007e6 <read_axis+0x1be>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	b21b      	sxth	r3, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <read_axis+0x1dc>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4413      	add	r3, r2
 800074e:	b29b      	uxth	r3, r3
 8000750:	b21a      	sxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d146      	bne.n	80007ea <read_axis+0x1c2>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	b299      	uxth	r1, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2301      	movs	r3, #1
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <read_axis+0x1dc>)
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2301      	movs	r3, #1
 8000774:	222d      	movs	r2, #45	; 0x2d
 8000776:	4824      	ldr	r0, [pc, #144]	; (8000808 <read_axis+0x1e0>)
 8000778:	f001 faf4 	bl	8001d64 <HAL_I2C_Mem_Read>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d133      	bne.n	80007ee <read_axis+0x1c6>
		  acc->z_xlr = *read_buffer << 8;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <read_axis+0x1dc>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b299      	uxth	r1, r3
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <read_axis+0x1dc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	222c      	movs	r2, #44	; 0x2c
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <read_axis+0x1e0>)
 80007ae:	f001 fad9 	bl	8001d64 <HAL_I2C_Mem_Read>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d11a      	bne.n	80007f2 <read_axis+0x1ca>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	88db      	ldrh	r3, [r3, #6]
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <read_axis+0x1dc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	4413      	add	r3, r2
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	80da      	strh	r2, [r3, #6]
		  break;
 80007d4:	e00e      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007d6:	bf00      	nop
 80007d8:	e00c      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007da:	bf00      	nop
 80007dc:	e00a      	b.n	80007f4 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 80007de:	bf00      	nop
 80007e0:	e008      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007e2:	bf00      	nop
 80007e4:	e006      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007e6:	bf00      	nop
 80007e8:	e004      	b.n	80007f4 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 80007f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80007f4:	b662      	cpsie	i
}
 80007f6:	bf00      	nop
	}

    __enable_irq();

    return status;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d4 	.word	0x200000d4
 8000808:	200000ec 	.word	0x200000ec

0800080c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 8000820:	2300      	movs	r3, #0
 8000822:	733b      	strb	r3, [r7, #12]
	*write_buffer = data;
 8000824:	78bb      	ldrb	r3, [r7, #2]
 8000826:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	b299      	uxth	r1, r3
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	b29a      	uxth	r2, r3
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <accelerometer_write+0x54>)
 8000848:	f001 f978 	bl	8001b3c <HAL_I2C_Mem_Write>
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000850:	b662      	cpsie	i
}
 8000852:	bf00      	nop
	__enable_irq();
	return status;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000ec 	.word	0x200000ec

08000864 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static volatile HAL_StatusTypeDef status;

int _write(int fd, char* ptr, int len) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	b29a      	uxth	r2, r3
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <_write+0x28>)
 800087c:	f003 f8aa 	bl	80039d4 <HAL_UART_Transmit>
  return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000138 	.word	0x20000138

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fbff 	bl	8001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f84e 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 f99e 	bl	8000bdc <MX_GPIO_Init>
  MX_DAC1_Init();
 80008a0:	f000 f88a 	bl	80009b8 <MX_DAC1_Init>
  MX_I2C1_Init();
 80008a4:	f000 f8c2 	bl	8000a2c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80008a8:	f000 f900 	bl	8000aac <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80008ac:	f000 f948 	bl	8000b40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  acc_init(&xl_l);
 80008b0:	481b      	ldr	r0, [pc, #108]	; (8000920 <main+0x90>)
 80008b2:	f7ff fe83 	bl	80005bc <acc_init>
  acc_init(&xl_r);
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <main+0x94>)
 80008b8:	f7ff fe80 	bl	80005bc <acc_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  status = read_axis(&xl_r, ALL_AXIS);
 80008bc:	2103      	movs	r1, #3
 80008be:	4819      	ldr	r0, [pc, #100]	; (8000924 <main+0x94>)
 80008c0:	f7ff feb2 	bl	8000628 <read_axis>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <main+0x98>)
 80008ca:	701a      	strb	r2, [r3, #0]
	  status = read_axis(&xl_l, ALL_AXIS);
 80008cc:	2103      	movs	r1, #3
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <main+0x90>)
 80008d0:	f7ff feaa 	bl	8000628 <read_axis>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <main+0x98>)
 80008da:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	if(xl_r.z_xlr < -0x1000)
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <main+0x94>)
 80008de:	88db      	ldrh	r3, [r3, #6]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80008e6:	da02      	bge.n	80008ee <main+0x5e>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <main+0x9c>)
 80008ea:	f002 fd11 	bl	8003310 <HAL_TIM_Base_Start_IT>
	}
	printf("howdy\r\n");
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <main+0xa0>)
 80008f0:	f003 ffb2 	bl	8004858 <puts>
	printf("%d\r\n",xl_r.x_xlr);
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <main+0x94>)
 80008f6:	885b      	ldrh	r3, [r3, #2]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <main+0xa4>)
 80008fe:	f003 ff45 	bl	800478c <iprintf>
	printf("%d\r\n",xl_r.y_xlr);
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <main+0x94>)
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <main+0xa4>)
 800090c:	f003 ff3e 	bl	800478c <iprintf>
	printf("%d\r\n",xl_r.z_xlr);
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <main+0x94>)
 8000912:	88db      	ldrh	r3, [r3, #6]
 8000914:	b21b      	sxth	r3, r3
 8000916:	4619      	mov	r1, r3
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <main+0xa4>)
 800091a:	f003 ff37 	bl	800478c <iprintf>
	  status = read_axis(&xl_r, ALL_AXIS);
 800091e:	e7cd      	b.n	80008bc <main+0x2c>
 8000920:	20000028 	.word	0x20000028
 8000924:	20000000 	.word	0x20000000
 8000928:	20000214 	.word	0x20000214
 800092c:	200001c8 	.word	0x200001c8
 8000930:	08005544 	.word	0x08005544
 8000934:	0800554c 	.word	0x0800554c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	2238      	movs	r2, #56	; 0x38
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f004 f866 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800095e:	f001 fcb7 	bl	80022d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fd4d 	bl	8002418 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000984:	f000 f962 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800098c:	2301      	movs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 f851 	bl	8002a48 <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009ac:	f000 f94e 	bl	8000c4c <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3750      	adds	r7, #80	; 0x50
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2230      	movs	r2, #48	; 0x30
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 f827 	bl	8004a18 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_DAC1_Init+0x6c>)
 80009cc:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_DAC1_Init+0x70>)
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <MX_DAC1_Init+0x6c>)
 80009d2:	f000 fcd6 	bl	8001382 <HAL_DAC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009dc:	f000 f936 	bl	8000c4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009e0:	2302      	movs	r3, #2
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_DAC1_Init+0x6c>)
 8000a0c:	f000 fcdc 	bl	80013c8 <HAL_DAC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a16:	f000 f919 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000d8 	.word	0x200000d8
 8000a28:	50000800 	.word	0x50000800

08000a2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C1_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C1_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a68:	f000 ffd8 	bl	8001a1c <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a72:	f000 f8eb 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a7a:	f001 fb91 	bl	80021a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 f8e2 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_I2C1_Init+0x74>)
 8000a8c:	f001 fbd3 	bl	8002236 <HAL_I2CEx_ConfigDigitalFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 f8d9 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ec 	.word	0x200000ec
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	00303d5b 	.word	0x00303d5b

08000aac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_LPUART1_UART_Init+0x90>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ab8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000abc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000af0:	f002 ff20 	bl	8003934 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f8a7 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b02:	f003 fcb7 	bl	8004474 <HAL_UARTEx_SetTxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b0c:	f000 f89e 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b14:	f003 fcec 	bl	80044f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b1e:	f000 f895 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b24:	f003 fc6d 	bl	8004402 <HAL_UARTEx_DisableFifoMode>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b2e:	f000 f88d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000138 	.word	0x20000138
 8000b3c:	40008000 	.word	0x40008000

08000b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b68:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b70:	2210      	movs	r2, #16
 8000b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b88:	f002 fb6a 	bl	8003260 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b92:	f000 f85b 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000ba4:	f002 fc1e 	bl	80033e4 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bae:	f000 f84d 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000bc0:	f002 fe36 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bca:	f000 f83f 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001c8 	.word	0x200001c8

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_GPIO_Init+0x68>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c22:	2309      	movs	r3, #9
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4619      	mov	r1, r3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0x6c>)
 8000c36:	f000 fd6f 	bl	8001718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_DAC_MspInit+0x74>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d124      	bne.n	8000d0c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_DAC_MspInit+0x78>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fd06 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	50000800 	.word	0x50000800
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09a      	sub	sp, #104	; 0x68
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2244      	movs	r2, #68	; 0x44
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fe6b 	bl	8004a18 <memset>
  if(hi2c->Instance==I2C1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_I2C_MspInit+0xa8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d136      	bne.n	8000dba <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f891 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d64:	f7ff ff72 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d92:	2304      	movs	r3, #4
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <HAL_I2C_MspInit+0xb0>)
 8000d9e:	f000 fcbb 	bl	8001718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dac:	6593      	str	r3, [r2, #88]	; 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_I2C_MspInit+0xac>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3768      	adds	r7, #104	; 0x68
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09a      	sub	sp, #104	; 0x68
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2244      	movs	r2, #68	; 0x44
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fe11 	bl	8004a18 <memset>
  if(huart->Instance==LPUART1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <HAL_UART_MspInit+0xa8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d136      	bne.n	8000e6e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e00:	2320      	movs	r3, #32
 8000e02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 f837 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f7ff ff18 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_UART_MspInit+0xac>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f000 fc55 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3768      	adds	r7, #104	; 0x68
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40008000 	.word	0x40008000
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e90:	d10b      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x38>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_TIM_Base_MspInit+0x38>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_TIM_Base_MspInit+0x38>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f918 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e00a      	b.n	8000f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f22:	f3af 8000 	nop.w
 8000f26:	4601      	mov	r1, r0
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf0      	blt.n	8000f22 <_read+0x12>
  }

  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_isatty>:

int _isatty(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f003 fd66 	bl	8004ab4 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20008000 	.word	0x20008000
 8001014:	00000400 	.word	0x00000400
 8001018:	20000218 	.word	0x20000218
 800101c:	20000370 	.word	0x20000370

08001020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001046:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f003 fd25 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff fc0b 	bl	8000890 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   r0, =_estack
 800107c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001088:	080055f4 	.word	0x080055f4
  ldr r2, =_sbss
 800108c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001090:	2000036c 	.word	0x2000036c

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>

08001096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f93d 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f80e 	bl	80010c8 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e001      	b.n	80010bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b8:	f7ff fdce 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010bc:	79fb      	ldrb	r3, [r7, #7]

}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_InitTick+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d022      	beq.n	8001122 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_InitTick+0x6c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_InitTick+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f93a 	bl	800136a <HAL_SYSTICK_Config>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10f      	bne.n	800111c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	d809      	bhi.n	8001116 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001102:	2200      	movs	r2, #0
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	f04f 30ff 	mov.w	r0, #4294967295
 800110a:	f000 f914 	bl	8001336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_InitTick+0x70>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e007      	b.n	8001126 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e004      	b.n	8001126 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000058 	.word	0x20000058
 8001134:	20000050 	.word	0x20000050
 8001138:	20000054 	.word	0x20000054

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x1c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x20>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4413      	add	r3, r2
 800114a:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_IncTick+0x1c>)
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	2000021c 	.word	0x2000021c
 800115c:	20000058 	.word	0x20000058

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000021c 	.word	0x2000021c

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d004      	beq.n	800119c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_Delay+0x40>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119c:	bf00      	nop
 800119e:	f7ff ffdf 	bl	8001160 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d8f7      	bhi.n	800119e <HAL_Delay+0x26>
  {
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000058 	.word	0x20000058

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff47 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5e 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff90 	bl	8001274 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5f 	bl	8001220 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb2 	bl	80012dc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e014      	b.n	80013be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fc7b 	bl	8000ca0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_DAC_ConfigChannel+0x18>
 80013dc:	2302      	movs	r3, #2
 80013de:	e192      	b.n	8001706 <HAL_DAC_ConfigChannel+0x33e>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2202      	movs	r2, #2
 80013ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d174      	bne.n	80014de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80013f4:	f7ff feb4 	bl	8001160 <HAL_GetTick>
 80013f8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d134      	bne.n	800146a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001400:	e011      	b.n	8001426 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001402:	f7ff fead 	bl	8001160 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d90a      	bls.n	8001426 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f043 0208 	orr.w	r2, r3, #8
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2203      	movs	r2, #3
 8001420:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e16f      	b.n	8001706 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e6      	bne.n	8001402 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fe9f 	bl	8001178 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
 8001444:	e01e      	b.n	8001484 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001446:	f7ff fe8b 	bl	8001160 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d90a      	bls.n	800146a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f043 0208 	orr.w	r2, r3, #8
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2203      	movs	r2, #3
 8001464:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e14d      	b.n	8001706 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	2b00      	cmp	r3, #0
 8001472:	dbe8      	blt.n	8001446 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fe7f 	bl	8001178 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	ea02 0103 	and.w	r1, r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	21ff      	movs	r1, #255	; 0xff
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	ea02 0103 	and.w	r1, r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d11d      	bne.n	8001522 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4013      	ands	r3, r2
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001516:	4313      	orrs	r3, r2
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2207      	movs	r2, #7
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153a:	4013      	ands	r3, r2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	e00f      	b.n	800156c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d102      	bne.n	800155a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	e008      	b.n	800156c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
 8001566:	e001      	b.n	800156c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	6a3a      	ldr	r2, [r7, #32]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	4013      	ands	r3, r2
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <HAL_DAC_ConfigChannel+0x1d8>
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	e000      	b.n	80015a2 <HAL_DAC_ConfigChannel+0x1da>
 80015a0:	2300      	movs	r3, #0
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	4013      	ands	r3, r2
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <HAL_DAC_ConfigChannel+0x204>
 80015c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ca:	e000      	b.n	80015ce <HAL_DAC_ConfigChannel+0x206>
 80015cc:	2300      	movs	r3, #0
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d114      	bne.n	800160e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80015e4:	f001 fbce 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 80015e8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_DAC_ConfigChannel+0x348>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d904      	bls.n	80015fc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	e00f      	b.n	800161c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_DAC_ConfigChannel+0x34c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d90a      	bls.n	800161a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	e006      	b.n	800161c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	e000      	b.n	800161c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800161a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	4313      	orrs	r3, r2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	4013      	ands	r3, r2
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	4313      	orrs	r3, r2
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	22c0      	movs	r2, #192	; 0xc0
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	ea02 0103 	and.w	r1, r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	09896800 	.word	0x09896800
 8001714:	04c4b400 	.word	0x04c4b400

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001726:	e15a      	b.n	80019de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 814c 	beq.w	80019d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d005      	beq.n	8001758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001754:	2b02      	cmp	r3, #2
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 0201 	and.w	r2, r3, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d017      	beq.n	80017f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d123      	bne.n	800184a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	6939      	ldr	r1, [r7, #16]
 8001846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0203 	and.w	r2, r3, #3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a6 	beq.w	80019d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188c:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_GPIO_Init+0x2e4>)
 800188e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001890:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_GPIO_Init+0x2e4>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6613      	str	r3, [r2, #96]	; 0x60
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_GPIO_Init+0x2e4>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a4:	4a56      	ldr	r2, [pc, #344]	; (8001a00 <HAL_GPIO_Init+0x2e8>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ce:	d01f      	beq.n	8001910 <HAL_GPIO_Init+0x1f8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_GPIO_Init+0x2ec>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d019      	beq.n	800190c <HAL_GPIO_Init+0x1f4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d013      	beq.n	8001908 <HAL_GPIO_Init+0x1f0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_GPIO_Init+0x2f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00d      	beq.n	8001904 <HAL_GPIO_Init+0x1ec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a49      	ldr	r2, [pc, #292]	; (8001a10 <HAL_GPIO_Init+0x2f8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d007      	beq.n	8001900 <HAL_GPIO_Init+0x1e8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_GPIO_Init+0x1e4>
 80018f8:	2305      	movs	r3, #5
 80018fa:	e00a      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 80018fc:	2306      	movs	r3, #6
 80018fe:	e008      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 8001900:	2304      	movs	r3, #4
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 8001904:	2303      	movs	r3, #3
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x1fa>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2e8>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_GPIO_Init+0x300>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001954:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <HAL_GPIO_Init+0x300>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_GPIO_Init+0x300>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197e:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x300>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_GPIO_Init+0x300>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae9d 	bne.w	8001728 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	48001000 	.word	0x48001000
 8001a14:	48001400 	.word	0x48001400
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e081      	b.n	8001b32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff f96a 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	e006      	b.n	8001aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d104      	bne.n	8001ab6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69d9      	ldr	r1, [r3, #28]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1a      	ldr	r2, [r3, #32]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	817b      	strh	r3, [r7, #10]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	813b      	strh	r3, [r7, #8]
 8001b52:	4613      	mov	r3, r2
 8001b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	f040 80f9 	bne.w	8001d56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_I2C_Mem_Write+0x34>
 8001b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0ed      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Mem_Write+0x4e>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0e6      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b92:	f7ff fae5 	bl	8001160 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2319      	movs	r3, #25
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fa9f 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d1      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2221      	movs	r2, #33	; 0x21
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bdc:	88f8      	ldrh	r0, [r7, #6]
 8001bde:	893a      	ldrh	r2, [r7, #8]
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4603      	mov	r3, r0
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f9d3 	bl	8001f98 <I2C_RequestMemoryWrite>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0a9      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d90e      	bls.n	8001c2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	8979      	ldrh	r1, [r7, #10]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fa89 	bl	800213c <I2C_TransferConfig>
 8001c2a:	e00f      	b.n	8001c4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	8979      	ldrh	r1, [r7, #10]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa78 	bl	800213c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fa58 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e07b      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d034      	beq.n	8001d04 <HAL_I2C_Mem_Write+0x1c8>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d130      	bne.n	8001d04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fa1b 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e04d      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2bff      	cmp	r3, #255	; 0xff
 8001cc4:	d90e      	bls.n	8001ce4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	8979      	ldrh	r1, [r7, #10]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fa2d 	bl	800213c <I2C_TransferConfig>
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fa1c 	bl	800213c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d19e      	bne.n	8001c4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fa04 	bl	8002120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e01a      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2220      	movs	r2, #32
 8001d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_I2C_Mem_Write+0x224>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	fe00e800 	.word	0xfe00e800

08001d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	4611      	mov	r1, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	817b      	strh	r3, [r7, #10]
 8001d76:	460b      	mov	r3, r1
 8001d78:	813b      	strh	r3, [r7, #8]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 80fd 	bne.w	8001f86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_I2C_Mem_Read+0x34>
 8001d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0f1      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Mem_Read+0x4e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0ea      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dba:	f7ff f9d1 	bl	8001160 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2319      	movs	r3, #25
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f98b 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0d5      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2222      	movs	r2, #34	; 0x22
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e04:	88f8      	ldrh	r0, [r7, #6]
 8001e06:	893a      	ldrh	r2, [r7, #8]
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4603      	mov	r3, r0
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f913 	bl	8002040 <I2C_RequestMemoryRead>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ad      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2bff      	cmp	r3, #255	; 0xff
 8001e34:	d90e      	bls.n	8001e54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	8979      	ldrh	r1, [r7, #10]
 8001e44:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <HAL_I2C_Mem_Read+0x22c>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f975 	bl	800213c <I2C_TransferConfig>
 8001e52:	e00f      	b.n	8001e74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_I2C_Mem_Read+0x22c>)
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f964 	bl	800213c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f932 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07c      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d034      	beq.n	8001f34 <HAL_I2C_Mem_Read+0x1d0>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d130      	bne.n	8001f34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f903 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04d      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d90e      	bls.n	8001f14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8979      	ldrh	r1, [r7, #10]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f915 	bl	800213c <I2C_TransferConfig>
 8001f12:	e00f      	b.n	8001f34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f904 	bl	800213c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d19a      	bne.n	8001e74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f8ec 	bl	8002120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e01a      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_I2C_Mem_Read+0x230>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	80002400 	.word	0x80002400
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	460b      	mov	r3, r1
 8001fac:	813b      	strh	r3, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8979      	ldrh	r1, [r7, #10]
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <I2C_RequestMemoryWrite+0xa4>)
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f8bb 	bl	800213c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	69b9      	ldr	r1, [r7, #24]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f89b 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02c      	b.n	8002034 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe0:	893b      	ldrh	r3, [r7, #8]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8001fea:	e015      	b.n	8002018 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fec:	893b      	ldrh	r3, [r7, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	69b9      	ldr	r1, [r7, #24]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f881 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e012      	b.n	8002034 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800200e:	893b      	ldrh	r3, [r7, #8]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2200      	movs	r2, #0
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f860 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	80002000 	.word	0x80002000

08002040 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	817b      	strh	r3, [r7, #10]
 8002052:	460b      	mov	r3, r1
 8002054:	813b      	strh	r3, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <I2C_RequestMemoryRead+0xa4>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f868 	bl	800213c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f848 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e02c      	b.n	80020da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002086:	893b      	ldrh	r3, [r7, #8]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
 8002090:	e015      	b.n	80020be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002092:	893b      	ldrh	r3, [r7, #8]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f82e 	bl	8002106 <I2C_WaitOnTXISFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e012      	b.n	80020da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f80d 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	80002000 	.word	0x80002000

080020e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
//        __HAL_UNLOCK(hi2c);
//        return HAL_ERROR;
//      }
//    }
//  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
//
//        return HAL_ERROR;
//      }
//    }
//  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
//      __HAL_UNLOCK(hi2c);
//
//      return HAL_ERROR;
//    }
//  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	4613      	mov	r3, r2
 800214c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002154:	7a7b      	ldrb	r3, [r7, #9]
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800215c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	4313      	orrs	r3, r2
 8002166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800216a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	0d5b      	lsrs	r3, r3, #21
 8002176:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <I2C_TransferConfig+0x60>)
 800217c:	430b      	orrs	r3, r1
 800217e:	43db      	mvns	r3, r3
 8002180:	ea02 0103 	and.w	r1, r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	03ff63ff 	.word	0x03ff63ff

080021a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d138      	bne.n	8002228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e032      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2224      	movs	r2, #36	; 0x24
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b20      	cmp	r3, #32
 800224a:	d139      	bne.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002256:	2302      	movs	r3, #2
 8002258:	e033      	b.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2224      	movs	r2, #36	; 0x24
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d141      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022de:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d131      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f2:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002304:	4a41      	ldr	r2, [pc, #260]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2232      	movs	r2, #50	; 0x32
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4a3f      	ldr	r2, [pc, #252]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002322:	e002      	b.n	800232a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3b01      	subs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d102      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d158      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e057      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002360:	e04d      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d141      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d131      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2232      	movs	r2, #50	; 0x32
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ae:	e002      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d102      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f2      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d112      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e011      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023ec:	e007      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40007000 	.word	0x40007000
 8002410:	20000050 	.word	0x20000050
 8002414:	431bde83 	.word	0x431bde83

08002418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e306      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d002      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e2e1      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a84      	ldr	r2, [pc, #528]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7e      	ldr	r2, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7b      	ldr	r2, [pc, #492]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a77      	ldr	r2, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b75      	ldr	r3, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a74      	ldr	r2, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe46 	bl	8001160 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fe42 	bl	8001160 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2a6      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fe32 	bl	8001160 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fe2e 	bl	8001160 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e292      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d075      	beq.n	800261a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d102      	bne.n	800254e <HAL_RCC_OscConfig+0x136>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d002      	beq.n	8002554 <HAL_RCC_OscConfig+0x13c>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11f      	bne.n	8002594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x154>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e265      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4946      	ldr	r1, [pc, #280]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fd9f 	bl	80010c8 <HAL_InitTick>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e251      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fdda 	bl	8001160 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7fe fdd6 	bl	8001160 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e23a      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	492d      	ldr	r1, [pc, #180]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
 80025e2:	e01a      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fdb6 	bl	8001160 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe fdb2 	bl	8001160 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e216      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1e0>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d041      	beq.n	80026aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fd8f 	bl	8001160 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe fd8b 	bl	8001160 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1ef      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ef      	beq.n	8002646 <HAL_RCC_OscConfig+0x22e>
 8002666:	e020      	b.n	80026aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe fd72 	bl	8001160 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267e:	e00d      	b.n	800269c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fd6e 	bl	8001160 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d906      	bls.n	800269c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1d2      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ea      	bne.n	8002680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a6 	beq.w	8002804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x2b4>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x2b6>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7fe fd2b 	bl	8001160 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe fd27 	bl	8001160 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e18b      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x4bc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_RCC_OscConfig+0x32e>
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002744:	e024      	b.n	8002790 <HAL_RCC_OscConfig+0x378>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d110      	bne.n	8002770 <HAL_RCC_OscConfig+0x358>
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x378>
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	4a56      	ldr	r2, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fce2 	bl	8001160 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fcde 	bl	8001160 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e140      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ed      	beq.n	80027a0 <HAL_RCC_OscConfig+0x388>
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fccb 	bl	8001160 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fcc7 	bl	8001160 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e129      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ed      	bne.n	80027ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fc9a 	bl	8001160 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002830:	f7fe fc96 	bl	8001160 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0fa      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCC_OscConfig+0x418>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fc7d 	bl	8001160 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286a:	f7fe fc79 	bl	8001160 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0dd      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 800287e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ef      	bne.n	800286a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80d1 	beq.w	8002a36 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b0c      	cmp	r3, #12
 800289e:	f000 808b 	beq.w	80029b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d15e      	bne.n	8002968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fc53 	bl	8001160 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	e00c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fc4f 	bl	8001160 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d905      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0b3      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ec      	bne.n	80028be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <HAL_RCC_OscConfig+0x62c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a11      	ldr	r1, [r2, #32]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291e:	06d2      	lsls	r2, r2, #27
 8002920:	430a      	orrs	r2, r1
 8002922:	4947      	ldr	r1, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fc0e 	bl	8001160 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fc0a 	bl	8001160 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e06e      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x530>
 8002966:	e066      	b.n	8002a36 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 8002986:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fbe6 	bl	8001160 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fbe2 	bl	8001160 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e046      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x580>
 80029b6:	e03e      	b.n	8002a36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e039      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x628>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d12c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d123      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d113      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	019f800c 	.word	0x019f800c

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e11e      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b91      	ldr	r3, [pc, #580]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	498c      	ldr	r1, [pc, #560]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b8a      	ldr	r3, [pc, #552]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e106      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d073      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d129      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa4:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0f4      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ab4:	f000 f99e 	bl	8002df4 <RCC_GetSysClockFreqFromPLLSource>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCC_ClockConfig+0x268>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d93f      	bls.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d033      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d12f      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	4a70      	ldr	r2, [pc, #448]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e024      	b.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0c6      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b66      	ldr	r3, [pc, #408]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0be      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b20:	f000 f8ce 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4a61      	ldr	r2, [pc, #388]	; (8002cb0 <HAL_RCC_ClockConfig+0x268>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d909      	bls.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4957      	ldr	r1, [pc, #348]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe fb04 	bl	8001160 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe fb00 	bl	8001160 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e095      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a42      	ldr	r2, [pc, #264]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ba6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bbc:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4936      	ldr	r1, [pc, #216]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a32      	ldr	r2, [pc, #200]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d21d      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 020f 	bic.w	r2, r3, #15
 8002c00:	4929      	ldr	r1, [pc, #164]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c08:	f7fe faaa 	bl	8001160 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe faa6 	bl	8001160 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e03b      	b.n	8002c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1ed      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4917      	ldr	r1, [pc, #92]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490f      	ldr	r1, [pc, #60]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c72:	f000 f825 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_ClockConfig+0x264>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <HAL_RCC_ClockConfig+0x26c>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x270>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fa16 	bl	80010c8 <HAL_InitTick>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	04c4b400 	.word	0x04c4b400
 8002cb4:	08005570 	.word	0x08005570
 8002cb8:	20000050 	.word	0x20000050
 8002cbc:	20000054 	.word	0x20000054

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	e047      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e03e      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d136      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1e:	68d2      	ldr	r2, [r2, #12]
 8002d20:	0a12      	lsrs	r2, r2, #8
 8002d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
      break;
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	0a12      	lsrs	r2, r2, #8
 8002d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
      break;
 8002d46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e001      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d68:	693b      	ldr	r3, [r7, #16]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	007a1200 	.word	0x007a1200

08002d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000050 	.word	0x20000050

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da0:	f7ff fff0 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08005580 	.word	0x08005580

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dcc:	f7ff ffda 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0adb      	lsrs	r3, r3, #11
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08005580 	.word	0x08005580

08002df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d10c      	bne.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e22:	68d2      	ldr	r2, [r2, #12]
 8002e24:	0a12      	lsrs	r2, r2, #8
 8002e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
    break;
 8002e30:	e00c      	b.n	8002e4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	0a12      	lsrs	r2, r2, #8
 8002e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    break;
 8002e4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0e5b      	lsrs	r3, r3, #25
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40021000 	.word	0x40021000
 8002e78:	007a1200 	.word	0x007a1200
 8002e7c:	00f42400 	.word	0x00f42400

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8098 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe f943 	bl	8001160 <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002edc:	e009      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe f93f 	bl	8001160 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d902      	bls.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	74fb      	strb	r3, [r7, #19]
        break;
 8002ef0:	e005      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ef      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d159      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01e      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f8ff 	bl	8001160 <HAL_GetTick>
 8002f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f64:	e00b      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe f8fb 	bl	8001160 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d902      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ec      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fa8:	e008      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	74bb      	strb	r3, [r7, #18]
 8002fae:	e005      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fbc:	7c7b      	ldrb	r3, [r7, #17]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4ba6      	ldr	r3, [pc, #664]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4aa5      	ldr	r2, [pc, #660]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f023 0203 	bic.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	499c      	ldr	r1, [pc, #624]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ffc:	4b97      	ldr	r3, [pc, #604]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 020c 	bic.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4994      	ldr	r1, [pc, #592]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301e:	4b8f      	ldr	r3, [pc, #572]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	498b      	ldr	r1, [pc, #556]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003040:	4b86      	ldr	r3, [pc, #536]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	4983      	ldr	r1, [pc, #524]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003062:	4b7e      	ldr	r3, [pc, #504]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	497a      	ldr	r1, [pc, #488]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4972      	ldr	r1, [pc, #456]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4969      	ldr	r1, [pc, #420]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4961      	ldr	r1, [pc, #388]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ea:	4b5c      	ldr	r3, [pc, #368]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4958      	ldr	r1, [pc, #352]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4950      	ldr	r1, [pc, #320]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312a:	d105      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003136:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003144:	4b45      	ldr	r3, [pc, #276]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4942      	ldr	r1, [pc, #264]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003162:	d105      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800316e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800319a:	d105      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a2e      	ldr	r2, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	4926      	ldr	r1, [pc, #152]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4918      	ldr	r1, [pc, #96]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003250:	7cbb      	ldrb	r3, [r7, #18]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e049      	b.n	8003306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fdfa 	bl	8000e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 f99a 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04a      	b.n	80033be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_TIM_Base_Start_IT+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d013      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x6c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d115      	bne.n	80033a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d015      	beq.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d011      	beq.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e008      	b.n	80033ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	00010007 	.word	0x00010007

080033e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_ConfigClockSource+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0de      	b.n	80035be <HAL_TIM_ConfigClockSource+0x1da>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800341e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f000 80a9 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 8003440:	4a61      	ldr	r2, [pc, #388]	; (80035c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f200 80ae 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003448:	4a60      	ldr	r2, [pc, #384]	; (80035cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 80a1 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 8003450:	4a5e      	ldr	r2, [pc, #376]	; (80035cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f200 80a6 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003458:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800345a:	4293      	cmp	r3, r2
 800345c:	f000 8099 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 8003460:	4a5b      	ldr	r2, [pc, #364]	; (80035d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f200 809e 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003468:	4a5a      	ldr	r2, [pc, #360]	; (80035d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f000 8091 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	f200 8096 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800347c:	f000 8089 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 8003480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003484:	f200 808e 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d03e      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x128>
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	f200 8087 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	f000 8086 	beq.w	80035aa <HAL_TIM_ConfigClockSource+0x1c6>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d87f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034a4:	2b70      	cmp	r3, #112	; 0x70
 80034a6:	d01a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0xfa>
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d87b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d050      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x16e>
 80034b0:	2b60      	cmp	r3, #96	; 0x60
 80034b2:	d877      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034b4:	2b50      	cmp	r3, #80	; 0x50
 80034b6:	d03c      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x14e>
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d873      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d058      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x18e>
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d86f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d064      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d86b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d060      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d867      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d05a      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1ae>
 80034dc:	e062      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f000 f97f 	bl	80037f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
      break;
 800350a:	e04f      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f000 f968 	bl	80037f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352e:	609a      	str	r2, [r3, #8]
      break;
 8003530:	e03c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	461a      	mov	r2, r3
 8003540:	f000 f8da 	bl	80036f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2150      	movs	r1, #80	; 0x50
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f933 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 8003550:	e02c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	461a      	mov	r2, r3
 8003560:	f000 f8f9 	bl	8003756 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2160      	movs	r1, #96	; 0x60
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f923 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 8003570:	e01c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	461a      	mov	r2, r3
 8003580:	f000 f8ba 	bl	80036f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f913 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 8003590:	e00c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 f90a 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 80035a2:	e003      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e000      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80035aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100070 	.word	0x00100070
 80035cc:	00100040 	.word	0x00100040
 80035d0:	00100030 	.word	0x00100030
 80035d4:	00100020 	.word	0x00100020

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <TIM_Base_SetConfig+0x104>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00f      	beq.n	8003610 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d00b      	beq.n	8003610 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a39      	ldr	r2, [pc, #228]	; (80036e0 <TIM_Base_SetConfig+0x108>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <TIM_Base_SetConfig+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <TIM_Base_SetConfig+0x10c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0x38>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a37      	ldr	r2, [pc, #220]	; (80036e8 <TIM_Base_SetConfig+0x110>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d108      	bne.n	8003622 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <TIM_Base_SetConfig+0x104>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01b      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d017      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <TIM_Base_SetConfig+0x108>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <TIM_Base_SetConfig+0x10c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <TIM_Base_SetConfig+0x110>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <TIM_Base_SetConfig+0x114>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <TIM_Base_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <TIM_Base_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <TIM_Base_SetConfig+0x104>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00f      	beq.n	80036c0 <TIM_Base_SetConfig+0xe8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <TIM_Base_SetConfig+0x110>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_Base_SetConfig+0xe8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <TIM_Base_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_Base_SetConfig+0xe8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <TIM_Base_SetConfig+0x118>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0xe8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <TIM_Base_SetConfig+0x11c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	615a      	str	r2, [r3, #20]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800

080036f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 030a 	bic.w	r3, r3, #10
 8003734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0210 	bic.w	r2, r3, #16
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	031b      	lsls	r3, r3, #12
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f043 0307 	orr.w	r3, r3, #7
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e065      	b.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d108      	bne.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d013      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40014000 	.word	0x40014000

08003934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e042      	b.n	80039cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fd fa39 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8c2 	bl	8003b00 <UART_SetConfig>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e022      	b.n	80039cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fb82 	bl	8004098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fc09 	bl	80041dc <UART_CheckIdleState>
 80039ca:	4603      	mov	r3, r0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 8083 	bne.w	8003af6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_UART_Transmit+0x28>
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e07b      	b.n	8003af8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Transmit+0x3a>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e074      	b.n	8003af8 <HAL_UART_Transmit+0x124>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fb9b 	bl	8001160 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x84>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a68:	e02c      	b.n	8003ac4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fbfc 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e039      	b.n	8003af8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1cc      	bne.n	8003a6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fbc9 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e006      	b.n	8003af8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b08c      	sub	sp, #48	; 0x30
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4bab      	ldr	r3, [pc, #684]	; (8003ddc <UART_SetConfig+0x2dc>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4aa0      	ldr	r2, [pc, #640]	; (8003de0 <UART_SetConfig+0x2e0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f023 010f 	bic.w	r1, r3, #15
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a91      	ldr	r2, [pc, #580]	; (8003de4 <UART_SetConfig+0x2e4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d125      	bne.n	8003bf0 <UART_SetConfig+0xf0>
 8003ba4:	4b90      	ldr	r3, [pc, #576]	; (8003de8 <UART_SetConfig+0x2e8>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d81a      	bhi.n	8003be8 <UART_SetConfig+0xe8>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0xb8>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003be1 	.word	0x08003be1
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bce:	e0d6      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd6:	e0d2      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bde:	e0ce      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e0ca      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e0c6      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7d      	ldr	r2, [pc, #500]	; (8003dec <UART_SetConfig+0x2ec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d138      	bne.n	8003c6c <UART_SetConfig+0x16c>
 8003bfa:	4b7b      	ldr	r3, [pc, #492]	; (8003de8 <UART_SetConfig+0x2e8>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d82d      	bhi.n	8003c64 <UART_SetConfig+0x164>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x110>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c65 	.word	0x08003c65
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c65 	.word	0x08003c65
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c4d 	.word	0x08003c4d
 8003c34:	08003c65 	.word	0x08003c65
 8003c38:	08003c65 	.word	0x08003c65
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e098      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c52:	e094      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e090      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e08c      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e088      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5f      	ldr	r2, [pc, #380]	; (8003df0 <UART_SetConfig+0x2f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d125      	bne.n	8003cc2 <UART_SetConfig+0x1c2>
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <UART_SetConfig+0x2e8>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d016      	beq.n	8003cb2 <UART_SetConfig+0x1b2>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d818      	bhi.n	8003cba <UART_SetConfig+0x1ba>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d00a      	beq.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d814      	bhi.n	8003cba <UART_SetConfig+0x1ba>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <UART_SetConfig+0x19a>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d008      	beq.n	8003caa <UART_SetConfig+0x1aa>
 8003c98:	e00f      	b.n	8003cba <UART_SetConfig+0x1ba>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca0:	e06d      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca8:	e069      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003caa:	2304      	movs	r3, #4
 8003cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb0:	e065      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb8:	e061      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc0:	e05d      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4b      	ldr	r2, [pc, #300]	; (8003df4 <UART_SetConfig+0x2f4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d125      	bne.n	8003d18 <UART_SetConfig+0x218>
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <UART_SetConfig+0x2e8>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd8:	d016      	beq.n	8003d08 <UART_SetConfig+0x208>
 8003cda:	2bc0      	cmp	r3, #192	; 0xc0
 8003cdc:	d818      	bhi.n	8003d10 <UART_SetConfig+0x210>
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d00a      	beq.n	8003cf8 <UART_SetConfig+0x1f8>
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d814      	bhi.n	8003d10 <UART_SetConfig+0x210>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0x1f0>
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d008      	beq.n	8003d00 <UART_SetConfig+0x200>
 8003cee:	e00f      	b.n	8003d10 <UART_SetConfig+0x210>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	e042      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e03e      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d00:	2304      	movs	r3, #4
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d06:	e03a      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e036      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e032      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <UART_SetConfig+0x2e0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12a      	bne.n	8003d78 <UART_SetConfig+0x278>
 8003d22:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <UART_SetConfig+0x2e8>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d30:	d01a      	beq.n	8003d68 <UART_SetConfig+0x268>
 8003d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d36:	d81b      	bhi.n	8003d70 <UART_SetConfig+0x270>
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d00c      	beq.n	8003d58 <UART_SetConfig+0x258>
 8003d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d42:	d815      	bhi.n	8003d70 <UART_SetConfig+0x270>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <UART_SetConfig+0x250>
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4c:	d008      	beq.n	8003d60 <UART_SetConfig+0x260>
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x270>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e012      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	e00e      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d66:	e00a      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	e006      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d76:	e002      	b.n	8003d7e <UART_SetConfig+0x27e>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <UART_SetConfig+0x2e0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	f040 80a8 	bne.w	8003eda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d834      	bhi.n	8003dfc <UART_SetConfig+0x2fc>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x298>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dfd 	.word	0x08003dfd
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003dcb 	.word	0x08003dcb
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003dfd 	.word	0x08003dfd
 8003db4:	08003dfd 	.word	0x08003dfd
 8003db8:	08003dd3 	.word	0x08003dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe ffee 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8003dc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dc2:	e021      	b.n	8003e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <UART_SetConfig+0x2f8>)
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dc8:	e01e      	b.n	8003e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe ff79 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dd0:	e01a      	b.n	8003e08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd8:	e016      	b.n	8003e08 <UART_SetConfig+0x308>
 8003dda:	bf00      	nop
 8003ddc:	cfff69f3 	.word	0xcfff69f3
 8003de0:	40008000 	.word	0x40008000
 8003de4:	40013800 	.word	0x40013800
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40004400 	.word	0x40004400
 8003df0:	40004800 	.word	0x40004800
 8003df4:	40004c00 	.word	0x40004c00
 8003df8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 812a 	beq.w	8004064 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	4a9e      	ldr	r2, [pc, #632]	; (8004090 <UART_SetConfig+0x590>)
 8003e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d305      	bcc.n	8003e40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d903      	bls.n	8003e48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e46:	e10d      	b.n	8004064 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	4a8e      	ldr	r2, [pc, #568]	; (8004090 <UART_SetConfig+0x590>)
 8003e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e6a:	f7fc fa29 	bl	80002c0 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	020b      	lsls	r3, r1, #8
 8003e80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e84:	0202      	lsls	r2, r0, #8
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	6849      	ldr	r1, [r1, #4]
 8003e8a:	0849      	lsrs	r1, r1, #1
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	4605      	mov	r5, r0
 8003e92:	eb12 0804 	adds.w	r8, r2, r4
 8003e96:	eb43 0905 	adc.w	r9, r3, r5
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	4693      	mov	fp, r2
 8003ea4:	4652      	mov	r2, sl
 8003ea6:	465b      	mov	r3, fp
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	4649      	mov	r1, r9
 8003eac:	f7fc fa08 	bl	80002c0 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d308      	bcc.n	8003ed2 <UART_SetConfig+0x3d2>
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec6:	d204      	bcs.n	8003ed2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e0c8      	b.n	8004064 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ed8:	e0c4      	b.n	8004064 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee2:	d167      	bne.n	8003fb4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d828      	bhi.n	8003f3e <UART_SetConfig+0x43e>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x3f4>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe ff40 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8003f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe ff52 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b5a      	ldr	r3, [pc, #360]	; (8004094 <UART_SetConfig+0x594>)
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fec7 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8089 	beq.w	8004064 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	4a4e      	ldr	r2, [pc, #312]	; (8004090 <UART_SetConfig+0x590>)
 8003f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f64:	005a      	lsls	r2, r3, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	441a      	add	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	d916      	bls.n	8003fac <UART_SetConfig+0x4ac>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d212      	bcs.n	8003fac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f023 030f 	bic.w	r3, r3, #15
 8003f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	8bfa      	ldrh	r2, [r7, #30]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	e05b      	b.n	8004064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fb2:	e057      	b.n	8004064 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d828      	bhi.n	800400e <UART_SetConfig+0x50e>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x4c4>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	0800400f 	.word	0x0800400f
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	0800400f 	.word	0x0800400f
 8003fdc:	0800400f 	.word	0x0800400f
 8003fe0:	0800400f 	.word	0x0800400f
 8003fe4:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fed8 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fee:	e014      	b.n	800401a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe feea 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff6:	e010      	b.n	800401a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <UART_SetConfig+0x594>)
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ffc:	e00d      	b.n	800401a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe fe5f 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004004:	e009      	b.n	800401a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800400c:	e005      	b.n	800401a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004018:	bf00      	nop
    }

    if (pclk != 0U)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d021      	beq.n	8004064 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <UART_SetConfig+0x590>)
 8004026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402a:	461a      	mov	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d909      	bls.n	800405e <UART_SetConfig+0x55e>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d205      	bcs.n	800405e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	b29a      	uxth	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e002      	b.n	8004064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2201      	movs	r2, #1
 8004068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2201      	movs	r2, #1
 8004070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004080:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004084:	4618      	mov	r0, r3
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	08005588 	.word	0x08005588
 8004094:	00f42400 	.word	0x00f42400

08004098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004196:	d10a      	bne.n	80041ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ec:	f7fc ffb8 	bl	8001160 <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10e      	bne.n	800421e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f82f 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e025      	b.n	800426a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d10e      	bne.n	800424a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f819 	bl	8004272 <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00f      	b.n	800426a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b09c      	sub	sp, #112	; 0x70
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	e0a9      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	f000 80a5 	beq.w	80043d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fc ff67 	bl	8001160 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800429e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d140      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e6      	bne.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	663b      	str	r3, [r7, #96]	; 0x60
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e069      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d051      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d149      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800434c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
 800436e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	613b      	str	r3, [r7, #16]
   return(result);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	66bb      	str	r3, [r7, #104]	; 0x68
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043a0:	623a      	str	r2, [r7, #32]
 80043a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e010      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f43f af46 	beq.w	8004284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3770      	adds	r7, #112	; 0x70
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UARTEx_DisableFifoMode+0x16>
 8004414:	2302      	movs	r3, #2
 8004416:	e027      	b.n	8004468 <HAL_UARTEx_DisableFifoMode+0x66>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004446:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e02d      	b.n	80044e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f84f 	bl	800456c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e02d      	b.n	8004564 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f811 	bl	800456c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800458c:	e031      	b.n	80045f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800458e:	2308      	movs	r3, #8
 8004590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004592:	2308      	movs	r3, #8
 8004594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	0e5b      	lsrs	r3, r3, #25
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	0f5b      	lsrs	r3, r3, #29
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045b6:	7bbb      	ldrb	r3, [r7, #14]
 80045b8:	7b3a      	ldrb	r2, [r7, #12]
 80045ba:	4911      	ldr	r1, [pc, #68]	; (8004600 <UARTEx_SetNbDataToProcess+0x94>)
 80045bc:	5c8a      	ldrb	r2, [r1, r2]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045c2:	7b3a      	ldrb	r2, [r7, #12]
 80045c4:	490f      	ldr	r1, [pc, #60]	; (8004604 <UARTEx_SetNbDataToProcess+0x98>)
 80045c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	7b7a      	ldrb	r2, [r7, #13]
 80045d8:	4909      	ldr	r1, [pc, #36]	; (8004600 <UARTEx_SetNbDataToProcess+0x94>)
 80045da:	5c8a      	ldrb	r2, [r1, r2]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045e0:	7b7a      	ldrb	r2, [r7, #13]
 80045e2:	4908      	ldr	r1, [pc, #32]	; (8004604 <UARTEx_SetNbDataToProcess+0x98>)
 80045e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	080055a0 	.word	0x080055a0
 8004604:	080055a8 	.word	0x080055a8

08004608 <std>:
 8004608:	2300      	movs	r3, #0
 800460a:	b510      	push	{r4, lr}
 800460c:	4604      	mov	r4, r0
 800460e:	e9c0 3300 	strd	r3, r3, [r0]
 8004612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004616:	6083      	str	r3, [r0, #8]
 8004618:	8181      	strh	r1, [r0, #12]
 800461a:	6643      	str	r3, [r0, #100]	; 0x64
 800461c:	81c2      	strh	r2, [r0, #14]
 800461e:	6183      	str	r3, [r0, #24]
 8004620:	4619      	mov	r1, r3
 8004622:	2208      	movs	r2, #8
 8004624:	305c      	adds	r0, #92	; 0x5c
 8004626:	f000 f9f7 	bl	8004a18 <memset>
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <std+0x58>)
 800462c:	6263      	str	r3, [r4, #36]	; 0x24
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <std+0x5c>)
 8004630:	62a3      	str	r3, [r4, #40]	; 0x28
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <std+0x60>)
 8004634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <std+0x64>)
 8004638:	6323      	str	r3, [r4, #48]	; 0x30
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <std+0x68>)
 800463c:	6224      	str	r4, [r4, #32]
 800463e:	429c      	cmp	r4, r3
 8004640:	d006      	beq.n	8004650 <std+0x48>
 8004642:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004646:	4294      	cmp	r4, r2
 8004648:	d002      	beq.n	8004650 <std+0x48>
 800464a:	33d0      	adds	r3, #208	; 0xd0
 800464c:	429c      	cmp	r4, r3
 800464e:	d105      	bne.n	800465c <std+0x54>
 8004650:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004658:	f000 ba56 	b.w	8004b08 <__retarget_lock_init_recursive>
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	08004869 	.word	0x08004869
 8004664:	0800488b 	.word	0x0800488b
 8004668:	080048c3 	.word	0x080048c3
 800466c:	080048e7 	.word	0x080048e7
 8004670:	20000220 	.word	0x20000220

08004674 <stdio_exit_handler>:
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <stdio_exit_handler+0xc>)
 8004676:	4903      	ldr	r1, [pc, #12]	; (8004684 <stdio_exit_handler+0x10>)
 8004678:	4803      	ldr	r0, [pc, #12]	; (8004688 <stdio_exit_handler+0x14>)
 800467a:	f000 b869 	b.w	8004750 <_fwalk_sglue>
 800467e:	bf00      	nop
 8004680:	2000005c 	.word	0x2000005c
 8004684:	080053b5 	.word	0x080053b5
 8004688:	20000068 	.word	0x20000068

0800468c <cleanup_stdio>:
 800468c:	6841      	ldr	r1, [r0, #4]
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <cleanup_stdio+0x34>)
 8004690:	4299      	cmp	r1, r3
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	d001      	beq.n	800469c <cleanup_stdio+0x10>
 8004698:	f000 fe8c 	bl	80053b4 <_fflush_r>
 800469c:	68a1      	ldr	r1, [r4, #8]
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <cleanup_stdio+0x38>)
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d002      	beq.n	80046aa <cleanup_stdio+0x1e>
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fe85 	bl	80053b4 <_fflush_r>
 80046aa:	68e1      	ldr	r1, [r4, #12]
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <cleanup_stdio+0x3c>)
 80046ae:	4299      	cmp	r1, r3
 80046b0:	d004      	beq.n	80046bc <cleanup_stdio+0x30>
 80046b2:	4620      	mov	r0, r4
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b8:	f000 be7c 	b.w	80053b4 <_fflush_r>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	bf00      	nop
 80046c0:	20000220 	.word	0x20000220
 80046c4:	20000288 	.word	0x20000288
 80046c8:	200002f0 	.word	0x200002f0

080046cc <global_stdio_init.part.0>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <global_stdio_init.part.0+0x30>)
 80046d0:	4c0b      	ldr	r4, [pc, #44]	; (8004700 <global_stdio_init.part.0+0x34>)
 80046d2:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <global_stdio_init.part.0+0x38>)
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	4620      	mov	r0, r4
 80046d8:	2200      	movs	r2, #0
 80046da:	2104      	movs	r1, #4
 80046dc:	f7ff ff94 	bl	8004608 <std>
 80046e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046e4:	2201      	movs	r2, #1
 80046e6:	2109      	movs	r1, #9
 80046e8:	f7ff ff8e 	bl	8004608 <std>
 80046ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046f0:	2202      	movs	r2, #2
 80046f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f6:	2112      	movs	r1, #18
 80046f8:	f7ff bf86 	b.w	8004608 <std>
 80046fc:	20000358 	.word	0x20000358
 8004700:	20000220 	.word	0x20000220
 8004704:	08004675 	.word	0x08004675

08004708 <__sfp_lock_acquire>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sfp_lock_acquire+0x8>)
 800470a:	f000 b9fe 	b.w	8004b0a <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	20000361 	.word	0x20000361

08004714 <__sfp_lock_release>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__sfp_lock_release+0x8>)
 8004716:	f000 b9f9 	b.w	8004b0c <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	20000361 	.word	0x20000361

08004720 <__sinit>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	f7ff fff0 	bl	8004708 <__sfp_lock_acquire>
 8004728:	6a23      	ldr	r3, [r4, #32]
 800472a:	b11b      	cbz	r3, 8004734 <__sinit+0x14>
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004730:	f7ff bff0 	b.w	8004714 <__sfp_lock_release>
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <__sinit+0x28>)
 8004736:	6223      	str	r3, [r4, #32]
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__sinit+0x2c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f5      	bne.n	800472c <__sinit+0xc>
 8004740:	f7ff ffc4 	bl	80046cc <global_stdio_init.part.0>
 8004744:	e7f2      	b.n	800472c <__sinit+0xc>
 8004746:	bf00      	nop
 8004748:	0800468d 	.word	0x0800468d
 800474c:	20000358 	.word	0x20000358

08004750 <_fwalk_sglue>:
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	4607      	mov	r7, r0
 8004756:	4688      	mov	r8, r1
 8004758:	4614      	mov	r4, r2
 800475a:	2600      	movs	r6, #0
 800475c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004760:	f1b9 0901 	subs.w	r9, r9, #1
 8004764:	d505      	bpl.n	8004772 <_fwalk_sglue+0x22>
 8004766:	6824      	ldr	r4, [r4, #0]
 8004768:	2c00      	cmp	r4, #0
 800476a:	d1f7      	bne.n	800475c <_fwalk_sglue+0xc>
 800476c:	4630      	mov	r0, r6
 800476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d907      	bls.n	8004788 <_fwalk_sglue+0x38>
 8004778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800477c:	3301      	adds	r3, #1
 800477e:	d003      	beq.n	8004788 <_fwalk_sglue+0x38>
 8004780:	4629      	mov	r1, r5
 8004782:	4638      	mov	r0, r7
 8004784:	47c0      	blx	r8
 8004786:	4306      	orrs	r6, r0
 8004788:	3568      	adds	r5, #104	; 0x68
 800478a:	e7e9      	b.n	8004760 <_fwalk_sglue+0x10>

0800478c <iprintf>:
 800478c:	b40f      	push	{r0, r1, r2, r3}
 800478e:	b507      	push	{r0, r1, r2, lr}
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <iprintf+0x20>)
 8004792:	ab04      	add	r3, sp, #16
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	f853 2b04 	ldr.w	r2, [r3], #4
 800479a:	6881      	ldr	r1, [r0, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	f000 fad9 	bl	8004d54 <_vfiprintf_r>
 80047a2:	b003      	add	sp, #12
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b004      	add	sp, #16
 80047aa:	4770      	bx	lr
 80047ac:	200000b4 	.word	0x200000b4

080047b0 <_puts_r>:
 80047b0:	6a03      	ldr	r3, [r0, #32]
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	6884      	ldr	r4, [r0, #8]
 80047b6:	4605      	mov	r5, r0
 80047b8:	460e      	mov	r6, r1
 80047ba:	b90b      	cbnz	r3, 80047c0 <_puts_r+0x10>
 80047bc:	f7ff ffb0 	bl	8004720 <__sinit>
 80047c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x22>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0598      	lsls	r0, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x22>
 80047cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ce:	f000 f99c 	bl	8004b0a <__retarget_lock_acquire_recursive>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0719      	lsls	r1, r3, #28
 80047d6:	d513      	bpl.n	8004800 <_puts_r+0x50>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b18b      	cbz	r3, 8004800 <_puts_r+0x50>
 80047dc:	3e01      	subs	r6, #1
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	b9e9      	cbnz	r1, 8004826 <_puts_r+0x76>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da2e      	bge.n	800484c <_puts_r+0x9c>
 80047ee:	4622      	mov	r2, r4
 80047f0:	210a      	movs	r1, #10
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f87b 	bl	80048ee <__swbuf_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d007      	beq.n	800480c <_puts_r+0x5c>
 80047fc:	250a      	movs	r5, #10
 80047fe:	e007      	b.n	8004810 <_puts_r+0x60>
 8004800:	4621      	mov	r1, r4
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f8b0 	bl	8004968 <__swsetup_r>
 8004808:	2800      	cmp	r0, #0
 800480a:	d0e7      	beq.n	80047dc <_puts_r+0x2c>
 800480c:	f04f 35ff 	mov.w	r5, #4294967295
 8004810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004812:	07da      	lsls	r2, r3, #31
 8004814:	d405      	bmi.n	8004822 <_puts_r+0x72>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	059b      	lsls	r3, r3, #22
 800481a:	d402      	bmi.n	8004822 <_puts_r+0x72>
 800481c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481e:	f000 f975 	bl	8004b0c <__retarget_lock_release_recursive>
 8004822:	4628      	mov	r0, r5
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	2b00      	cmp	r3, #0
 8004828:	da04      	bge.n	8004834 <_puts_r+0x84>
 800482a:	69a2      	ldr	r2, [r4, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	dc06      	bgt.n	800483e <_puts_r+0x8e>
 8004830:	290a      	cmp	r1, #10
 8004832:	d004      	beq.n	800483e <_puts_r+0x8e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	7019      	strb	r1, [r3, #0]
 800483c:	e7cf      	b.n	80047de <_puts_r+0x2e>
 800483e:	4622      	mov	r2, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f854 	bl	80048ee <__swbuf_r>
 8004846:	3001      	adds	r0, #1
 8004848:	d1c9      	bne.n	80047de <_puts_r+0x2e>
 800484a:	e7df      	b.n	800480c <_puts_r+0x5c>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	250a      	movs	r5, #10
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	701d      	strb	r5, [r3, #0]
 8004856:	e7db      	b.n	8004810 <_puts_r+0x60>

08004858 <puts>:
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <puts+0xc>)
 800485a:	4601      	mov	r1, r0
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f7ff bfa7 	b.w	80047b0 <_puts_r>
 8004862:	bf00      	nop
 8004864:	200000b4 	.word	0x200000b4

08004868 <__sread>:
 8004868:	b510      	push	{r4, lr}
 800486a:	460c      	mov	r4, r1
 800486c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004870:	f000 f8fc 	bl	8004a6c <_read_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	bfab      	itete	ge
 8004878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800487a:	89a3      	ldrhlt	r3, [r4, #12]
 800487c:	181b      	addge	r3, r3, r0
 800487e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004882:	bfac      	ite	ge
 8004884:	6563      	strge	r3, [r4, #84]	; 0x54
 8004886:	81a3      	strhlt	r3, [r4, #12]
 8004888:	bd10      	pop	{r4, pc}

0800488a <__swrite>:
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	461f      	mov	r7, r3
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	4616      	mov	r6, r2
 800489a:	d505      	bpl.n	80048a8 <__swrite+0x1e>
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2302      	movs	r3, #2
 80048a2:	2200      	movs	r2, #0
 80048a4:	f000 f8d0 	bl	8004a48 <_lseek_r>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	4632      	mov	r2, r6
 80048b6:	463b      	mov	r3, r7
 80048b8:	4628      	mov	r0, r5
 80048ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	f000 b8e7 	b.w	8004a90 <_write_r>

080048c2 <__sseek>:
 80048c2:	b510      	push	{r4, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ca:	f000 f8bd 	bl	8004a48 <_lseek_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	bf15      	itete	ne
 80048d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strheq	r3, [r4, #12]
 80048e0:	bf18      	it	ne
 80048e2:	81a3      	strhne	r3, [r4, #12]
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <__sclose>:
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 b89d 	b.w	8004a28 <_close_r>

080048ee <__swbuf_r>:
 80048ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f0:	460e      	mov	r6, r1
 80048f2:	4614      	mov	r4, r2
 80048f4:	4605      	mov	r5, r0
 80048f6:	b118      	cbz	r0, 8004900 <__swbuf_r+0x12>
 80048f8:	6a03      	ldr	r3, [r0, #32]
 80048fa:	b90b      	cbnz	r3, 8004900 <__swbuf_r+0x12>
 80048fc:	f7ff ff10 	bl	8004720 <__sinit>
 8004900:	69a3      	ldr	r3, [r4, #24]
 8004902:	60a3      	str	r3, [r4, #8]
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	071a      	lsls	r2, r3, #28
 8004908:	d525      	bpl.n	8004956 <__swbuf_r+0x68>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	b31b      	cbz	r3, 8004956 <__swbuf_r+0x68>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	1a98      	subs	r0, r3, r2
 8004914:	6963      	ldr	r3, [r4, #20]
 8004916:	b2f6      	uxtb	r6, r6
 8004918:	4283      	cmp	r3, r0
 800491a:	4637      	mov	r7, r6
 800491c:	dc04      	bgt.n	8004928 <__swbuf_r+0x3a>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fd47 	bl	80053b4 <_fflush_r>
 8004926:	b9e0      	cbnz	r0, 8004962 <__swbuf_r+0x74>
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	6022      	str	r2, [r4, #0]
 8004934:	701e      	strb	r6, [r3, #0]
 8004936:	6962      	ldr	r2, [r4, #20]
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	429a      	cmp	r2, r3
 800493c:	d004      	beq.n	8004948 <__swbuf_r+0x5a>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d506      	bpl.n	8004952 <__swbuf_r+0x64>
 8004944:	2e0a      	cmp	r6, #10
 8004946:	d104      	bne.n	8004952 <__swbuf_r+0x64>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 fd32 	bl	80053b4 <_fflush_r>
 8004950:	b938      	cbnz	r0, 8004962 <__swbuf_r+0x74>
 8004952:	4638      	mov	r0, r7
 8004954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f805 	bl	8004968 <__swsetup_r>
 800495e:	2800      	cmp	r0, #0
 8004960:	d0d5      	beq.n	800490e <__swbuf_r+0x20>
 8004962:	f04f 37ff 	mov.w	r7, #4294967295
 8004966:	e7f4      	b.n	8004952 <__swbuf_r+0x64>

08004968 <__swsetup_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <__swsetup_r+0xac>)
 800496c:	4605      	mov	r5, r0
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	460c      	mov	r4, r1
 8004972:	b118      	cbz	r0, 800497c <__swsetup_r+0x14>
 8004974:	6a03      	ldr	r3, [r0, #32]
 8004976:	b90b      	cbnz	r3, 800497c <__swsetup_r+0x14>
 8004978:	f7ff fed2 	bl	8004720 <__sinit>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004982:	0718      	lsls	r0, r3, #28
 8004984:	d422      	bmi.n	80049cc <__swsetup_r+0x64>
 8004986:	06d9      	lsls	r1, r3, #27
 8004988:	d407      	bmi.n	800499a <__swsetup_r+0x32>
 800498a:	2309      	movs	r3, #9
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e034      	b.n	8004a04 <__swsetup_r+0x9c>
 800499a:	0758      	lsls	r0, r3, #29
 800499c:	d512      	bpl.n	80049c4 <__swsetup_r+0x5c>
 800499e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a0:	b141      	cbz	r1, 80049b4 <__swsetup_r+0x4c>
 80049a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d002      	beq.n	80049b0 <__swsetup_r+0x48>
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 f8b0 	bl	8004b10 <_free_r>
 80049b0:	2300      	movs	r3, #0
 80049b2:	6363      	str	r3, [r4, #52]	; 0x34
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	2300      	movs	r3, #0
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	b94b      	cbnz	r3, 80049e4 <__swsetup_r+0x7c>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049da:	d003      	beq.n	80049e4 <__swsetup_r+0x7c>
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 fd36 	bl	8005450 <__smakebuf_r>
 80049e4:	89a0      	ldrh	r0, [r4, #12]
 80049e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ea:	f010 0301 	ands.w	r3, r0, #1
 80049ee:	d00a      	beq.n	8004a06 <__swsetup_r+0x9e>
 80049f0:	2300      	movs	r3, #0
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6963      	ldr	r3, [r4, #20]
 80049f6:	425b      	negs	r3, r3
 80049f8:	61a3      	str	r3, [r4, #24]
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	b943      	cbnz	r3, 8004a10 <__swsetup_r+0xa8>
 80049fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a02:	d1c4      	bne.n	800498e <__swsetup_r+0x26>
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	0781      	lsls	r1, r0, #30
 8004a08:	bf58      	it	pl
 8004a0a:	6963      	ldrpl	r3, [r4, #20]
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	e7f4      	b.n	80049fa <__swsetup_r+0x92>
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7f7      	b.n	8004a04 <__swsetup_r+0x9c>
 8004a14:	200000b4 	.word	0x200000b4

08004a18 <memset>:
 8004a18:	4402      	add	r2, r0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <_close_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d06      	ldr	r5, [pc, #24]	; (8004a44 <_close_r+0x1c>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc fa89 	bl	8000f4a <_close>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_close_r+0x1a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_close_r+0x1a>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	2000035c 	.word	0x2000035c

08004a48 <_lseek_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d07      	ldr	r5, [pc, #28]	; (8004a68 <_lseek_r+0x20>)
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	4608      	mov	r0, r1
 8004a50:	4611      	mov	r1, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	602a      	str	r2, [r5, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fc fa9e 	bl	8000f98 <_lseek>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_lseek_r+0x1e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_lseek_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	2000035c 	.word	0x2000035c

08004a6c <_read_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	; (8004a8c <_read_r+0x20>)
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7fc fa48 	bl	8000f10 <_read>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_read_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_read_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	2000035c 	.word	0x2000035c

08004a90 <_write_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	; (8004ab0 <_write_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fb fee0 	bl	8000864 <_write>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_write_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_write_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	2000035c 	.word	0x2000035c

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	200000b4 	.word	0x200000b4

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4d0d      	ldr	r5, [pc, #52]	; (8004af8 <__libc_init_array+0x38>)
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	2600      	movs	r6, #0
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	4d0b      	ldr	r5, [pc, #44]	; (8004b00 <__libc_init_array+0x40>)
 8004ad2:	4c0c      	ldr	r4, [pc, #48]	; (8004b04 <__libc_init_array+0x44>)
 8004ad4:	f000 fd2a 	bl	800552c <_init>
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	2600      	movs	r6, #0
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	080055ec 	.word	0x080055ec
 8004afc:	080055ec 	.word	0x080055ec
 8004b00:	080055ec 	.word	0x080055ec
 8004b04:	080055f0 	.word	0x080055f0

08004b08 <__retarget_lock_init_recursive>:
 8004b08:	4770      	bx	lr

08004b0a <__retarget_lock_acquire_recursive>:
 8004b0a:	4770      	bx	lr

08004b0c <__retarget_lock_release_recursive>:
 8004b0c:	4770      	bx	lr
	...

08004b10 <_free_r>:
 8004b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d044      	beq.n	8004ba0 <_free_r+0x90>
 8004b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b22:	bfb8      	it	lt
 8004b24:	18e4      	addlt	r4, r4, r3
 8004b26:	f000 f8df 	bl	8004ce8 <__malloc_lock>
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <_free_r+0x94>)
 8004b2c:	9801      	ldr	r0, [sp, #4]
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	b933      	cbnz	r3, 8004b40 <_free_r+0x30>
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	6014      	str	r4, [r2, #0]
 8004b36:	b003      	add	sp, #12
 8004b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b3c:	f000 b8da 	b.w	8004cf4 <__malloc_unlock>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d908      	bls.n	8004b56 <_free_r+0x46>
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	1961      	adds	r1, r4, r5
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf01      	itttt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	1949      	addeq	r1, r1, r5
 8004b52:	6021      	streq	r1, [r4, #0]
 8004b54:	e7ed      	b.n	8004b32 <_free_r+0x22>
 8004b56:	461a      	mov	r2, r3
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b10b      	cbz	r3, 8004b60 <_free_r+0x50>
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d9fa      	bls.n	8004b56 <_free_r+0x46>
 8004b60:	6811      	ldr	r1, [r2, #0]
 8004b62:	1855      	adds	r5, r2, r1
 8004b64:	42a5      	cmp	r5, r4
 8004b66:	d10b      	bne.n	8004b80 <_free_r+0x70>
 8004b68:	6824      	ldr	r4, [r4, #0]
 8004b6a:	4421      	add	r1, r4
 8004b6c:	1854      	adds	r4, r2, r1
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	d1e0      	bne.n	8004b36 <_free_r+0x26>
 8004b74:	681c      	ldr	r4, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	6053      	str	r3, [r2, #4]
 8004b7a:	440c      	add	r4, r1
 8004b7c:	6014      	str	r4, [r2, #0]
 8004b7e:	e7da      	b.n	8004b36 <_free_r+0x26>
 8004b80:	d902      	bls.n	8004b88 <_free_r+0x78>
 8004b82:	230c      	movs	r3, #12
 8004b84:	6003      	str	r3, [r0, #0]
 8004b86:	e7d6      	b.n	8004b36 <_free_r+0x26>
 8004b88:	6825      	ldr	r5, [r4, #0]
 8004b8a:	1961      	adds	r1, r4, r5
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	bf04      	itt	eq
 8004b90:	6819      	ldreq	r1, [r3, #0]
 8004b92:	685b      	ldreq	r3, [r3, #4]
 8004b94:	6063      	str	r3, [r4, #4]
 8004b96:	bf04      	itt	eq
 8004b98:	1949      	addeq	r1, r1, r5
 8004b9a:	6021      	streq	r1, [r4, #0]
 8004b9c:	6054      	str	r4, [r2, #4]
 8004b9e:	e7ca      	b.n	8004b36 <_free_r+0x26>
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bd30      	pop	{r4, r5, pc}
 8004ba4:	20000364 	.word	0x20000364

08004ba8 <sbrk_aligned>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4e0e      	ldr	r6, [pc, #56]	; (8004be4 <sbrk_aligned+0x3c>)
 8004bac:	460c      	mov	r4, r1
 8004bae:	6831      	ldr	r1, [r6, #0]
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	b911      	cbnz	r1, 8004bba <sbrk_aligned+0x12>
 8004bb4:	f000 fcaa 	bl	800550c <_sbrk_r>
 8004bb8:	6030      	str	r0, [r6, #0]
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 fca5 	bl	800550c <_sbrk_r>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	d00a      	beq.n	8004bdc <sbrk_aligned+0x34>
 8004bc6:	1cc4      	adds	r4, r0, #3
 8004bc8:	f024 0403 	bic.w	r4, r4, #3
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d007      	beq.n	8004be0 <sbrk_aligned+0x38>
 8004bd0:	1a21      	subs	r1, r4, r0
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 fc9a 	bl	800550c <_sbrk_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d101      	bne.n	8004be0 <sbrk_aligned+0x38>
 8004bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8004be0:	4620      	mov	r0, r4
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	20000368 	.word	0x20000368

08004be8 <_malloc_r>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	1ccd      	adds	r5, r1, #3
 8004bee:	f025 0503 	bic.w	r5, r5, #3
 8004bf2:	3508      	adds	r5, #8
 8004bf4:	2d0c      	cmp	r5, #12
 8004bf6:	bf38      	it	cc
 8004bf8:	250c      	movcc	r5, #12
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	db01      	blt.n	8004c04 <_malloc_r+0x1c>
 8004c00:	42a9      	cmp	r1, r5
 8004c02:	d905      	bls.n	8004c10 <_malloc_r+0x28>
 8004c04:	230c      	movs	r3, #12
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	2600      	movs	r6, #0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ce4 <_malloc_r+0xfc>
 8004c14:	f000 f868 	bl	8004ce8 <__malloc_lock>
 8004c18:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1c:	461c      	mov	r4, r3
 8004c1e:	bb5c      	cbnz	r4, 8004c78 <_malloc_r+0x90>
 8004c20:	4629      	mov	r1, r5
 8004c22:	4638      	mov	r0, r7
 8004c24:	f7ff ffc0 	bl	8004ba8 <sbrk_aligned>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	d155      	bne.n	8004cda <_malloc_r+0xf2>
 8004c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8004c32:	4626      	mov	r6, r4
 8004c34:	2e00      	cmp	r6, #0
 8004c36:	d145      	bne.n	8004cc4 <_malloc_r+0xdc>
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d048      	beq.n	8004cce <_malloc_r+0xe6>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4638      	mov	r0, r7
 8004c42:	eb04 0903 	add.w	r9, r4, r3
 8004c46:	f000 fc61 	bl	800550c <_sbrk_r>
 8004c4a:	4581      	cmp	r9, r0
 8004c4c:	d13f      	bne.n	8004cce <_malloc_r+0xe6>
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	1a6d      	subs	r5, r5, r1
 8004c52:	4629      	mov	r1, r5
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ffa7 	bl	8004ba8 <sbrk_aligned>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d037      	beq.n	8004cce <_malloc_r+0xe6>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	442b      	add	r3, r5
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	f8d8 3000 	ldr.w	r3, [r8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d038      	beq.n	8004cde <_malloc_r+0xf6>
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	42a2      	cmp	r2, r4
 8004c70:	d12b      	bne.n	8004cca <_malloc_r+0xe2>
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e00f      	b.n	8004c98 <_malloc_r+0xb0>
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	1b52      	subs	r2, r2, r5
 8004c7c:	d41f      	bmi.n	8004cbe <_malloc_r+0xd6>
 8004c7e:	2a0b      	cmp	r2, #11
 8004c80:	d917      	bls.n	8004cb2 <_malloc_r+0xca>
 8004c82:	1961      	adds	r1, r4, r5
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	6025      	str	r5, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	6059      	strne	r1, [r3, #4]
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	bf08      	it	eq
 8004c90:	f8c8 1000 	streq.w	r1, [r8]
 8004c94:	5162      	str	r2, [r4, r5]
 8004c96:	604b      	str	r3, [r1, #4]
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f104 060b 	add.w	r6, r4, #11
 8004c9e:	f000 f829 	bl	8004cf4 <__malloc_unlock>
 8004ca2:	f026 0607 	bic.w	r6, r6, #7
 8004ca6:	1d23      	adds	r3, r4, #4
 8004ca8:	1af2      	subs	r2, r6, r3
 8004caa:	d0ae      	beq.n	8004c0a <_malloc_r+0x22>
 8004cac:	1b9b      	subs	r3, r3, r6
 8004cae:	50a3      	str	r3, [r4, r2]
 8004cb0:	e7ab      	b.n	8004c0a <_malloc_r+0x22>
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	d1dd      	bne.n	8004c74 <_malloc_r+0x8c>
 8004cb8:	f8c8 2000 	str.w	r2, [r8]
 8004cbc:	e7ec      	b.n	8004c98 <_malloc_r+0xb0>
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	6864      	ldr	r4, [r4, #4]
 8004cc2:	e7ac      	b.n	8004c1e <_malloc_r+0x36>
 8004cc4:	4634      	mov	r4, r6
 8004cc6:	6876      	ldr	r6, [r6, #4]
 8004cc8:	e7b4      	b.n	8004c34 <_malloc_r+0x4c>
 8004cca:	4613      	mov	r3, r2
 8004ccc:	e7cc      	b.n	8004c68 <_malloc_r+0x80>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f000 f80e 	bl	8004cf4 <__malloc_unlock>
 8004cd8:	e797      	b.n	8004c0a <_malloc_r+0x22>
 8004cda:	6025      	str	r5, [r4, #0]
 8004cdc:	e7dc      	b.n	8004c98 <_malloc_r+0xb0>
 8004cde:	605b      	str	r3, [r3, #4]
 8004ce0:	deff      	udf	#255	; 0xff
 8004ce2:	bf00      	nop
 8004ce4:	20000364 	.word	0x20000364

08004ce8 <__malloc_lock>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <__malloc_lock+0x8>)
 8004cea:	f7ff bf0e 	b.w	8004b0a <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	20000360 	.word	0x20000360

08004cf4 <__malloc_unlock>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <__malloc_unlock+0x8>)
 8004cf6:	f7ff bf09 	b.w	8004b0c <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20000360 	.word	0x20000360

08004d00 <__sfputc_r>:
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	b410      	push	{r4}
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	da08      	bge.n	8004d1e <__sfputc_r+0x1e>
 8004d0c:	6994      	ldr	r4, [r2, #24]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	db01      	blt.n	8004d16 <__sfputc_r+0x16>
 8004d12:	290a      	cmp	r1, #10
 8004d14:	d103      	bne.n	8004d1e <__sfputc_r+0x1e>
 8004d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d1a:	f7ff bde8 	b.w	80048ee <__swbuf_r>
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	1c58      	adds	r0, r3, #1
 8004d22:	6010      	str	r0, [r2, #0]
 8004d24:	7019      	strb	r1, [r3, #0]
 8004d26:	4608      	mov	r0, r1
 8004d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <__sfputs_r>:
 8004d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	18d5      	adds	r5, r2, r3
 8004d38:	42ac      	cmp	r4, r5
 8004d3a:	d101      	bne.n	8004d40 <__sfputs_r+0x12>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e007      	b.n	8004d50 <__sfputs_r+0x22>
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	463a      	mov	r2, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ffda 	bl	8004d00 <__sfputc_r>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d1f3      	bne.n	8004d38 <__sfputs_r+0xa>
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d54 <_vfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	460d      	mov	r5, r1
 8004d5a:	b09d      	sub	sp, #116	; 0x74
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	4698      	mov	r8, r3
 8004d60:	4606      	mov	r6, r0
 8004d62:	b118      	cbz	r0, 8004d6c <_vfiprintf_r+0x18>
 8004d64:	6a03      	ldr	r3, [r0, #32]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x18>
 8004d68:	f7ff fcda 	bl	8004720 <__sinit>
 8004d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d405      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	059a      	lsls	r2, r3, #22
 8004d76:	d402      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d7a:	f7ff fec6 	bl	8004b0a <__retarget_lock_acquire_recursive>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	d501      	bpl.n	8004d88 <_vfiprintf_r+0x34>
 8004d84:	692b      	ldr	r3, [r5, #16]
 8004d86:	b99b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x5c>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff fdec 	bl	8004968 <__swsetup_r>
 8004d90:	b170      	cbz	r0, 8004db0 <_vfiprintf_r+0x5c>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d94:	07dc      	lsls	r4, r3, #31
 8004d96:	d504      	bpl.n	8004da2 <_vfiprintf_r+0x4e>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b01d      	add	sp, #116	; 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	0598      	lsls	r0, r3, #22
 8004da6:	d4f7      	bmi.n	8004d98 <_vfiprintf_r+0x44>
 8004da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004daa:	f7ff feaf 	bl	8004b0c <__retarget_lock_release_recursive>
 8004dae:	e7f3      	b.n	8004d98 <_vfiprintf_r+0x44>
 8004db0:	2300      	movs	r3, #0
 8004db2:	9309      	str	r3, [sp, #36]	; 0x24
 8004db4:	2320      	movs	r3, #32
 8004db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dbe:	2330      	movs	r3, #48	; 0x30
 8004dc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f74 <_vfiprintf_r+0x220>
 8004dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc8:	f04f 0901 	mov.w	r9, #1
 8004dcc:	4623      	mov	r3, r4
 8004dce:	469a      	mov	sl, r3
 8004dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd4:	b10a      	cbz	r2, 8004dda <_vfiprintf_r+0x86>
 8004dd6:	2a25      	cmp	r2, #37	; 0x25
 8004dd8:	d1f9      	bne.n	8004dce <_vfiprintf_r+0x7a>
 8004dda:	ebba 0b04 	subs.w	fp, sl, r4
 8004dde:	d00b      	beq.n	8004df8 <_vfiprintf_r+0xa4>
 8004de0:	465b      	mov	r3, fp
 8004de2:	4622      	mov	r2, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff ffa1 	bl	8004d2e <__sfputs_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	f000 80a9 	beq.w	8004f44 <_vfiprintf_r+0x1f0>
 8004df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df4:	445a      	add	r2, fp
 8004df6:	9209      	str	r2, [sp, #36]	; 0x24
 8004df8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80a1 	beq.w	8004f44 <_vfiprintf_r+0x1f0>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0c:	f10a 0a01 	add.w	sl, sl, #1
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	9307      	str	r3, [sp, #28]
 8004e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e18:	931a      	str	r3, [sp, #104]	; 0x68
 8004e1a:	4654      	mov	r4, sl
 8004e1c:	2205      	movs	r2, #5
 8004e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e22:	4854      	ldr	r0, [pc, #336]	; (8004f74 <_vfiprintf_r+0x220>)
 8004e24:	f7fb f9fc 	bl	8000220 <memchr>
 8004e28:	9a04      	ldr	r2, [sp, #16]
 8004e2a:	b9d8      	cbnz	r0, 8004e64 <_vfiprintf_r+0x110>
 8004e2c:	06d1      	lsls	r1, r2, #27
 8004e2e:	bf44      	itt	mi
 8004e30:	2320      	movmi	r3, #32
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e36:	0713      	lsls	r3, r2, #28
 8004e38:	bf44      	itt	mi
 8004e3a:	232b      	movmi	r3, #43	; 0x2b
 8004e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e40:	f89a 3000 	ldrb.w	r3, [sl]
 8004e44:	2b2a      	cmp	r3, #42	; 0x2a
 8004e46:	d015      	beq.n	8004e74 <_vfiprintf_r+0x120>
 8004e48:	9a07      	ldr	r2, [sp, #28]
 8004e4a:	4654      	mov	r4, sl
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e58:	3b30      	subs	r3, #48	; 0x30
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d94d      	bls.n	8004efa <_vfiprintf_r+0x1a6>
 8004e5e:	b1b0      	cbz	r0, 8004e8e <_vfiprintf_r+0x13a>
 8004e60:	9207      	str	r2, [sp, #28]
 8004e62:	e014      	b.n	8004e8e <_vfiprintf_r+0x13a>
 8004e64:	eba0 0308 	sub.w	r3, r0, r8
 8004e68:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	46a2      	mov	sl, r4
 8004e72:	e7d2      	b.n	8004e1a <_vfiprintf_r+0xc6>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	1d19      	adds	r1, r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	9103      	str	r1, [sp, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfbb      	ittet	lt
 8004e80:	425b      	neglt	r3, r3
 8004e82:	f042 0202 	orrlt.w	r2, r2, #2
 8004e86:	9307      	strge	r3, [sp, #28]
 8004e88:	9307      	strlt	r3, [sp, #28]
 8004e8a:	bfb8      	it	lt
 8004e8c:	9204      	strlt	r2, [sp, #16]
 8004e8e:	7823      	ldrb	r3, [r4, #0]
 8004e90:	2b2e      	cmp	r3, #46	; 0x2e
 8004e92:	d10c      	bne.n	8004eae <_vfiprintf_r+0x15a>
 8004e94:	7863      	ldrb	r3, [r4, #1]
 8004e96:	2b2a      	cmp	r3, #42	; 0x2a
 8004e98:	d134      	bne.n	8004f04 <_vfiprintf_r+0x1b0>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	1d1a      	adds	r2, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	9203      	str	r2, [sp, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bfb8      	it	lt
 8004ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eaa:	3402      	adds	r4, #2
 8004eac:	9305      	str	r3, [sp, #20]
 8004eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f84 <_vfiprintf_r+0x230>
 8004eb2:	7821      	ldrb	r1, [r4, #0]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f7fb f9b2 	bl	8000220 <memchr>
 8004ebc:	b138      	cbz	r0, 8004ece <_vfiprintf_r+0x17a>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	eba0 000a 	sub.w	r0, r0, sl
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	4082      	lsls	r2, r0
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	3401      	adds	r4, #1
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed2:	4829      	ldr	r0, [pc, #164]	; (8004f78 <_vfiprintf_r+0x224>)
 8004ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed8:	2206      	movs	r2, #6
 8004eda:	f7fb f9a1 	bl	8000220 <memchr>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d03f      	beq.n	8004f62 <_vfiprintf_r+0x20e>
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <_vfiprintf_r+0x228>)
 8004ee4:	bb1b      	cbnz	r3, 8004f2e <_vfiprintf_r+0x1da>
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	3307      	adds	r3, #7
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	3308      	adds	r3, #8
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef4:	443b      	add	r3, r7
 8004ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef8:	e768      	b.n	8004dcc <_vfiprintf_r+0x78>
 8004efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efe:	460c      	mov	r4, r1
 8004f00:	2001      	movs	r0, #1
 8004f02:	e7a6      	b.n	8004e52 <_vfiprintf_r+0xfe>
 8004f04:	2300      	movs	r3, #0
 8004f06:	3401      	adds	r4, #1
 8004f08:	9305      	str	r3, [sp, #20]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f04f 0c0a 	mov.w	ip, #10
 8004f10:	4620      	mov	r0, r4
 8004f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f16:	3a30      	subs	r2, #48	; 0x30
 8004f18:	2a09      	cmp	r2, #9
 8004f1a:	d903      	bls.n	8004f24 <_vfiprintf_r+0x1d0>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0c6      	beq.n	8004eae <_vfiprintf_r+0x15a>
 8004f20:	9105      	str	r1, [sp, #20]
 8004f22:	e7c4      	b.n	8004eae <_vfiprintf_r+0x15a>
 8004f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f28:	4604      	mov	r4, r0
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7f0      	b.n	8004f10 <_vfiprintf_r+0x1bc>
 8004f2e:	ab03      	add	r3, sp, #12
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462a      	mov	r2, r5
 8004f34:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <_vfiprintf_r+0x22c>)
 8004f36:	a904      	add	r1, sp, #16
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f3af 8000 	nop.w
 8004f3e:	4607      	mov	r7, r0
 8004f40:	1c78      	adds	r0, r7, #1
 8004f42:	d1d6      	bne.n	8004ef2 <_vfiprintf_r+0x19e>
 8004f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_vfiprintf_r+0x202>
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	059a      	lsls	r2, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_vfiprintf_r+0x202>
 8004f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f52:	f7ff fddb 	bl	8004b0c <__retarget_lock_release_recursive>
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	065b      	lsls	r3, r3, #25
 8004f5a:	f53f af1d 	bmi.w	8004d98 <_vfiprintf_r+0x44>
 8004f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f60:	e71c      	b.n	8004d9c <_vfiprintf_r+0x48>
 8004f62:	ab03      	add	r3, sp, #12
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	462a      	mov	r2, r5
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <_vfiprintf_r+0x22c>)
 8004f6a:	a904      	add	r1, sp, #16
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 f879 	bl	8005064 <_printf_i>
 8004f72:	e7e4      	b.n	8004f3e <_vfiprintf_r+0x1ea>
 8004f74:	080055b0 	.word	0x080055b0
 8004f78:	080055ba 	.word	0x080055ba
 8004f7c:	00000000 	.word	0x00000000
 8004f80:	08004d2f 	.word	0x08004d2f
 8004f84:	080055b6 	.word	0x080055b6

08004f88 <_printf_common>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	688a      	ldr	r2, [r1, #8]
 8004f92:	690b      	ldr	r3, [r1, #16]
 8004f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfb8      	it	lt
 8004f9c:	4613      	movlt	r3, r2
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	b10a      	cbz	r2, 8004fae <_printf_common+0x26>
 8004faa:	3301      	adds	r3, #1
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	0699      	lsls	r1, r3, #26
 8004fb2:	bf42      	ittt	mi
 8004fb4:	6833      	ldrmi	r3, [r6, #0]
 8004fb6:	3302      	addmi	r3, #2
 8004fb8:	6033      	strmi	r3, [r6, #0]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d106      	bne.n	8004fd0 <_printf_common+0x48>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	6832      	ldr	r2, [r6, #0]
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc26      	bgt.n	800501e <_printf_common+0x96>
 8004fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd4:	1e13      	subs	r3, r2, #0
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	0692      	lsls	r2, r2, #26
 8004fde:	d42b      	bmi.n	8005038 <_printf_common+0xb0>
 8004fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d01e      	beq.n	800502c <_printf_common+0xa4>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	6922      	ldr	r2, [r4, #16]
 8004ff2:	f003 0306 	and.w	r3, r3, #6
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	bf02      	ittt	eq
 8004ffa:	68e5      	ldreq	r5, [r4, #12]
 8004ffc:	6833      	ldreq	r3, [r6, #0]
 8004ffe:	1aed      	subeq	r5, r5, r3
 8005000:	68a3      	ldr	r3, [r4, #8]
 8005002:	bf0c      	ite	eq
 8005004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005008:	2500      	movne	r5, #0
 800500a:	4293      	cmp	r3, r2
 800500c:	bfc4      	itt	gt
 800500e:	1a9b      	subgt	r3, r3, r2
 8005010:	18ed      	addgt	r5, r5, r3
 8005012:	2600      	movs	r6, #0
 8005014:	341a      	adds	r4, #26
 8005016:	42b5      	cmp	r5, r6
 8005018:	d11a      	bne.n	8005050 <_printf_common+0xc8>
 800501a:	2000      	movs	r0, #0
 800501c:	e008      	b.n	8005030 <_printf_common+0xa8>
 800501e:	2301      	movs	r3, #1
 8005020:	4652      	mov	r2, sl
 8005022:	4649      	mov	r1, r9
 8005024:	4638      	mov	r0, r7
 8005026:	47c0      	blx	r8
 8005028:	3001      	adds	r0, #1
 800502a:	d103      	bne.n	8005034 <_printf_common+0xac>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005034:	3501      	adds	r5, #1
 8005036:	e7c6      	b.n	8004fc6 <_printf_common+0x3e>
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	2030      	movs	r0, #48	; 0x30
 800503e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005042:	4422      	add	r2, r4
 8005044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800504c:	3302      	adds	r3, #2
 800504e:	e7c7      	b.n	8004fe0 <_printf_common+0x58>
 8005050:	2301      	movs	r3, #1
 8005052:	4622      	mov	r2, r4
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	47c0      	blx	r8
 800505a:	3001      	adds	r0, #1
 800505c:	d0e6      	beq.n	800502c <_printf_common+0xa4>
 800505e:	3601      	adds	r6, #1
 8005060:	e7d9      	b.n	8005016 <_printf_common+0x8e>
	...

08005064 <_printf_i>:
 8005064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	7e0f      	ldrb	r7, [r1, #24]
 800506a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800506c:	2f78      	cmp	r7, #120	; 0x78
 800506e:	4691      	mov	r9, r2
 8005070:	4680      	mov	r8, r0
 8005072:	460c      	mov	r4, r1
 8005074:	469a      	mov	sl, r3
 8005076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800507a:	d807      	bhi.n	800508c <_printf_i+0x28>
 800507c:	2f62      	cmp	r7, #98	; 0x62
 800507e:	d80a      	bhi.n	8005096 <_printf_i+0x32>
 8005080:	2f00      	cmp	r7, #0
 8005082:	f000 80d4 	beq.w	800522e <_printf_i+0x1ca>
 8005086:	2f58      	cmp	r7, #88	; 0x58
 8005088:	f000 80c0 	beq.w	800520c <_printf_i+0x1a8>
 800508c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005094:	e03a      	b.n	800510c <_printf_i+0xa8>
 8005096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509a:	2b15      	cmp	r3, #21
 800509c:	d8f6      	bhi.n	800508c <_printf_i+0x28>
 800509e:	a101      	add	r1, pc, #4	; (adr r1, 80050a4 <_printf_i+0x40>)
 80050a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	08005111 	.word	0x08005111
 80050ac:	0800508d 	.word	0x0800508d
 80050b0:	0800508d 	.word	0x0800508d
 80050b4:	0800508d 	.word	0x0800508d
 80050b8:	0800508d 	.word	0x0800508d
 80050bc:	08005111 	.word	0x08005111
 80050c0:	0800508d 	.word	0x0800508d
 80050c4:	0800508d 	.word	0x0800508d
 80050c8:	0800508d 	.word	0x0800508d
 80050cc:	0800508d 	.word	0x0800508d
 80050d0:	08005215 	.word	0x08005215
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	080051cf 	.word	0x080051cf
 80050dc:	0800508d 	.word	0x0800508d
 80050e0:	0800508d 	.word	0x0800508d
 80050e4:	08005237 	.word	0x08005237
 80050e8:	0800508d 	.word	0x0800508d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800508d 	.word	0x0800508d
 80050f4:	0800508d 	.word	0x0800508d
 80050f8:	080051d7 	.word	0x080051d7
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	602a      	str	r2, [r5, #0]
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800510c:	2301      	movs	r3, #1
 800510e:	e09f      	b.n	8005250 <_printf_i+0x1ec>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	0607      	lsls	r7, r0, #24
 8005116:	f103 0104 	add.w	r1, r3, #4
 800511a:	6029      	str	r1, [r5, #0]
 800511c:	d501      	bpl.n	8005122 <_printf_i+0xbe>
 800511e:	681e      	ldr	r6, [r3, #0]
 8005120:	e003      	b.n	800512a <_printf_i+0xc6>
 8005122:	0646      	lsls	r6, r0, #25
 8005124:	d5fb      	bpl.n	800511e <_printf_i+0xba>
 8005126:	f9b3 6000 	ldrsh.w	r6, [r3]
 800512a:	2e00      	cmp	r6, #0
 800512c:	da03      	bge.n	8005136 <_printf_i+0xd2>
 800512e:	232d      	movs	r3, #45	; 0x2d
 8005130:	4276      	negs	r6, r6
 8005132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005136:	485a      	ldr	r0, [pc, #360]	; (80052a0 <_printf_i+0x23c>)
 8005138:	230a      	movs	r3, #10
 800513a:	e012      	b.n	8005162 <_printf_i+0xfe>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	1d19      	adds	r1, r3, #4
 8005142:	6029      	str	r1, [r5, #0]
 8005144:	0605      	lsls	r5, r0, #24
 8005146:	d501      	bpl.n	800514c <_printf_i+0xe8>
 8005148:	681e      	ldr	r6, [r3, #0]
 800514a:	e002      	b.n	8005152 <_printf_i+0xee>
 800514c:	0641      	lsls	r1, r0, #25
 800514e:	d5fb      	bpl.n	8005148 <_printf_i+0xe4>
 8005150:	881e      	ldrh	r6, [r3, #0]
 8005152:	4853      	ldr	r0, [pc, #332]	; (80052a0 <_printf_i+0x23c>)
 8005154:	2f6f      	cmp	r7, #111	; 0x6f
 8005156:	bf0c      	ite	eq
 8005158:	2308      	moveq	r3, #8
 800515a:	230a      	movne	r3, #10
 800515c:	2100      	movs	r1, #0
 800515e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005162:	6865      	ldr	r5, [r4, #4]
 8005164:	60a5      	str	r5, [r4, #8]
 8005166:	2d00      	cmp	r5, #0
 8005168:	bfa2      	ittt	ge
 800516a:	6821      	ldrge	r1, [r4, #0]
 800516c:	f021 0104 	bicge.w	r1, r1, #4
 8005170:	6021      	strge	r1, [r4, #0]
 8005172:	b90e      	cbnz	r6, 8005178 <_printf_i+0x114>
 8005174:	2d00      	cmp	r5, #0
 8005176:	d04b      	beq.n	8005210 <_printf_i+0x1ac>
 8005178:	4615      	mov	r5, r2
 800517a:	fbb6 f1f3 	udiv	r1, r6, r3
 800517e:	fb03 6711 	mls	r7, r3, r1, r6
 8005182:	5dc7      	ldrb	r7, [r0, r7]
 8005184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005188:	4637      	mov	r7, r6
 800518a:	42bb      	cmp	r3, r7
 800518c:	460e      	mov	r6, r1
 800518e:	d9f4      	bls.n	800517a <_printf_i+0x116>
 8005190:	2b08      	cmp	r3, #8
 8005192:	d10b      	bne.n	80051ac <_printf_i+0x148>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	07de      	lsls	r6, r3, #31
 8005198:	d508      	bpl.n	80051ac <_printf_i+0x148>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	6861      	ldr	r1, [r4, #4]
 800519e:	4299      	cmp	r1, r3
 80051a0:	bfde      	ittt	le
 80051a2:	2330      	movle	r3, #48	; 0x30
 80051a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ac:	1b52      	subs	r2, r2, r5
 80051ae:	6122      	str	r2, [r4, #16]
 80051b0:	f8cd a000 	str.w	sl, [sp]
 80051b4:	464b      	mov	r3, r9
 80051b6:	aa03      	add	r2, sp, #12
 80051b8:	4621      	mov	r1, r4
 80051ba:	4640      	mov	r0, r8
 80051bc:	f7ff fee4 	bl	8004f88 <_printf_common>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d14a      	bne.n	800525a <_printf_i+0x1f6>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	b004      	add	sp, #16
 80051ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	f043 0320 	orr.w	r3, r3, #32
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	4833      	ldr	r0, [pc, #204]	; (80052a4 <_printf_i+0x240>)
 80051d8:	2778      	movs	r7, #120	; 0x78
 80051da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	061f      	lsls	r7, r3, #24
 80051e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e8:	d402      	bmi.n	80051f0 <_printf_i+0x18c>
 80051ea:	065f      	lsls	r7, r3, #25
 80051ec:	bf48      	it	mi
 80051ee:	b2b6      	uxthmi	r6, r6
 80051f0:	07df      	lsls	r7, r3, #31
 80051f2:	bf48      	it	mi
 80051f4:	f043 0320 	orrmi.w	r3, r3, #32
 80051f8:	6029      	str	r1, [r5, #0]
 80051fa:	bf48      	it	mi
 80051fc:	6023      	strmi	r3, [r4, #0]
 80051fe:	b91e      	cbnz	r6, 8005208 <_printf_i+0x1a4>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f023 0320 	bic.w	r3, r3, #32
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	2310      	movs	r3, #16
 800520a:	e7a7      	b.n	800515c <_printf_i+0xf8>
 800520c:	4824      	ldr	r0, [pc, #144]	; (80052a0 <_printf_i+0x23c>)
 800520e:	e7e4      	b.n	80051da <_printf_i+0x176>
 8005210:	4615      	mov	r5, r2
 8005212:	e7bd      	b.n	8005190 <_printf_i+0x12c>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	6826      	ldr	r6, [r4, #0]
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	1d18      	adds	r0, r3, #4
 800521c:	6028      	str	r0, [r5, #0]
 800521e:	0635      	lsls	r5, r6, #24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	d501      	bpl.n	8005228 <_printf_i+0x1c4>
 8005224:	6019      	str	r1, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0x1ca>
 8005228:	0670      	lsls	r0, r6, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0x1c0>
 800522c:	8019      	strh	r1, [r3, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	4615      	mov	r5, r2
 8005234:	e7bc      	b.n	80051b0 <_printf_i+0x14c>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	602a      	str	r2, [r5, #0]
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	4628      	mov	r0, r5
 8005244:	f7fa ffec 	bl	8000220 <memchr>
 8005248:	b108      	cbz	r0, 800524e <_printf_i+0x1ea>
 800524a:	1b40      	subs	r0, r0, r5
 800524c:	6060      	str	r0, [r4, #4]
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	2300      	movs	r3, #0
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	e7aa      	b.n	80051b0 <_printf_i+0x14c>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	462a      	mov	r2, r5
 800525e:	4649      	mov	r1, r9
 8005260:	4640      	mov	r0, r8
 8005262:	47d0      	blx	sl
 8005264:	3001      	adds	r0, #1
 8005266:	d0ad      	beq.n	80051c4 <_printf_i+0x160>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	079b      	lsls	r3, r3, #30
 800526c:	d413      	bmi.n	8005296 <_printf_i+0x232>
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	4298      	cmp	r0, r3
 8005274:	bfb8      	it	lt
 8005276:	4618      	movlt	r0, r3
 8005278:	e7a6      	b.n	80051c8 <_printf_i+0x164>
 800527a:	2301      	movs	r3, #1
 800527c:	4632      	mov	r2, r6
 800527e:	4649      	mov	r1, r9
 8005280:	4640      	mov	r0, r8
 8005282:	47d0      	blx	sl
 8005284:	3001      	adds	r0, #1
 8005286:	d09d      	beq.n	80051c4 <_printf_i+0x160>
 8005288:	3501      	adds	r5, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	9903      	ldr	r1, [sp, #12]
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	42ab      	cmp	r3, r5
 8005292:	dcf2      	bgt.n	800527a <_printf_i+0x216>
 8005294:	e7eb      	b.n	800526e <_printf_i+0x20a>
 8005296:	2500      	movs	r5, #0
 8005298:	f104 0619 	add.w	r6, r4, #25
 800529c:	e7f5      	b.n	800528a <_printf_i+0x226>
 800529e:	bf00      	nop
 80052a0:	080055c1 	.word	0x080055c1
 80052a4:	080055d2 	.word	0x080055d2

080052a8 <__sflush_r>:
 80052a8:	898a      	ldrh	r2, [r1, #12]
 80052aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ae:	4605      	mov	r5, r0
 80052b0:	0710      	lsls	r0, r2, #28
 80052b2:	460c      	mov	r4, r1
 80052b4:	d458      	bmi.n	8005368 <__sflush_r+0xc0>
 80052b6:	684b      	ldr	r3, [r1, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc05      	bgt.n	80052c8 <__sflush_r+0x20>
 80052bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	dc02      	bgt.n	80052c8 <__sflush_r+0x20>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d0f9      	beq.n	80052c2 <__sflush_r+0x1a>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052d4:	682f      	ldr	r7, [r5, #0]
 80052d6:	6a21      	ldr	r1, [r4, #32]
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	d032      	beq.n	8005342 <__sflush_r+0x9a>
 80052dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	075a      	lsls	r2, r3, #29
 80052e2:	d505      	bpl.n	80052f0 <__sflush_r+0x48>
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ea:	b10b      	cbz	r3, 80052f0 <__sflush_r+0x48>
 80052ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ee:	1ac0      	subs	r0, r0, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	4602      	mov	r2, r0
 80052f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f6:	6a21      	ldr	r1, [r4, #32]
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b0      	blx	r6
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	d106      	bne.n	8005310 <__sflush_r+0x68>
 8005302:	6829      	ldr	r1, [r5, #0]
 8005304:	291d      	cmp	r1, #29
 8005306:	d82b      	bhi.n	8005360 <__sflush_r+0xb8>
 8005308:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <__sflush_r+0x108>)
 800530a:	410a      	asrs	r2, r1
 800530c:	07d6      	lsls	r6, r2, #31
 800530e:	d427      	bmi.n	8005360 <__sflush_r+0xb8>
 8005310:	2200      	movs	r2, #0
 8005312:	6062      	str	r2, [r4, #4]
 8005314:	04d9      	lsls	r1, r3, #19
 8005316:	6922      	ldr	r2, [r4, #16]
 8005318:	6022      	str	r2, [r4, #0]
 800531a:	d504      	bpl.n	8005326 <__sflush_r+0x7e>
 800531c:	1c42      	adds	r2, r0, #1
 800531e:	d101      	bne.n	8005324 <__sflush_r+0x7c>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b903      	cbnz	r3, 8005326 <__sflush_r+0x7e>
 8005324:	6560      	str	r0, [r4, #84]	; 0x54
 8005326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005328:	602f      	str	r7, [r5, #0]
 800532a:	2900      	cmp	r1, #0
 800532c:	d0c9      	beq.n	80052c2 <__sflush_r+0x1a>
 800532e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005332:	4299      	cmp	r1, r3
 8005334:	d002      	beq.n	800533c <__sflush_r+0x94>
 8005336:	4628      	mov	r0, r5
 8005338:	f7ff fbea 	bl	8004b10 <_free_r>
 800533c:	2000      	movs	r0, #0
 800533e:	6360      	str	r0, [r4, #52]	; 0x34
 8005340:	e7c0      	b.n	80052c4 <__sflush_r+0x1c>
 8005342:	2301      	movs	r3, #1
 8005344:	4628      	mov	r0, r5
 8005346:	47b0      	blx	r6
 8005348:	1c41      	adds	r1, r0, #1
 800534a:	d1c8      	bne.n	80052de <__sflush_r+0x36>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0c5      	beq.n	80052de <__sflush_r+0x36>
 8005352:	2b1d      	cmp	r3, #29
 8005354:	d001      	beq.n	800535a <__sflush_r+0xb2>
 8005356:	2b16      	cmp	r3, #22
 8005358:	d101      	bne.n	800535e <__sflush_r+0xb6>
 800535a:	602f      	str	r7, [r5, #0]
 800535c:	e7b1      	b.n	80052c2 <__sflush_r+0x1a>
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	e7ad      	b.n	80052c4 <__sflush_r+0x1c>
 8005368:	690f      	ldr	r7, [r1, #16]
 800536a:	2f00      	cmp	r7, #0
 800536c:	d0a9      	beq.n	80052c2 <__sflush_r+0x1a>
 800536e:	0793      	lsls	r3, r2, #30
 8005370:	680e      	ldr	r6, [r1, #0]
 8005372:	bf08      	it	eq
 8005374:	694b      	ldreq	r3, [r1, #20]
 8005376:	600f      	str	r7, [r1, #0]
 8005378:	bf18      	it	ne
 800537a:	2300      	movne	r3, #0
 800537c:	eba6 0807 	sub.w	r8, r6, r7
 8005380:	608b      	str	r3, [r1, #8]
 8005382:	f1b8 0f00 	cmp.w	r8, #0
 8005386:	dd9c      	ble.n	80052c2 <__sflush_r+0x1a>
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800538c:	4643      	mov	r3, r8
 800538e:	463a      	mov	r2, r7
 8005390:	4628      	mov	r0, r5
 8005392:	47b0      	blx	r6
 8005394:	2800      	cmp	r0, #0
 8005396:	dc06      	bgt.n	80053a6 <__sflush_r+0xfe>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e78e      	b.n	80052c4 <__sflush_r+0x1c>
 80053a6:	4407      	add	r7, r0
 80053a8:	eba8 0800 	sub.w	r8, r8, r0
 80053ac:	e7e9      	b.n	8005382 <__sflush_r+0xda>
 80053ae:	bf00      	nop
 80053b0:	dfbffffe 	.word	0xdfbffffe

080053b4 <_fflush_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	4605      	mov	r5, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	b913      	cbnz	r3, 80053c4 <_fflush_r+0x10>
 80053be:	2500      	movs	r5, #0
 80053c0:	4628      	mov	r0, r5
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	b118      	cbz	r0, 80053ce <_fflush_r+0x1a>
 80053c6:	6a03      	ldr	r3, [r0, #32]
 80053c8:	b90b      	cbnz	r3, 80053ce <_fflush_r+0x1a>
 80053ca:	f7ff f9a9 	bl	8004720 <__sinit>
 80053ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f3      	beq.n	80053be <_fflush_r+0xa>
 80053d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053d8:	07d0      	lsls	r0, r2, #31
 80053da:	d404      	bmi.n	80053e6 <_fflush_r+0x32>
 80053dc:	0599      	lsls	r1, r3, #22
 80053de:	d402      	bmi.n	80053e6 <_fflush_r+0x32>
 80053e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e2:	f7ff fb92 	bl	8004b0a <__retarget_lock_acquire_recursive>
 80053e6:	4628      	mov	r0, r5
 80053e8:	4621      	mov	r1, r4
 80053ea:	f7ff ff5d 	bl	80052a8 <__sflush_r>
 80053ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053f0:	07da      	lsls	r2, r3, #31
 80053f2:	4605      	mov	r5, r0
 80053f4:	d4e4      	bmi.n	80053c0 <_fflush_r+0xc>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	059b      	lsls	r3, r3, #22
 80053fa:	d4e1      	bmi.n	80053c0 <_fflush_r+0xc>
 80053fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fe:	f7ff fb85 	bl	8004b0c <__retarget_lock_release_recursive>
 8005402:	e7dd      	b.n	80053c0 <_fflush_r+0xc>

08005404 <__swhatbuf_r>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	2900      	cmp	r1, #0
 800540e:	b096      	sub	sp, #88	; 0x58
 8005410:	4615      	mov	r5, r2
 8005412:	461e      	mov	r6, r3
 8005414:	da0d      	bge.n	8005432 <__swhatbuf_r+0x2e>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f013 0f80 	tst.w	r3, #128	; 0x80
 800541c:	f04f 0100 	mov.w	r1, #0
 8005420:	bf0c      	ite	eq
 8005422:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005426:	2340      	movne	r3, #64	; 0x40
 8005428:	2000      	movs	r0, #0
 800542a:	6031      	str	r1, [r6, #0]
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	b016      	add	sp, #88	; 0x58
 8005430:	bd70      	pop	{r4, r5, r6, pc}
 8005432:	466a      	mov	r2, sp
 8005434:	f000 f848 	bl	80054c8 <_fstat_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	dbec      	blt.n	8005416 <__swhatbuf_r+0x12>
 800543c:	9901      	ldr	r1, [sp, #4]
 800543e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005442:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005446:	4259      	negs	r1, r3
 8005448:	4159      	adcs	r1, r3
 800544a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544e:	e7eb      	b.n	8005428 <__swhatbuf_r+0x24>

08005450 <__smakebuf_r>:
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005454:	079d      	lsls	r5, r3, #30
 8005456:	4606      	mov	r6, r0
 8005458:	460c      	mov	r4, r1
 800545a:	d507      	bpl.n	800546c <__smakebuf_r+0x1c>
 800545c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	2301      	movs	r3, #1
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	b002      	add	sp, #8
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	ab01      	add	r3, sp, #4
 800546e:	466a      	mov	r2, sp
 8005470:	f7ff ffc8 	bl	8005404 <__swhatbuf_r>
 8005474:	9900      	ldr	r1, [sp, #0]
 8005476:	4605      	mov	r5, r0
 8005478:	4630      	mov	r0, r6
 800547a:	f7ff fbb5 	bl	8004be8 <_malloc_r>
 800547e:	b948      	cbnz	r0, 8005494 <__smakebuf_r+0x44>
 8005480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005484:	059a      	lsls	r2, r3, #22
 8005486:	d4ef      	bmi.n	8005468 <__smakebuf_r+0x18>
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	e7e3      	b.n	800545c <__smakebuf_r+0xc>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	6163      	str	r3, [r4, #20]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	6120      	str	r0, [r4, #16]
 80054a6:	b15b      	cbz	r3, 80054c0 <__smakebuf_r+0x70>
 80054a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 f81d 	bl	80054ec <_isatty_r>
 80054b2:	b128      	cbz	r0, 80054c0 <__smakebuf_r+0x70>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	431d      	orrs	r5, r3
 80054c4:	81a5      	strh	r5, [r4, #12]
 80054c6:	e7cf      	b.n	8005468 <__smakebuf_r+0x18>

080054c8 <_fstat_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d07      	ldr	r5, [pc, #28]	; (80054e8 <_fstat_r+0x20>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	602b      	str	r3, [r5, #0]
 80054d6:	f7fb fd44 	bl	8000f62 <_fstat>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d102      	bne.n	80054e4 <_fstat_r+0x1c>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	b103      	cbz	r3, 80054e4 <_fstat_r+0x1c>
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	2000035c 	.word	0x2000035c

080054ec <_isatty_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d06      	ldr	r5, [pc, #24]	; (8005508 <_isatty_r+0x1c>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fd43 	bl	8000f82 <_isatty>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_isatty_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_isatty_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	2000035c 	.word	0x2000035c

0800550c <_sbrk_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d06      	ldr	r5, [pc, #24]	; (8005528 <_sbrk_r+0x1c>)
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fb fd4c 	bl	8000fb4 <_sbrk>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_sbrk_r+0x1a>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_sbrk_r+0x1a>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	2000035c 	.word	0x2000035c

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
