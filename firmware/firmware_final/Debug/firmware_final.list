
firmware_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046bc  080046bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080046c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000005c  08004720  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004720  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ab4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293b  00000000  00000000  00035b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3d  00000000  00000000  00039828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb38  00000000  00000000  0003a765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e88  00000000  00000000  0005929d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8ede  00000000  00000000  00070125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005348  00000000  00000000  00139004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013e34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800465c 	.word	0x0800465c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	0800465c 	.word	0x0800465c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 8000520:	224c      	movs	r2, #76	; 0x4c
 8000522:	2110      	movs	r1, #16
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f91d 	bl	8000764 <accelerometer_write>
 800052a:	4603      	mov	r3, r0
 800052c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <acc_init+0x24>
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	e01e      	b.n	8000576 <acc_init+0x62>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 8000538:	2200      	movs	r2, #0
 800053a:	2111      	movs	r1, #17
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f911 	bl	8000764 <accelerometer_write>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return status;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <acc_init+0x3c>
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	e012      	b.n	8000576 <acc_init+0x62>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 8000550:	2201      	movs	r2, #1
 8000552:	210e      	movs	r1, #14
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f905 	bl	8000764 <accelerometer_write>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <acc_init+0x54>
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	e006      	b.n	8000576 <acc_init+0x62>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000568:	2103      	movs	r1, #3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f808 	bl	8000580 <read_axis>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]

    return status;
 8000574:	7bfb      	ldrb	r3, [r7, #15]

}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af04      	add	r7, sp, #16
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]

    switch(axis){
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b03      	cmp	r3, #3
 8000598:	f200 80d8 	bhi.w	800074c <read_axis+0x1cc>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <read_axis+0x24>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	08000637 	.word	0x08000637
 80005ac:	080006b5 	.word	0x080006b5
 80005b0:	080005b5 	.word	0x080005b5
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	b299      	uxth	r1, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	4b65      	ldr	r3, [pc, #404]	; (800075c <read_axis+0x1dc>)
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	2229      	movs	r2, #41	; 0x29
 80005ce:	4864      	ldr	r0, [pc, #400]	; (8000760 <read_axis+0x1e0>)
 80005d0:	f001 faba 	bl	8001b48 <HAL_I2C_Mem_Read>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f040 80a7 	bne.w	800072e <read_axis+0x1ae>
		  acc->x_xlr = *read_buffer << 8;
 80005e0:	4b5e      	ldr	r3, [pc, #376]	; (800075c <read_axis+0x1dc>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	b299      	uxth	r1, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b57      	ldr	r3, [pc, #348]	; (800075c <read_axis+0x1dc>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2228      	movs	r2, #40	; 0x28
 8000606:	4856      	ldr	r0, [pc, #344]	; (8000760 <read_axis+0x1e0>)
 8000608:	f001 fa9e 	bl	8001b48 <HAL_I2C_Mem_Read>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2b00      	cmp	r3, #0
 8000614:	f040 808d 	bne.w	8000732 <read_axis+0x1b2>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b4e      	ldr	r3, [pc, #312]	; (800075c <read_axis+0x1dc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	b21a      	sxth	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d17f      	bne.n	8000736 <read_axis+0x1b6>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	b299      	uxth	r1, r3
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <read_axis+0x1dc>)
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	222b      	movs	r2, #43	; 0x2b
 8000650:	4843      	ldr	r0, [pc, #268]	; (8000760 <read_axis+0x1e0>)
 8000652:	f001 fa79 	bl	8001b48 <HAL_I2C_Mem_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d16c      	bne.n	800073a <read_axis+0x1ba>
		  acc->y_xlr = *read_buffer << 8;
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <read_axis+0x1dc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b21a      	sxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	b299      	uxth	r1, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2301      	movs	r3, #1
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <read_axis+0x1dc>)
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	222a      	movs	r2, #42	; 0x2a
 8000686:	4836      	ldr	r0, [pc, #216]	; (8000760 <read_axis+0x1e0>)
 8000688:	f001 fa5e 	bl	8001b48 <HAL_I2C_Mem_Read>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d153      	bne.n	800073e <read_axis+0x1be>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	889b      	ldrh	r3, [r3, #4]
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <read_axis+0x1dc>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4413      	add	r3, r2
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d146      	bne.n	8000742 <read_axis+0x1c2>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	b299      	uxth	r1, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <read_axis+0x1dc>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	222d      	movs	r2, #45	; 0x2d
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <read_axis+0x1e0>)
 80006d0:	f001 fa3a 	bl	8001b48 <HAL_I2C_Mem_Read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d133      	bne.n	8000746 <read_axis+0x1c6>
		  acc->z_xlr = *read_buffer << 8;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <read_axis+0x1dc>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	b299      	uxth	r1, r3
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <read_axis+0x1dc>)
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	222c      	movs	r2, #44	; 0x2c
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <read_axis+0x1e0>)
 8000706:	f001 fa1f 	bl	8001b48 <HAL_I2C_Mem_Read>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11a      	bne.n	800074a <read_axis+0x1ca>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	88db      	ldrh	r3, [r3, #6]
 8000718:	b21b      	sxth	r3, r3
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <read_axis+0x1dc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	b21a      	sxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	80da      	strh	r2, [r3, #6]
		  break;
 800072c:	e00e      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800072e:	bf00      	nop
 8000730:	e00c      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000732:	bf00      	nop
 8000734:	e00a      	b.n	800074c <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 8000736:	bf00      	nop
 8000738:	e008      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800073a:	bf00      	nop
 800073c:	e006      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800073e:	bf00      	nop
 8000740:	e004      	b.n	800074c <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800074a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800074c:	b662      	cpsie	i
}
 800074e:	bf00      	nop
	}

    __enable_irq();

    return status;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000078 	.word	0x20000078
 8000760:	20000090 	.word	0x20000090

08000764 <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af04      	add	r7, sp, #16
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 8000778:	2300      	movs	r3, #0
 800077a:	733b      	strb	r3, [r7, #12]
	*write_buffer = data;
 800077c:	78bb      	ldrb	r3, [r7, #2]
 800077e:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	b299      	uxth	r1, r3
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	b29a      	uxth	r2, r3
 800078c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	2301      	movs	r3, #1
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <accelerometer_write+0x54>)
 80007a0:	f001 f8be 	bl	8001920 <HAL_I2C_Mem_Write>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80007a8:	b662      	cpsie	i
}
 80007aa:	bf00      	nop
	__enable_irq();
	return status;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000090 	.word	0x20000090

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fb5b 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f832 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f982 	bl	8000ad0 <MX_GPIO_Init>
  MX_DAC1_Init();
 80007cc:	f000 f86e 	bl	80008ac <MX_DAC1_Init>
  MX_I2C1_Init();
 80007d0:	f000 f8a6 	bl	8000920 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80007d4:	f000 f8e4 	bl	80009a0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80007d8:	f000 f92c 	bl	8000a34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  acc_init(&xl_l);
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <main+0x60>)
 80007de:	f7ff fe99 	bl	8000514 <acc_init>
  acc_init(&xl_r);
 80007e2:	480f      	ldr	r0, [pc, #60]	; (8000820 <main+0x64>)
 80007e4:	f7ff fe96 	bl	8000514 <acc_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  status = read_axis(&xl_r, ALL_AXIS);
 80007e8:	2103      	movs	r1, #3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <main+0x64>)
 80007ec:	f7ff fec8 	bl	8000580 <read_axis>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <main+0x68>)
 80007f6:	701a      	strb	r2, [r3, #0]
	  status = read_axis(&xl_l, ALL_AXIS);
 80007f8:	2103      	movs	r1, #3
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x60>)
 80007fc:	f7ff fec0 	bl	8000580 <read_axis>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <main+0x68>)
 8000806:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	if(xl_r.z_xlr < -0x1000)
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <main+0x64>)
 800080a:	88db      	ldrh	r3, [r3, #6]
 800080c:	b21b      	sxth	r3, r3
 800080e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000812:	dae9      	bge.n	80007e8 <main+0x2c>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <main+0x6c>)
 8000816:	f002 fe0f 	bl	8003438 <HAL_TIM_Base_Start_IT>
	  status = read_axis(&xl_r, ALL_AXIS);
 800081a:	e7e5      	b.n	80007e8 <main+0x2c>
 800081c:	20000028 	.word	0x20000028
 8000820:	20000000 	.word	0x20000000
 8000824:	200001b8 	.word	0x200001b8
 8000828:	2000016c 	.word	0x2000016c

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fee2 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000852:	f001 fdd1 	bl	80023f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fe67 	bl	8002540 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000878:	f000 f962 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000880:	2301      	movs	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f96b 	bl	8002b70 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008a0:	f000 f94e 	bl	8000b40 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2230      	movs	r2, #48	; 0x30
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fea3 	bl	8004604 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_DAC1_Init+0x6c>)
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DAC1_Init+0x70>)
 80008c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_DAC1_Init+0x6c>)
 80008c6:	f000 fc4e 	bl	8001166 <HAL_DAC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008d0:	f000 f936 	bl	8000b40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008d4:	2302      	movs	r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_DAC1_Init+0x6c>)
 8000900:	f000 fc54 	bl	80011ac <HAL_DAC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800090a:	f000 f919 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000007c 	.word	0x2000007c
 800091c:	50000800 	.word	0x50000800

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_I2C1_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_I2C1_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_I2C1_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_I2C1_Init+0x74>)
 800095c:	f000 ff50 	bl	8001800 <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 f8eb 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_I2C1_Init+0x74>)
 800096e:	f001 fcab 	bl	80022c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 f8e2 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_I2C1_Init+0x74>)
 8000980:	f001 fced 	bl	800235e <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f8d9 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000090 	.word	0x20000090
 8000998:	40005400 	.word	0x40005400
 800099c:	00303d5b 	.word	0x00303d5b

080009a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ac:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80009b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	f003 f83a 	bl	8003a5c <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f8a7 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009f6:	f003 fd3b 	bl	8004470 <HAL_UARTEx_SetTxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a00:	f000 f89e 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a08:	f003 fd70 	bl	80044ec <HAL_UARTEx_SetRxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a12:	f000 f895 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a18:	f003 fcf1 	bl	80043fe <HAL_UARTEx_DisableFifoMode>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a22:	f000 f88d 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	40008000 	.word	0x40008000

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a5c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a64:	2210      	movs	r2, #16
 8000a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a7c:	f002 fc84 	bl	8003388 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a86:	f000 f85b 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a98:	f002 fd38 	bl	800350c <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aa2:	f000 f84d 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM2_Init+0x98>)
 8000ab4:	f002 ff50 	bl	8003958 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000abe:	f000 f83f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000016c 	.word	0x2000016c

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x68>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b16:	2309      	movs	r3, #9
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x6c>)
 8000b2a:	f000 fce7 	bl	80014fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <HAL_DAC_MspInit+0x74>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d124      	bne.n	8000c00 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_DAC_MspInit+0x78>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be6:	2310      	movs	r3, #16
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	2303      	movs	r3, #3
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fc7e 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	50000800 	.word	0x50000800
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09a      	sub	sp, #104	; 0x68
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2244      	movs	r2, #68	; 0x44
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fce7 	bl	8004604 <memset>
  if(hi2c->Instance==I2C1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_I2C_MspInit+0xa8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d136      	bne.n	8000cae <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c40:	2340      	movs	r3, #64	; 0x40
 8000c42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f9ab 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c58:	f7ff ff72 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c78:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7a:	2312      	movs	r3, #18
 8000c7c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c86:	2304      	movs	r3, #4
 8000c88:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <HAL_I2C_MspInit+0xb0>)
 8000c92:	f000 fc33 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_I2C_MspInit+0xac>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3768      	adds	r7, #104	; 0x68
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b09a      	sub	sp, #104	; 0x68
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2244      	movs	r2, #68	; 0x44
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fc8d 	bl	8004604 <memset>
  if(huart->Instance==LPUART1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_UART_MspInit+0xa8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d136      	bne.n	8000d62 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 f951 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d0c:	f7ff ff18 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d14:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0xac>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d40:	230c      	movs	r3, #12
 8000d42:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d50:	230c      	movs	r3, #12
 8000d52:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f000 fbcd 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3768      	adds	r7, #104	; 0x68
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40008000 	.word	0x40008000
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d84:	d10b      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6593      	str	r3, [r2, #88]	; 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_TIM_Base_MspInit+0x38>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f890 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e52:	f7ff ffd7 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fbdd 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fcaf 	bl	80007bc <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e6c:	080046c4 	.word	0x080046c4
  ldr r2, =_sbss
 8000e70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e74:	200001c0 	.word	0x200001c0

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>

08000e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f93d 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f80e 	bl	8000eac <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e001      	b.n	8000ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9c:	f7ff fe56 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_InitTick+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d022      	beq.n	8000f06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_InitTick+0x6c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_InitTick+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f93a 	bl	800114e <HAL_SYSTICK_Config>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10f      	bne.n	8000f00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	d809      	bhi.n	8000efa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eee:	f000 f914 	bl	800111a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_InitTick+0x70>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e004      	b.n	8000f0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e001      	b.n	8000f0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000058 	.word	0x20000058
 8000f18:	20000050 	.word	0x20000050
 8000f1c:	20000054 	.word	0x20000054

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200001bc 	.word	0x200001bc
 8000f40:	20000058 	.word	0x20000058

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001bc 	.word	0x200001bc

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d004      	beq.n	8000f80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_Delay+0x40>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f80:	bf00      	nop
 8000f82:	f7ff ffdf 	bl	8000f44 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d8f7      	bhi.n	8000f82 <HAL_Delay+0x26>
  {
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000058 	.word	0x20000058

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff47 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb2 	bl	80010c0 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e014      	b.n	80011a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fd03 	bl	8000b94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2202      	movs	r2, #2
 8001192:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_DAC_ConfigChannel+0x18>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e192      	b.n	80014ea <HAL_DAC_ConfigChannel+0x33e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2202      	movs	r2, #2
 80011ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d174      	bne.n	80012c2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80011d8:	f7ff feb4 	bl	8000f44 <HAL_GetTick>
 80011dc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d134      	bne.n	800124e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011e4:	e011      	b.n	800120a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011e6:	f7ff fead 	bl	8000f44 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d90a      	bls.n	800120a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	f043 0208 	orr.w	r2, r3, #8
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2203      	movs	r2, #3
 8001204:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e16f      	b.n	80014ea <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e6      	bne.n	80011e6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fe9f 	bl	8000f5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
 8001228:	e01e      	b.n	8001268 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800122a:	f7ff fe8b 	bl	8000f44 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d90a      	bls.n	800124e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f043 0208 	orr.w	r2, r3, #8
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2203      	movs	r2, #3
 8001248:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e14d      	b.n	80014ea <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	2b00      	cmp	r3, #0
 8001256:	dbe8      	blt.n	800122a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fe7f 	bl	8000f5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001266:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	ea02 0103 	and.w	r1, r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	409a      	lsls	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	21ff      	movs	r1, #255	; 0xff
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	ea02 0103 	and.w	r1, r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	409a      	lsls	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d11d      	bne.n	8001306 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	4013      	ands	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	4313      	orrs	r3, r2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2207      	movs	r2, #7
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131e:	4013      	ands	r3, r2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d102      	bne.n	8001330 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	e00f      	b.n	8001350 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d102      	bne.n	800133e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	e008      	b.n	8001350 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001346:	2301      	movs	r3, #1
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e001      	b.n	8001350 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	4013      	ands	r3, r2
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <HAL_DAC_ConfigChannel+0x1d8>
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	e000      	b.n	8001386 <HAL_DAC_ConfigChannel+0x1da>
 8001384:	2300      	movs	r3, #0
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139e:	4013      	ands	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	795b      	ldrb	r3, [r3, #5]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_DAC_ConfigChannel+0x204>
 80013aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ae:	e000      	b.n	80013b2 <HAL_DAC_ConfigChannel+0x206>
 80013b0:	2300      	movs	r3, #0
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d114      	bne.n	80013f2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80013c8:	f001 fd70 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 80013cc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_DAC_ConfigChannel+0x348>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d904      	bls.n	80013e0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	e00f      	b.n	8001400 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <HAL_DAC_ConfigChannel+0x34c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d90a      	bls.n	80013fe <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
 80013f0:	e006      	b.n	8001400 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	4313      	orrs	r3, r2
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	e000      	b.n	8001400 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80013fe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	4313      	orrs	r3, r2
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	f640 72fe 	movw	r2, #4094	; 0xffe
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001452:	4013      	ands	r3, r2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	4313      	orrs	r3, r2
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	22c0      	movs	r2, #192	; 0xc0
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	ea02 0103 	and.w	r1, r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	09896800 	.word	0x09896800
 80014f8:	04c4b400 	.word	0x04c4b400

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800150a:	e15a      	b.n	80017c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 814c 	beq.w	80017bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80a6 	beq.w	80017bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6613      	str	r3, [r2, #96]	; 0x60
 800167c:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001688:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b2:	d01f      	beq.n	80016f4 <HAL_GPIO_Init+0x1f8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d019      	beq.n	80016f0 <HAL_GPIO_Init+0x1f4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d013      	beq.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_GPIO_Init+0x1ec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x1e8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_GPIO_Init+0x1e4>
 80016dc:	2305      	movs	r3, #5
 80016de:	e00a      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e0:	2306      	movs	r3, #6
 80016e2:	e008      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e8:	2303      	movs	r3, #3
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016f4:	2300      	movs	r3, #0
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001706:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_GPIO_Init+0x300>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001738:	4a30      	ldr	r2, [pc, #192]	; (80017fc <HAL_GPIO_Init+0x300>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_GPIO_Init+0x300>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001762:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_GPIO_Init+0x300>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_GPIO_Init+0x300>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_GPIO_Init+0x300>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_GPIO_Init+0x300>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_GPIO_Init+0x300>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f ae9d 	bne.w	800150c <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48001400 	.word	0x48001400
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e081      	b.n	8001916 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff f9f2 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2224      	movs	r2, #36	; 0x24
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	e006      	b.n	8001888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d104      	bne.n	800189a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69d9      	ldr	r1, [r3, #28]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4603      	mov	r3, r0
 8001930:	817b      	strh	r3, [r7, #10]
 8001932:	460b      	mov	r3, r1
 8001934:	813b      	strh	r3, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b20      	cmp	r3, #32
 8001944:	f040 80f9 	bne.w	8001b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_I2C_Mem_Write+0x34>
 800194e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0ed      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_I2C_Mem_Write+0x4e>
 800196a:	2302      	movs	r3, #2
 800196c:	e0e6      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001976:	f7ff fae5 	bl	8000f44 <HAL_GetTick>
 800197a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2319      	movs	r3, #25
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fac3 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0d1      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2221      	movs	r2, #33	; 0x21
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2240      	movs	r2, #64	; 0x40
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c0:	88f8      	ldrh	r0, [r7, #6]
 80019c2:	893a      	ldrh	r2, [r7, #8]
 80019c4:	8979      	ldrh	r1, [r7, #10]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4603      	mov	r3, r0
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f9d3 	bl	8001d7c <I2C_RequestMemoryWrite>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0a9      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d90e      	bls.n	8001a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	8979      	ldrh	r1, [r7, #10]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fc2b 	bl	8002264 <I2C_TransferConfig>
 8001a0e:	e00f      	b.n	8001a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fc1a 	bl	8002264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 faad 	bl	8001f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e07b      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d034      	beq.n	8001ae8 <HAL_I2C_Mem_Write+0x1c8>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d130      	bne.n	8001ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fa3f 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04d      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d90e      	bls.n	8001ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fbcf 	bl	8002264 <I2C_TransferConfig>
 8001ac6:	e00f      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	8979      	ldrh	r1, [r7, #10]
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fbbe 	bl	8002264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d19e      	bne.n	8001a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa8c 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01a      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_I2C_Mem_Write+0x224>)
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	fe00e800 	.word	0xfe00e800

08001b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	817b      	strh	r3, [r7, #10]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	813b      	strh	r3, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	f040 80fd 	bne.w	8001d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_I2C_Mem_Read+0x34>
 8001b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0f1      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Mem_Read+0x4e>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e0ea      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b9e:	f7ff f9d1 	bl	8000f44 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f9af 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0d5      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2222      	movs	r2, #34	; 0x22
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001be8:	88f8      	ldrh	r0, [r7, #6]
 8001bea:	893a      	ldrh	r2, [r7, #8]
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f913 	bl	8001e24 <I2C_RequestMemoryRead>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0ad      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d90e      	bls.n	8001c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	22ff      	movs	r2, #255	; 0xff
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	8979      	ldrh	r1, [r7, #10]
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <HAL_I2C_Mem_Read+0x22c>)
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fb17 	bl	8002264 <I2C_TransferConfig>
 8001c36:	e00f      	b.n	8001c58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	8979      	ldrh	r1, [r7, #10]
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_I2C_Mem_Read+0x22c>)
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fb06 	bl	8002264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2104      	movs	r1, #4
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f956 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07c      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d034      	beq.n	8001d18 <HAL_I2C_Mem_Read+0x1d0>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d130      	bne.n	8001d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f927 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04d      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d90e      	bls.n	8001cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	8979      	ldrh	r1, [r7, #10]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fab7 	bl	8002264 <I2C_TransferConfig>
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 faa6 	bl	8002264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d19a      	bne.n	8001c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f974 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e01a      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_I2C_Mem_Read+0x230>)
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	80002400 	.word	0x80002400
 8001d78:	fe00e800 	.word	0xfe00e800

08001d7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <I2C_RequestMemoryWrite+0xa4>)
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fa5d 	bl	8002264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f8f0 	bl	8001f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e02c      	b.n	8001e18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8001dce:	e015      	b.n	8001dfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f8d6 	bl	8001f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e012      	b.n	8001e18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001df2:	893b      	ldrh	r3, [r7, #8]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2200      	movs	r2, #0
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f884 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	80002000 	.word	0x80002000

08001e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	817b      	strh	r3, [r7, #10]
 8001e36:	460b      	mov	r3, r1
 8001e38:	813b      	strh	r3, [r7, #8]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	8979      	ldrh	r1, [r7, #10]
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <I2C_RequestMemoryRead+0xa4>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa0a 	bl	8002264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f89d 	bl	8001f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e02c      	b.n	8001ebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6a:	893b      	ldrh	r3, [r7, #8]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
 8001e74:	e015      	b.n	8001ea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e76:	893b      	ldrh	r3, [r7, #8]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f883 	bl	8001f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e012      	b.n	8001ebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e98:	893b      	ldrh	r3, [r7, #8]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2140      	movs	r1, #64	; 0x40
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f831 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	80002000 	.word	0x80002000

08001ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d103      	bne.n	8001eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d007      	beq.n	8001f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	619a      	str	r2, [r3, #24]
  }
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f24:	e022      	b.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f2c:	d01e      	beq.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f809 	bl	8000f44 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00f      	b.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d0cd      	beq.n	8001f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa0:	e02c      	b.n	8001ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f870 	bl	800208c <I2C_IsErrorOccurred>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e02a      	b.n	800200c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fbc:	d01e      	beq.n	8001ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7fe ffc1 	bl	8000f44 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d113      	bne.n	8001ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e007      	b.n	800200c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d1cb      	bne.n	8001fa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002020:	e028      	b.n	8002074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f830 	bl	800208c <I2C_IsErrorOccurred>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e026      	b.n	8002084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7fe ff85 	bl	8000f44 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d113      	bne.n	8002074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e007      	b.n	8002084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b20      	cmp	r3, #32
 8002080:	d1cf      	bne.n	8002022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d075      	beq.n	80021a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020c0:	e056      	b.n	8002170 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c8:	d052      	beq.n	8002170 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7fe ff3b 	bl	8000f44 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_IsErrorOccurred+0x54>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d147      	bne.n	8002170 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002102:	d12e      	bne.n	8002162 <I2C_IsErrorOccurred+0xd6>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800210a:	d02a      	beq.n	8002162 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b20      	cmp	r3, #32
 8002110:	d027      	beq.n	8002162 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002120:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002122:	f7fe ff0f 	bl	8000f44 <HAL_GetTick>
 8002126:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002128:	e01b      	b.n	8002162 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800212a:	f7fe ff0b 	bl	8000f44 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b19      	cmp	r3, #25
 8002136:	d914      	bls.n	8002162 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d1dc      	bne.n	800212a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b20      	cmp	r3, #32
 800217c:	d003      	beq.n	8002186 <I2C_IsErrorOccurred+0xfa>
 800217e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002182:	2b00      	cmp	r3, #0
 8002184:	d09d      	beq.n	80020c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2220      	movs	r2, #32
 8002194:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff fe56 	bl	8001ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <I2C_IsErrorOccurred+0x1d4>)
 800222c:	400b      	ands	r3, r1
 800222e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002258:	4618      	mov	r0, r3
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	fe00e800 	.word	0xfe00e800

08002264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	817b      	strh	r3, [r7, #10]
 8002272:	4613      	mov	r3, r2
 8002274:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002284:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	4313      	orrs	r3, r2
 800228e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002292:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	0d5b      	lsrs	r3, r3, #21
 800229e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <I2C_TransferConfig+0x60>)
 80022a4:	430b      	orrs	r3, r1
 80022a6:	43db      	mvns	r3, r3
 80022a8:	ea02 0103 	and.w	r1, r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	03ff63ff 	.word	0x03ff63ff

080022c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d138      	bne.n	8002350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e032      	b.n	8002352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800231a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	d139      	bne.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800237e:	2302      	movs	r3, #2
 8002380:	e033      	b.n	80023ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2224      	movs	r2, #36	; 0x24
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d141      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002412:	d131      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241a:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800242c:	4a41      	ldr	r2, [pc, #260]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2232      	movs	r2, #50	; 0x32
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	3301      	adds	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244a:	e002      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d102      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f2      	bne.n	800244c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d158      	bne.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e057      	b.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002488:	e04d      	b.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d141      	bne.n	8002516 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249e:	d131      	bne.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2232      	movs	r2, #50	; 0x32
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	3301      	adds	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d6:	e002      	b.n	80024de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d102      	bne.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f2      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d112      	bne.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e011      	b.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002514:	e007      	b.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002524:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40007000 	.word	0x40007000
 8002538:	20000050 	.word	0x20000050
 800253c:	431bde83 	.word	0x431bde83

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e306      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d075      	beq.n	800264a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b97      	ldr	r3, [pc, #604]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002568:	4b94      	ldr	r3, [pc, #592]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0x3e>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d002      	beq.n	8002584 <HAL_RCC_OscConfig+0x44>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d10b      	bne.n	800259c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d05b      	beq.n	8002648 <HAL_RCC_OscConfig+0x108>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d157      	bne.n	8002648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e2e1      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x74>
 80025a6:	4b85      	ldr	r3, [pc, #532]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a84      	ldr	r2, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xb0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7b      	ldr	r2, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xb0>
 80025d8:	4b78      	ldr	r3, [pc, #480]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a77      	ldr	r2, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a74      	ldr	r2, [pc, #464]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fca4 	bl	8000f44 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fca0 	bl	8000f44 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2a6      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xc0>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fc90 	bl	8000f44 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fc8c 	bl	8000f44 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e292      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4b60      	ldr	r3, [pc, #384]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0xe8>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d075      	beq.n	8002742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002656:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002660:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d102      	bne.n	8002676 <HAL_RCC_OscConfig+0x136>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d002      	beq.n	800267c <HAL_RCC_OscConfig+0x13c>
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d11f      	bne.n	80026bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x154>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e265      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4946      	ldr	r1, [pc, #280]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026a8:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fbfd 	bl	8000eac <HAL_InitTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d043      	beq.n	8002740 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e251      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fc38 	bl	8000f44 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7fe fc34 	bl	8000f44 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e23a      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ea:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	492d      	ldr	r1, [pc, #180]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
 800270a:	e01a      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fc14 	bl	8000f44 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002720:	f7fe fc10 	bl	8000f44 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e216      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1e0>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d041      	beq.n	80027d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01c      	beq.n	8002790 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fbed 	bl	8000f44 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fbe9 	bl	8000f44 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1ef      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ef      	beq.n	800276e <HAL_RCC_OscConfig+0x22e>
 800278e:	e020      	b.n	80027d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fbd0 	bl	8000f44 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a6:	e00d      	b.n	80027c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7fe fbcc 	bl	8000f44 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d906      	bls.n	80027c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1d2      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	4b8c      	ldr	r3, [pc, #560]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ea      	bne.n	80027a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80a6 	beq.w	800292c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2b4>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x2b6>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b7f      	ldr	r3, [pc, #508]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	4a7e      	ldr	r2, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	; 0x58
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002816:	4b79      	ldr	r3, [pc, #484]	; (80029fc <HAL_RCC_OscConfig+0x4bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x4bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x4bc>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe fb89 	bl	8000f44 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7fe fb85 	bl	8000f44 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e18b      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x4bc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d108      	bne.n	800286e <HAL_RCC_OscConfig+0x32e>
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286c:	e024      	b.n	80028b8 <HAL_RCC_OscConfig+0x378>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d110      	bne.n	8002898 <HAL_RCC_OscConfig+0x358>
 8002876:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4a5a      	ldr	r2, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002896:	e00f      	b.n	80028b8 <HAL_RCC_OscConfig+0x378>
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fb40 	bl	8000f44 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fb3c 	bl	8000f44 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e140      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028de:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ed      	beq.n	80028c8 <HAL_RCC_OscConfig+0x388>
 80028ec:	e015      	b.n	800291a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fb29 	bl	8000f44 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fb25 	bl	8000f44 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e129      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800290c:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ed      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800291a:	7ffb      	ldrb	r3, [r7, #31]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d03c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01c      	beq.n	800297a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002946:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe faf8 	bl	8000f44 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002958:	f7fe faf4 	bl	8000f44 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0fa      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800296a:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCC_OscConfig+0x418>
 8002978:	e01b      	b.n	80029b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 800297c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fadb 	bl	8000f44 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002992:	f7fe fad7 	bl	8000f44 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0dd      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ef      	bne.n	8002992 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80d1 	beq.w	8002b5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	f000 808b 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d15e      	bne.n	8002a90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x4b8>)
 80029d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fab1 	bl	8000f44 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e00c      	b.n	8002a00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe faad 	bl	8000f44 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d905      	bls.n	8002a00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0b3      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a00:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ec      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_RCC_OscConfig+0x62c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6a11      	ldr	r1, [r2, #32]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a26:	0212      	lsls	r2, r2, #8
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a2e:	0852      	lsrs	r2, r2, #1
 8002a30:	3a01      	subs	r2, #1
 8002a32:	0552      	lsls	r2, r2, #21
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0652      	lsls	r2, r2, #25
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a46:	06d2      	lsls	r2, r2, #27
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	4947      	ldr	r1, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a44      	ldr	r2, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a41      	ldr	r2, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fa6c 	bl	8000f44 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fa68 	bl	8000f44 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e06e      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x530>
 8002a8e:	e066      	b.n	8002b5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a90:	4b35      	ldr	r3, [pc, #212]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a2e      	ldr	r2, [pc, #184]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002aae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa44 	bl	8000f44 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fa40 	bl	8000f44 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e046      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x580>
 8002ade:	e03e      	b.n	8002b5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e039      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d12c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d123      	bne.n	8002b5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d113      	bne.n	8002b5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	019f800c 	.word	0x019f800c

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e11e      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b91      	ldr	r3, [pc, #580]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	498c      	ldr	r1, [pc, #560]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b8a      	ldr	r3, [pc, #552]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e106      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d073      	beq.n	8002cac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d129      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f4      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bdc:	f000 f99e 	bl	8002f1c <RCC_GetSysClockFreqFromPLLSource>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4a7c      	ldr	r2, [pc, #496]	; (8002dd8 <HAL_RCC_ClockConfig+0x268>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d93f      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bea:	4b7a      	ldr	r3, [pc, #488]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d033      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d12f      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c0a:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c12:	4a70      	ldr	r2, [pc, #448]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e024      	b.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0c6      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0be      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c48:	f000 f8ce 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4a61      	ldr	r2, [pc, #388]	; (8002dd8 <HAL_RCC_ClockConfig+0x268>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d909      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5e:	4a5d      	ldr	r2, [pc, #372]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4957      	ldr	r1, [pc, #348]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f962 	bl	8000f44 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe f95e 	bl	8000f44 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e095      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a42      	ldr	r2, [pc, #264]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4936      	ldr	r1, [pc, #216]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d105      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d21d      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 020f 	bic.w	r2, r3, #15
 8002d28:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d30:	f7fe f908 	bl	8000f44 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe f904 	bl	8000f44 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e03b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1ed      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4917      	ldr	r1, [pc, #92]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	490f      	ldr	r1, [pc, #60]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9a:	f000 f825 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	490c      	ldr	r1, [pc, #48]	; (8002ddc <HAL_RCC_ClockConfig+0x26c>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x270>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f874 	bl	8000eac <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	04c4b400 	.word	0x04c4b400
 8002ddc:	08004674 	.word	0x08004674
 8002de0:	20000050 	.word	0x20000050
 8002de4:	20000054 	.word	0x20000054

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	e047      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e03e      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d136      	bne.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e46:	68d2      	ldr	r2, [r2, #12]
 8002e48:	0a12      	lsrs	r2, r2, #8
 8002e4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e00c      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	0a12      	lsrs	r2, r2, #8
 8002e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0e5b      	lsrs	r3, r3, #25
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	e001      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e90:	693b      	ldr	r3, [r7, #16]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	007a1200 	.word	0x007a1200

08002eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000050 	.word	0x20000050

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4904      	ldr	r1, [pc, #16]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08004684 	.word	0x08004684

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef4:	f7ff ffda 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08004684 	.word	0x08004684

08002f1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d10c      	bne.n	8002f5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f4a:	68d2      	ldr	r2, [r2, #12]
 8002f4c:	0a12      	lsrs	r2, r2, #8
 8002f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
    break;
 8002f58:	e00c      	b.n	8002f74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0a12      	lsrs	r2, r2, #8
 8002f68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    break;
 8002f72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0e5b      	lsrs	r3, r3, #25
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f8e:	687b      	ldr	r3, [r7, #4]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	007a1200 	.word	0x007a1200
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8098 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffe:	f7fd ffa1 	bl	8000f44 <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003004:	e009      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fd ff9d 	bl	8000f44 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	74fb      	strb	r3, [r7, #19]
        break;
 8003018:	e005      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d159      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01e      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d019      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ff5d 	bl	8000f44 <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	e00b      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd ff59 	bl	8000f44 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d902      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	74fb      	strb	r3, [r7, #19]
            break;
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ec      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d0:	e008      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7c7b      	ldrb	r3, [r7, #17]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4ba6      	ldr	r3, [pc, #664]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	4aa5      	ldr	r2, [pc, #660]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003102:	4ba0      	ldr	r3, [pc, #640]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	499c      	ldr	r1, [pc, #624]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003124:	4b97      	ldr	r3, [pc, #604]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 020c 	bic.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4994      	ldr	r1, [pc, #592]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	498b      	ldr	r1, [pc, #556]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003168:	4b86      	ldr	r3, [pc, #536]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	4983      	ldr	r1, [pc, #524]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318a:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	497a      	ldr	r1, [pc, #488]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4969      	ldr	r1, [pc, #420]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f0:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4961      	ldr	r1, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	4958      	ldr	r1, [pc, #352]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a4a      	ldr	r2, [pc, #296]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4942      	ldr	r1, [pc, #264]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328a:	d105      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003296:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032a4:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4934      	ldr	r1, [pc, #208]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	4926      	ldr	r1, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4918      	ldr	r1, [pc, #96]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a12      	ldr	r2, [pc, #72]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	490a      	ldr	r1, [pc, #40]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003378:	7cbb      	ldrb	r3, [r7, #18]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e049      	b.n	800342e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fce0 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 f99a 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e04a      	b.n	80034e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347a:	d013      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_TIM_Base_Start_IT+0xc4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_TIM_Base_Start_IT+0xc8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x6c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_TIM_Base_Start_IT+0xcc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d115      	bne.n	80034d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d015      	beq.n	80034e2 <HAL_TIM_Base_Start_IT+0xaa>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d011      	beq.n	80034e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	e008      	b.n	80034e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e000      	b.n	80034e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40013400 	.word	0x40013400
 8003504:	40014000 	.word	0x40014000
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_TIM_ConfigClockSource+0x1c>
 8003524:	2302      	movs	r3, #2
 8003526:	e0de      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x1da>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f000 80a9 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003568:	4a61      	ldr	r2, [pc, #388]	; (80036f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f200 80ae 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003570:	4a60      	ldr	r2, [pc, #384]	; (80036f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f000 80a1 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003578:	4a5e      	ldr	r2, [pc, #376]	; (80036f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f200 80a6 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003580:	4a5d      	ldr	r2, [pc, #372]	; (80036f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 8099 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003588:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800358a:	4293      	cmp	r3, r2
 800358c:	f200 809e 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 8003590:	4a5a      	ldr	r2, [pc, #360]	; (80036fc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	f000 8091 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_TIM_ConfigClockSource+0x1f0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	f200 8096 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035a4:	f000 8089 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 80035a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035ac:	f200 808e 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b4:	d03e      	beq.n	8003634 <HAL_TIM_ConfigClockSource+0x128>
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ba:	f200 8087 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c2:	f000 8086 	beq.w	80036d2 <HAL_TIM_ConfigClockSource+0x1c6>
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d87f      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d01a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0xfa>
 80035d0:	2b70      	cmp	r3, #112	; 0x70
 80035d2:	d87b      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d050      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
 80035d8:	2b60      	cmp	r3, #96	; 0x60
 80035da:	d877      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d03c      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x14e>
 80035e0:	2b50      	cmp	r3, #80	; 0x50
 80035e2:	d873      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d058      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x18e>
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d86f      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d064      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 80035f0:	2b30      	cmp	r3, #48	; 0x30
 80035f2:	d86b      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d060      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d867      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05c      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003600:	2b10      	cmp	r3, #16
 8003602:	d05a      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x1ae>
 8003604:	e062      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6899      	ldr	r1, [r3, #8]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f000 f97f 	bl	8003918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	609a      	str	r2, [r3, #8]
      break;
 8003632:	e04f      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6899      	ldr	r1, [r3, #8]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f000 f968 	bl	8003918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003656:	609a      	str	r2, [r3, #8]
      break;
 8003658:	e03c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 f8da 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2150      	movs	r1, #80	; 0x50
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f933 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 8003678:	e02c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	461a      	mov	r2, r3
 8003688:	f000 f8f9 	bl	800387e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2160      	movs	r1, #96	; 0x60
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f923 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 8003698:	e01c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 f8ba 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2140      	movs	r1, #64	; 0x40
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f913 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80036b8:	e00c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f000 f90a 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80036ca:	e003      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80036d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	00100070 	.word	0x00100070
 80036f4:	00100040 	.word	0x00100040
 80036f8:	00100030 	.word	0x00100030
 80036fc:	00100020 	.word	0x00100020

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <TIM_Base_SetConfig+0x104>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x38>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x38>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a39      	ldr	r2, [pc, #228]	; (8003808 <TIM_Base_SetConfig+0x108>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <TIM_Base_SetConfig+0x10c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a37      	ldr	r2, [pc, #220]	; (8003810 <TIM_Base_SetConfig+0x110>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <TIM_Base_SetConfig+0x104>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01b      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d017      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <TIM_Base_SetConfig+0x108>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a29      	ldr	r2, [pc, #164]	; (800380c <TIM_Base_SetConfig+0x10c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00f      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <TIM_Base_SetConfig+0x110>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_Base_SetConfig+0x114>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <TIM_Base_SetConfig+0x118>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_Base_SetConfig+0x11c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <TIM_Base_SetConfig+0x104>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00f      	beq.n	80037e8 <TIM_Base_SetConfig+0xe8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a11      	ldr	r2, [pc, #68]	; (8003810 <TIM_Base_SetConfig+0x110>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_Base_SetConfig+0xe8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <TIM_Base_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0xe8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <TIM_Base_SetConfig+0x118>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0xe8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <TIM_Base_SetConfig+0x11c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	615a      	str	r2, [r3, #20]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 030a 	bic.w	r3, r3, #10
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0210 	bic.w	r2, r3, #16
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f043 0307 	orr.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	021a      	lsls	r2, r3, #8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	431a      	orrs	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e065      	b.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2b      	ldr	r2, [pc, #172]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d108      	bne.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d013      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10c      	bne.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40014000 	.word	0x40014000

08003a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e042      	b.n	8003af4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd f91f 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2224      	movs	r2, #36	; 0x24
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f82c 	bl	8003afc <UART_SetConfig>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e022      	b.n	8003af4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 faec 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb73 	bl	80041d8 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b00:	b08c      	sub	sp, #48	; 0x30
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4bab      	ldr	r3, [pc, #684]	; (8003dd8 <UART_SetConfig+0x2dc>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4aa0      	ldr	r2, [pc, #640]	; (8003ddc <UART_SetConfig+0x2e0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b64:	4313      	orrs	r3, r2
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	f023 010f 	bic.w	r1, r3, #15
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a91      	ldr	r2, [pc, #580]	; (8003de0 <UART_SetConfig+0x2e4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d125      	bne.n	8003bec <UART_SetConfig+0xf0>
 8003ba0:	4b90      	ldr	r3, [pc, #576]	; (8003de4 <UART_SetConfig+0x2e8>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d81a      	bhi.n	8003be4 <UART_SetConfig+0xe8>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0xb8>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bca:	e0d6      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	e0d2      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bda:	e0ce      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e0ca      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bea:	e0c6      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <UART_SetConfig+0x2ec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d138      	bne.n	8003c68 <UART_SetConfig+0x16c>
 8003bf6:	4b7b      	ldr	r3, [pc, #492]	; (8003de4 <UART_SetConfig+0x2e8>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d82d      	bhi.n	8003c60 <UART_SetConfig+0x164>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x110>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c46:	e098      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	e094      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e090      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e08c      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e088      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <UART_SetConfig+0x2f0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d125      	bne.n	8003cbe <UART_SetConfig+0x1c2>
 8003c72:	4b5c      	ldr	r3, [pc, #368]	; (8003de4 <UART_SetConfig+0x2e8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d016      	beq.n	8003cae <UART_SetConfig+0x1b2>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d818      	bhi.n	8003cb6 <UART_SetConfig+0x1ba>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d00a      	beq.n	8003c9e <UART_SetConfig+0x1a2>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d814      	bhi.n	8003cb6 <UART_SetConfig+0x1ba>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <UART_SetConfig+0x19a>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d008      	beq.n	8003ca6 <UART_SetConfig+0x1aa>
 8003c94:	e00f      	b.n	8003cb6 <UART_SetConfig+0x1ba>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9c:	e06d      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca4:	e069      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cac:	e065      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb4:	e061      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbc:	e05d      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4b      	ldr	r2, [pc, #300]	; (8003df0 <UART_SetConfig+0x2f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <UART_SetConfig+0x218>
 8003cc8:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <UART_SetConfig+0x2e8>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd4:	d016      	beq.n	8003d04 <UART_SetConfig+0x208>
 8003cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd8:	d818      	bhi.n	8003d0c <UART_SetConfig+0x210>
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d00a      	beq.n	8003cf4 <UART_SetConfig+0x1f8>
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d814      	bhi.n	8003d0c <UART_SetConfig+0x210>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <UART_SetConfig+0x1f0>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d008      	beq.n	8003cfc <UART_SetConfig+0x200>
 8003cea:	e00f      	b.n	8003d0c <UART_SetConfig+0x210>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e042      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	e03e      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e03a      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d04:	2308      	movs	r3, #8
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e036      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e032      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <UART_SetConfig+0x2e0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d12a      	bne.n	8003d74 <UART_SetConfig+0x278>
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <UART_SetConfig+0x2e8>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d2c:	d01a      	beq.n	8003d64 <UART_SetConfig+0x268>
 8003d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d32:	d81b      	bhi.n	8003d6c <UART_SetConfig+0x270>
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d38:	d00c      	beq.n	8003d54 <UART_SetConfig+0x258>
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3e:	d815      	bhi.n	8003d6c <UART_SetConfig+0x270>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <UART_SetConfig+0x250>
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d48:	d008      	beq.n	8003d5c <UART_SetConfig+0x260>
 8003d4a:	e00f      	b.n	8003d6c <UART_SetConfig+0x270>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d52:	e012      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e00e      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e00a      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e006      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e002      	b.n	8003d7a <UART_SetConfig+0x27e>
 8003d74:	2310      	movs	r3, #16
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <UART_SetConfig+0x2e0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	f040 80a8 	bne.w	8003ed6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d834      	bhi.n	8003df8 <UART_SetConfig+0x2fc>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x298>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003df9 	.word	0x08003df9
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003dc7 	.word	0x08003dc7
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003df9 	.word	0x08003df9
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7ff f884 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dbe:	e021      	b.n	8003e04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <UART_SetConfig+0x2f8>)
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dc4:	e01e      	b.n	8003e04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7ff f80f 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dcc:	e01a      	b.n	8003e04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd4:	e016      	b.n	8003e04 <UART_SetConfig+0x308>
 8003dd6:	bf00      	nop
 8003dd8:	cfff69f3 	.word	0xcfff69f3
 8003ddc:	40008000 	.word	0x40008000
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40004400 	.word	0x40004400
 8003dec:	40004800 	.word	0x40004800
 8003df0:	40004c00 	.word	0x40004c00
 8003df4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 812a 	beq.w	8004060 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	4a9e      	ldr	r2, [pc, #632]	; (800408c <UART_SetConfig+0x590>)
 8003e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d305      	bcc.n	8003e3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d903      	bls.n	8003e44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e42:	e10d      	b.n	8004060 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2200      	movs	r2, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	60fa      	str	r2, [r7, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	4a8e      	ldr	r2, [pc, #568]	; (800408c <UART_SetConfig+0x590>)
 8003e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e66:	f7fc f9d7 	bl	8000218 <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	020b      	lsls	r3, r1, #8
 8003e7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e80:	0202      	lsls	r2, r0, #8
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	6849      	ldr	r1, [r1, #4]
 8003e86:	0849      	lsrs	r1, r1, #1
 8003e88:	2000      	movs	r0, #0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	eb12 0804 	adds.w	r8, r2, r4
 8003e92:	eb43 0905 	adc.w	r9, r3, r5
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	469a      	mov	sl, r3
 8003e9e:	4693      	mov	fp, r2
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	465b      	mov	r3, fp
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	f7fc f9b6 	bl	8000218 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d308      	bcc.n	8003ece <UART_SetConfig+0x3d2>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec2:	d204      	bcs.n	8003ece <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	e0c8      	b.n	8004060 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ed4:	e0c4      	b.n	8004060 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d167      	bne.n	8003fb0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d828      	bhi.n	8003f3a <UART_SetConfig+0x43e>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x3f4>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe ffd6 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f1a:	e014      	b.n	8003f46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7fe ffe8 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f22:	e010      	b.n	8003f46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <UART_SetConfig+0x594>)
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f28:	e00d      	b.n	8003f46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe ff5d 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8003f2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f30:	e009      	b.n	8003f46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8089 	beq.w	8004060 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	4a4e      	ldr	r2, [pc, #312]	; (800408c <UART_SetConfig+0x590>)
 8003f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f60:	005a      	lsls	r2, r3, #1
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	441a      	add	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d916      	bls.n	8003fa8 <UART_SetConfig+0x4ac>
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d212      	bcs.n	8003fa8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f023 030f 	bic.w	r3, r3, #15
 8003f8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	8bfb      	ldrh	r3, [r7, #30]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	8bfa      	ldrh	r2, [r7, #30]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	e05b      	b.n	8004060 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fae:	e057      	b.n	8004060 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d828      	bhi.n	800400a <UART_SetConfig+0x50e>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0x4c4>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	0800400b 	.word	0x0800400b
 8003fd0:	08003ffb 	.word	0x08003ffb
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe ff6e 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fea:	e014      	b.n	8004016 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe ff80 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff2:	e010      	b.n	8004016 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <UART_SetConfig+0x594>)
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ff8:	e00d      	b.n	8004016 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7fe fef5 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004000:	e009      	b.n	8004016 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004008:	e005      	b.n	8004016 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004014:	bf00      	nop
    }

    if (pclk != 0U)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d021      	beq.n	8004060 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <UART_SetConfig+0x590>)
 8004022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004026:	461a      	mov	r2, r3
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	fbb3 f2f2 	udiv	r2, r3, r2
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	441a      	add	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d909      	bls.n	800405a <UART_SetConfig+0x55e>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d205      	bcs.n	800405a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	b29a      	uxth	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e002      	b.n	8004060 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2201      	movs	r2, #1
 8004064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2201      	movs	r2, #1
 800406c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800407c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	0800468c 	.word	0x0800468c
 8004090:	00f42400 	.word	0x00f42400

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d10a      	bne.n	80041aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e8:	f7fc feac 	bl	8000f44 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10e      	bne.n	800421a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f82f 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e025      	b.n	8004266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d10e      	bne.n	8004246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f819 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b09c      	sub	sp, #112	; 0x70
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	e0a9      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	f000 80a5 	beq.w	80043d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fc fe5b 	bl	8000f44 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800429a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429c:	2b00      	cmp	r3, #0
 800429e:	d140      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e069      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d051      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d149      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004348:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
 800436a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	613b      	str	r3, [r7, #16]
   return(result);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	66bb      	str	r3, [r7, #104]	; 0x68
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3308      	adds	r3, #8
 800439a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800439c:	623a      	str	r2, [r7, #32]
 800439e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	6a3a      	ldr	r2, [r7, #32]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e010      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f43f af46 	beq.w	8004280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3770      	adds	r7, #112	; 0x70
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_UARTEx_DisableFifoMode+0x16>
 8004410:	2302      	movs	r3, #2
 8004412:	e027      	b.n	8004464 <HAL_UARTEx_DisableFifoMode+0x66>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004442:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004484:	2302      	movs	r3, #2
 8004486:	e02d      	b.n	80044e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	; 0x24
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f84f 	bl	8004568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e02d      	b.n	8004560 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f811 	bl	8004568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004574:	2b00      	cmp	r3, #0
 8004576:	d108      	bne.n	800458a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004588:	e031      	b.n	80045ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800458a:	2308      	movs	r3, #8
 800458c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800458e:	2308      	movs	r3, #8
 8004590:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	0e5b      	lsrs	r3, r3, #25
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	0f5b      	lsrs	r3, r3, #29
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045b2:	7bbb      	ldrb	r3, [r7, #14]
 80045b4:	7b3a      	ldrb	r2, [r7, #12]
 80045b6:	4911      	ldr	r1, [pc, #68]	; (80045fc <UARTEx_SetNbDataToProcess+0x94>)
 80045b8:	5c8a      	ldrb	r2, [r1, r2]
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045be:	7b3a      	ldrb	r2, [r7, #12]
 80045c0:	490f      	ldr	r1, [pc, #60]	; (8004600 <UARTEx_SetNbDataToProcess+0x98>)
 80045c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	7b7a      	ldrb	r2, [r7, #13]
 80045d4:	4909      	ldr	r1, [pc, #36]	; (80045fc <UARTEx_SetNbDataToProcess+0x94>)
 80045d6:	5c8a      	ldrb	r2, [r1, r2]
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045dc:	7b7a      	ldrb	r2, [r7, #13]
 80045de:	4908      	ldr	r1, [pc, #32]	; (8004600 <UARTEx_SetNbDataToProcess+0x98>)
 80045e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	080046a4 	.word	0x080046a4
 8004600:	080046ac 	.word	0x080046ac

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	; (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	; (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x44>)
 8004628:	f000 f818 	bl	800465c <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	080046bc 	.word	0x080046bc
 8004650:	080046bc 	.word	0x080046bc
 8004654:	080046bc 	.word	0x080046bc
 8004658:	080046c0 	.word	0x080046c0

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
