
firmware_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021ec  080021ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ec  080021ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002200  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002200  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009da9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abf  00000000  00000000  00029e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078b  00000000  00000000  0002c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c710  00000000  00000000  0002ca6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6ed  00000000  00000000  0004917b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b35c2  00000000  00000000  00054868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027b8  00000000  00000000  00107e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  0010a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080021c4 	.word	0x080021c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080021c4 	.word	0x080021c4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa21 	bl	8000662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f807 	bl	8000232 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8c0 	bl	80003a8 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000228:	f000 f844 	bl	80002b4 <MX_DAC1_Init>
  MX_I2C1_Init();
 800022c:	f000 f87c 	bl	8000328 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0x18>

08000232 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b094      	sub	sp, #80	; 0x50
 8000236:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	2238      	movs	r2, #56	; 0x38
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f001 ff93 	bl	800216c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000254:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000258:	f000 ffec 	bl	8001234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025c:	2302      	movs	r3, #2
 800025e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2340      	movs	r3, #64	; 0x40
 8000268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f882 	bl	800137c <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800027e:	f000 f8cb 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000286:	2301      	movs	r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fb86 	bl	80019ac <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002a6:	f000 f8b7 	bl	8000418 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3750      	adds	r7, #80	; 0x50
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08c      	sub	sp, #48	; 0x30
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002ba:	463b      	mov	r3, r7
 80002bc:	2230      	movs	r2, #48	; 0x30
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 ff53 	bl	800216c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_DAC1_Init+0x6c>)
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <MX_DAC1_Init+0x70>)
 80002ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002cc:	4814      	ldr	r0, [pc, #80]	; (8000320 <MX_DAC1_Init+0x6c>)
 80002ce:	f000 fb3e 	bl	800094e <HAL_DAC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002d8:	f000 f89e 	bl	8000418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80002dc:	2302      	movs	r3, #2
 80002de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80002f8:	2301      	movs	r3, #1
 80002fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <MX_DAC1_Init+0x6c>)
 8000308:	f000 fb44 	bl	8000994 <HAL_DAC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000312:	f000 f881 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3730      	adds	r7, #48	; 0x30
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	50000800 	.word	0x50000800

08000328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_I2C1_Init+0x74>)
 800032e:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_I2C1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_I2C1_Init+0x74>)
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x7c>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_I2C1_Init+0x74>)
 8000340:	2201      	movs	r2, #1
 8000342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <MX_I2C1_Init+0x74>)
 8000364:	f000 fe40 	bl	8000fe8 <HAL_I2C_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036e:	f000 f853 	bl	8000418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000372:	2100      	movs	r1, #0
 8000374:	4809      	ldr	r0, [pc, #36]	; (800039c <MX_I2C1_Init+0x74>)
 8000376:	f000 fec6 	bl	8001106 <HAL_I2CEx_ConfigAnalogFilter>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000380:	f000 f84a 	bl	8000418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000384:	2100      	movs	r1, #0
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_I2C1_Init+0x74>)
 8000388:	f000 ff08 	bl	800119c <HAL_I2CEx_ConfigDigitalFilter>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f841 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	40005400 	.word	0x40005400
 80003a4:	00303d5b 	.word	0x00303d5b

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_GPIO_Init+0x68>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a13      	ldr	r2, [pc, #76]	; (8000410 <MX_GPIO_Init+0x68>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_GPIO_Init+0x68>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_GPIO_Init+0x68>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <MX_GPIO_Init+0x68>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_GPIO_Init+0x68>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80003ee:	2309      	movs	r3, #9
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x6c>)
 8000402:	f000 fc6f 	bl	8000ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	48000400 	.word	0x48000400

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6613      	str	r3, [r2, #96]	; 0x60
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	6593      	str	r3, [r2, #88]	; 0x58
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <HAL_DAC_MspInit+0x74>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d124      	bne.n	80004d8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 8000494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004be:	2310      	movs	r3, #16
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c2:	2303      	movs	r3, #3
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f000 fc06 	bl	8000ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80004d8:	bf00      	nop
 80004da:	3728      	adds	r7, #40	; 0x28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	50000800 	.word	0x50000800
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09a      	sub	sp, #104	; 0x68
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	2244      	movs	r2, #68	; 0x44
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fe2f 	bl	800216c <memset>
  if(hi2c->Instance==I2C1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <HAL_I2C_MspInit+0xa8>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d137      	bne.n	8000588 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000518:	2340      	movs	r3, #64	; 0x40
 800051a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fc31 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000530:	f7ff ff72 	bl	8000418 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <HAL_I2C_MspInit+0xac>)
 8000536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <HAL_I2C_MspInit+0xac>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <HAL_I2C_MspInit+0xac>)
 8000542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA13     ------> I2C1_SCL
    PA14     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800054c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000550:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000552:	2312      	movs	r3, #18
 8000554:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000556:	2301      	movs	r3, #1
 8000558:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800055e:	2304      	movs	r3, #4
 8000560:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fbba 	bl	8000ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_I2C_MspInit+0xac>)
 8000572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_I2C_MspInit+0xac>)
 8000576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057a:	6593      	str	r3, [r2, #88]	; 0x58
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_I2C_MspInit+0xac>)
 800057e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3768      	adds	r7, #104	; 0x68
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40005400 	.word	0x40005400
 8000594:	40021000 	.word	0x40021000

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e4:	f000 f890 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000612:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490e      	ldr	r1, [pc, #56]	; (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0b      	ldr	r4, [pc, #44]	; (800065c <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063a:	f7ff ffd7 	bl	80005ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063e:	f001 fd9d 	bl	800217c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff fde9 	bl	8000218 <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   r0, =_estack
 8000648:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000654:	080021f4 	.word	0x080021f4
  ldr r2, =_sbss
 8000658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800065c:	2000008c 	.word	0x2000008c

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>

08000662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f93d 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000672:	200f      	movs	r0, #15
 8000674:	f000 f80e 	bl	8000694 <HAL_InitTick>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e001      	b.n	8000688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000684:	f7ff fece 	bl	8000424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000688:	79fb      	ldrb	r3, [r7, #7]

}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_InitTick+0x68>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d022      	beq.n	80006ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_InitTick+0x6c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <HAL_InitTick+0x68>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f93a 	bl	8000936 <HAL_SYSTICK_Config>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10f      	bne.n	80006e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b0f      	cmp	r3, #15
 80006cc:	d809      	bhi.n	80006e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ce:	2200      	movs	r2, #0
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 f914 	bl	8000902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_InitTick+0x70>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	e007      	b.n	80006f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e004      	b.n	80006f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e001      	b.n	80006f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000000 	.word	0x20000000
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4413      	add	r3, r2
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_IncTick+0x1c>)
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	20000088 	.word	0x20000088
 8000728:	20000008 	.word	0x20000008

0800072c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <HAL_GetTick+0x14>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000088 	.word	0x20000088

08000744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800074c:	f7ff ffee 	bl	800072c <HAL_GetTick>
 8000750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800075c:	d004      	beq.n	8000768 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_Delay+0x40>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000768:	bf00      	nop
 800076a:	f7ff ffdf 	bl	800072c <HAL_GetTick>
 800076e:	4602      	mov	r2, r0
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	429a      	cmp	r2, r3
 8000778:	d8f7      	bhi.n	800076a <HAL_Delay+0x26>
  {
  }
}
 800077a:	bf00      	nop
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000008 	.word	0x20000008

08000788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ba:	4a04      	ldr	r2, [pc, #16]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60d3      	str	r3, [r2, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <__NVIC_GetPriorityGrouping+0x18>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	f003 0307 	and.w	r3, r3, #7
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008cc:	f7ff ff8e 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff47 	bl	8000788 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff5e 	bl	80007d0 <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff90 	bl	8000840 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffb2 	bl	80008a8 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e014      	b.n	800098a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d105      	bne.n	8000976 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fd7b 	bl	800046c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2202      	movs	r2, #2
 800097a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d101      	bne.n	80009ac <HAL_DAC_ConfigChannel+0x18>
 80009a8:	2302      	movs	r3, #2
 80009aa:	e192      	b.n	8000cd2 <HAL_DAC_ConfigChannel+0x33e>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2201      	movs	r2, #1
 80009b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2202      	movs	r2, #2
 80009b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d174      	bne.n	8000aaa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80009c0:	f7ff feb4 	bl	800072c <HAL_GetTick>
 80009c4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d134      	bne.n	8000a36 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80009cc:	e011      	b.n	80009f2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80009ce:	f7ff fead 	bl	800072c <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d90a      	bls.n	80009f2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	f043 0208 	orr.w	r2, r3, #8
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2203      	movs	r2, #3
 80009ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e16f      	b.n	8000cd2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1e6      	bne.n	80009ce <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fe9f 	bl	8000744 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a10:	e01e      	b.n	8000a50 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a12:	f7ff fe8b 	bl	800072c <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d90a      	bls.n	8000a36 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f043 0208 	orr.w	r2, r3, #8
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e14d      	b.n	8000cd2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dbe8      	blt.n	8000a12 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fe7f 	bl	8000744 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	ea02 0103 	and.w	r1, r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	409a      	lsls	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	ea02 0103 	and.w	r1, r2, r3
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11d      	bne.n	8000aee <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	221f      	movs	r2, #31
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aca:	4013      	ands	r3, r2
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2207      	movs	r2, #7
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b06:	4013      	ands	r3, r2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d102      	bne.n	8000b18 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	e00f      	b.n	8000b38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d102      	bne.n	8000b26 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	e008      	b.n	8000b38 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	e001      	b.n	8000b38 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6a3a      	ldr	r2, [r7, #32]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d102      	bne.n	8000b6c <HAL_DAC_ConfigChannel+0x1d8>
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	e000      	b.n	8000b6e <HAL_DAC_ConfigChannel+0x1da>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b86:	4013      	ands	r3, r2
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	795b      	ldrb	r3, [r3, #5]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d102      	bne.n	8000b98 <HAL_DAC_ConfigChannel+0x204>
 8000b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b96:	e000      	b.n	8000b9a <HAL_DAC_ConfigChannel+0x206>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d114      	bne.n	8000bda <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000bb0:	f001 f89a 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8000bb4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_DAC_ConfigChannel+0x348>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d904      	bls.n	8000bc8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc6:	e00f      	b.n	8000be8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	4a45      	ldr	r2, [pc, #276]	; (8000ce0 <HAL_DAC_ConfigChannel+0x34c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d90a      	bls.n	8000be6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd8:	e006      	b.n	8000be8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be0:	4313      	orrs	r3, r2
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
 8000be4:	e000      	b.n	8000be8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000be6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c52:	4313      	orrs	r3, r2
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	22c0      	movs	r2, #192	; 0xc0
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43da      	mvns	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	400a      	ands	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	ea02 0103 	and.w	r1, r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	09896800 	.word	0x09896800
 8000ce0:	04c4b400 	.word	0x04c4b400

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cf2:	e15a      	b.n	8000faa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 814c 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80a6 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5c:	4a5a      	ldr	r2, [pc, #360]	; (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6613      	str	r3, [r2, #96]	; 0x60
 8000e64:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e70:	4a56      	ldr	r2, [pc, #344]	; (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e9a:	d01f      	beq.n	8000edc <HAL_GPIO_Init+0x1f8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_GPIO_Init+0x2ec>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d019      	beq.n	8000ed8 <HAL_GPIO_Init+0x1f4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <HAL_GPIO_Init+0x2f0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d013      	beq.n	8000ed4 <HAL_GPIO_Init+0x1f0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <HAL_GPIO_Init+0x2f4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <HAL_GPIO_Init+0x2f8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_GPIO_Init+0x2fc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1e4>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e00a      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ec8:	2306      	movs	r3, #6
 8000eca:	e008      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000edc:	2300      	movs	r3, #0
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eee:	4937      	ldr	r1, [pc, #220]	; (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f4a:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_GPIO_Init+0x300>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f47f ae9d 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	48001400 	.word	0x48001400
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e081      	b.n	80010fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fa6a 	bl	80004e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2224      	movs	r2, #36	; 0x24
 8001018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	e006      	b.n	8001070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800106e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d104      	bne.n	8001082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d9      	ldr	r1, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b20      	cmp	r3, #32
 800111a:	d138      	bne.n	800118e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001126:	2302      	movs	r3, #2
 8001128:	e032      	b.n	8001190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2224      	movs	r2, #36	; 0x24
 8001136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001158:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2220      	movs	r2, #32
 800117e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800118e:	2302      	movs	r3, #2
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	d139      	bne.n	8001226 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011bc:	2302      	movs	r3, #2
 80011be:	e033      	b.n	8001228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001226:	2302      	movs	r3, #2
  }
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d141      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124e:	d131      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001256:	4a46      	ldr	r2, [pc, #280]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800125c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001268:	4a41      	ldr	r2, [pc, #260]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001270:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2232      	movs	r2, #50	; 0x32
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	0c9b      	lsrs	r3, r3, #18
 8001282:	3301      	adds	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	e002      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3b01      	subs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d102      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f2      	bne.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ae:	d158      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e057      	b.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012c4:	e04d      	b.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012cc:	d141      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d131      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e2:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2232      	movs	r2, #50	; 0x32
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	0c9b      	lsrs	r3, r3, #18
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001312:	e002      	b.n	800131a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3b01      	subs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001326:	d102      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f2      	bne.n	8001314 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d112      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e011      	b.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001350:	e007      	b.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001360:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40007000 	.word	0x40007000
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e306      	b.n	800199c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d075      	beq.n	8001486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139a:	4b97      	ldr	r3, [pc, #604]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a4:	4b94      	ldr	r3, [pc, #592]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d102      	bne.n	80013ba <HAL_RCC_OscConfig+0x3e>
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_OscConfig+0x44>
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d10b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b8d      	ldr	r3, [pc, #564]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d05b      	beq.n	8001484 <HAL_RCC_OscConfig+0x108>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d157      	bne.n	8001484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e2e1      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x74>
 80013e2:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a84      	ldr	r2, [pc, #528]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x98>
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a7e      	ldr	r2, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b7c      	ldr	r3, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7b      	ldr	r2, [pc, #492]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 8001414:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a74      	ldr	r2, [pc, #464]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff f97a 	bl	800072c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff f976 	bl	800072c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e2a6      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xc0>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff f966 	bl	800072c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff f962 	bl	800072c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e292      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0xe8>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x136>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d002      	beq.n	80014b8 <HAL_RCC_OscConfig+0x13c>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d11f      	bne.n	80014f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_OscConfig+0x154>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e265      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	4946      	ldr	r1, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <HAL_RCC_OscConfig+0x280>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f8d3 	bl	8000694 <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d043      	beq.n	800157c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e251      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d023      	beq.n	8001548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff f90e 	bl	800072c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff f90a 	bl	800072c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e23a      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001526:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	061b      	lsls	r3, r3, #24
 8001540:	492d      	ldr	r1, [pc, #180]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e01a      	b.n	800157e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff f8ea 	bl	800072c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff f8e6 	bl	800072c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e216      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1e0>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d041      	beq.n	800160e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01c      	beq.n	80015cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff f8c3 	bl	800072c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff f8bf 	bl	800072c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1ef      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80015be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0ef      	beq.n	80015aa <HAL_RCC_OscConfig+0x22e>
 80015ca:	e020      	b.n	800160e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff f8a6 	bl	800072c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e2:	e00d      	b.n	8001600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f8a2 	bl	800072c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d906      	bls.n	8001600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1d2      	b.n	800199c <HAL_RCC_OscConfig+0x620>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001600:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ea      	bne.n	80015e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80a6 	beq.w	8001768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_OscConfig+0x2b4>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x2b6>
 8001630:	2300      	movs	r3, #0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00d      	beq.n	8001652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	4a7e      	ldr	r2, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b79      	ldr	r3, [pc, #484]	; (8001838 <HAL_RCC_OscConfig+0x4bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x4bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a75      	ldr	r2, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x4bc>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff f85f 	bl	800072c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff f85b 	bl	800072c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e18b      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x4bc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_RCC_OscConfig+0x32e>
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	e024      	b.n	80016f4 <HAL_RCC_OscConfig+0x378>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d110      	bne.n	80016d4 <HAL_RCC_OscConfig+0x358>
 80016b2:	4b60      	ldr	r3, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d2:	e00f      	b.n	80016f4 <HAL_RCC_OscConfig+0x378>
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d016      	beq.n	800172a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff f816 	bl	800072c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff f812 	bl	800072c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e140      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ed      	beq.n	8001704 <HAL_RCC_OscConfig+0x388>
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7fe ffff 	bl	800072c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7fe fffb 	bl	800072c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e129      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ed      	bne.n	8001732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001782:	4a2c      	ldr	r2, [pc, #176]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7fe ffce 	bl	800072c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001794:	f7fe ffca 	bl	800072c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0fa      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x418>
 80017b4:	e01b      	b.n	80017ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7fe ffb1 	bl	800072c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ce:	f7fe ffad 	bl	800072c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0dd      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80d1 	beq.w	800199a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b0c      	cmp	r3, #12
 8001802:	f000 808b 	beq.w	800191c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d15e      	bne.n	80018cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7fe ff87 	bl	800072c <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001820:	e00c      	b.n	800183c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe ff83 	bl	800072c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d905      	bls.n	800183c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0b3      	b.n	800199c <HAL_RCC_OscConfig+0x620>
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ec      	bne.n	8001822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_RCC_OscConfig+0x62c>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6a11      	ldr	r1, [r2, #32]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001858:	3a01      	subs	r2, #1
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001862:	0212      	lsls	r2, r2, #8
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800186a:	0852      	lsrs	r2, r2, #1
 800186c:	3a01      	subs	r2, #1
 800186e:	0552      	lsls	r2, r2, #21
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001876:	0852      	lsrs	r2, r2, #1
 8001878:	3a01      	subs	r2, #1
 800187a:	0652      	lsls	r2, r2, #25
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001882:	06d2      	lsls	r2, r2, #27
 8001884:	430a      	orrs	r2, r1
 8001886:	4947      	ldr	r1, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a44      	ldr	r2, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a41      	ldr	r2, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7fe ff42 	bl	800072c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7fe ff3e 	bl	800072c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e06e      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x530>
 80018ca:	e066      	b.n	800199a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a34      	ldr	r2, [pc, #208]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 80018ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7fe ff1a 	bl	800072c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ff16 	bl	800072c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e046      	b.n	800199c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x580>
 800191a:	e03e      	b.n	800199a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e039      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x628>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	429a      	cmp	r2, r3
 800193a:	d12c      	bne.n	8001996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d123      	bne.n	8001996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11b      	bne.n	8001996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d113      	bne.n	8001996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d109      	bne.n	8001996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	019f800c 	.word	0x019f800c

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e11e      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b8e      	ldr	r3, [pc, #568]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 020f 	bic.w	r2, r3, #15
 80019da:	498c      	ldr	r1, [pc, #560]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b8a      	ldr	r3, [pc, #552]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e106      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d073      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d129      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a08:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0f4      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a18:	f000 f972 	bl	8001d00 <RCC_GetSysClockFreqFromPLLSource>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4a7c      	ldr	r2, [pc, #496]	; (8001c14 <HAL_RCC_ClockConfig+0x268>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d93f      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a26:	4b7a      	ldr	r3, [pc, #488]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d033      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12f      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a4e:	4a70      	ldr	r2, [pc, #448]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e024      	b.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0c6      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0be      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a84:	f000 f8ce 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4a61      	ldr	r2, [pc, #388]	; (8001c14 <HAL_RCC_ClockConfig+0x268>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d909      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9a:	4a5d      	ldr	r2, [pc, #372]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4957      	ldr	r1, [pc, #348]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab8:	f7fe fe38 	bl	800072c <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7fe fe34 	bl	800072c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e095      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4936      	ldr	r1, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b80      	cmp	r3, #128	; 0x80
 8001b40:	d105      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d21d      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 020f 	bic.w	r2, r3, #15
 8001b64:	4929      	ldr	r1, [pc, #164]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b6c:	f7fe fdde 	bl	800072c <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7fe fdda 	bl	800072c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e03b      	b.n	8001c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1ed      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4917      	ldr	r1, [pc, #92]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490f      	ldr	r1, [pc, #60]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd6:	f000 f825 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490c      	ldr	r1, [pc, #48]	; (8001c18 <HAL_RCC_ClockConfig+0x26c>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x270>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fd4a 	bl	8000694 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	04c4b400 	.word	0x04c4b400
 8001c18:	080021dc 	.word	0x080021dc
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e047      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e03e      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d136      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c78:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c82:	68d2      	ldr	r2, [r2, #12]
 8001c84:	0a12      	lsrs	r2, r2, #8
 8001c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
      break;
 8001c90:	e00c      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9c:	68d2      	ldr	r2, [r2, #12]
 8001c9e:	0a12      	lsrs	r2, r2, #8
 8001ca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
      break;
 8001caa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0e5b      	lsrs	r3, r3, #25
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e001      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ccc:	693b      	ldr	r3, [r7, #16]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d10c      	bne.n	8001d3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d24:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	0a12      	lsrs	r2, r2, #8
 8001d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
    break;
 8001d3c:	e00c      	b.n	8001d58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	0a12      	lsrs	r2, r2, #8
 8001d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    break;
 8001d56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0e5b      	lsrs	r3, r3, #25
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	00f42400 	.word	0x00f42400

08001d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d94:	2300      	movs	r3, #0
 8001d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8098 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de2:	f7fe fca3 	bl	800072c <HAL_GetTick>
 8001de6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de8:	e009      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe fc9f 	bl	800072c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d902      	bls.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8001dfc:	e005      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0ef      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d159      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01e      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d019      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fc5f 	bl	800072c <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e70:	e00b      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fc5b 	bl	800072c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d902      	bls.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	74fb      	strb	r3, [r7, #19]
            break;
 8001e88:	e006      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ec      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	74bb      	strb	r3, [r7, #18]
 8001eba:	e005      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec8:	7c7b      	ldrb	r3, [r7, #17]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4ba6      	ldr	r3, [pc, #664]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	4aa5      	ldr	r2, [pc, #660]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee6:	4ba0      	ldr	r3, [pc, #640]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eec:	f023 0203 	bic.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	499c      	ldr	r1, [pc, #624]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f08:	4b97      	ldr	r3, [pc, #604]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f023 020c 	bic.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4994      	ldr	r1, [pc, #592]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f2a:	4b8f      	ldr	r3, [pc, #572]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	498b      	ldr	r1, [pc, #556]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f4c:	4b86      	ldr	r3, [pc, #536]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4983      	ldr	r1, [pc, #524]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f6e:	4b7e      	ldr	r3, [pc, #504]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	497a      	ldr	r1, [pc, #488]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f90:	4b75      	ldr	r3, [pc, #468]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4972      	ldr	r1, [pc, #456]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4969      	ldr	r1, [pc, #420]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4961      	ldr	r1, [pc, #388]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	4958      	ldr	r1, [pc, #352]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	4950      	ldr	r1, [pc, #320]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002036:	d105      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002038:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002042:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002050:	4b45      	ldr	r3, [pc, #276]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	4942      	ldr	r1, [pc, #264]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4934      	ldr	r1, [pc, #208]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	4926      	ldr	r1, [pc, #152]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	4918      	ldr	r1, [pc, #96]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	490a      	ldr	r1, [pc, #40]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800215c:	7cbb      	ldrb	r3, [r7, #18]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <memset>:
 800216c:	4402      	add	r2, r0
 800216e:	4603      	mov	r3, r0
 8002170:	4293      	cmp	r3, r2
 8002172:	d100      	bne.n	8002176 <memset+0xa>
 8002174:	4770      	bx	lr
 8002176:	f803 1b01 	strb.w	r1, [r3], #1
 800217a:	e7f9      	b.n	8002170 <memset+0x4>

0800217c <__libc_init_array>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4d0d      	ldr	r5, [pc, #52]	; (80021b4 <__libc_init_array+0x38>)
 8002180:	4c0d      	ldr	r4, [pc, #52]	; (80021b8 <__libc_init_array+0x3c>)
 8002182:	1b64      	subs	r4, r4, r5
 8002184:	10a4      	asrs	r4, r4, #2
 8002186:	2600      	movs	r6, #0
 8002188:	42a6      	cmp	r6, r4
 800218a:	d109      	bne.n	80021a0 <__libc_init_array+0x24>
 800218c:	4d0b      	ldr	r5, [pc, #44]	; (80021bc <__libc_init_array+0x40>)
 800218e:	4c0c      	ldr	r4, [pc, #48]	; (80021c0 <__libc_init_array+0x44>)
 8002190:	f000 f818 	bl	80021c4 <_init>
 8002194:	1b64      	subs	r4, r4, r5
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	2600      	movs	r6, #0
 800219a:	42a6      	cmp	r6, r4
 800219c:	d105      	bne.n	80021aa <__libc_init_array+0x2e>
 800219e:	bd70      	pop	{r4, r5, r6, pc}
 80021a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a4:	4798      	blx	r3
 80021a6:	3601      	adds	r6, #1
 80021a8:	e7ee      	b.n	8002188 <__libc_init_array+0xc>
 80021aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ae:	4798      	blx	r3
 80021b0:	3601      	adds	r6, #1
 80021b2:	e7f2      	b.n	800219a <__libc_init_array+0x1e>
 80021b4:	080021ec 	.word	0x080021ec
 80021b8:	080021ec 	.word	0x080021ec
 80021bc:	080021ec 	.word	0x080021ec
 80021c0:	080021f0 	.word	0x080021f0

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
