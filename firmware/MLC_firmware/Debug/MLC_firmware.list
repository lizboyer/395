
MLC_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ac  080056ac  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b4  080056b4  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080056bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200000b8  08005774  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005774  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8a8  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229e  00000000  00000000  0002f9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00032ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012e94  00000000  00000000  00033619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011616  00000000  00000000  000464ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070b24  00000000  00000000  00057ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b88  00000000  00000000  000c85e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  000cc170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b8 	.word	0x200000b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005388 	.word	0x08005388

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000bc 	.word	0x200000bc
 8000104:	08005388 	.word	0x08005388

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80004c4:	250b      	movs	r5, #11
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 80004cc:	197c      	adds	r4, r7, r5
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	224c      	movs	r2, #76	; 0x4c
 80004d2:	2110      	movs	r1, #16
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 f9a9 	bl	800082c <accelerometer_write>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <acc_init+0x30>
 80004e6:	197b      	adds	r3, r7, r5
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	e089      	b.n	8000600 <acc_init+0x144>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80004ec:	250b      	movs	r5, #11
 80004ee:	197c      	adds	r4, r7, r5
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	2111      	movs	r1, #17
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f998 	bl	800082c <accelerometer_write>
 80004fc:	0003      	movs	r3, r0
 80004fe:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK) return status;
 8000500:	197b      	adds	r3, r7, r5
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <acc_init+0x52>
 8000508:	197b      	adds	r3, r7, r5
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	e078      	b.n	8000600 <acc_init+0x144>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 800050e:	250b      	movs	r5, #11
 8000510:	197c      	adds	r4, r7, r5
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2201      	movs	r2, #1
 8000516:	210e      	movs	r1, #14
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f987 	bl	800082c <accelerometer_write>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) return status;
 8000522:	197b      	adds	r3, r7, r5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <acc_init+0x74>
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	e067      	b.n	8000600 <acc_init+0x144>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000530:	250b      	movs	r5, #11
 8000532:	197c      	adds	r4, r7, r5
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2103      	movs	r1, #3
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f867 	bl	800060c <read_axis>
 800053e:	0003      	movs	r3, r0
 8000540:	7023      	strb	r3, [r4, #0]

    // enable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x80);
 8000542:	197c      	adds	r4, r7, r5
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	210d      	movs	r1, #13
 800054a:	0018      	movs	r0, r3
 800054c:	f000 f96e 	bl	800082c <accelerometer_write>
 8000550:	0003      	movs	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000554:	197b      	adds	r3, r7, r5
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <acc_init+0xa6>
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	e04e      	b.n	8000600 <acc_init+0x144>

    // enable MLC
    status = accelerometer_write(acc, MLC_EN, 0x10);
 8000562:	250b      	movs	r5, #11
 8000564:	197c      	adds	r4, r7, r5
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2210      	movs	r2, #16
 800056a:	2105      	movs	r1, #5
 800056c:	0018      	movs	r0, r3
 800056e:	f000 f95d 	bl	800082c <accelerometer_write>
 8000572:	0003      	movs	r3, r0
 8000574:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000576:	197b      	adds	r3, r7, r5
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <acc_init+0xc8>
 800057e:	197b      	adds	r3, r7, r5
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	e03d      	b.n	8000600 <acc_init+0x144>

    // MLC route to INT1
    status = accelerometer_write(acc, MLC_INT1, 0x01);
 8000584:	250b      	movs	r5, #11
 8000586:	197c      	adds	r4, r7, r5
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	210d      	movs	r1, #13
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f94c 	bl	800082c <accelerometer_write>
 8000594:	0003      	movs	r3, r0
 8000596:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 8000598:	197b      	adds	r3, r7, r5
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <acc_init+0xea>
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	e02c      	b.n	8000600 <acc_init+0x144>

    for (int i = 0; i < (sizeof(mlc_configuration) /
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e010      	b.n	80005ce <acc_init+0x112>
                      sizeof(ucf_line_t) ); i++ ) {
      accelerometer_write(acc, mlc_configuration[i].address, (uint8_t)mlc_configuration[i].data);
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <acc_init+0x14c>)
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	5cd1      	ldrb	r1, [r2, r3]
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <acc_init+0x14c>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f932 	bl	800082c <accelerometer_write>
                      sizeof(ucf_line_t) ); i++ ) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < (sizeof(mlc_configuration) /
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	238e      	movs	r3, #142	; 0x8e
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d9e9      	bls.n	80005ac <acc_init+0xf0>
    }

    // disable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x00);
 80005d8:	250b      	movs	r5, #11
 80005da:	197c      	adds	r4, r7, r5
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	210d      	movs	r1, #13
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 f922 	bl	800082c <accelerometer_write>
 80005e8:	0003      	movs	r3, r0
 80005ea:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <acc_init+0x13e>
 80005f4:	197b      	adds	r3, r7, r5
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	e002      	b.n	8000600 <acc_init+0x144>

    return status;
 80005fa:	230b      	movs	r3, #11
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]

}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	080053d0 	.word	0x080053d0

0800060c <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	000a      	movs	r2, r1
 8000616:	1cfb      	adds	r3, r7, #3
 8000618:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
}
 800061c:	46c0      	nop			; (mov r8, r8)

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 800061e:	230f      	movs	r3, #15
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]

    switch(axis){
 8000626:	1cfb      	adds	r3, r7, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d00b      	beq.n	8000646 <read_axis+0x3a>
 800062e:	dd00      	ble.n	8000632 <read_axis+0x26>
 8000630:	e0ee      	b.n	8000810 <read_axis+0x204>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d100      	bne.n	8000638 <read_axis+0x2c>
 8000636:	e098      	b.n	800076a <read_axis+0x15e>
 8000638:	dd00      	ble.n	800063c <read_axis+0x30>
 800063a:	e0e9      	b.n	8000810 <read_axis+0x204>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <read_axis+0x3a>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d04a      	beq.n	80006da <read_axis+0xce>
 8000644:	e0e4      	b.n	8000810 <read_axis+0x204>
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	b299      	uxth	r1, r3
 800064e:	250f      	movs	r5, #15
 8000650:	197c      	adds	r4, r7, r5
 8000652:	4874      	ldr	r0, [pc, #464]	; (8000824 <read_axis+0x218>)
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4b72      	ldr	r3, [pc, #456]	; (8000828 <read_axis+0x21c>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2229      	movs	r2, #41	; 0x29
 8000666:	f001 fa89 	bl	8001b7c <HAL_I2C_Mem_Read>
 800066a:	0003      	movs	r3, r0
 800066c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800066e:	0028      	movs	r0, r5
 8000670:	183b      	adds	r3, r7, r0
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d000      	beq.n	800067a <read_axis+0x6e>
 8000678:	e0bb      	b.n	80007f2 <read_axis+0x1e6>
		  acc->x_xlr = *read_buffer << 8;
 800067a:	4b6b      	ldr	r3, [pc, #428]	; (8000828 <read_axis+0x21c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b299      	uxth	r1, r3
 800068e:	0005      	movs	r5, r0
 8000690:	183c      	adds	r4, r7, r0
 8000692:	4864      	ldr	r0, [pc, #400]	; (8000824 <read_axis+0x218>)
 8000694:	2301      	movs	r3, #1
 8000696:	425b      	negs	r3, r3
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <read_axis+0x21c>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2228      	movs	r2, #40	; 0x28
 80006a6:	f001 fa69 	bl	8001b7c <HAL_I2C_Mem_Read>
 80006aa:	0003      	movs	r3, r0
 80006ac:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <read_axis+0xac>
 80006b6:	e09e      	b.n	80007f6 <read_axis+0x1ea>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b59      	ldr	r3, [pc, #356]	; (8000828 <read_axis+0x21c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	18d3      	adds	r3, r2, r3
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 80006d0:	1cfb      	adds	r3, r7, #3
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d000      	beq.n	80006da <read_axis+0xce>
 80006d8:	e08f      	b.n	80007fa <read_axis+0x1ee>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	b299      	uxth	r1, r3
 80006e2:	250f      	movs	r5, #15
 80006e4:	197c      	adds	r4, r7, r5
 80006e6:	484f      	ldr	r0, [pc, #316]	; (8000824 <read_axis+0x218>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <read_axis+0x21c>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	222b      	movs	r2, #43	; 0x2b
 80006fa:	f001 fa3f 	bl	8001b7c <HAL_I2C_Mem_Read>
 80006fe:	0003      	movs	r3, r0
 8000700:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000702:	0028      	movs	r0, r5
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d000      	beq.n	800070e <read_axis+0x102>
 800070c:	e077      	b.n	80007fe <read_axis+0x1f2>
		  acc->y_xlr = *read_buffer << 8;
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <read_axis+0x21c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21a      	sxth	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b299      	uxth	r1, r3
 8000722:	0005      	movs	r5, r0
 8000724:	183c      	adds	r4, r7, r0
 8000726:	483f      	ldr	r0, [pc, #252]	; (8000824 <read_axis+0x218>)
 8000728:	2301      	movs	r3, #1
 800072a:	425b      	negs	r3, r3
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <read_axis+0x21c>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	222a      	movs	r2, #42	; 0x2a
 800073a:	f001 fa1f 	bl	8001b7c <HAL_I2C_Mem_Read>
 800073e:	0003      	movs	r3, r0
 8000740:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000742:	197b      	adds	r3, r7, r5
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d15b      	bne.n	8000802 <read_axis+0x1f6>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	889b      	ldrh	r3, [r3, #4]
 800074e:	b21b      	sxth	r3, r3
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <read_axis+0x21c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b29b      	uxth	r3, r3
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d14d      	bne.n	8000806 <read_axis+0x1fa>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	b299      	uxth	r1, r3
 8000772:	250f      	movs	r5, #15
 8000774:	197c      	adds	r4, r7, r5
 8000776:	482b      	ldr	r0, [pc, #172]	; (8000824 <read_axis+0x218>)
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <read_axis+0x21c>)
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	222d      	movs	r2, #45	; 0x2d
 800078a:	f001 f9f7 	bl	8001b7c <HAL_I2C_Mem_Read>
 800078e:	0003      	movs	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000792:	0028      	movs	r0, r5
 8000794:	183b      	adds	r3, r7, r0
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d136      	bne.n	800080a <read_axis+0x1fe>
		  acc->z_xlr = *read_buffer << 8;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <read_axis+0x21c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b299      	uxth	r1, r3
 80007b0:	0005      	movs	r5, r0
 80007b2:	183c      	adds	r4, r7, r0
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <read_axis+0x218>)
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	2301      	movs	r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <read_axis+0x21c>)
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	222c      	movs	r2, #44	; 0x2c
 80007c8:	f001 f9d8 	bl	8001b7c <HAL_I2C_Mem_Read>
 80007cc:	0003      	movs	r3, r0
 80007ce:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80007d0:	197b      	adds	r3, r7, r5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d11a      	bne.n	800080e <read_axis+0x202>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	88db      	ldrh	r3, [r3, #6]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <read_axis+0x21c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	18d3      	adds	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	80da      	strh	r2, [r3, #6]
		  break;
 80007f0:	e00e      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	e00c      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	e00a      	b.n	8000810 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	e008      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	e006      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	e004      	b.n	8000810 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	e002      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	e000      	b.n	8000810 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800080e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8000810:	b662      	cpsie	i
}
 8000812:	46c0      	nop			; (mov r8, r8)
	}

    __enable_irq();

    return status;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	781b      	ldrb	r3, [r3, #0]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bdb0      	pop	{r4, r5, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000d8 	.word	0x200000d8
 8000828:	200000d4 	.word	0x200000d4

0800082c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af04      	add	r7, sp, #16
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	0008      	movs	r0, r1
 8000836:	0011      	movs	r1, r2
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	1c02      	adds	r2, r0, #0
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	1c0a      	adds	r2, r1, #0
 8000842:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 8000848:	250c      	movs	r5, #12
 800084a:	197b      	adds	r3, r7, r5
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <accelerometer_write+0x6c>)
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	701a      	strb	r2, [r3, #0]
	*write_buffer = data;
 8000852:	197b      	adds	r3, r7, r5
 8000854:	1cba      	adds	r2, r7, #2
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b299      	uxth	r1, r3
 8000862:	1cfb      	adds	r3, r7, #3
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b29a      	uxth	r2, r3
 8000868:	260f      	movs	r6, #15
 800086a:	19bc      	adds	r4, r7, r6
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <accelerometer_write+0x70>)
 800086e:	2301      	movs	r3, #1
 8000870:	425b      	negs	r3, r3
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2301      	movs	r3, #1
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	197b      	adds	r3, r7, r5
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	f001 f84f 	bl	8001920 <HAL_I2C_Mem_Write>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000886:	b662      	cpsie	i
}
 8000888:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
	return status;
 800088a:	19bb      	adds	r3, r7, r6
 800088c:	781b      	ldrb	r3, [r3, #0]
}
 800088e:	0018      	movs	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	b005      	add	sp, #20
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	080053a0 	.word	0x080053a0
 800089c:	200000d8 	.word	0x200000d8

080008a0 <accelerometer_read>:

HAL_StatusTypeDef accelerometer_read(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af04      	add	r7, sp, #16
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	0008      	movs	r0, r1
 80008aa:	0011      	movs	r1, r2
 80008ac:	1cfb      	adds	r3, r7, #3
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1cbb      	adds	r3, r7, #2
 80008b4:	1c0a      	adds	r2, r1, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    uint8_t read_buffer[] = { 0 };
 80008bc:	250c      	movs	r5, #12
 80008be:	197b      	adds	r3, r7, r5
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <accelerometer_read+0x6c>)
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	*read_buffer = data;
 80008c6:	197b      	adds	r3, r7, r5
 80008c8:	1cba      	adds	r2, r7, #2
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, reg, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b299      	uxth	r1, r3
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	260f      	movs	r6, #15
 80008de:	19bc      	adds	r4, r7, r6
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <accelerometer_read+0x70>)
 80008e2:	2301      	movs	r3, #1
 80008e4:	425b      	negs	r3, r3
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	2301      	movs	r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2301      	movs	r3, #1
 80008f2:	f001 f943 	bl	8001b7c <HAL_I2C_Mem_Read>
 80008f6:	0003      	movs	r3, r0
 80008f8:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fa:	b662      	cpsie	i
}
 80008fc:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
	return status;
 80008fe:	19bb      	adds	r3, r7, r6
 8000900:	781b      	ldrb	r3, [r3, #0]
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	080053a0 	.word	0x080053a0
 8000910:	200000d8 	.word	0x200000d8

08000914 <lsm6dsox_mlc_out_get>:

/* lsm6dsox_mlc_out_get(volatile accelerometer_t* acc,, uint8_t *buff)
 *  Def: Returns output of MLC decision tree MLC0
 */
uint32_t lsm6dsox_mlc_out_get(volatile accelerometer_t* acc, uint8_t *buff)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  int32_t status;

  status = accelerometer_write(acc, MLC_INT1, 0x80);	// opens CFG
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	210d      	movs	r1, #13
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ff81 	bl	800082c <accelerometer_write>
 800092a:	0003      	movs	r3, r0
 800092c:	60fb      	str	r3, [r7, #12]

  if (status == 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d108      	bne.n	8000946 <lsm6dsox_mlc_out_get+0x32>
  {
	  status = accelerometer_read(acc, MLC0_SRC, (uint8_t)buff);	// reads MLC decision tree output
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2170      	movs	r1, #112	; 0x70
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ffaf 	bl	80008a0 <accelerometer_read>
 8000942:	0003      	movs	r3, r0
 8000944:	60fb      	str	r3, [r7, #12]
  }

  if (status == 0)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d107      	bne.n	800095c <lsm6dsox_mlc_out_get+0x48>
  {
	  status = accelerometer_write(acc, MLC_INT1, 0x00);	// closes CFG
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	210d      	movs	r1, #13
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff ff6a 	bl	800082c <accelerometer_write>
 8000958:	0003      	movs	r3, r0
 800095a:	60fb      	str	r3, [r7, #12]
  }

  return status;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <_write>:
/* USER CODE BEGIN 0 */
static volatile struct accelerometer_t xl_r = {.slave_r_addr = ACC0_R_ADDR, .slave_w_addr = ACC0_W_ADDR, .irq_pin = GPIO_PIN_0};
static volatile struct accelerometer_t xl_l = {.slave_r_addr = ACC1_R_ADDR, .slave_w_addr = ACC1_W_ADDR, .irq_pin = GPIO_PIN_1};
static volatile HAL_StatusTypeDef status;

int _write(int fd, char* ptr, int len) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2301      	movs	r3, #1
 800097a:	425b      	negs	r3, r3
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <_write+0x28>)
 8000980:	f003 f898 	bl	8003ab4 <HAL_UART_Transmit>
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000012c 	.word	0x2000012c

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 800099a:	f000 fc2b 	bl	80011f4 <HAL_Init>
	SystemClock_Config();
 800099e:	f000 f883 	bl	8000aa8 <SystemClock_Config>
	MX_GPIO_Init();
 80009a2:	f000 fa07 	bl	8000db4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80009a6:	f000 f8ed 	bl	8000b84 <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 80009aa:	f000 f92b 	bl	8000c04 <MX_LPUART1_UART_Init>

	acc_init(&xl_l);
 80009ae:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <main+0xf8>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fd83 	bl	80004bc <acc_init>
	acc_init(&xl_r);
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <main+0xfc>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fd7f 	bl	80004bc <acc_init>

	MX_TIM2_Init();
 80009be:	f000 f94f 	bl	8000c60 <MX_TIM2_Init>
	MX_TIM21_Init();
 80009c2:	f000 f9a1 	bl	8000d08 <MX_TIM21_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	0059      	lsls	r1, r3, #1
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2201      	movs	r2, #1
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fecb 	bl	800176c <HAL_GPIO_WritePin>

	// start polling the accelerometer(s)
	HAL_TIM_Base_Start_IT(&htim21);
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <main+0x100>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fca1 	bl	8003320 <HAL_TIM_Base_Start_IT>
	uint8_t status_mlc1;
	uint8_t mlc_out = {0};
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	uint32_t status;

	/* check how MLC0-8_SRC knows which is which*/

	while (1) {
		accelerometer_read(&xl_r, MLC_STATUS_MAINPAGE, status_mlc1);
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <main+0xfc>)
 80009ea:	2138      	movs	r1, #56	; 0x38
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ff57 	bl	80008a0 <accelerometer_read>
		status_mlc1 = status_mlc1 & 0x01;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	1dfa      	adds	r2, r7, #7
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	400a      	ands	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
		if (status_mlc1) {
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d013      	beq.n	8000a2e <main+0x9a>
			status = lsm6dsox_mlc_out_get(&xl_r, mlc_out); // gets mlc interrupt code
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <main+0xfc>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff ff7f 	bl	8000914 <lsm6dsox_mlc_out_get>
 8000a16:	0003      	movs	r3, r0
 8000a18:	603b      	str	r3, [r7, #0]
			if (status == 0)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <main+0x9a>
				  printf("Detect MLC interrupt code: %02X\r\n", mlc_out);
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <main+0x104>)
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f003 fe09 	bl	8004640 <iprintf>
			//      tx_com(tx_buffer, strlen((char const *)tx_buffer)); // CHANGE
		}

		if(xl_r.z_xlr < -0x1000) {
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <main+0xfc>)
 8000a30:	88db      	ldrh	r3, [r3, #6]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <main+0x108>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	da0b      	bge.n	8000a52 <main+0xbe>
			HAL_TIM_Base_Start_IT(&htim2);
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <main+0x10c>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f002 fc6f 	bl	8003320 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	0059      	lsls	r1, r3, #1
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fe8d 	bl	800176c <HAL_GPIO_WritePin>
		}
		printf("%d\r\n",xl_r.x_xlr);
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <main+0xfc>)
 8000a54:	885b      	ldrh	r3, [r3, #2]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <main+0x110>)
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f003 fdee 	bl	8004640 <iprintf>
		printf("%d\r\n",xl_r.y_xlr);
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <main+0xfc>)
 8000a66:	889b      	ldrh	r3, [r3, #4]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <main+0x110>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f003 fde5 	bl	8004640 <iprintf>
		printf("%d\r\n",xl_r.z_xlr);
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <main+0xfc>)
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <main+0x110>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f003 fddc 	bl	8004640 <iprintf>
		accelerometer_read(&xl_r, MLC_STATUS_MAINPAGE, status_mlc1);
 8000a88:	e7ac      	b.n	80009e4 <main+0x50>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	20000028 	.word	0x20000028
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200001f4 	.word	0x200001f4
 8000a98:	080053a4 	.word	0x080053a4
 8000a9c:	fffff000 	.word	0xfffff000
 8000aa0:	200001b4 	.word	0x200001b4
 8000aa4:	080053c8 	.word	0x080053c8

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b099      	sub	sp, #100	; 0x64
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	242c      	movs	r4, #44	; 0x2c
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2334      	movs	r3, #52	; 0x34
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f003 fdd1 	bl	8004660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abe:	2318      	movs	r3, #24
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f003 fdc9 	bl	8004660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2318      	movs	r3, #24
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 fdc2 	bl	8004660 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemClock_Config+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <SystemClock_Config+0xd8>)
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemClock_Config+0xd4>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0109      	lsls	r1, r1, #4
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2210      	movs	r2, #16
 8000af4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2201      	movs	r2, #1
 8000afa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	22a0      	movs	r2, #160	; 0xa0
 8000b06:	0212      	lsls	r2, r2, #8
 8000b08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fcf8 	bl	8002508 <HAL_RCC_OscConfig>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b1c:	f000 f9aa 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	2118      	movs	r1, #24
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	220f      	movs	r2, #15
 8000b26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2100      	movs	r1, #0
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f85b 	bl	8002c00 <HAL_RCC_ClockConfig>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b4e:	f000 f991 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000b52:	003b      	movs	r3, r7
 8000b54:	220c      	movs	r2, #12
 8000b56:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	003b      	movs	r3, r7
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fa6e 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b70:	f000 f980 	bl	8000e74 <Error_Handler>
  }
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b019      	add	sp, #100	; 0x64
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	40007000 	.word	0x40007000
 8000b80:	ffffe7ff 	.word	0xffffe7ff

08000b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <MX_I2C1_Init+0x7c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000b90:	22e1      	movs	r2, #225	; 0xe1
 8000b92:	00d2      	lsls	r2, r2, #3
 8000b94:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 fe16 	bl	80017f4 <HAL_I2C_Init>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 f952 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fbff 	bl	80023d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bde:	f000 f949 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_I2C1_Init+0x78>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fc42 	bl	8002470 <HAL_I2CEx_ConfigDigitalFilter>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f000 f940 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200000d8 	.word	0x200000d8
 8000c00:	40005400 	.word	0x40005400

08000c04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <MX_LPUART1_UART_Init+0x58>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c10:	2296      	movs	r2, #150	; 0x96
 8000c12:	01d2      	lsls	r2, r2, #7
 8000c14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_LPUART1_UART_Init+0x54>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 fee2 	bl	8003a0c <HAL_UART_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f000 f912 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000012c 	.word	0x2000012c
 8000c5c:	40004800 	.word	0x40004800

08000c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	2308      	movs	r3, #8
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f003 fcf5 	bl	8004660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c76:	003b      	movs	r3, r7
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 fcee 	bl	8004660 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	05d2      	lsls	r2, r2, #23
 8000c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 243;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000c8e:	22f3      	movs	r2, #243	; 0xf3
 8000c90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <MX_TIM2_Init+0xa4>)
 8000c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f002 faf7 	bl	80032a0 <HAL_TIM_Base_Init>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cb6:	f000 f8dd 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	2108      	movs	r1, #8
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0152      	lsls	r2, r2, #5
 8000cc2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fc5c 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cd4:	f000 f8ce 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce4:	003a      	movs	r2, r7
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_TIM2_Init+0xa0>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 fe36 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cf4:	f000 f8be 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b006      	add	sp, #24
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001b4 	.word	0x200001b4
 8000d04:	0000ffff 	.word	0x0000ffff

08000d08 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	2308      	movs	r3, #8
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	0018      	movs	r0, r3
 8000d14:	2310      	movs	r3, #16
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f003 fca1 	bl	8004660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	003b      	movs	r3, r7
 8000d20:	0018      	movs	r0, r3
 8000d22:	2308      	movs	r3, #8
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f003 fc9a 	bl	8004660 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <MX_TIM21_Init+0xa4>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 15999;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <MX_TIM21_Init+0xa8>)
 8000d36:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 faa4 	bl	80032a0 <HAL_TIM_Base_Init>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f88a 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	2108      	movs	r1, #8
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0152      	lsls	r2, r2, #5
 8000d68:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000d6a:	187a      	adds	r2, r7, r1
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fc09 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000d7a:	f000 f87b 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000d8a:	003a      	movs	r2, r7
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_TIM21_Init+0xa0>)
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 fde3 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000d9a:	f000 f86b 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b006      	add	sp, #24
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	200001f4 	.word	0x200001f4
 8000dac:	40010800 	.word	0x40010800
 8000db0:	00003e7f 	.word	0x00003e7f

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	240c      	movs	r4, #12
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f003 fc4b 	bl	8004660 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000de8:	2102      	movs	r1, #2
 8000dea:	430a      	orrs	r2, r1
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_GPIO_Init+0xb8>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	0059      	lsls	r1, r3, #1
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	2200      	movs	r2, #0
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 fcb1 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT0_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT0_Pin|ACC_INT1_Pin;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2284      	movs	r2, #132	; 0x84
 8000e14:	0392      	lsls	r2, r2, #14
 8000e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <MX_GPIO_Init+0xbc>)
 8000e22:	0019      	movs	r1, r3
 8000e24:	0010      	movs	r0, r2
 8000e26:	f000 fb33 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2a:	0021      	movs	r1, r4
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	0052      	lsls	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2201      	movs	r2, #1
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	187a      	adds	r2, r7, r1
 8000e48:	23a0      	movs	r3, #160	; 0xa0
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 fb1e 	bl	8001490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f000 fae7 	bl	800142c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f000 faf9 	bl	8001456 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b009      	add	sp, #36	; 0x24
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50000400 	.word	0x50000400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_MspInit+0x24>)
 8000e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_MspInit+0x24>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_MspInit+0x24>)
 8000e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_MspInit+0x24>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0549      	lsls	r1, r1, #21
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	240c      	movs	r4, #12
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f003 fbd0 	bl	8004660 <memset>
  if(hi2c->Instance==I2C1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_I2C_MspInit+0x80>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12a      	bne.n	8000f20 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_I2C_MspInit+0x84>)
 8000ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0x84>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_I2C_MspInit+0x84>)
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	22c0      	movs	r2, #192	; 0xc0
 8000ee6:	00d2      	lsls	r2, r2, #3
 8000ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eea:	0021      	movs	r1, r4
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2212      	movs	r2, #18
 8000ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2203      	movs	r2, #3
 8000efc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2201      	movs	r2, #1
 8000f02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	187a      	adds	r2, r7, r1
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 fabf 	bl	8001490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_I2C_MspInit+0x84>)
 8000f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_I2C_MspInit+0x84>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0389      	lsls	r1, r1, #14
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	240c      	movs	r4, #12
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f003 fb8c 	bl	8004660 <memset>
  if(huart->Instance==LPUART1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x80>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d129      	bne.n	8000fa6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	02c9      	lsls	r1, r1, #11
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	2201      	movs	r2, #1
 8000f72:	4013      	ands	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f78:	0021      	movs	r1, r4
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2202      	movs	r2, #2
 8000f84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2206      	movs	r2, #6
 8000f96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	187a      	adds	r2, r7, r1
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fa75 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b009      	add	sp, #36	; 0x24
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10e      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_TIM_Base_MspInit+0x60>)
 8000fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_TIM_Base_MspInit+0x60>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	200f      	movs	r0, #15
 8000fde:	f000 fa25 	bl	800142c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f000 fa37 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000fe8:	e012      	b.n	8001010 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_TIM_Base_MspInit+0x64>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d10d      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_TIM_Base_MspInit+0x60>)
 8000ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_TIM_Base_MspInit+0x60>)
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2014      	movs	r0, #20
 8001006:	f000 fa11 	bl	800142c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800100a:	2014      	movs	r0, #20
 800100c:	f000 fa23 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40010800 	.word	0x40010800

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f92a 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT0_Pin);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 fba8 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001058:	2002      	movs	r0, #2
 800105a:	f000 fba5 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <TIM2_IRQHandler+0x14>)
 800106a:	0018      	movs	r0, r3
 800106c:	f002 f9a4 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	200001b4 	.word	0x200001b4

0800107c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <TIM21_IRQHandler+0x14>)
 8001082:	0018      	movs	r0, r3
 8001084:	f002 f998 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	200001f4 	.word	0x200001f4

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	e000      	b.n	80010aa <_read+0x16>
 80010a8:	bf00      	nop
 80010aa:	0001      	movs	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b006      	add	sp, #24
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	425b      	negs	r3, r3
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	605a      	str	r2, [r3, #4]
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_isatty>:

int _isatty(int file)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001106:	2301      	movs	r3, #1
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f003 fa8a 	bl	8004670 <__errno>
 800115c:	0003      	movs	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	2301      	movs	r3, #1
 8001164:	425b      	negs	r3, r3
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	18d2      	adds	r2, r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b006      	add	sp, #24
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20002000 	.word	0x20002000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000234 	.word	0x20000234
 8001190:	20000388 	.word	0x20000388

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011a2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a4:	f7ff fff6 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f003 fa55 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fbdf 	bl	8000994 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
   ldr   r0, =_estack
 80011d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80011e4:	080056bc 	.word	0x080056bc
  ldr r2, =_sbss
 80011e8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80011ec:	20000388 	.word	0x20000388

080011f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_COMP_IRQHandler>
	...

080011f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x3c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Init+0x3c>)
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f811 	bl	8001234 <HAL_InitTick>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d003      	beq.n	800121e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e001      	b.n	8001222 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800121e:	f7ff fe2f 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_InitTick+0x5c>)
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_InitTick+0x60>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	0019      	movs	r1, r3
 8001246:	23fa      	movs	r3, #250	; 0xfa
 8001248:	0098      	lsls	r0, r3, #2
 800124a:	f7fe ff67 	bl	800011c <__udivsi3>
 800124e:	0003      	movs	r3, r0
 8001250:	0019      	movs	r1, r3
 8001252:	0020      	movs	r0, r4
 8001254:	f7fe ff62 	bl	800011c <__udivsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f90b 	bl	8001476 <HAL_SYSTICK_Config>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e00f      	b.n	8001288 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d80b      	bhi.n	8001286 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2301      	movs	r3, #1
 8001272:	425b      	negs	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f000 f8d8 	bl	800142c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_InitTick+0x64>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b003      	add	sp, #12
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	20000050 	.word	0x20000050
 8001294:	20000058 	.word	0x20000058
 8001298:	20000054 	.word	0x20000054

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x1c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	001a      	movs	r2, r3
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x20>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	18d2      	adds	r2, r2, r3
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_IncTick+0x20>)
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000058 	.word	0x20000058
 80012bc:	20000238 	.word	0x20000238

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <HAL_GetTick+0x10>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	20000238 	.word	0x20000238

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b7f      	cmp	r3, #127	; 0x7f
 80012e6:	d809      	bhi.n	80012fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	001a      	movs	r2, r3
 80012ee:	231f      	movs	r3, #31
 80012f0:	401a      	ands	r2, r3
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_EnableIRQ+0x30>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	4091      	lsls	r1, r2
 80012f8:	000a      	movs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
  }
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b7f      	cmp	r3, #127	; 0x7f
 800131c:	d828      	bhi.n	8001370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131e:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <__NVIC_SetPriority+0xd4>)
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	33c0      	adds	r3, #192	; 0xc0
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	589b      	ldr	r3, [r3, r2]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	; 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <__NVIC_SetPriority+0xd4>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b25b      	sxtb	r3, r3
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	430a      	orrs	r2, r1
 8001368:	33c0      	adds	r3, #192	; 0xc0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800136e:	e031      	b.n	80013d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <__NVIC_SetPriority+0xd8>)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0019      	movs	r1, r3
 8001378:	230f      	movs	r3, #15
 800137a:	400b      	ands	r3, r1
 800137c:	3b08      	subs	r3, #8
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3306      	adds	r3, #6
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	3304      	adds	r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1dfa      	adds	r2, r7, #7
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	0011      	movs	r1, r2
 8001390:	2203      	movs	r2, #3
 8001392:	400a      	ands	r2, r1
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	21ff      	movs	r1, #255	; 0xff
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	2303      	movs	r3, #3
 80013b2:	4003      	ands	r3, r0
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <__NVIC_SetPriority+0xd8>)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	001c      	movs	r4, r3
 80013c0:	230f      	movs	r3, #15
 80013c2:	4023      	ands	r3, r4
 80013c4:	3b08      	subs	r3, #8
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	3306      	adds	r3, #6
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	18c3      	adds	r3, r0, r3
 80013d0:	3304      	adds	r3, #4
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b003      	add	sp, #12
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	045b      	lsls	r3, r3, #17
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d301      	bcc.n	80013fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f8:	2301      	movs	r3, #1
 80013fa:	e010      	b.n	800141e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <SysTick_Config+0x44>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	3a01      	subs	r2, #1
 8001402:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001404:	2301      	movs	r3, #1
 8001406:	425b      	negs	r3, r3
 8001408:	2103      	movs	r1, #3
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff7c 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x44>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x44>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	210f      	movs	r1, #15
 8001438:	187b      	adds	r3, r7, r1
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	187b      	adds	r3, r7, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	0011      	movs	r1, r2
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	0002      	movs	r2, r0
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ff33 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ffaf 	bl	80013e4 <SysTick_Config>
 8001486:	0003      	movs	r3, r0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014a6:	e149      	b.n	800173c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x30>
 80014be:	e13a      	b.n	8001736 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d005      	beq.n	80014d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d130      	bne.n	800153a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150e:	2201      	movs	r2, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	2201      	movs	r2, #1
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	4013      	ands	r3, r2
 8001542:	2b03      	cmp	r3, #3
 8001544:	d017      	beq.n	8001576 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d123      	bne.n	80015ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	58d3      	ldr	r3, [r2, r3]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2207      	movs	r2, #7
 8001594:	4013      	ands	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2107      	movs	r1, #7
 80015ae:	400b      	ands	r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	6939      	ldr	r1, [r7, #16]
 80015c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2203      	movs	r2, #3
 80015e8:	401a      	ands	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d100      	bne.n	800160c <HAL_GPIO_Init+0x17c>
 800160a:	e094      	b.n	8001736 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	4b51      	ldr	r3, [pc, #324]	; (8001754 <HAL_GPIO_Init+0x2c4>)
 800160e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_GPIO_Init+0x2c4>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x2c8>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	589b      	ldr	r3, [r3, r2]
 8001624:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2203      	movs	r2, #3
 800162a:	4013      	ands	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	43da      	mvns	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	429a      	cmp	r2, r3
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x1de>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a44      	ldr	r2, [pc, #272]	; (800175c <HAL_GPIO_Init+0x2cc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x1da>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a43      	ldr	r2, [pc, #268]	; (8001760 <HAL_GPIO_Init+0x2d0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x1d6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a42      	ldr	r2, [pc, #264]	; (8001764 <HAL_GPIO_Init+0x2d4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x1d2>
 800165e:	2305      	movs	r3, #5
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x1e0>
 8001662:	2306      	movs	r3, #6
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x1e0>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x1e0>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x1e0>
 800166e:	2300      	movs	r3, #0
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	2103      	movs	r1, #3
 8001674:	400a      	ands	r2, r1
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2c8>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	035b      	lsls	r3, r3, #13
 80016a6:	4013      	ands	r3, r2
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	039b      	lsls	r3, r3, #14
 80016d0:	4013      	ands	r3, r2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4013      	ands	r3, r2
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	4013      	ands	r3, r2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_GPIO_Init+0x2d8>)
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	40da      	lsrs	r2, r3
 8001744:	1e13      	subs	r3, r2, #0
 8001746:	d000      	beq.n	800174a <HAL_GPIO_Init+0x2ba>
 8001748:	e6ae      	b.n	80014a8 <HAL_GPIO_Init+0x18>
  }
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	50000400 	.word	0x50000400
 8001760:	50000800 	.word	0x50000800
 8001764:	50001c00 	.word	0x50001c00
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	0008      	movs	r0, r1
 8001776:	0011      	movs	r1, r2
 8001778:	1cbb      	adds	r3, r7, #2
 800177a:	1c02      	adds	r2, r0, #0
 800177c:	801a      	strh	r2, [r3, #0]
 800177e:	1c7b      	adds	r3, r7, #1
 8001780:	1c0a      	adds	r2, r1, #0
 8001782:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001784:	1c7b      	adds	r3, r7, #1
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178c:	1cbb      	adds	r3, r7, #2
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001796:	1cbb      	adds	r3, r7, #2
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	0002      	movs	r2, r0
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	1dba      	adds	r2, r7, #6
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	4013      	ands	r3, r2
 80017be:	d008      	beq.n	80017d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017c2:	1dba      	adds	r2, r7, #6
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f807 	bl	80017e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e082      	b.n	800190c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2241      	movs	r2, #65	; 0x41
 800180a:	5c9b      	ldrb	r3, [r3, r2]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	2100      	movs	r1, #0
 8001818:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fb43 	bl	8000ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2241      	movs	r2, #65	; 0x41
 8001826:	2124      	movs	r1, #36	; 0x24
 8001828:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	438a      	bics	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4934      	ldr	r1, [pc, #208]	; (8001914 <HAL_I2C_Init+0x120>)
 8001844:	400a      	ands	r2, r1
 8001846:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4931      	ldr	r1, [pc, #196]	; (8001918 <HAL_I2C_Init+0x124>)
 8001854:	400a      	ands	r2, r1
 8001856:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0209      	lsls	r1, r1, #8
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e007      	b.n	8001882 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2184      	movs	r1, #132	; 0x84
 800187c:	0209      	lsls	r1, r1, #8
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d104      	bne.n	8001894 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	491f      	ldr	r1, [pc, #124]	; (800191c <HAL_I2C_Init+0x128>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	491a      	ldr	r1, [pc, #104]	; (8001918 <HAL_I2C_Init+0x124>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	431a      	orrs	r2, r3
 80018be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69d9      	ldr	r1, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2241      	movs	r2, #65	; 0x41
 80018f8:	2120      	movs	r1, #32
 80018fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2242      	movs	r2, #66	; 0x42
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f0ffffff 	.word	0xf0ffffff
 8001918:	ffff7fff 	.word	0xffff7fff
 800191c:	02008000 	.word	0x02008000

08001920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	000c      	movs	r4, r1
 800192a:	0010      	movs	r0, r2
 800192c:	0019      	movs	r1, r3
 800192e:	230a      	movs	r3, #10
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	1c22      	adds	r2, r4, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	2308      	movs	r3, #8
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	1c0a      	adds	r2, r1, #0
 8001942:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2241      	movs	r2, #65	; 0x41
 8001948:	5c9b      	ldrb	r3, [r3, r2]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	d000      	beq.n	8001952 <HAL_I2C_Mem_Write+0x32>
 8001950:	e10c      	b.n	8001b6c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_I2C_Mem_Write+0x42>
 8001958:	232c      	movs	r3, #44	; 0x2c
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0ff      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2240      	movs	r2, #64	; 0x40
 8001972:	5c9b      	ldrb	r3, [r3, r2]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2C_Mem_Write+0x5c>
 8001978:	2302      	movs	r3, #2
 800197a:	e0f8      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	2101      	movs	r1, #1
 8001982:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001984:	f7ff fc9c 	bl	80012c0 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	0219      	lsls	r1, r3, #8
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2319      	movs	r3, #25
 8001998:	2201      	movs	r2, #1
 800199a:	f000 fb0b 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0e3      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	2121      	movs	r1, #33	; 0x21
 80019ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2242      	movs	r2, #66	; 0x42
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	222c      	movs	r2, #44	; 0x2c
 80019c6:	18ba      	adds	r2, r7, r2
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	881c      	ldrh	r4, [r3, #0]
 80019d6:	2308      	movs	r3, #8
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	881a      	ldrh	r2, [r3, #0]
 80019dc:	230a      	movs	r3, #10
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	0023      	movs	r3, r4
 80019ee:	f000 f9f9 	bl	8001de4 <I2C_RequestMemoryWrite>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0b5      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2bff      	cmp	r3, #255	; 0xff
 8001a0a:	d911      	bls.n	8001a30 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	045c      	lsls	r4, r3, #17
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	8819      	ldrh	r1, [r3, #0]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	0023      	movs	r3, r4
 8001a2a:	f000 fc9b 	bl	8002364 <I2C_TransferConfig>
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	049c      	lsls	r4, r3, #18
 8001a44:	230a      	movs	r3, #10
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	8819      	ldrh	r1, [r3, #0]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	0023      	movs	r3, r4
 8001a52:	f000 fc87 	bl	8002364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 faf7 	bl	8002050 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e081      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03a      	beq.n	8001b1a <HAL_I2C_Mem_Write+0x1fa>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d136      	bne.n	8001b1a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	f000 fa7b 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e053      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2bff      	cmp	r3, #255	; 0xff
 8001ace:	d911      	bls.n	8001af4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	22ff      	movs	r2, #255	; 0xff
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	045c      	lsls	r4, r3, #17
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	8819      	ldrh	r1, [r3, #0]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	0023      	movs	r3, r4
 8001aee:	f000 fc39 	bl	8002364 <I2C_TransferConfig>
 8001af2:	e012      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	049c      	lsls	r4, r3, #18
 8001b08:	230a      	movs	r3, #10
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	8819      	ldrh	r1, [r3, #0]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	0023      	movs	r3, r4
 8001b16:	f000 fc25 	bl	8002364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d198      	bne.n	8001a56 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fad6 	bl	80020dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e01a      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	490b      	ldr	r1, [pc, #44]	; (8001b78 <HAL_I2C_Mem_Write+0x258>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2241      	movs	r2, #65	; 0x41
 8001b54:	2120      	movs	r1, #32
 8001b56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2242      	movs	r2, #66	; 0x42
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
  }
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b007      	add	sp, #28
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	fe00e800 	.word	0xfe00e800

08001b7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	000c      	movs	r4, r1
 8001b86:	0010      	movs	r0, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	1c22      	adds	r2, r4, #0
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	2308      	movs	r3, #8
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	1c02      	adds	r2, r0, #0
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	1dbb      	adds	r3, r7, #6
 8001b9c:	1c0a      	adds	r2, r1, #0
 8001b9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2241      	movs	r2, #65	; 0x41
 8001ba4:	5c9b      	ldrb	r3, [r3, r2]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d000      	beq.n	8001bae <HAL_I2C_Mem_Read+0x32>
 8001bac:	e110      	b.n	8001dd0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_I2C_Mem_Read+0x42>
 8001bb4:	232c      	movs	r3, #44	; 0x2c
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e103      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_I2C_Mem_Read+0x5c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e0fc      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	2101      	movs	r1, #1
 8001bde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001be0:	f7ff fb6e 	bl	80012c0 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	0219      	lsls	r1, r3, #8
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2319      	movs	r3, #25
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f000 f9dd 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0e7      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2241      	movs	r2, #65	; 0x41
 8001c06:	2122      	movs	r1, #34	; 0x22
 8001c08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2242      	movs	r2, #66	; 0x42
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	222c      	movs	r2, #44	; 0x2c
 8001c22:	18ba      	adds	r2, r7, r2
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	881c      	ldrh	r4, [r3, #0]
 8001c32:	2308      	movs	r3, #8
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	881a      	ldrh	r2, [r3, #0]
 8001c38:	230a      	movs	r3, #10
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	8819      	ldrh	r1, [r3, #0]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	0023      	movs	r3, r4
 8001c4a:	f000 f92f 	bl	8001eac <I2C_RequestMemoryRead>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0b9      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	d911      	bls.n	8001c8c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	22ff      	movs	r2, #255	; 0xff
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	045c      	lsls	r4, r3, #17
 8001c78:	230a      	movs	r3, #10
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	8819      	ldrh	r1, [r3, #0]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_I2C_Mem_Read+0x260>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	0023      	movs	r3, r4
 8001c86:	f000 fb6d 	bl	8002364 <I2C_TransferConfig>
 8001c8a:	e012      	b.n	8001cb2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	049c      	lsls	r4, r3, #18
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	8819      	ldrh	r1, [r3, #0]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <HAL_I2C_Mem_Read+0x260>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	0023      	movs	r3, r4
 8001cae:	f000 fb59 	bl	8002364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	0013      	movs	r3, r2
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	f000 f978 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e082      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03a      	beq.n	8001d7e <HAL_I2C_Mem_Read+0x202>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d136      	bne.n	8001d7e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	0013      	movs	r3, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	f000 f949 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e053      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2bff      	cmp	r3, #255	; 0xff
 8001d32:	d911      	bls.n	8001d58 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	045c      	lsls	r4, r3, #17
 8001d44:	230a      	movs	r3, #10
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	8819      	ldrh	r1, [r3, #0]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	0023      	movs	r3, r4
 8001d52:	f000 fb07 	bl	8002364 <I2C_TransferConfig>
 8001d56:	e012      	b.n	8001d7e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	049c      	lsls	r4, r3, #18
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	8819      	ldrh	r1, [r3, #0]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	2300      	movs	r3, #0
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	0023      	movs	r3, r4
 8001d7a:	f000 faf3 	bl	8002364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d194      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f9a4 	bl	80020dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e01a      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2220      	movs	r2, #32
 8001da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	490c      	ldr	r1, [pc, #48]	; (8001de0 <HAL_I2C_Mem_Read+0x264>)
 8001db0:	400a      	ands	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2241      	movs	r2, #65	; 0x41
 8001db8:	2120      	movs	r1, #32
 8001dba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2242      	movs	r2, #66	; 0x42
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b007      	add	sp, #28
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	80002400 	.word	0x80002400
 8001de0:	fe00e800 	.word	0xfe00e800

08001de4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	000c      	movs	r4, r1
 8001dee:	0010      	movs	r0, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	250a      	movs	r5, #10
 8001df4:	197b      	adds	r3, r7, r5
 8001df6:	1c22      	adds	r2, r4, #0
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	1c02      	adds	r2, r0, #0
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	1c0a      	adds	r2, r1, #0
 8001e06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	045c      	lsls	r4, r3, #17
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	8819      	ldrh	r1, [r3, #0]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <I2C_RequestMemoryWrite+0xc4>)
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	0023      	movs	r3, r4
 8001e1e:	f000 faa1 	bl	8002364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	6a39      	ldr	r1, [r7, #32]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f911 	bl	8002050 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e033      	b.n	8001e9e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e3e:	2308      	movs	r3, #8
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4c:	e019      	b.n	8001e82 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e4e:	2308      	movs	r3, #8
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e62:	6a39      	ldr	r1, [r7, #32]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f8f2 	bl	8002050 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e014      	b.n	8001e9e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e74:	2308      	movs	r3, #8
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	f000 f890 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001e94:	1e03      	subs	r3, r0, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	80002000 	.word	0x80002000

08001eac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	000c      	movs	r4, r1
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	250a      	movs	r5, #10
 8001ebc:	197b      	adds	r3, r7, r5
 8001ebe:	1c22      	adds	r2, r4, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	1c02      	adds	r2, r0, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	1c0a      	adds	r2, r1, #0
 8001ece:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	8819      	ldrh	r1, [r3, #0]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <I2C_RequestMemoryRead+0xc0>)
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f000 fa3f 	bl	8002364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	6a39      	ldr	r1, [r7, #32]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f8af 	bl	8002050 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e033      	b.n	8001f62 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f02:	2308      	movs	r3, #8
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f10:	e019      	b.n	8001f46 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f12:	2308      	movs	r3, #8
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	6a39      	ldr	r1, [r7, #32]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 f890 	bl	8002050 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f30:	1e03      	subs	r3, r0, #0
 8001f32:	d001      	beq.n	8001f38 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e014      	b.n	8001f62 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f38:	2308      	movs	r3, #8
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f46:	6a3a      	ldr	r2, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	0013      	movs	r3, r2
 8001f50:	2200      	movs	r2, #0
 8001f52:	2140      	movs	r1, #64	; 0x40
 8001f54:	f000 f82e 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	80002000 	.word	0x80002000

08001f70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d103      	bne.n	8001f8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d007      	beq.n	8001fac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]
  }
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc4:	e030      	b.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	d02d      	beq.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f978 	bl	80012c0 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d122      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	425a      	negs	r2, r3
 8001ff2:	4153      	adcs	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d113      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	2220      	movs	r2, #32
 8002006:	431a      	orrs	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2241      	movs	r2, #65	; 0x41
 8002010:	2120      	movs	r1, #32
 8002012:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2242      	movs	r2, #66	; 0x42
 8002018:	2100      	movs	r1, #0
 800201a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e00f      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4013      	ands	r3, r2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	425a      	negs	r2, r3
 8002038:	4153      	adcs	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	001a      	movs	r2, r3
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d0bf      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205c:	e032      	b.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f87d 	bl	8002164 <I2C_IsErrorOccurred>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e030      	b.n	80020d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3301      	adds	r3, #1
 8002076:	d025      	beq.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002078:	f7ff f922 	bl	80012c0 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d302      	bcc.n	800208e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11a      	bne.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d013      	beq.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	2220      	movs	r2, #32
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2241      	movs	r2, #65	; 0x41
 80020ac:	2120      	movs	r1, #32
 80020ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2242      	movs	r2, #66	; 0x42
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e007      	b.n	80020d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d1c5      	bne.n	800205e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e8:	e02f      	b.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f837 	bl	8002164 <I2C_IsErrorOccurred>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02d      	b.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7ff f8df 	bl	80012c0 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11a      	bne.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2220      	movs	r2, #32
 800211c:	4013      	ands	r3, r2
 800211e:	2b20      	cmp	r3, #32
 8002120:	d013      	beq.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	2220      	movs	r2, #32
 8002128:	431a      	orrs	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2241      	movs	r2, #65	; 0x41
 8002132:	2120      	movs	r1, #32
 8002134:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2242      	movs	r2, #66	; 0x42
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2220      	movs	r2, #32
 8002152:	4013      	ands	r3, r2
 8002154:	2b20      	cmp	r3, #32
 8002156:	d1c8      	bne.n	80020ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b08b      	sub	sp, #44	; 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2327      	movs	r3, #39	; 0x27
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2210      	movs	r2, #16
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <I2C_IsErrorOccurred+0x2e>
 8002190:	e082      	b.n	8002298 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2210      	movs	r2, #16
 8002198:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219a:	e060      	b.n	800225e <I2C_IsErrorOccurred+0xfa>
 800219c:	2427      	movs	r4, #39	; 0x27
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	193a      	adds	r2, r7, r4
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	d058      	beq.n	800225e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7ff f888 	bl	80012c0 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d306      	bcc.n	80021ca <I2C_IsErrorOccurred+0x66>
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	193a      	adds	r2, r7, r4
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d149      	bne.n	800225e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	01db      	lsls	r3, r3, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021d8:	2013      	movs	r0, #19
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	2142      	movs	r1, #66	; 0x42
 80021e0:	5c52      	ldrb	r2, [r2, r1]
 80021e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	401a      	ands	r2, r3
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d126      	bne.n	8002246 <I2C_IsErrorOccurred+0xe2>
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	01db      	lsls	r3, r3, #7
 80021fe:	429a      	cmp	r2, r3
 8002200:	d021      	beq.n	8002246 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002202:	183b      	adds	r3, r7, r0
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b20      	cmp	r3, #32
 8002208:	d01d      	beq.n	8002246 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	01c9      	lsls	r1, r1, #7
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800221c:	f7ff f850 	bl	80012c0 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	e00f      	b.n	8002246 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002226:	f7ff f84b 	bl	80012c0 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b19      	cmp	r3, #25
 8002232:	d908      	bls.n	8002246 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2220      	movs	r2, #32
 8002238:	4313      	orrs	r3, r2
 800223a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800223c:	2327      	movs	r3, #39	; 0x27
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

              break;
 8002244:	e00b      	b.n	800225e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2220      	movs	r2, #32
 800224e:	4013      	ands	r3, r2
 8002250:	2127      	movs	r1, #39	; 0x27
 8002252:	187a      	adds	r2, r7, r1
 8002254:	1879      	adds	r1, r7, r1
 8002256:	7809      	ldrb	r1, [r1, #0]
 8002258:	7011      	strb	r1, [r2, #0]
 800225a:	2b20      	cmp	r3, #32
 800225c:	d1e3      	bne.n	8002226 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2220      	movs	r2, #32
 8002266:	4013      	ands	r3, r2
 8002268:	2b20      	cmp	r3, #32
 800226a:	d004      	beq.n	8002276 <I2C_IsErrorOccurred+0x112>
 800226c:	2327      	movs	r3, #39	; 0x27
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d092      	beq.n	800219c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002276:	2327      	movs	r3, #39	; 0x27
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2220      	movs	r2, #32
 8002286:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	2204      	movs	r2, #4
 800228c:	4313      	orrs	r3, r2
 800228e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002290:	2327      	movs	r3, #39	; 0x27
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d00c      	beq.n	80022c4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4313      	orrs	r3, r2
 80022b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	0052      	lsls	r2, r2, #1
 80022ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022bc:	2327      	movs	r3, #39	; 0x27
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00c      	beq.n	80022e8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2208      	movs	r2, #8
 80022d2:	4313      	orrs	r3, r2
 80022d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022e0:	2327      	movs	r3, #39	; 0x27
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d00c      	beq.n	800230c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	2202      	movs	r2, #2
 80022f6:	4313      	orrs	r3, r2
 80022f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002304:	2327      	movs	r3, #39	; 0x27
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800230c:	2327      	movs	r3, #39	; 0x27
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01d      	beq.n	8002352 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff fe29 	bl	8001f70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	490d      	ldr	r1, [pc, #52]	; (8002360 <I2C_IsErrorOccurred+0x1fc>)
 800232a:	400a      	ands	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2241      	movs	r2, #65	; 0x41
 800233e:	2120      	movs	r1, #32
 8002340:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2242      	movs	r2, #66	; 0x42
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002352:	2327      	movs	r3, #39	; 0x27
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b00b      	add	sp, #44	; 0x2c
 800235e:	bd90      	pop	{r4, r7, pc}
 8002360:	fe00e800 	.word	0xfe00e800

08002364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	0008      	movs	r0, r1
 800236e:	0011      	movs	r1, r2
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	240a      	movs	r4, #10
 8002374:	193b      	adds	r3, r7, r4
 8002376:	1c02      	adds	r2, r0, #0
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	2009      	movs	r0, #9
 800237c:	183b      	adds	r3, r7, r0
 800237e:	1c0a      	adds	r2, r1, #0
 8002380:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002382:	193b      	adds	r3, r7, r4
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	059b      	lsls	r3, r3, #22
 8002388:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800238a:	183b      	adds	r3, r7, r0
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	0419      	lsls	r1, r3, #16
 8002390:	23ff      	movs	r3, #255	; 0xff
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002396:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	4313      	orrs	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ae:	0d51      	lsrs	r1, r2, #21
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	00d2      	lsls	r2, r2, #3
 80023b4:	400a      	ands	r2, r1
 80023b6:	4907      	ldr	r1, [pc, #28]	; (80023d4 <I2C_TransferConfig+0x70>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	43d2      	mvns	r2, r2
 80023bc:	401a      	ands	r2, r3
 80023be:	0011      	movs	r1, r2
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b007      	add	sp, #28
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	03ff63ff 	.word	0x03ff63ff

080023d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2241      	movs	r2, #65	; 0x41
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d138      	bne.n	8002460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e032      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2241      	movs	r2, #65	; 0x41
 8002408:	2124      	movs	r1, #36	; 0x24
 800240a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4911      	ldr	r1, [pc, #68]	; (800246c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2241      	movs	r2, #65	; 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	ffffefff 	.word	0xffffefff

08002470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	; 0x41
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d139      	bne.n	80024fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e033      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2241      	movs	r2, #65	; 0x41
 80024a0:	2124      	movs	r1, #36	; 0x24
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2241      	movs	r2, #65	; 0x41
 80024ea:	2120      	movs	r1, #32
 80024ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2240      	movs	r2, #64	; 0x40
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fffff0ff 	.word	0xfffff0ff

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f000 fb6c 	bl	8002bf4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251c:	4bc8      	ldr	r3, [pc, #800]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	220c      	movs	r2, #12
 8002522:	4013      	ands	r3, r2
 8002524:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002526:	4bc6      	ldr	r3, [pc, #792]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x36>
 800253c:	e07d      	b.n	800263a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d007      	beq.n	8002554 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d112      	bne.n	8002570 <HAL_RCC_OscConfig+0x68>
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	429a      	cmp	r2, r3
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	4bba      	ldr	r3, [pc, #744]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	4013      	ands	r3, r2
 800255e:	d100      	bne.n	8002562 <HAL_RCC_OscConfig+0x5a>
 8002560:	e06a      	b.n	8002638 <HAL_RCC_OscConfig+0x130>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d166      	bne.n	8002638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f000 fb42 	bl	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	025b      	lsls	r3, r3, #9
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x84>
 800257c:	4bb0      	ldr	r3, [pc, #704]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4baf      	ldr	r3, [pc, #700]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	0249      	lsls	r1, r1, #9
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e027      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	02db      	lsls	r3, r3, #11
 8002594:	429a      	cmp	r2, r3
 8002596:	d10e      	bne.n	80025b6 <HAL_RCC_OscConfig+0xae>
 8002598:	4ba9      	ldr	r3, [pc, #676]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4ba8      	ldr	r3, [pc, #672]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	02c9      	lsls	r1, r1, #11
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4ba6      	ldr	r3, [pc, #664]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4ba5      	ldr	r3, [pc, #660]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0249      	lsls	r1, r1, #9
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e012      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025b6:	4ba2      	ldr	r3, [pc, #648]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4ba1      	ldr	r3, [pc, #644]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025bc:	49a1      	ldr	r1, [pc, #644]	; (8002844 <HAL_RCC_OscConfig+0x33c>)
 80025be:	400a      	ands	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	4b9f      	ldr	r3, [pc, #636]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4b9b      	ldr	r3, [pc, #620]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b9a      	ldr	r3, [pc, #616]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025d6:	499c      	ldr	r1, [pc, #624]	; (8002848 <HAL_RCC_OscConfig+0x340>)
 80025d8:	400a      	ands	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d014      	beq.n	800260e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fe6c 	bl	80012c0 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ee:	f7fe fe67 	bl	80012c0 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e2f9      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002600:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	029b      	lsls	r3, r3, #10
 8002608:	4013      	ands	r3, r2
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0xe6>
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fe57 	bl	80012c0 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fe52 	bl	80012c0 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2e4      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262a:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x110>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	4013      	ands	r3, r2
 8002642:	d100      	bne.n	8002646 <HAL_RCC_OscConfig+0x13e>
 8002644:	e099      	b.n	800277a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	2220      	movs	r2, #32
 8002650:	4013      	ands	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002654:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b79      	ldr	r3, [pc, #484]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800265a:	2120      	movs	r1, #32
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	2220      	movs	r2, #32
 8002664:	4393      	bics	r3, r2
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d13e      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1ea>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d13b      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800267a:	4b71      	ldr	r3, [pc, #452]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_RCC_OscConfig+0x186>
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e2b2      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x344>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	021a      	lsls	r2, r3, #8
 800269e:	4b68      	ldr	r3, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2209      	movs	r2, #9
 80026aa:	4393      	bics	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 fbeb 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 80026ba:	0001      	movs	r1, r0
 80026bc:	4b60      	ldr	r3, [pc, #384]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	220f      	movs	r2, #15
 80026c4:	4013      	ands	r3, r2
 80026c6:	4a62      	ldr	r2, [pc, #392]	; (8002850 <HAL_RCC_OscConfig+0x348>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	000a      	movs	r2, r1
 80026cc:	40da      	lsrs	r2, r3
 80026ce:	4b61      	ldr	r3, [pc, #388]	; (8002854 <HAL_RCC_OscConfig+0x34c>)
 80026d0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80026d2:	4b61      	ldr	r3, [pc, #388]	; (8002858 <HAL_RCC_OscConfig+0x350>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2513      	movs	r5, #19
 80026d8:	197c      	adds	r4, r7, r5
 80026da:	0018      	movs	r0, r3
 80026dc:	f7fe fdaa 	bl	8001234 <HAL_InitTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80026e4:	197b      	adds	r3, r7, r5
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d046      	beq.n	800277a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80026ec:	197b      	adds	r3, r7, r5
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	e280      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d027      	beq.n	8002748 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026f8:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2209      	movs	r2, #9
 80026fe:	4393      	bics	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fdd9 	bl	80012c0 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fdd4 	bl	80012c0 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e266      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2204      	movs	r2, #4
 800272c:	4013      	ands	r3, r2
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a45      	ldr	r2, [pc, #276]	; (800284c <HAL_RCC_OscConfig+0x344>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	021a      	lsls	r2, r3, #8
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e018      	b.n	800277a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800274e:	2101      	movs	r1, #1
 8002750:	438a      	bics	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe fdb4 	bl	80012c0 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fdaf 	bl	80012c0 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e241      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2204      	movs	r2, #4
 8002776:	4013      	ands	r3, r2
 8002778:	d1f1      	bne.n	800275e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2210      	movs	r2, #16
 8002780:	4013      	ands	r3, r2
 8002782:	d100      	bne.n	8002786 <HAL_RCC_OscConfig+0x27e>
 8002784:	e0a1      	b.n	80028ca <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d140      	bne.n	800280e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x29c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e227      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_RCC_OscConfig+0x354>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	0a19      	lsrs	r1, r3, #8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	061a      	lsls	r2, r3, #24
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	0b5b      	lsrs	r3, r3, #13
 80027d2:	3301      	adds	r3, #1
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	210f      	movs	r1, #15
 80027e2:	400b      	ands	r3, r1
 80027e4:	491a      	ldr	r1, [pc, #104]	; (8002850 <HAL_RCC_OscConfig+0x348>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_RCC_OscConfig+0x34c>)
 80027ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_RCC_OscConfig+0x350>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2513      	movs	r5, #19
 80027f4:	197c      	adds	r4, r7, r5
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fe fd1c 	bl	8001234 <HAL_InitTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002800:	197b      	adds	r3, r7, r5
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d060      	beq.n	80028ca <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002808:	197b      	adds	r3, r7, r5
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	e1f2      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03f      	beq.n	8002896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0049      	lsls	r1, r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fd4c 	bl	80012c0 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800282c:	e018      	b.n	8002860 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282e:	f7fe fd47 	bl	80012c0 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d911      	bls.n	8002860 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1d9      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
 8002840:	40021000 	.word	0x40021000
 8002844:	fffeffff 	.word	0xfffeffff
 8002848:	fffbffff 	.word	0xfffbffff
 800284c:	ffffe0ff 	.word	0xffffe0ff
 8002850:	0800560c 	.word	0x0800560c
 8002854:	20000050 	.word	0x20000050
 8002858:	20000054 	.word	0x20000054
 800285c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002860:	4bc9      	ldr	r3, [pc, #804]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4013      	ands	r3, r2
 800286a:	d0e0      	beq.n	800282e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286c:	4bc6      	ldr	r3, [pc, #792]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4ac6      	ldr	r2, [pc, #792]	; (8002b8c <HAL_RCC_OscConfig+0x684>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	4bc3      	ldr	r3, [pc, #780]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4bc1      	ldr	r3, [pc, #772]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	0a19      	lsrs	r1, r3, #8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	061a      	lsls	r2, r3, #24
 800288e:	4bbe      	ldr	r3, [pc, #760]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	e019      	b.n	80028ca <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002896:	4bbc      	ldr	r3, [pc, #752]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4bbb      	ldr	r3, [pc, #748]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 800289c:	49bc      	ldr	r1, [pc, #752]	; (8002b90 <HAL_RCC_OscConfig+0x688>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fd0d 	bl	80012c0 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ac:	f7fe fd08 	bl	80012c0 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e19a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028be:	4bb2      	ldr	r3, [pc, #712]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	d036      	beq.n	8002942 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d019      	beq.n	8002910 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028dc:	4baa      	ldr	r3, [pc, #680]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80028de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028e0:	4ba9      	ldr	r3, [pc, #676]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fe fcea 	bl	80012c0 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fce5 	bl	80012c0 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e177      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002904:	4ba0      	ldr	r3, [pc, #640]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d0f1      	beq.n	80028f2 <HAL_RCC_OscConfig+0x3ea>
 800290e:	e018      	b.n	8002942 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002910:	4b9d      	ldr	r3, [pc, #628]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002914:	4b9c      	ldr	r3, [pc, #624]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002916:	2101      	movs	r1, #1
 8002918:	438a      	bics	r2, r1
 800291a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7fe fcd0 	bl	80012c0 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe fccb 	bl	80012c0 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e15d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002938:	4b93      	ldr	r3, [pc, #588]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d1f1      	bne.n	8002926 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	4013      	ands	r3, r2
 800294a:	d100      	bne.n	800294e <HAL_RCC_OscConfig+0x446>
 800294c:	e0ae      	b.n	8002aac <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2023      	movs	r0, #35	; 0x23
 8002950:	183b      	adds	r3, r7, r0
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	055b      	lsls	r3, r3, #21
 800295e:	4013      	ands	r3, r2
 8002960:	d109      	bne.n	8002976 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b89      	ldr	r3, [pc, #548]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002966:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0549      	lsls	r1, r1, #21
 800296c:	430a      	orrs	r2, r1
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002970:	183b      	adds	r3, r7, r0
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <HAL_RCC_OscConfig+0x68c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4013      	ands	r3, r2
 8002980:	d11a      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCC_OscConfig+0x68c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b83      	ldr	r3, [pc, #524]	; (8002b94 <HAL_RCC_OscConfig+0x68c>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0049      	lsls	r1, r1, #1
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002990:	f7fe fc96 	bl	80012c0 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fc91 	bl	80012c0 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	; 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e123      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <HAL_RCC_OscConfig+0x68c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4cc>
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c8:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	0049      	lsls	r1, r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50
 80029d2:	e031      	b.n	8002a38 <HAL_RCC_OscConfig+0x530>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4ee>
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e0:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029e2:	496b      	ldr	r1, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x688>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	651a      	str	r2, [r3, #80]	; 0x50
 80029e8:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 80029ee:	496a      	ldr	r1, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x690>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	651a      	str	r2, [r3, #80]	; 0x50
 80029f4:	e020      	b.n	8002a38 <HAL_RCC_OscConfig+0x530>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	23a0      	movs	r3, #160	; 0xa0
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d10e      	bne.n	8002a20 <HAL_RCC_OscConfig+0x518>
 8002a02:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a06:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	00c9      	lsls	r1, r1, #3
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a14:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	0049      	lsls	r1, r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x530>
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a26:	495a      	ldr	r1, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x688>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a2c:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a30:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a32:	4959      	ldr	r1, [pc, #356]	; (8002b98 <HAL_RCC_OscConfig+0x690>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe fc3e 	bl	80012c0 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe fc39 	bl	80012c0 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a51      	ldr	r2, [pc, #324]	; (8002b9c <HAL_RCC_OscConfig+0x694>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0ca      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d0ef      	beq.n	8002a4a <HAL_RCC_OscConfig+0x542>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fc28 	bl	80012c0 <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a74:	e009      	b.n	8002a8a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fc23 	bl	80012c0 <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <HAL_RCC_OscConfig+0x694>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0b4      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a96:	2323      	movs	r3, #35	; 0x23
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa4:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002aa6:	493e      	ldr	r1, [pc, #248]	; (8002ba0 <HAL_RCC_OscConfig+0x698>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d100      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5ae>
 8002ab4:	e09d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x5b6>
 8002abc:	e076      	b.n	8002bac <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d145      	bne.n	8002b52 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002acc:	4935      	ldr	r1, [pc, #212]	; (8002ba4 <HAL_RCC_OscConfig+0x69c>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fbf5 	bl	80012c0 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fbf0 	bl	80012c0 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e082      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	049b      	lsls	r3, r3, #18
 8002af6:	4013      	ands	r3, r2
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x6a0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	431a      	orrs	r2, r3
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0449      	lsls	r1, r1, #17
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fbca 	bl	80012c0 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe fbc5 	bl	80012c0 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e057      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	049b      	lsls	r3, r3, #18
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x62a>
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b58:	4912      	ldr	r1, [pc, #72]	; (8002ba4 <HAL_RCC_OscConfig+0x69c>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fbaf 	bl	80012c0 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fbaa 	bl	80012c0 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e03c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b7a:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_OscConfig+0x680>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	049b      	lsls	r3, r3, #18
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x660>
 8002b86:	e034      	b.n	8002bf2 <HAL_RCC_OscConfig+0x6ea>
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	ffff1fff 	.word	0xffff1fff
 8002b90:	fffffeff 	.word	0xfffffeff
 8002b94:	40007000 	.word	0x40007000
 8002b98:	fffffbff 	.word	0xfffffbff
 8002b9c:	00001388 	.word	0x00001388
 8002ba0:	efffffff 	.word	0xefffffff
 8002ba4:	feffffff 	.word	0xfeffffff
 8002ba8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_RCC_OscConfig+0x6f4>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	025b      	lsls	r3, r3, #9
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10f      	bne.n	8002bee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	23f0      	movs	r3, #240	; 0xf0
 8002bd2:	039b      	lsls	r3, r3, #14
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	23c0      	movs	r3, #192	; 0xc0
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b00a      	add	sp, #40	; 0x28
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e128      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d91e      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4393      	bics	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	4b90      	ldr	r3, [pc, #576]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fb44 	bl	80012c0 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3e:	f7fe fb3f 	bl	80012c0 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4a8a      	ldr	r2, [pc, #552]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e109      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6a:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	22f0      	movs	r2, #240	; 0xf0
 8002c70:	4393      	bics	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x8a>
 8002c88:	e089      	b.n	8002d9e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c92:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d120      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0e1      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002caa:	4b73      	ldr	r3, [pc, #460]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	049b      	lsls	r3, r3, #18
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d114      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0d5      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc2:	4b6d      	ldr	r3, [pc, #436]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0ca      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cd0:	4b69      	ldr	r3, [pc, #420]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0c2      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce0:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fae4 	bl	80012c0 <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d111      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d04:	e009      	b.n	8002d1a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f7fe fadb 	bl	80012c0 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0a5      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	220c      	movs	r2, #12
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d1ef      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x106>
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d32:	f7fe fac5 	bl	80012c0 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	4a4d      	ldr	r2, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e08f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d1ef      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x132>
 8002d52:	e024      	b.n	8002d9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d11b      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5c:	e009      	b.n	8002d72 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5e:	f7fe faaf 	bl	80012c0 <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e079      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	220c      	movs	r2, #12
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d1ef      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x15e>
 8002d7e:	e00e      	b.n	8002d9e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe fa9e 	bl	80012c0 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e068      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d94:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	220c      	movs	r2, #12
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d21e      	bcs.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4393      	bics	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fa7f 	bl	80012c0 <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	e009      	b.n	8002ddc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fe fa7a 	bl	80012c0 <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_RCC_ClockConfig+0x274>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e044      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2204      	movs	r2, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x27c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_RCC_ClockConfig+0x280>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	00da      	lsls	r2, r3, #3
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e28:	f000 f832 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e2c:	0001      	movs	r1, r0
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_ClockConfig+0x278>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	220f      	movs	r2, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x284>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	40da      	lsrs	r2, r3
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_ClockConfig+0x288>)
 8002e42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_ClockConfig+0x28c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	250b      	movs	r5, #11
 8002e4a:	197c      	adds	r4, r7, r5
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fe f9f1 	bl	8001234 <HAL_InitTick>
 8002e52:	0003      	movs	r3, r0
 8002e54:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e56:	197b      	adds	r3, r7, r5
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e5e:	197b      	adds	r3, r7, r5
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40022000 	.word	0x40022000
 8002e74:	00001388 	.word	0x00001388
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	fffff8ff 	.word	0xfffff8ff
 8002e80:	ffffc7ff 	.word	0xffffc7ff
 8002e84:	0800560c 	.word	0x0800560c
 8002e88:	20000050 	.word	0x20000050
 8002e8c:	20000054 	.word	0x20000054

08002e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b5b0      	push	{r4, r5, r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d014      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ea6:	d900      	bls.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1a>
 8002ea8:	e07b      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x112>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x24>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x3a>
 8002eb2:	e076      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ec2:	e07c      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ec8:	e079      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ece:	e076      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	0c9a      	lsrs	r2, r3, #18
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	0d9a      	lsrs	r2, r3, #22
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d01a      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f00:	2300      	movs	r3, #0
 8002f02:	69b8      	ldr	r0, [r7, #24]
 8002f04:	69f9      	ldr	r1, [r7, #28]
 8002f06:	f7fd f9b5 	bl	8000274 <__aeabi_lmul>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0010      	movs	r0, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f7fd f989 	bl	8000234 <__aeabi_uldivmod>
 8002f22:	0002      	movs	r2, r0
 8002f24:	000b      	movs	r3, r1
 8002f26:	0013      	movs	r3, r2
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	e037      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2210      	movs	r2, #16
 8002f32:	4013      	ands	r3, r2
 8002f34:	d01a      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f40:	2300      	movs	r3, #0
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	f7fd f995 	bl	8000274 <__aeabi_lmul>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	0010      	movs	r0, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f7fd f969 	bl	8000234 <__aeabi_uldivmod>
 8002f62:	0002      	movs	r2, r0
 8002f64:	000b      	movs	r3, r1
 8002f66:	0013      	movs	r3, r2
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6a:	e017      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	0018      	movs	r0, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	0019      	movs	r1, r3
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f76:	2300      	movs	r3, #0
 8002f78:	f7fd f97c 	bl	8000274 <__aeabi_lmul>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	000b      	movs	r3, r1
 8002f80:	0010      	movs	r0, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	001c      	movs	r4, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	001d      	movs	r5, r3
 8002f8c:	0022      	movs	r2, r4
 8002f8e:	002b      	movs	r3, r5
 8002f90:	f7fd f950 	bl	8000234 <__aeabi_uldivmod>
 8002f94:	0002      	movs	r2, r0
 8002f96:	000b      	movs	r3, r1
 8002f98:	0013      	movs	r3, r2
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa0:	e00d      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0b5b      	lsrs	r3, r3, #13
 8002fa8:	2207      	movs	r2, #7
 8002faa:	4013      	ands	r3, r2
 8002fac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	0212      	lsls	r2, r2, #8
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fbc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b00e      	add	sp, #56	; 0x38
 8002fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	08005624 	.word	0x08005624

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	; (8002fec <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000050 	.word	0x20000050

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff2 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ff8:	0001      	movs	r1, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	2207      	movs	r2, #7
 8003002:	4013      	ands	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	40d9      	lsrs	r1, r3
 800300a:	000b      	movs	r3, r1
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	40021000 	.word	0x40021000
 8003018:	0800561c 	.word	0x0800561c

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003020:	f7ff ffdc 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003024:	0001      	movs	r1, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	40d9      	lsrs	r1, r3
 8003036:	000b      	movs	r3, r1
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40021000 	.word	0x40021000
 8003044:	0800561c 	.word	0x0800561c

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003050:	2017      	movs	r0, #23
 8003052:	183b      	adds	r3, r7, r0
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2220      	movs	r2, #32
 800305e:	4013      	ands	r3, r2
 8003060:	d100      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003062:	e0c7      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003064:	4b84      	ldr	r3, [pc, #528]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	055b      	lsls	r3, r3, #21
 800306c:	4013      	ands	r3, r2
 800306e:	d109      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0549      	lsls	r1, r1, #21
 800307a:	430a      	orrs	r2, r1
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800307e:	183b      	adds	r3, r7, r0
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b7d      	ldr	r3, [pc, #500]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d11a      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003090:	4b7a      	ldr	r3, [pc, #488]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b79      	ldr	r3, [pc, #484]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0049      	lsls	r1, r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe f90f 	bl	80012c0 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e008      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe f90a 	bl	80012c0 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0d9      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b70      	ldr	r3, [pc, #448]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80030c6:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	23c0      	movs	r3, #192	; 0xc0
 80030cc:	039b      	lsls	r3, r3, #14
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	23c0      	movs	r3, #192	; 0xc0
 80030d8:	039b      	lsls	r3, r3, #14
 80030da:	4013      	ands	r3, r2
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d013      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	401a      	ands	r2, r3
 80030ec:	23c0      	movs	r3, #192	; 0xc0
 80030ee:	029b      	lsls	r3, r3, #10
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d10a      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030f4:	4b60      	ldr	r3, [pc, #384]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	401a      	ands	r2, r3
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	429a      	cmp	r2, r3
 8003104:	d101      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0b1      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800310a:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800310c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800310e:	23c0      	movs	r3, #192	; 0xc0
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	23c0      	movs	r3, #192	; 0xc0
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	4013      	ands	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d033      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2220      	movs	r2, #32
 8003132:	4013      	ands	r3, r2
 8003134:	d02e      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003136:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313a:	4a51      	ldr	r2, [pc, #324]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003144:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0309      	lsls	r1, r1, #12
 800314a:	430a      	orrs	r2, r1
 800314c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800314e:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003152:	4b49      	ldr	r3, [pc, #292]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003154:	494b      	ldr	r1, [pc, #300]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003156:	400a      	ands	r2, r1
 8003158:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d014      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe f8a9 	bl	80012c0 <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003172:	e009      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fe f8a4 	bl	80012c0 <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	4a42      	ldr	r2, [pc, #264]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e072      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800318a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4013      	ands	r3, r2
 8003192:	d0ef      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	4013      	ands	r3, r2
 800319c:	d01f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	401a      	ands	r2, r3
 80031a8:	23c0      	movs	r3, #192	; 0xc0
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d10c      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x182>
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	23c0      	movs	r3, #192	; 0xc0
 80031c0:	039b      	lsls	r3, r3, #14
 80031c2:	401a      	ands	r2, r3
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	401a      	ands	r2, r3
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031da:	430a      	orrs	r2, r1
 80031dc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031de:	2317      	movs	r3, #23
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ee:	4928      	ldr	r1, [pc, #160]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	220c      	movs	r2, #12
 8003204:	4393      	bics	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800320e:	430a      	orrs	r2, r1
 8003210:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800322c:	430a      	orrs	r2, r1
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2208      	movs	r2, #8
 8003236:	4013      	ands	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003240:	4013      	ands	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800324a:	430a      	orrs	r2, r1
 800324c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	4013      	ands	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	4a0f      	ldr	r2, [pc, #60]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003268:	430a      	orrs	r2, r1
 800326a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b006      	add	sp, #24
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	fffcffff 	.word	0xfffcffff
 8003284:	fff7ffff 	.word	0xfff7ffff
 8003288:	00001388 	.word	0x00001388
 800328c:	ffcfffff 	.word	0xffcfffff
 8003290:	efffffff 	.word	0xefffffff
 8003294:	fffff3ff 	.word	0xfffff3ff
 8003298:	ffffcfff 	.word	0xffffcfff
 800329c:	fff3ffff 	.word	0xfff3ffff

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e032      	b.n	8003318 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2239      	movs	r2, #57	; 0x39
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2238      	movs	r2, #56	; 0x38
 80032c2:	2100      	movs	r1, #0
 80032c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fd fe75 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2239      	movs	r2, #57	; 0x39
 80032d2:	2102      	movs	r1, #2
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	0019      	movs	r1, r3
 80032e0:	0010      	movs	r0, r2
 80032e2:	f000 fa4d 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223e      	movs	r2, #62	; 0x3e
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223a      	movs	r2, #58	; 0x3a
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223b      	movs	r2, #59	; 0x3b
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	223c      	movs	r2, #60	; 0x3c
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223d      	movs	r2, #61	; 0x3d
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2239      	movs	r2, #57	; 0x39
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2239      	movs	r2, #57	; 0x39
 800332c:	5c9b      	ldrb	r3, [r3, r2]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d001      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e036      	b.n	80033a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2239      	movs	r2, #57	; 0x39
 800333c:	2102      	movs	r1, #2
 800333e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	05db      	lsls	r3, r3, #23
 8003358:	429a      	cmp	r2, r3
 800335a:	d009      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x50>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <HAL_TIM_Base_Start_IT+0x90>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x50>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <HAL_TIM_Base_Start_IT+0x94>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2207      	movs	r2, #7
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d010      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	e007      	b.n	80033a4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40010800 	.word	0x40010800
 80033b4:	40011400 	.word	0x40011400

080033b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d124      	bne.n	8003418 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d11d      	bne.n	8003418 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2203      	movs	r2, #3
 80033e2:	4252      	negs	r2, r2
 80033e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2203      	movs	r2, #3
 80033f4:	4013      	ands	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f9a8 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 8003400:	e007      	b.n	8003412 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f99b 	bl	8003740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f9a7 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2204      	movs	r2, #4
 8003420:	4013      	ands	r3, r2
 8003422:	2b04      	cmp	r3, #4
 8003424:	d125      	bne.n	8003472 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2204      	movs	r2, #4
 800342e:	4013      	ands	r3, r2
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11e      	bne.n	8003472 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2205      	movs	r2, #5
 800343a:	4252      	negs	r2, r2
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	23c0      	movs	r3, #192	; 0xc0
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 f97b 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 800345a:	e007      	b.n	800346c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f000 f96e 	bl	8003740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f97a 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2208      	movs	r2, #8
 800347a:	4013      	ands	r3, r2
 800347c:	2b08      	cmp	r3, #8
 800347e:	d124      	bne.n	80034ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2208      	movs	r2, #8
 8003488:	4013      	ands	r3, r2
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11d      	bne.n	80034ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2209      	movs	r2, #9
 8003494:	4252      	negs	r2, r2
 8003496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2204      	movs	r2, #4
 800349c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 f94f 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 80034b2:	e007      	b.n	80034c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f942 	bl	8003740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f94e 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2210      	movs	r2, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d125      	bne.n	8003524 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2210      	movs	r2, #16
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d11e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2211      	movs	r2, #17
 80034ec:	4252      	negs	r2, r2
 80034ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2208      	movs	r2, #8
 80034f4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	23c0      	movs	r3, #192	; 0xc0
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4013      	ands	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f922 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 800350c:	e007      	b.n	800351e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f915 	bl	8003740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f921 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2201      	movs	r2, #1
 800352c:	4013      	ands	r3, r2
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10f      	bne.n	8003552 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	4252      	negs	r2, r2
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 f8ef 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	4013      	ands	r3, r2
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d10f      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	4013      	ands	r3, r2
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d108      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2241      	movs	r2, #65	; 0x41
 8003574:	4252      	negs	r2, r2
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f8f8 	bl	8003770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	230f      	movs	r3, #15
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2238      	movs	r2, #56	; 0x38
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_ConfigClockSource+0x20>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0bc      	b.n	8003722 <HAL_TIM_ConfigClockSource+0x19a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2238      	movs	r2, #56	; 0x38
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2239      	movs	r2, #57	; 0x39
 80035b4:	2102      	movs	r1, #2
 80035b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2277      	movs	r2, #119	; 0x77
 80035c4:	4393      	bics	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_TIM_ConfigClockSource+0x1a4>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	0192      	lsls	r2, r2, #6
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d040      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xde>
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	0192      	lsls	r2, r2, #6
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d900      	bls.n	80035ee <HAL_TIM_ConfigClockSource+0x66>
 80035ec:	e088      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	0152      	lsls	r2, r2, #5
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d100      	bne.n	80035f8 <HAL_TIM_ConfigClockSource+0x70>
 80035f6:	e088      	b.n	800370a <HAL_TIM_ConfigClockSource+0x182>
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0152      	lsls	r2, r2, #5
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d900      	bls.n	8003602 <HAL_TIM_ConfigClockSource+0x7a>
 8003600:	e07e      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 8003602:	2b70      	cmp	r3, #112	; 0x70
 8003604:	d018      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0xb0>
 8003606:	d900      	bls.n	800360a <HAL_TIM_ConfigClockSource+0x82>
 8003608:	e07a      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 800360a:	2b60      	cmp	r3, #96	; 0x60
 800360c:	d04f      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x126>
 800360e:	d900      	bls.n	8003612 <HAL_TIM_ConfigClockSource+0x8a>
 8003610:	e076      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 8003612:	2b50      	cmp	r3, #80	; 0x50
 8003614:	d03b      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x106>
 8003616:	d900      	bls.n	800361a <HAL_TIM_ConfigClockSource+0x92>
 8003618:	e072      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d057      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x146>
 800361e:	d900      	bls.n	8003622 <HAL_TIM_ConfigClockSource+0x9a>
 8003620:	e06e      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 8003622:	2b30      	cmp	r3, #48	; 0x30
 8003624:	d063      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x166>
 8003626:	d86b      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d060      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x166>
 800362c:	d868      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d05d      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x166>
 8003632:	2b10      	cmp	r3, #16
 8003634:	d05b      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x166>
 8003636:	e063      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003648:	f000 f968 	bl	800391c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2277      	movs	r2, #119	; 0x77
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
      break;
 8003664:	e052      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003676:	f000 f951 	bl	800391c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2180      	movs	r1, #128	; 0x80
 8003686:	01c9      	lsls	r1, r1, #7
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e03e      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	001a      	movs	r2, r3
 800369c:	f000 f8c4 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2150      	movs	r1, #80	; 0x50
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f91e 	bl	80038e8 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e02e      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	001a      	movs	r2, r3
 80036bc:	f000 f8e2 	bl	8003884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2160      	movs	r1, #96	; 0x60
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f90e 	bl	80038e8 <TIM_ITRx_SetConfig>
      break;
 80036cc:	e01e      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	001a      	movs	r2, r3
 80036dc:	f000 f8a4 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f8fe 	bl	80038e8 <TIM_ITRx_SetConfig>
      break;
 80036ec:	e00e      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f000 f8f5 	bl	80038e8 <TIM_ITRx_SetConfig>
      break;
 80036fe:	e005      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003700:	230f      	movs	r3, #15
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
      break;
 8003708:	e000      	b.n	800370c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800370a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2239      	movs	r2, #57	; 0x39
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2238      	movs	r2, #56	; 0x38
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

  return status;
 800371c:	230f      	movs	r3, #15
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	ffff00ff 	.word	0xffff00ff

08003730 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	05db      	lsls	r3, r3, #23
 8003796:	429a      	cmp	r2, r3
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0x2a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <TIM_Base_SetConfig+0x9c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0x2a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <TIM_Base_SetConfig+0xa0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2270      	movs	r2, #112	; 0x70
 80037ae:	4393      	bics	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	05db      	lsls	r3, r3, #23
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x56>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <TIM_Base_SetConfig+0x9c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x56>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <TIM_Base_SetConfig+0xa0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a12      	ldr	r2, [pc, #72]	; (8003824 <TIM_Base_SetConfig+0xa4>)
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	4393      	bics	r3, r2
 80037ee:	001a      	movs	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	615a      	str	r2, [r3, #20]
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b004      	add	sp, #16
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40010800 	.word	0x40010800
 8003820:	40011400 	.word	0x40011400
 8003824:	fffffcff 	.word	0xfffffcff

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	2201      	movs	r2, #1
 8003840:	4393      	bics	r3, r2
 8003842:	001a      	movs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	22f0      	movs	r2, #240	; 0xf0
 8003852:	4393      	bics	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	220a      	movs	r2, #10
 8003864:	4393      	bics	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}

08003884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	2210      	movs	r2, #16
 8003896:	4393      	bics	r3, r2
 8003898:	001a      	movs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <TIM_TI2_ConfigInputStage+0x60>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	22a0      	movs	r2, #160	; 0xa0
 80038c0:	4393      	bics	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b006      	add	sp, #24
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	ffff0fff 	.word	0xffff0fff

080038e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2270      	movs	r2, #112	; 0x70
 80038fc:	4393      	bics	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	2207      	movs	r2, #7
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b004      	add	sp, #16
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <TIM_ETR_SetConfig+0x3c>)
 8003934:	4013      	ands	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b006      	add	sp, #24
 8003956:	bd80      	pop	{r7, pc}
 8003958:	ffff00ff 	.word	0xffff00ff

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2238      	movs	r2, #56	; 0x38
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003970:	2302      	movs	r3, #2
 8003972:	e042      	b.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2238      	movs	r2, #56	; 0x38
 8003978:	2101      	movs	r1, #1
 800397a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2239      	movs	r2, #57	; 0x39
 8003980:	2102      	movs	r1, #2
 8003982:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2270      	movs	r2, #112	; 0x70
 8003998:	4393      	bics	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	05db      	lsls	r3, r3, #23
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d009      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10c      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	4393      	bics	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2239      	movs	r2, #57	; 0x39
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2238      	movs	r2, #56	; 0x38
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40010800 	.word	0x40010800
 8003a08:	40011400 	.word	0x40011400

08003a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e044      	b.n	8003aa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2278      	movs	r2, #120	; 0x78
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fd fa7d 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f8d0 	bl	8003bf4 <UART_SetConfig>
 8003a54:	0003      	movs	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e024      	b.n	8003aa8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 fb0d 	bl	8004088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <HAL_UART_Init+0xa4>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	212a      	movs	r1, #42	; 0x2a
 8003a8a:	438a      	bics	r2, r1
 8003a8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 fba5 	bl	80041f0 <UART_CheckIdleState>
 8003aa6:	0003      	movs	r3, r0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	ffffb7ff 	.word	0xffffb7ff

08003ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d000      	beq.n	8003ace <HAL_UART_Transmit+0x1a>
 8003acc:	e08c      	b.n	8003be8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_UART_Transmit+0x28>
 8003ad4:	1dbb      	adds	r3, r7, #6
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e084      	b.n	8003bea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d109      	bne.n	8003b00 <HAL_UART_Transmit+0x4c>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	d001      	beq.n	8003b00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e074      	b.n	8003bea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2284      	movs	r2, #132	; 0x84
 8003b04:	2100      	movs	r1, #0
 8003b06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0e:	f7fd fbd7 	bl	80012c0 <HAL_GetTick>
 8003b12:	0003      	movs	r3, r0
 8003b14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1dba      	adds	r2, r7, #6
 8003b1a:	2150      	movs	r1, #80	; 0x50
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1dba      	adds	r2, r7, #6
 8003b24:	2152      	movs	r1, #82	; 0x52
 8003b26:	8812      	ldrh	r2, [r2, #0]
 8003b28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x94>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b50:	e02f      	b.n	8003bb2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	f000 fbee 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e03b      	b.n	8003bea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	05d2      	lsls	r2, r2, #23
 8003b84:	0dd2      	lsrs	r2, r2, #23
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e007      	b.n	8003ba0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2252      	movs	r2, #82	; 0x52
 8003ba4:	5a9b      	ldrh	r3, [r3, r2]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b299      	uxth	r1, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2252      	movs	r2, #82	; 0x52
 8003bb0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2252      	movs	r2, #82	; 0x52
 8003bb6:	5a9b      	ldrh	r3, [r3, r2]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1c9      	bne.n	8003b52 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	0013      	movs	r3, r2
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	f000 fbb8 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e005      	b.n	8003bea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b008      	add	sp, #32
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfc:	231a      	movs	r3, #26
 8003bfe:	2218      	movs	r2, #24
 8003c00:	189b      	adds	r3, r3, r2
 8003c02:	19db      	adds	r3, r3, r7
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4ab4      	ldr	r2, [pc, #720]	; (8003ef8 <UART_SetConfig+0x304>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4aaf      	ldr	r2, [pc, #700]	; (8003efc <UART_SetConfig+0x308>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4aa9      	ldr	r2, [pc, #676]	; (8003f00 <UART_SetConfig+0x30c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c64:	4313      	orrs	r3, r2
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4aa5      	ldr	r2, [pc, #660]	; (8003f04 <UART_SetConfig+0x310>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4aa1      	ldr	r2, [pc, #644]	; (8003f08 <UART_SetConfig+0x314>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d131      	bne.n	8003cec <UART_SetConfig+0xf8>
 8003c88:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <UART_SetConfig+0x318>)
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d01d      	beq.n	8003cd0 <UART_SetConfig+0xdc>
 8003c94:	d823      	bhi.n	8003cde <UART_SetConfig+0xea>
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d00c      	beq.n	8003cb4 <UART_SetConfig+0xc0>
 8003c9a:	d820      	bhi.n	8003cde <UART_SetConfig+0xea>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0xb2>
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d00e      	beq.n	8003cc2 <UART_SetConfig+0xce>
 8003ca4:	e01b      	b.n	8003cde <UART_SetConfig+0xea>
 8003ca6:	231b      	movs	r3, #27
 8003ca8:	2218      	movs	r2, #24
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	19db      	adds	r3, r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e065      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003cb4:	231b      	movs	r3, #27
 8003cb6:	2218      	movs	r2, #24
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e05e      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003cc2:	231b      	movs	r3, #27
 8003cc4:	2218      	movs	r2, #24
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e057      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003cd0:	231b      	movs	r3, #27
 8003cd2:	2218      	movs	r2, #24
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	2208      	movs	r2, #8
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e050      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003cde:	231b      	movs	r3, #27
 8003ce0:	2218      	movs	r2, #24
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	19db      	adds	r3, r3, r7
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e049      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a83      	ldr	r2, [pc, #524]	; (8003f00 <UART_SetConfig+0x30c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d13e      	bne.n	8003d74 <UART_SetConfig+0x180>
 8003cf6:	4b85      	ldr	r3, [pc, #532]	; (8003f0c <UART_SetConfig+0x318>)
 8003cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cfa:	23c0      	movs	r3, #192	; 0xc0
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4013      	ands	r3, r2
 8003d00:	22c0      	movs	r2, #192	; 0xc0
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d027      	beq.n	8003d58 <UART_SetConfig+0x164>
 8003d08:	22c0      	movs	r2, #192	; 0xc0
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d82a      	bhi.n	8003d66 <UART_SetConfig+0x172>
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d011      	beq.n	8003d3c <UART_SetConfig+0x148>
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d822      	bhi.n	8003d66 <UART_SetConfig+0x172>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <UART_SetConfig+0x13a>
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	00d2      	lsls	r2, r2, #3
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <UART_SetConfig+0x156>
 8003d2c:	e01b      	b.n	8003d66 <UART_SetConfig+0x172>
 8003d2e:	231b      	movs	r3, #27
 8003d30:	2218      	movs	r2, #24
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	19db      	adds	r3, r3, r7
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e021      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003d3c:	231b      	movs	r3, #27
 8003d3e:	2218      	movs	r2, #24
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	19db      	adds	r3, r3, r7
 8003d44:	2202      	movs	r2, #2
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e01a      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003d4a:	231b      	movs	r3, #27
 8003d4c:	2218      	movs	r2, #24
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	2204      	movs	r2, #4
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e013      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	2218      	movs	r2, #24
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	2208      	movs	r2, #8
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e00c      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003d66:	231b      	movs	r3, #27
 8003d68:	2218      	movs	r2, #24
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	2210      	movs	r2, #16
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e005      	b.n	8003d80 <UART_SetConfig+0x18c>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2218      	movs	r2, #24
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5e      	ldr	r2, [pc, #376]	; (8003f00 <UART_SetConfig+0x30c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d000      	beq.n	8003d8c <UART_SetConfig+0x198>
 8003d8a:	e084      	b.n	8003e96 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2218      	movs	r2, #24
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d01d      	beq.n	8003dd6 <UART_SetConfig+0x1e2>
 8003d9a:	dc20      	bgt.n	8003dde <UART_SetConfig+0x1ea>
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d015      	beq.n	8003dcc <UART_SetConfig+0x1d8>
 8003da0:	dc1d      	bgt.n	8003dde <UART_SetConfig+0x1ea>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <UART_SetConfig+0x1b8>
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d005      	beq.n	8003db6 <UART_SetConfig+0x1c2>
 8003daa:	e018      	b.n	8003dde <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7ff f920 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8003db0:	0003      	movs	r3, r0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003db4:	e01c      	b.n	8003df0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db6:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <UART_SetConfig+0x318>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d002      	beq.n	8003dc6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <UART_SetConfig+0x31c>)
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dc4:	e014      	b.n	8003df0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003dc6:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <UART_SetConfig+0x320>)
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dca:	e011      	b.n	8003df0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dcc:	f7ff f860 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd4:	e00c      	b.n	8003df0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ddc:	e008      	b.n	8003df0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003de2:	231a      	movs	r3, #26
 8003de4:	2218      	movs	r2, #24
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	19db      	adds	r3, r3, r7
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
        break;
 8003dee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d100      	bne.n	8003df8 <UART_SetConfig+0x204>
 8003df6:	e12f      	b.n	8004058 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d305      	bcc.n	8003e14 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d906      	bls.n	8003e22 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003e14:	231a      	movs	r3, #26
 8003e16:	2218      	movs	r2, #24
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e11a      	b.n	8004058 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	6939      	ldr	r1, [r7, #16]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	000b      	movs	r3, r1
 8003e30:	0e1b      	lsrs	r3, r3, #24
 8003e32:	0010      	movs	r0, r2
 8003e34:	0205      	lsls	r5, r0, #8
 8003e36:	431d      	orrs	r5, r3
 8003e38:	000b      	movs	r3, r1
 8003e3a:	021c      	lsls	r4, r3, #8
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68b8      	ldr	r0, [r7, #8]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	1900      	adds	r0, r0, r4
 8003e4e:	4169      	adcs	r1, r5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f7fc f9e9 	bl	8000234 <__aeabi_uldivmod>
 8003e62:	0002      	movs	r2, r0
 8003e64:	000b      	movs	r3, r1
 8003e66:	0013      	movs	r3, r2
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6c:	23c0      	movs	r3, #192	; 0xc0
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d309      	bcc.n	8003e88 <UART_SetConfig+0x294>
 8003e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	035b      	lsls	r3, r3, #13
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d204      	bcs.n	8003e88 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e0e7      	b.n	8004058 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003e88:	231a      	movs	r3, #26
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e0e0      	b.n	8004058 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d000      	beq.n	8003ea4 <UART_SetConfig+0x2b0>
 8003ea2:	e082      	b.n	8003faa <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2218      	movs	r2, #24
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d834      	bhi.n	8003f1c <UART_SetConfig+0x328>
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <UART_SetConfig+0x324>)
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff f898 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ec4:	e033      	b.n	8003f2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec6:	f7ff f8a9 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ece:	e02e      	b.n	8003f2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <UART_SetConfig+0x318>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d002      	beq.n	8003ee0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <UART_SetConfig+0x31c>)
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ede:	e026      	b.n	8003f2e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <UART_SetConfig+0x320>)
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ee4:	e023      	b.n	8003f2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe ffd3 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8003eea:	0003      	movs	r3, r0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eee:	e01e      	b.n	8003f2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ef6:	e01a      	b.n	8003f2e <UART_SetConfig+0x33a>
 8003ef8:	efff69f3 	.word	0xefff69f3
 8003efc:	ffffcfff 	.word	0xffffcfff
 8003f00:	40004800 	.word	0x40004800
 8003f04:	fffff4ff 	.word	0xfffff4ff
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	003d0900 	.word	0x003d0900
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	08005630 	.word	0x08005630
      default:
        pclk = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f20:	231a      	movs	r3, #26
 8003f22:	2218      	movs	r2, #24
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
        break;
 8003f2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d100      	bne.n	8003f36 <UART_SetConfig+0x342>
 8003f34:	e090      	b.n	8004058 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	005a      	lsls	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	18d2      	adds	r2, r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0019      	movs	r1, r3
 8003f48:	0010      	movs	r0, r2
 8003f4a:	f7fc f8e7 	bl	800011c <__udivsi3>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d921      	bls.n	8003f9c <UART_SetConfig+0x3a8>
 8003f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d21c      	bcs.n	8003f9c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	200e      	movs	r0, #14
 8003f68:	2418      	movs	r4, #24
 8003f6a:	1903      	adds	r3, r0, r4
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	210f      	movs	r1, #15
 8003f70:	438a      	bics	r2, r1
 8003f72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	1903      	adds	r3, r0, r4
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	1902      	adds	r2, r0, r4
 8003f86:	19d2      	adds	r2, r2, r7
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1902      	adds	r2, r0, r4
 8003f94:	19d2      	adds	r2, r2, r7
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e05d      	b.n	8004058 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	231a      	movs	r3, #26
 8003f9e:	2218      	movs	r2, #24
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e056      	b.n	8004058 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003faa:	231b      	movs	r3, #27
 8003fac:	2218      	movs	r2, #24
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	19db      	adds	r3, r3, r7
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d822      	bhi.n	8003ffe <UART_SetConfig+0x40a>
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <UART_SetConfig+0x484>)
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f7ff f815 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fca:	e021      	b.n	8004010 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7ff f826 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fd4:	e01c      	b.n	8004010 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <UART_SetConfig+0x488>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2210      	movs	r2, #16
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d002      	beq.n	8003fe6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <UART_SetConfig+0x48c>)
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003fe4:	e014      	b.n	8004010 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <UART_SetConfig+0x490>)
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fea:	e011      	b.n	8004010 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fec:	f7fe ff50 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ff4:	e00c      	b.n	8004010 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ffc:	e008      	b.n	8004010 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004002:	231a      	movs	r3, #26
 8004004:	2218      	movs	r2, #24
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
        break;
 800400e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d020      	beq.n	8004058 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	085a      	lsrs	r2, r3, #1
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	18d2      	adds	r2, r2, r3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0019      	movs	r1, r3
 8004026:	0010      	movs	r0, r2
 8004028:	f7fc f878 	bl	800011c <__udivsi3>
 800402c:	0003      	movs	r3, r0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d90a      	bls.n	800404c <UART_SetConfig+0x458>
 8004036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	025b      	lsls	r3, r3, #9
 800403c:	429a      	cmp	r2, r3
 800403e:	d205      	bcs.n	800404c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	b29a      	uxth	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e005      	b.n	8004058 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800404c:	231a      	movs	r3, #26
 800404e:	2218      	movs	r2, #24
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2200      	movs	r2, #0
 800405c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2200      	movs	r2, #0
 8004062:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004064:	231a      	movs	r3, #26
 8004066:	2218      	movs	r2, #24
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	781b      	ldrb	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b00e      	add	sp, #56	; 0x38
 8004074:	bdb0      	pop	{r4, r5, r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	08005654 	.word	0x08005654
 800407c:	40021000 	.word	0x40021000
 8004080:	003d0900 	.word	0x003d0900
 8004084:	00f42400 	.word	0x00f42400

08004088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d00b      	beq.n	80040b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <UART_AdvFeatureConfig+0x144>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	0019      	movs	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	d00b      	beq.n	80040d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <UART_AdvFeatureConfig+0x148>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2204      	movs	r2, #4
 80040da:	4013      	ands	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <UART_AdvFeatureConfig+0x14c>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	0019      	movs	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2208      	movs	r2, #8
 80040fc:	4013      	ands	r3, r2
 80040fe:	d00b      	beq.n	8004118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a34      	ldr	r2, [pc, #208]	; (80041d8 <UART_AdvFeatureConfig+0x150>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	2210      	movs	r2, #16
 800411e:	4013      	ands	r3, r2
 8004120:	d00b      	beq.n	800413a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <UART_AdvFeatureConfig+0x154>)
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2220      	movs	r2, #32
 8004140:	4013      	ands	r3, r2
 8004142:	d00b      	beq.n	800415c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <UART_AdvFeatureConfig+0x158>)
 800414c:	4013      	ands	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	4013      	ands	r3, r2
 8004164:	d01d      	beq.n	80041a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <UART_AdvFeatureConfig+0x15c>)
 800416e:	4013      	ands	r3, r2
 8004170:	0019      	movs	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	035b      	lsls	r3, r3, #13
 8004186:	429a      	cmp	r2, r3
 8004188:	d10b      	bne.n	80041a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <UART_AdvFeatureConfig+0x160>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	4013      	ands	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <UART_AdvFeatureConfig+0x164>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	fffdffff 	.word	0xfffdffff
 80041d0:	fffeffff 	.word	0xfffeffff
 80041d4:	fffbffff 	.word	0xfffbffff
 80041d8:	ffff7fff 	.word	0xffff7fff
 80041dc:	ffffefff 	.word	0xffffefff
 80041e0:	ffffdfff 	.word	0xffffdfff
 80041e4:	ffefffff 	.word	0xffefffff
 80041e8:	ff9fffff 	.word	0xff9fffff
 80041ec:	fff7ffff 	.word	0xfff7ffff

080041f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b092      	sub	sp, #72	; 0x48
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2284      	movs	r2, #132	; 0x84
 80041fc:	2100      	movs	r1, #0
 80041fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004200:	f7fd f85e 	bl	80012c0 <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	4013      	ands	r3, r2
 8004212:	2b08      	cmp	r3, #8
 8004214:	d12c      	bne.n	8004270 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0391      	lsls	r1, r2, #14
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4a46      	ldr	r2, [pc, #280]	; (8004338 <UART_CheckIdleState+0x148>)
 8004220:	9200      	str	r2, [sp, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	f000 f88c 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d021      	beq.n	8004270 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422c:	f3ef 8310 	mrs	r3, PRIMASK
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
 8004236:	2301      	movs	r3, #1
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	438a      	bics	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2278      	movs	r2, #120	; 0x78
 8004268:	2100      	movs	r1, #0
 800426a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e05f      	b.n	8004330 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	2b04      	cmp	r3, #4
 800427c:	d146      	bne.n	800430c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	03d1      	lsls	r1, r2, #15
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <UART_CheckIdleState+0x148>)
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	f000 f858 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d03b      	beq.n	800430c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004294:	f3ef 8310 	mrs	r3, PRIMASK
 8004298:	60fb      	str	r3, [r7, #12]
  return(result);
 800429a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
 800429e:	2301      	movs	r3, #1
 80042a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4921      	ldr	r1, [pc, #132]	; (800433c <UART_CheckIdleState+0x14c>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80042cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
 80042d0:	2301      	movs	r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f383 8810 	msr	PRIMASK, r3
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	438a      	bics	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	2120      	movs	r1, #32
 80042fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2278      	movs	r2, #120	; 0x78
 8004304:	2100      	movs	r1, #0
 8004306:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e011      	b.n	8004330 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	2120      	movs	r1, #32
 8004318:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2278      	movs	r2, #120	; 0x78
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b010      	add	sp, #64	; 0x40
 8004336:	bd80      	pop	{r7, pc}
 8004338:	01ffffff 	.word	0x01ffffff
 800433c:	fffffedf 	.word	0xfffffedf

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e04b      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	3301      	adds	r3, #1
 8004356:	d048      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fc ffb2 	bl	80012c0 <HAL_GetTick>
 800435c:	0002      	movs	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04b      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2204      	movs	r2, #4
 800437a:	4013      	ands	r3, r2
 800437c:	d035      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2208      	movs	r2, #8
 8004386:	4013      	ands	r3, r2
 8004388:	2b08      	cmp	r3, #8
 800438a:	d111      	bne.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2208      	movs	r2, #8
 8004392:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f83c 	bl	8004414 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2284      	movs	r2, #132	; 0x84
 80043a0:	2108      	movs	r1, #8
 80043a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2278      	movs	r2, #120	; 0x78
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e02c      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	401a      	ands	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d112      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 f81f 	bl	8004414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2284      	movs	r2, #132	; 0x84
 80043da:	2120      	movs	r1, #32
 80043dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2278      	movs	r2, #120	; 0x78
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	425a      	negs	r2, r3
 80043fa:	4153      	adcs	r3, r2
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	001a      	movs	r2, r3
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d0a4      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441c:	f3ef 8310 	mrs	r3, PRIMASK
 8004420:	617b      	str	r3, [r7, #20]
  return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4926      	ldr	r1, [pc, #152]	; (80044d8 <UART_EndRxTransfer+0xc4>)
 800443e:	400a      	ands	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444e:	f3ef 8310 	mrs	r3, PRIMASK
 8004452:	623b      	str	r3, [r7, #32]
  return(result);
 8004454:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
 8004458:	2301      	movs	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	f383 8810 	msr	PRIMASK, r3
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	438a      	bics	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	f383 8810 	msr	PRIMASK, r3
}
 800447e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	2b01      	cmp	r3, #1
 8004486:	d118      	bne.n	80044ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	60bb      	str	r3, [r7, #8]
  return(result);
 800448e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	2301      	movs	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2110      	movs	r1, #16
 80044aa:	438a      	bics	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	2120      	movs	r1, #32
 80044c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b00e      	add	sp, #56	; 0x38
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	fffffedf 	.word	0xfffffedf

080044dc <std>:
 80044dc:	2300      	movs	r3, #0
 80044de:	b510      	push	{r4, lr}
 80044e0:	0004      	movs	r4, r0
 80044e2:	6003      	str	r3, [r0, #0]
 80044e4:	6043      	str	r3, [r0, #4]
 80044e6:	6083      	str	r3, [r0, #8]
 80044e8:	8181      	strh	r1, [r0, #12]
 80044ea:	6643      	str	r3, [r0, #100]	; 0x64
 80044ec:	0019      	movs	r1, r3
 80044ee:	81c2      	strh	r2, [r0, #14]
 80044f0:	6103      	str	r3, [r0, #16]
 80044f2:	6143      	str	r3, [r0, #20]
 80044f4:	6183      	str	r3, [r0, #24]
 80044f6:	2208      	movs	r2, #8
 80044f8:	305c      	adds	r0, #92	; 0x5c
 80044fa:	f000 f8b1 	bl	8004660 <memset>
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std+0x38>)
 8004500:	6224      	str	r4, [r4, #32]
 8004502:	6263      	str	r3, [r4, #36]	; 0x24
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <std+0x3c>)
 8004506:	62a3      	str	r3, [r4, #40]	; 0x28
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <std+0x40>)
 800450a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <std+0x44>)
 800450e:	6323      	str	r3, [r4, #48]	; 0x30
 8004510:	bd10      	pop	{r4, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	08004f25 	.word	0x08004f25
 8004518:	08004f4d 	.word	0x08004f4d
 800451c:	08004f85 	.word	0x08004f85
 8004520:	08004fb1 	.word	0x08004fb1

08004524 <stdio_exit_handler>:
 8004524:	b510      	push	{r4, lr}
 8004526:	4a03      	ldr	r2, [pc, #12]	; (8004534 <stdio_exit_handler+0x10>)
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <stdio_exit_handler+0x14>)
 800452a:	4804      	ldr	r0, [pc, #16]	; (800453c <stdio_exit_handler+0x18>)
 800452c:	f000 f86c 	bl	8004608 <_fwalk_sglue>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	2000005c 	.word	0x2000005c
 8004538:	08004ead 	.word	0x08004ead
 800453c:	20000068 	.word	0x20000068

08004540 <cleanup_stdio>:
 8004540:	6841      	ldr	r1, [r0, #4]
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <cleanup_stdio+0x30>)
 8004544:	b510      	push	{r4, lr}
 8004546:	0004      	movs	r4, r0
 8004548:	4299      	cmp	r1, r3
 800454a:	d001      	beq.n	8004550 <cleanup_stdio+0x10>
 800454c:	f000 fcae 	bl	8004eac <_fflush_r>
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <cleanup_stdio+0x34>)
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <cleanup_stdio+0x1e>
 8004558:	0020      	movs	r0, r4
 800455a:	f000 fca7 	bl	8004eac <_fflush_r>
 800455e:	68e1      	ldr	r1, [r4, #12]
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <cleanup_stdio+0x38>)
 8004562:	4299      	cmp	r1, r3
 8004564:	d002      	beq.n	800456c <cleanup_stdio+0x2c>
 8004566:	0020      	movs	r0, r4
 8004568:	f000 fca0 	bl	8004eac <_fflush_r>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	2000023c 	.word	0x2000023c
 8004574:	200002a4 	.word	0x200002a4
 8004578:	2000030c 	.word	0x2000030c

0800457c <global_stdio_init.part.0>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <global_stdio_init.part.0+0x28>)
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <global_stdio_init.part.0+0x2c>)
 8004582:	2104      	movs	r1, #4
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4809      	ldr	r0, [pc, #36]	; (80045ac <global_stdio_init.part.0+0x30>)
 8004588:	2200      	movs	r2, #0
 800458a:	f7ff ffa7 	bl	80044dc <std>
 800458e:	2201      	movs	r2, #1
 8004590:	2109      	movs	r1, #9
 8004592:	4807      	ldr	r0, [pc, #28]	; (80045b0 <global_stdio_init.part.0+0x34>)
 8004594:	f7ff ffa2 	bl	80044dc <std>
 8004598:	2202      	movs	r2, #2
 800459a:	2112      	movs	r1, #18
 800459c:	4805      	ldr	r0, [pc, #20]	; (80045b4 <global_stdio_init.part.0+0x38>)
 800459e:	f7ff ff9d 	bl	80044dc <std>
 80045a2:	bd10      	pop	{r4, pc}
 80045a4:	20000374 	.word	0x20000374
 80045a8:	08004525 	.word	0x08004525
 80045ac:	2000023c 	.word	0x2000023c
 80045b0:	200002a4 	.word	0x200002a4
 80045b4:	2000030c 	.word	0x2000030c

080045b8 <__sfp_lock_acquire>:
 80045b8:	b510      	push	{r4, lr}
 80045ba:	4802      	ldr	r0, [pc, #8]	; (80045c4 <__sfp_lock_acquire+0xc>)
 80045bc:	f000 f882 	bl	80046c4 <__retarget_lock_acquire_recursive>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	20000379 	.word	0x20000379

080045c8 <__sfp_lock_release>:
 80045c8:	b510      	push	{r4, lr}
 80045ca:	4802      	ldr	r0, [pc, #8]	; (80045d4 <__sfp_lock_release+0xc>)
 80045cc:	f000 f87b 	bl	80046c6 <__retarget_lock_release_recursive>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	20000379 	.word	0x20000379

080045d8 <__sinit>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	0004      	movs	r4, r0
 80045dc:	f7ff ffec 	bl	80045b8 <__sfp_lock_acquire>
 80045e0:	6a23      	ldr	r3, [r4, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <__sinit+0x14>
 80045e6:	f7ff ffef 	bl	80045c8 <__sfp_lock_release>
 80045ea:	bd10      	pop	{r4, pc}
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <__sinit+0x28>)
 80045ee:	6223      	str	r3, [r4, #32]
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <__sinit+0x2c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f6      	bne.n	80045e6 <__sinit+0xe>
 80045f8:	f7ff ffc0 	bl	800457c <global_stdio_init.part.0>
 80045fc:	e7f3      	b.n	80045e6 <__sinit+0xe>
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	08004541 	.word	0x08004541
 8004604:	20000374 	.word	0x20000374

08004608 <_fwalk_sglue>:
 8004608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800460a:	0014      	movs	r4, r2
 800460c:	2600      	movs	r6, #0
 800460e:	9000      	str	r0, [sp, #0]
 8004610:	9101      	str	r1, [sp, #4]
 8004612:	68a5      	ldr	r5, [r4, #8]
 8004614:	6867      	ldr	r7, [r4, #4]
 8004616:	3f01      	subs	r7, #1
 8004618:	d504      	bpl.n	8004624 <_fwalk_sglue+0x1c>
 800461a:	6824      	ldr	r4, [r4, #0]
 800461c:	2c00      	cmp	r4, #0
 800461e:	d1f8      	bne.n	8004612 <_fwalk_sglue+0xa>
 8004620:	0030      	movs	r0, r6
 8004622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004624:	89ab      	ldrh	r3, [r5, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d908      	bls.n	800463c <_fwalk_sglue+0x34>
 800462a:	220e      	movs	r2, #14
 800462c:	5eab      	ldrsh	r3, [r5, r2]
 800462e:	3301      	adds	r3, #1
 8004630:	d004      	beq.n	800463c <_fwalk_sglue+0x34>
 8004632:	0029      	movs	r1, r5
 8004634:	9800      	ldr	r0, [sp, #0]
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	4798      	blx	r3
 800463a:	4306      	orrs	r6, r0
 800463c:	3568      	adds	r5, #104	; 0x68
 800463e:	e7ea      	b.n	8004616 <_fwalk_sglue+0xe>

08004640 <iprintf>:
 8004640:	b40f      	push	{r0, r1, r2, r3}
 8004642:	b507      	push	{r0, r1, r2, lr}
 8004644:	4905      	ldr	r1, [pc, #20]	; (800465c <iprintf+0x1c>)
 8004646:	ab04      	add	r3, sp, #16
 8004648:	6808      	ldr	r0, [r1, #0]
 800464a:	cb04      	ldmia	r3!, {r2}
 800464c:	6881      	ldr	r1, [r0, #8]
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	f000 f862 	bl	8004718 <_vfiprintf_r>
 8004654:	b003      	add	sp, #12
 8004656:	bc08      	pop	{r3}
 8004658:	b004      	add	sp, #16
 800465a:	4718      	bx	r3
 800465c:	200000b4 	.word	0x200000b4

08004660 <memset>:
 8004660:	0003      	movs	r3, r0
 8004662:	1882      	adds	r2, r0, r2
 8004664:	4293      	cmp	r3, r2
 8004666:	d100      	bne.n	800466a <memset+0xa>
 8004668:	4770      	bx	lr
 800466a:	7019      	strb	r1, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	e7f9      	b.n	8004664 <memset+0x4>

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	200000b4 	.word	0x200000b4

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	2600      	movs	r6, #0
 8004680:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x38>)
 8004682:	4d0d      	ldr	r5, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004684:	1b64      	subs	r4, r4, r5
 8004686:	10a4      	asrs	r4, r4, #2
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	2600      	movs	r6, #0
 800468e:	f000 fe7b 	bl	8005388 <_init>
 8004692:	4c0a      	ldr	r4, [pc, #40]	; (80046bc <__libc_init_array+0x40>)
 8004694:	4d0a      	ldr	r5, [pc, #40]	; (80046c0 <__libc_init_array+0x44>)
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	00b3      	lsls	r3, r6, #2
 80046a2:	58eb      	ldr	r3, [r5, r3]
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	00b3      	lsls	r3, r6, #2
 80046ac:	58eb      	ldr	r3, [r5, r3]
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	080056b4 	.word	0x080056b4
 80046b8:	080056b4 	.word	0x080056b4
 80046bc:	080056b8 	.word	0x080056b8
 80046c0:	080056b4 	.word	0x080056b4

080046c4 <__retarget_lock_acquire_recursive>:
 80046c4:	4770      	bx	lr

080046c6 <__retarget_lock_release_recursive>:
 80046c6:	4770      	bx	lr

080046c8 <__sfputc_r>:
 80046c8:	6893      	ldr	r3, [r2, #8]
 80046ca:	b510      	push	{r4, lr}
 80046cc:	3b01      	subs	r3, #1
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da04      	bge.n	80046de <__sfputc_r+0x16>
 80046d4:	6994      	ldr	r4, [r2, #24]
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	db07      	blt.n	80046ea <__sfputc_r+0x22>
 80046da:	290a      	cmp	r1, #10
 80046dc:	d005      	beq.n	80046ea <__sfputc_r+0x22>
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	1c58      	adds	r0, r3, #1
 80046e2:	6010      	str	r0, [r2, #0]
 80046e4:	7019      	strb	r1, [r3, #0]
 80046e6:	0008      	movs	r0, r1
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	f000 fc67 	bl	8004fbc <__swbuf_r>
 80046ee:	0001      	movs	r1, r0
 80046f0:	e7f9      	b.n	80046e6 <__sfputc_r+0x1e>

080046f2 <__sfputs_r>:
 80046f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f4:	0006      	movs	r6, r0
 80046f6:	000f      	movs	r7, r1
 80046f8:	0014      	movs	r4, r2
 80046fa:	18d5      	adds	r5, r2, r3
 80046fc:	42ac      	cmp	r4, r5
 80046fe:	d101      	bne.n	8004704 <__sfputs_r+0x12>
 8004700:	2000      	movs	r0, #0
 8004702:	e007      	b.n	8004714 <__sfputs_r+0x22>
 8004704:	7821      	ldrb	r1, [r4, #0]
 8004706:	003a      	movs	r2, r7
 8004708:	0030      	movs	r0, r6
 800470a:	f7ff ffdd 	bl	80046c8 <__sfputc_r>
 800470e:	3401      	adds	r4, #1
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d1f3      	bne.n	80046fc <__sfputs_r+0xa>
 8004714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004718 <_vfiprintf_r>:
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b0a1      	sub	sp, #132	; 0x84
 800471c:	000f      	movs	r7, r1
 800471e:	0015      	movs	r5, r2
 8004720:	001e      	movs	r6, r3
 8004722:	9003      	str	r0, [sp, #12]
 8004724:	2800      	cmp	r0, #0
 8004726:	d004      	beq.n	8004732 <_vfiprintf_r+0x1a>
 8004728:	6a03      	ldr	r3, [r0, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <_vfiprintf_r+0x1a>
 800472e:	f7ff ff53 	bl	80045d8 <__sinit>
 8004732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004734:	07db      	lsls	r3, r3, #31
 8004736:	d405      	bmi.n	8004744 <_vfiprintf_r+0x2c>
 8004738:	89bb      	ldrh	r3, [r7, #12]
 800473a:	059b      	lsls	r3, r3, #22
 800473c:	d402      	bmi.n	8004744 <_vfiprintf_r+0x2c>
 800473e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004740:	f7ff ffc0 	bl	80046c4 <__retarget_lock_acquire_recursive>
 8004744:	89bb      	ldrh	r3, [r7, #12]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	d502      	bpl.n	8004750 <_vfiprintf_r+0x38>
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d113      	bne.n	8004778 <_vfiprintf_r+0x60>
 8004750:	0039      	movs	r1, r7
 8004752:	9803      	ldr	r0, [sp, #12]
 8004754:	f000 fc74 	bl	8005040 <__swsetup_r>
 8004758:	2800      	cmp	r0, #0
 800475a:	d00d      	beq.n	8004778 <_vfiprintf_r+0x60>
 800475c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800475e:	07db      	lsls	r3, r3, #31
 8004760:	d503      	bpl.n	800476a <_vfiprintf_r+0x52>
 8004762:	2001      	movs	r0, #1
 8004764:	4240      	negs	r0, r0
 8004766:	b021      	add	sp, #132	; 0x84
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476a:	89bb      	ldrh	r3, [r7, #12]
 800476c:	059b      	lsls	r3, r3, #22
 800476e:	d4f8      	bmi.n	8004762 <_vfiprintf_r+0x4a>
 8004770:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004772:	f7ff ffa8 	bl	80046c6 <__retarget_lock_release_recursive>
 8004776:	e7f4      	b.n	8004762 <_vfiprintf_r+0x4a>
 8004778:	2300      	movs	r3, #0
 800477a:	ac08      	add	r4, sp, #32
 800477c:	6163      	str	r3, [r4, #20]
 800477e:	3320      	adds	r3, #32
 8004780:	7663      	strb	r3, [r4, #25]
 8004782:	3310      	adds	r3, #16
 8004784:	76a3      	strb	r3, [r4, #26]
 8004786:	9607      	str	r6, [sp, #28]
 8004788:	002e      	movs	r6, r5
 800478a:	7833      	ldrb	r3, [r6, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <_vfiprintf_r+0x7c>
 8004790:	2b25      	cmp	r3, #37	; 0x25
 8004792:	d148      	bne.n	8004826 <_vfiprintf_r+0x10e>
 8004794:	1b73      	subs	r3, r6, r5
 8004796:	9305      	str	r3, [sp, #20]
 8004798:	42ae      	cmp	r6, r5
 800479a:	d00b      	beq.n	80047b4 <_vfiprintf_r+0x9c>
 800479c:	002a      	movs	r2, r5
 800479e:	0039      	movs	r1, r7
 80047a0:	9803      	ldr	r0, [sp, #12]
 80047a2:	f7ff ffa6 	bl	80046f2 <__sfputs_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d100      	bne.n	80047ac <_vfiprintf_r+0x94>
 80047aa:	e0af      	b.n	800490c <_vfiprintf_r+0x1f4>
 80047ac:	6963      	ldr	r3, [r4, #20]
 80047ae:	9a05      	ldr	r2, [sp, #20]
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	6163      	str	r3, [r4, #20]
 80047b4:	7833      	ldrb	r3, [r6, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d100      	bne.n	80047bc <_vfiprintf_r+0xa4>
 80047ba:	e0a7      	b.n	800490c <_vfiprintf_r+0x1f4>
 80047bc:	2201      	movs	r2, #1
 80047be:	2300      	movs	r3, #0
 80047c0:	4252      	negs	r2, r2
 80047c2:	6062      	str	r2, [r4, #4]
 80047c4:	a904      	add	r1, sp, #16
 80047c6:	3254      	adds	r2, #84	; 0x54
 80047c8:	1852      	adds	r2, r2, r1
 80047ca:	1c75      	adds	r5, r6, #1
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	60e3      	str	r3, [r4, #12]
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	7013      	strb	r3, [r2, #0]
 80047d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80047d6:	4b59      	ldr	r3, [pc, #356]	; (800493c <_vfiprintf_r+0x224>)
 80047d8:	2205      	movs	r2, #5
 80047da:	0018      	movs	r0, r3
 80047dc:	7829      	ldrb	r1, [r5, #0]
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	f000 fd7c 	bl	80052dc <memchr>
 80047e4:	1c6e      	adds	r6, r5, #1
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d11f      	bne.n	800482a <_vfiprintf_r+0x112>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	06d3      	lsls	r3, r2, #27
 80047ee:	d504      	bpl.n	80047fa <_vfiprintf_r+0xe2>
 80047f0:	2353      	movs	r3, #83	; 0x53
 80047f2:	a904      	add	r1, sp, #16
 80047f4:	185b      	adds	r3, r3, r1
 80047f6:	2120      	movs	r1, #32
 80047f8:	7019      	strb	r1, [r3, #0]
 80047fa:	0713      	lsls	r3, r2, #28
 80047fc:	d504      	bpl.n	8004808 <_vfiprintf_r+0xf0>
 80047fe:	2353      	movs	r3, #83	; 0x53
 8004800:	a904      	add	r1, sp, #16
 8004802:	185b      	adds	r3, r3, r1
 8004804:	212b      	movs	r1, #43	; 0x2b
 8004806:	7019      	strb	r1, [r3, #0]
 8004808:	782b      	ldrb	r3, [r5, #0]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d016      	beq.n	800483c <_vfiprintf_r+0x124>
 800480e:	002e      	movs	r6, r5
 8004810:	2100      	movs	r1, #0
 8004812:	200a      	movs	r0, #10
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	7832      	ldrb	r2, [r6, #0]
 8004818:	1c75      	adds	r5, r6, #1
 800481a:	3a30      	subs	r2, #48	; 0x30
 800481c:	2a09      	cmp	r2, #9
 800481e:	d94e      	bls.n	80048be <_vfiprintf_r+0x1a6>
 8004820:	2900      	cmp	r1, #0
 8004822:	d111      	bne.n	8004848 <_vfiprintf_r+0x130>
 8004824:	e017      	b.n	8004856 <_vfiprintf_r+0x13e>
 8004826:	3601      	adds	r6, #1
 8004828:	e7af      	b.n	800478a <_vfiprintf_r+0x72>
 800482a:	9b05      	ldr	r3, [sp, #20]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1ac0      	subs	r0, r0, r3
 8004830:	2301      	movs	r3, #1
 8004832:	4083      	lsls	r3, r0
 8004834:	4313      	orrs	r3, r2
 8004836:	0035      	movs	r5, r6
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	e7cc      	b.n	80047d6 <_vfiprintf_r+0xbe>
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	1d19      	adds	r1, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	9107      	str	r1, [sp, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db01      	blt.n	800484c <_vfiprintf_r+0x134>
 8004848:	930b      	str	r3, [sp, #44]	; 0x2c
 800484a:	e004      	b.n	8004856 <_vfiprintf_r+0x13e>
 800484c:	425b      	negs	r3, r3
 800484e:	60e3      	str	r3, [r4, #12]
 8004850:	2302      	movs	r3, #2
 8004852:	4313      	orrs	r3, r2
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	7833      	ldrb	r3, [r6, #0]
 8004858:	2b2e      	cmp	r3, #46	; 0x2e
 800485a:	d10a      	bne.n	8004872 <_vfiprintf_r+0x15a>
 800485c:	7873      	ldrb	r3, [r6, #1]
 800485e:	2b2a      	cmp	r3, #42	; 0x2a
 8004860:	d135      	bne.n	80048ce <_vfiprintf_r+0x1b6>
 8004862:	9b07      	ldr	r3, [sp, #28]
 8004864:	3602      	adds	r6, #2
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	9207      	str	r2, [sp, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db2b      	blt.n	80048c8 <_vfiprintf_r+0x1b0>
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	4d33      	ldr	r5, [pc, #204]	; (8004940 <_vfiprintf_r+0x228>)
 8004874:	2203      	movs	r2, #3
 8004876:	0028      	movs	r0, r5
 8004878:	7831      	ldrb	r1, [r6, #0]
 800487a:	f000 fd2f 	bl	80052dc <memchr>
 800487e:	2800      	cmp	r0, #0
 8004880:	d006      	beq.n	8004890 <_vfiprintf_r+0x178>
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	1b40      	subs	r0, r0, r5
 8004886:	4083      	lsls	r3, r0
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	3601      	adds	r6, #1
 800488c:	4313      	orrs	r3, r2
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	7831      	ldrb	r1, [r6, #0]
 8004892:	2206      	movs	r2, #6
 8004894:	482b      	ldr	r0, [pc, #172]	; (8004944 <_vfiprintf_r+0x22c>)
 8004896:	1c75      	adds	r5, r6, #1
 8004898:	7621      	strb	r1, [r4, #24]
 800489a:	f000 fd1f 	bl	80052dc <memchr>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d043      	beq.n	800492a <_vfiprintf_r+0x212>
 80048a2:	4b29      	ldr	r3, [pc, #164]	; (8004948 <_vfiprintf_r+0x230>)
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d125      	bne.n	80048f4 <_vfiprintf_r+0x1dc>
 80048a8:	2207      	movs	r2, #7
 80048aa:	9b07      	ldr	r3, [sp, #28]
 80048ac:	3307      	adds	r3, #7
 80048ae:	4393      	bics	r3, r2
 80048b0:	3308      	adds	r3, #8
 80048b2:	9307      	str	r3, [sp, #28]
 80048b4:	6963      	ldr	r3, [r4, #20]
 80048b6:	9a04      	ldr	r2, [sp, #16]
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	6163      	str	r3, [r4, #20]
 80048bc:	e764      	b.n	8004788 <_vfiprintf_r+0x70>
 80048be:	4343      	muls	r3, r0
 80048c0:	002e      	movs	r6, r5
 80048c2:	2101      	movs	r1, #1
 80048c4:	189b      	adds	r3, r3, r2
 80048c6:	e7a6      	b.n	8004816 <_vfiprintf_r+0xfe>
 80048c8:	2301      	movs	r3, #1
 80048ca:	425b      	negs	r3, r3
 80048cc:	e7d0      	b.n	8004870 <_vfiprintf_r+0x158>
 80048ce:	2300      	movs	r3, #0
 80048d0:	200a      	movs	r0, #10
 80048d2:	001a      	movs	r2, r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	7831      	ldrb	r1, [r6, #0]
 80048da:	1c75      	adds	r5, r6, #1
 80048dc:	3930      	subs	r1, #48	; 0x30
 80048de:	2909      	cmp	r1, #9
 80048e0:	d903      	bls.n	80048ea <_vfiprintf_r+0x1d2>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0c5      	beq.n	8004872 <_vfiprintf_r+0x15a>
 80048e6:	9209      	str	r2, [sp, #36]	; 0x24
 80048e8:	e7c3      	b.n	8004872 <_vfiprintf_r+0x15a>
 80048ea:	4342      	muls	r2, r0
 80048ec:	002e      	movs	r6, r5
 80048ee:	2301      	movs	r3, #1
 80048f0:	1852      	adds	r2, r2, r1
 80048f2:	e7f1      	b.n	80048d8 <_vfiprintf_r+0x1c0>
 80048f4:	aa07      	add	r2, sp, #28
 80048f6:	9200      	str	r2, [sp, #0]
 80048f8:	0021      	movs	r1, r4
 80048fa:	003a      	movs	r2, r7
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <_vfiprintf_r+0x234>)
 80048fe:	9803      	ldr	r0, [sp, #12]
 8004900:	e000      	b.n	8004904 <_vfiprintf_r+0x1ec>
 8004902:	bf00      	nop
 8004904:	9004      	str	r0, [sp, #16]
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	3301      	adds	r3, #1
 800490a:	d1d3      	bne.n	80048b4 <_vfiprintf_r+0x19c>
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	07db      	lsls	r3, r3, #31
 8004910:	d405      	bmi.n	800491e <_vfiprintf_r+0x206>
 8004912:	89bb      	ldrh	r3, [r7, #12]
 8004914:	059b      	lsls	r3, r3, #22
 8004916:	d402      	bmi.n	800491e <_vfiprintf_r+0x206>
 8004918:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800491a:	f7ff fed4 	bl	80046c6 <__retarget_lock_release_recursive>
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	d500      	bpl.n	8004926 <_vfiprintf_r+0x20e>
 8004924:	e71d      	b.n	8004762 <_vfiprintf_r+0x4a>
 8004926:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004928:	e71d      	b.n	8004766 <_vfiprintf_r+0x4e>
 800492a:	aa07      	add	r2, sp, #28
 800492c:	9200      	str	r2, [sp, #0]
 800492e:	0021      	movs	r1, r4
 8004930:	003a      	movs	r2, r7
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <_vfiprintf_r+0x234>)
 8004934:	9803      	ldr	r0, [sp, #12]
 8004936:	f000 f91f 	bl	8004b78 <_printf_i>
 800493a:	e7e3      	b.n	8004904 <_vfiprintf_r+0x1ec>
 800493c:	08005678 	.word	0x08005678
 8004940:	0800567e 	.word	0x0800567e
 8004944:	08005682 	.word	0x08005682
 8004948:	00000000 	.word	0x00000000
 800494c:	080046f3 	.word	0x080046f3

08004950 <sbrk_aligned>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4e0f      	ldr	r6, [pc, #60]	; (8004990 <sbrk_aligned+0x40>)
 8004954:	000d      	movs	r5, r1
 8004956:	6831      	ldr	r1, [r6, #0]
 8004958:	0004      	movs	r4, r0
 800495a:	2900      	cmp	r1, #0
 800495c:	d102      	bne.n	8004964 <sbrk_aligned+0x14>
 800495e:	f000 fc97 	bl	8005290 <_sbrk_r>
 8004962:	6030      	str	r0, [r6, #0]
 8004964:	0029      	movs	r1, r5
 8004966:	0020      	movs	r0, r4
 8004968:	f000 fc92 	bl	8005290 <_sbrk_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d00a      	beq.n	8004986 <sbrk_aligned+0x36>
 8004970:	2303      	movs	r3, #3
 8004972:	1cc5      	adds	r5, r0, #3
 8004974:	439d      	bics	r5, r3
 8004976:	42a8      	cmp	r0, r5
 8004978:	d007      	beq.n	800498a <sbrk_aligned+0x3a>
 800497a:	1a29      	subs	r1, r5, r0
 800497c:	0020      	movs	r0, r4
 800497e:	f000 fc87 	bl	8005290 <_sbrk_r>
 8004982:	3001      	adds	r0, #1
 8004984:	d101      	bne.n	800498a <sbrk_aligned+0x3a>
 8004986:	2501      	movs	r5, #1
 8004988:	426d      	negs	r5, r5
 800498a:	0028      	movs	r0, r5
 800498c:	bd70      	pop	{r4, r5, r6, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	20000380 	.word	0x20000380

08004994 <_malloc_r>:
 8004994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004996:	2203      	movs	r2, #3
 8004998:	1ccb      	adds	r3, r1, #3
 800499a:	4393      	bics	r3, r2
 800499c:	3308      	adds	r3, #8
 800499e:	0006      	movs	r6, r0
 80049a0:	001f      	movs	r7, r3
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d238      	bcs.n	8004a18 <_malloc_r+0x84>
 80049a6:	270c      	movs	r7, #12
 80049a8:	42b9      	cmp	r1, r7
 80049aa:	d837      	bhi.n	8004a1c <_malloc_r+0x88>
 80049ac:	0030      	movs	r0, r6
 80049ae:	f000 faa9 	bl	8004f04 <__malloc_lock>
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <_malloc_r+0x100>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	001c      	movs	r4, r3
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d133      	bne.n	8004a26 <_malloc_r+0x92>
 80049be:	0039      	movs	r1, r7
 80049c0:	0030      	movs	r0, r6
 80049c2:	f7ff ffc5 	bl	8004950 <sbrk_aligned>
 80049c6:	0004      	movs	r4, r0
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d15e      	bne.n	8004a8a <_malloc_r+0xf6>
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	0025      	movs	r5, r4
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	d14e      	bne.n	8004a74 <_malloc_r+0xe0>
 80049d6:	2c00      	cmp	r4, #0
 80049d8:	d051      	beq.n	8004a7e <_malloc_r+0xea>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	0029      	movs	r1, r5
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	0030      	movs	r0, r6
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f000 fc54 	bl	8005290 <_sbrk_r>
 80049e8:	9b01      	ldr	r3, [sp, #4]
 80049ea:	4283      	cmp	r3, r0
 80049ec:	d147      	bne.n	8004a7e <_malloc_r+0xea>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	0030      	movs	r0, r6
 80049f2:	1aff      	subs	r7, r7, r3
 80049f4:	0039      	movs	r1, r7
 80049f6:	f7ff ffab 	bl	8004950 <sbrk_aligned>
 80049fa:	3001      	adds	r0, #1
 80049fc:	d03f      	beq.n	8004a7e <_malloc_r+0xea>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d040      	beq.n	8004a8e <_malloc_r+0xfa>
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	42a2      	cmp	r2, r4
 8004a10:	d133      	bne.n	8004a7a <_malloc_r+0xe6>
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e014      	b.n	8004a42 <_malloc_r+0xae>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dac5      	bge.n	80049a8 <_malloc_r+0x14>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	2500      	movs	r5, #0
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	0028      	movs	r0, r5
 8004a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	1bc9      	subs	r1, r1, r7
 8004a2a:	d420      	bmi.n	8004a6e <_malloc_r+0xda>
 8004a2c:	290b      	cmp	r1, #11
 8004a2e:	d918      	bls.n	8004a62 <_malloc_r+0xce>
 8004a30:	19e2      	adds	r2, r4, r7
 8004a32:	6027      	str	r7, [r4, #0]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d112      	bne.n	8004a5e <_malloc_r+0xca>
 8004a38:	9b00      	ldr	r3, [sp, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6011      	str	r1, [r2, #0]
 8004a40:	6053      	str	r3, [r2, #4]
 8004a42:	0030      	movs	r0, r6
 8004a44:	0025      	movs	r5, r4
 8004a46:	f000 fa65 	bl	8004f14 <__malloc_unlock>
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	350b      	adds	r5, #11
 8004a4e:	1d23      	adds	r3, r4, #4
 8004a50:	4395      	bics	r5, r2
 8004a52:	1aea      	subs	r2, r5, r3
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d0e4      	beq.n	8004a22 <_malloc_r+0x8e>
 8004a58:	1b5b      	subs	r3, r3, r5
 8004a5a:	50a3      	str	r3, [r4, r2]
 8004a5c:	e7e1      	b.n	8004a22 <_malloc_r+0x8e>
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e7ec      	b.n	8004a3c <_malloc_r+0xa8>
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d1d5      	bne.n	8004a14 <_malloc_r+0x80>
 8004a68:	9b00      	ldr	r3, [sp, #0]
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e7e9      	b.n	8004a42 <_malloc_r+0xae>
 8004a6e:	0023      	movs	r3, r4
 8004a70:	6864      	ldr	r4, [r4, #4]
 8004a72:	e7a2      	b.n	80049ba <_malloc_r+0x26>
 8004a74:	002c      	movs	r4, r5
 8004a76:	686d      	ldr	r5, [r5, #4]
 8004a78:	e7ab      	b.n	80049d2 <_malloc_r+0x3e>
 8004a7a:	0013      	movs	r3, r2
 8004a7c:	e7c4      	b.n	8004a08 <_malloc_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	0030      	movs	r0, r6
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	f000 fa46 	bl	8004f14 <__malloc_unlock>
 8004a88:	e7cb      	b.n	8004a22 <_malloc_r+0x8e>
 8004a8a:	6027      	str	r7, [r4, #0]
 8004a8c:	e7d9      	b.n	8004a42 <_malloc_r+0xae>
 8004a8e:	605b      	str	r3, [r3, #4]
 8004a90:	deff      	udf	#255	; 0xff
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	2000037c 	.word	0x2000037c

08004a98 <_printf_common>:
 8004a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a9a:	0016      	movs	r6, r2
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	688a      	ldr	r2, [r1, #8]
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	000c      	movs	r4, r1
 8004aa4:	9000      	str	r0, [sp, #0]
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	da00      	bge.n	8004aac <_printf_common+0x14>
 8004aaa:	0013      	movs	r3, r2
 8004aac:	0022      	movs	r2, r4
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	3243      	adds	r2, #67	; 0x43
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d001      	beq.n	8004abc <_printf_common+0x24>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6033      	str	r3, [r6, #0]
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	d502      	bpl.n	8004ac8 <_printf_common+0x30>
 8004ac2:	6833      	ldr	r3, [r6, #0]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	2306      	movs	r3, #6
 8004acc:	0015      	movs	r5, r2
 8004ace:	401d      	ands	r5, r3
 8004ad0:	421a      	tst	r2, r3
 8004ad2:	d027      	beq.n	8004b24 <_printf_common+0x8c>
 8004ad4:	0023      	movs	r3, r4
 8004ad6:	3343      	adds	r3, #67	; 0x43
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	4193      	sbcs	r3, r2
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	0692      	lsls	r2, r2, #26
 8004ae2:	d430      	bmi.n	8004b46 <_printf_common+0xae>
 8004ae4:	0022      	movs	r2, r4
 8004ae6:	9901      	ldr	r1, [sp, #4]
 8004ae8:	9800      	ldr	r0, [sp, #0]
 8004aea:	9d08      	ldr	r5, [sp, #32]
 8004aec:	3243      	adds	r2, #67	; 0x43
 8004aee:	47a8      	blx	r5
 8004af0:	3001      	adds	r0, #1
 8004af2:	d025      	beq.n	8004b40 <_printf_common+0xa8>
 8004af4:	2206      	movs	r2, #6
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	2500      	movs	r5, #0
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d105      	bne.n	8004b0c <_printf_common+0x74>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	68e5      	ldr	r5, [r4, #12]
 8004b04:	1aed      	subs	r5, r5, r3
 8004b06:	43eb      	mvns	r3, r5
 8004b08:	17db      	asrs	r3, r3, #31
 8004b0a:	401d      	ands	r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	dd01      	ble.n	8004b18 <_printf_common+0x80>
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	18ed      	adds	r5, r5, r3
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42b5      	cmp	r5, r6
 8004b1c:	d120      	bne.n	8004b60 <_printf_common+0xc8>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e010      	b.n	8004b44 <_printf_common+0xac>
 8004b22:	3501      	adds	r5, #1
 8004b24:	68e3      	ldr	r3, [r4, #12]
 8004b26:	6832      	ldr	r2, [r6, #0]
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	42ab      	cmp	r3, r5
 8004b2c:	ddd2      	ble.n	8004ad4 <_printf_common+0x3c>
 8004b2e:	0022      	movs	r2, r4
 8004b30:	2301      	movs	r3, #1
 8004b32:	9901      	ldr	r1, [sp, #4]
 8004b34:	9800      	ldr	r0, [sp, #0]
 8004b36:	9f08      	ldr	r7, [sp, #32]
 8004b38:	3219      	adds	r2, #25
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1f0      	bne.n	8004b22 <_printf_common+0x8a>
 8004b40:	2001      	movs	r0, #1
 8004b42:	4240      	negs	r0, r0
 8004b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b46:	2030      	movs	r0, #48	; 0x30
 8004b48:	18e1      	adds	r1, r4, r3
 8004b4a:	3143      	adds	r1, #67	; 0x43
 8004b4c:	7008      	strb	r0, [r1, #0]
 8004b4e:	0021      	movs	r1, r4
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	3145      	adds	r1, #69	; 0x45
 8004b54:	7809      	ldrb	r1, [r1, #0]
 8004b56:	18a2      	adds	r2, r4, r2
 8004b58:	3243      	adds	r2, #67	; 0x43
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	7011      	strb	r1, [r2, #0]
 8004b5e:	e7c1      	b.n	8004ae4 <_printf_common+0x4c>
 8004b60:	0022      	movs	r2, r4
 8004b62:	2301      	movs	r3, #1
 8004b64:	9901      	ldr	r1, [sp, #4]
 8004b66:	9800      	ldr	r0, [sp, #0]
 8004b68:	9f08      	ldr	r7, [sp, #32]
 8004b6a:	321a      	adds	r2, #26
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0e6      	beq.n	8004b40 <_printf_common+0xa8>
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7d1      	b.n	8004b1a <_printf_common+0x82>
	...

08004b78 <_printf_i>:
 8004b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7a:	b08b      	sub	sp, #44	; 0x2c
 8004b7c:	9206      	str	r2, [sp, #24]
 8004b7e:	000a      	movs	r2, r1
 8004b80:	3243      	adds	r2, #67	; 0x43
 8004b82:	9307      	str	r3, [sp, #28]
 8004b84:	9005      	str	r0, [sp, #20]
 8004b86:	9204      	str	r2, [sp, #16]
 8004b88:	7e0a      	ldrb	r2, [r1, #24]
 8004b8a:	000c      	movs	r4, r1
 8004b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b8e:	2a78      	cmp	r2, #120	; 0x78
 8004b90:	d809      	bhi.n	8004ba6 <_printf_i+0x2e>
 8004b92:	2a62      	cmp	r2, #98	; 0x62
 8004b94:	d80b      	bhi.n	8004bae <_printf_i+0x36>
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d100      	bne.n	8004b9c <_printf_i+0x24>
 8004b9a:	e0be      	b.n	8004d1a <_printf_i+0x1a2>
 8004b9c:	497c      	ldr	r1, [pc, #496]	; (8004d90 <_printf_i+0x218>)
 8004b9e:	9103      	str	r1, [sp, #12]
 8004ba0:	2a58      	cmp	r2, #88	; 0x58
 8004ba2:	d100      	bne.n	8004ba6 <_printf_i+0x2e>
 8004ba4:	e093      	b.n	8004cce <_printf_i+0x156>
 8004ba6:	0026      	movs	r6, r4
 8004ba8:	3642      	adds	r6, #66	; 0x42
 8004baa:	7032      	strb	r2, [r6, #0]
 8004bac:	e022      	b.n	8004bf4 <_printf_i+0x7c>
 8004bae:	0010      	movs	r0, r2
 8004bb0:	3863      	subs	r0, #99	; 0x63
 8004bb2:	2815      	cmp	r0, #21
 8004bb4:	d8f7      	bhi.n	8004ba6 <_printf_i+0x2e>
 8004bb6:	f7fb faa7 	bl	8000108 <__gnu_thumb1_case_shi>
 8004bba:	0016      	.short	0x0016
 8004bbc:	fff6001f 	.word	0xfff6001f
 8004bc0:	fff6fff6 	.word	0xfff6fff6
 8004bc4:	001ffff6 	.word	0x001ffff6
 8004bc8:	fff6fff6 	.word	0xfff6fff6
 8004bcc:	fff6fff6 	.word	0xfff6fff6
 8004bd0:	003600a3 	.word	0x003600a3
 8004bd4:	fff60083 	.word	0xfff60083
 8004bd8:	00b4fff6 	.word	0x00b4fff6
 8004bdc:	0036fff6 	.word	0x0036fff6
 8004be0:	fff6fff6 	.word	0xfff6fff6
 8004be4:	0087      	.short	0x0087
 8004be6:	0026      	movs	r6, r4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	3642      	adds	r6, #66	; 0x42
 8004bec:	1d11      	adds	r1, r2, #4
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	7033      	strb	r3, [r6, #0]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0a2      	b.n	8004d3e <_printf_i+0x1c6>
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	1d02      	adds	r2, r0, #4
 8004bfe:	060d      	lsls	r5, r1, #24
 8004c00:	d50b      	bpl.n	8004c1a <_printf_i+0xa2>
 8004c02:	6805      	ldr	r5, [r0, #0]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	da03      	bge.n	8004c12 <_printf_i+0x9a>
 8004c0a:	232d      	movs	r3, #45	; 0x2d
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	426d      	negs	r5, r5
 8004c10:	7013      	strb	r3, [r2, #0]
 8004c12:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <_printf_i+0x218>)
 8004c14:	270a      	movs	r7, #10
 8004c16:	9303      	str	r3, [sp, #12]
 8004c18:	e01b      	b.n	8004c52 <_printf_i+0xda>
 8004c1a:	6805      	ldr	r5, [r0, #0]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	0649      	lsls	r1, r1, #25
 8004c20:	d5f1      	bpl.n	8004c06 <_printf_i+0x8e>
 8004c22:	b22d      	sxth	r5, r5
 8004c24:	e7ef      	b.n	8004c06 <_printf_i+0x8e>
 8004c26:	680d      	ldr	r5, [r1, #0]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	1d08      	adds	r0, r1, #4
 8004c2c:	6018      	str	r0, [r3, #0]
 8004c2e:	062e      	lsls	r6, r5, #24
 8004c30:	d501      	bpl.n	8004c36 <_printf_i+0xbe>
 8004c32:	680d      	ldr	r5, [r1, #0]
 8004c34:	e003      	b.n	8004c3e <_printf_i+0xc6>
 8004c36:	066d      	lsls	r5, r5, #25
 8004c38:	d5fb      	bpl.n	8004c32 <_printf_i+0xba>
 8004c3a:	680d      	ldr	r5, [r1, #0]
 8004c3c:	b2ad      	uxth	r5, r5
 8004c3e:	4b54      	ldr	r3, [pc, #336]	; (8004d90 <_printf_i+0x218>)
 8004c40:	2708      	movs	r7, #8
 8004c42:	9303      	str	r3, [sp, #12]
 8004c44:	2a6f      	cmp	r2, #111	; 0x6f
 8004c46:	d000      	beq.n	8004c4a <_printf_i+0xd2>
 8004c48:	3702      	adds	r7, #2
 8004c4a:	0023      	movs	r3, r4
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	3343      	adds	r3, #67	; 0x43
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	db03      	blt.n	8004c62 <_printf_i+0xea>
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	438a      	bics	r2, r1
 8004c60:	6022      	str	r2, [r4, #0]
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	d102      	bne.n	8004c6c <_printf_i+0xf4>
 8004c66:	9e04      	ldr	r6, [sp, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <_printf_i+0x10e>
 8004c6c:	9e04      	ldr	r6, [sp, #16]
 8004c6e:	0028      	movs	r0, r5
 8004c70:	0039      	movs	r1, r7
 8004c72:	f7fb fad9 	bl	8000228 <__aeabi_uidivmod>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	3e01      	subs	r6, #1
 8004c7a:	5c5b      	ldrb	r3, [r3, r1]
 8004c7c:	7033      	strb	r3, [r6, #0]
 8004c7e:	002b      	movs	r3, r5
 8004c80:	0005      	movs	r5, r0
 8004c82:	429f      	cmp	r7, r3
 8004c84:	d9f3      	bls.n	8004c6e <_printf_i+0xf6>
 8004c86:	2f08      	cmp	r7, #8
 8004c88:	d109      	bne.n	8004c9e <_printf_i+0x126>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	07db      	lsls	r3, r3, #31
 8004c8e:	d506      	bpl.n	8004c9e <_printf_i+0x126>
 8004c90:	6862      	ldr	r2, [r4, #4]
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dc02      	bgt.n	8004c9e <_printf_i+0x126>
 8004c98:	2330      	movs	r3, #48	; 0x30
 8004c9a:	3e01      	subs	r6, #1
 8004c9c:	7033      	strb	r3, [r6, #0]
 8004c9e:	9b04      	ldr	r3, [sp, #16]
 8004ca0:	1b9b      	subs	r3, r3, r6
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	9b07      	ldr	r3, [sp, #28]
 8004ca6:	0021      	movs	r1, r4
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	9805      	ldr	r0, [sp, #20]
 8004cac:	9b06      	ldr	r3, [sp, #24]
 8004cae:	aa09      	add	r2, sp, #36	; 0x24
 8004cb0:	f7ff fef2 	bl	8004a98 <_printf_common>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d147      	bne.n	8004d48 <_printf_i+0x1d0>
 8004cb8:	2001      	movs	r0, #1
 8004cba:	4240      	negs	r0, r0
 8004cbc:	b00b      	add	sp, #44	; 0x2c
 8004cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	6809      	ldr	r1, [r1, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	6022      	str	r2, [r4, #0]
 8004cc8:	2278      	movs	r2, #120	; 0x78
 8004cca:	4932      	ldr	r1, [pc, #200]	; (8004d94 <_printf_i+0x21c>)
 8004ccc:	9103      	str	r1, [sp, #12]
 8004cce:	0021      	movs	r1, r4
 8004cd0:	3145      	adds	r1, #69	; 0x45
 8004cd2:	700a      	strb	r2, [r1, #0]
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	c920      	ldmia	r1!, {r5}
 8004cda:	0610      	lsls	r0, r2, #24
 8004cdc:	d402      	bmi.n	8004ce4 <_printf_i+0x16c>
 8004cde:	0650      	lsls	r0, r2, #25
 8004ce0:	d500      	bpl.n	8004ce4 <_printf_i+0x16c>
 8004ce2:	b2ad      	uxth	r5, r5
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	07d3      	lsls	r3, r2, #31
 8004ce8:	d502      	bpl.n	8004cf0 <_printf_i+0x178>
 8004cea:	2320      	movs	r3, #32
 8004cec:	4313      	orrs	r3, r2
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	2710      	movs	r7, #16
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	d1a9      	bne.n	8004c4a <_printf_i+0xd2>
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	4393      	bics	r3, r2
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	e7a4      	b.n	8004c4a <_printf_i+0xd2>
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	680d      	ldr	r5, [r1, #0]
 8004d04:	1d10      	adds	r0, r2, #4
 8004d06:	6949      	ldr	r1, [r1, #20]
 8004d08:	6018      	str	r0, [r3, #0]
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	062e      	lsls	r6, r5, #24
 8004d0e:	d501      	bpl.n	8004d14 <_printf_i+0x19c>
 8004d10:	6019      	str	r1, [r3, #0]
 8004d12:	e002      	b.n	8004d1a <_printf_i+0x1a2>
 8004d14:	066d      	lsls	r5, r5, #25
 8004d16:	d5fb      	bpl.n	8004d10 <_printf_i+0x198>
 8004d18:	8019      	strh	r1, [r3, #0]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9e04      	ldr	r6, [sp, #16]
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	e7c0      	b.n	8004ca4 <_printf_i+0x12c>
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	1d11      	adds	r1, r2, #4
 8004d26:	6019      	str	r1, [r3, #0]
 8004d28:	6816      	ldr	r6, [r2, #0]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	0030      	movs	r0, r6
 8004d2e:	6862      	ldr	r2, [r4, #4]
 8004d30:	f000 fad4 	bl	80052dc <memchr>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d001      	beq.n	8004d3c <_printf_i+0x1c4>
 8004d38:	1b80      	subs	r0, r0, r6
 8004d3a:	6060      	str	r0, [r4, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9a04      	ldr	r2, [sp, #16]
 8004d44:	7013      	strb	r3, [r2, #0]
 8004d46:	e7ad      	b.n	8004ca4 <_printf_i+0x12c>
 8004d48:	0032      	movs	r2, r6
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	9906      	ldr	r1, [sp, #24]
 8004d4e:	9805      	ldr	r0, [sp, #20]
 8004d50:	9d07      	ldr	r5, [sp, #28]
 8004d52:	47a8      	blx	r5
 8004d54:	3001      	adds	r0, #1
 8004d56:	d0af      	beq.n	8004cb8 <_printf_i+0x140>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	079b      	lsls	r3, r3, #30
 8004d5c:	d415      	bmi.n	8004d8a <_printf_i+0x212>
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	4298      	cmp	r0, r3
 8004d64:	daaa      	bge.n	8004cbc <_printf_i+0x144>
 8004d66:	0018      	movs	r0, r3
 8004d68:	e7a8      	b.n	8004cbc <_printf_i+0x144>
 8004d6a:	0022      	movs	r2, r4
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	9906      	ldr	r1, [sp, #24]
 8004d70:	9805      	ldr	r0, [sp, #20]
 8004d72:	9e07      	ldr	r6, [sp, #28]
 8004d74:	3219      	adds	r2, #25
 8004d76:	47b0      	blx	r6
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d09d      	beq.n	8004cb8 <_printf_i+0x140>
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dcf0      	bgt.n	8004d6a <_printf_i+0x1f2>
 8004d88:	e7e9      	b.n	8004d5e <_printf_i+0x1e6>
 8004d8a:	2500      	movs	r5, #0
 8004d8c:	e7f7      	b.n	8004d7e <_printf_i+0x206>
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	08005689 	.word	0x08005689
 8004d94:	0800569a 	.word	0x0800569a

08004d98 <__sflush_r>:
 8004d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9a:	898b      	ldrh	r3, [r1, #12]
 8004d9c:	0005      	movs	r5, r0
 8004d9e:	000c      	movs	r4, r1
 8004da0:	071a      	lsls	r2, r3, #28
 8004da2:	d45c      	bmi.n	8004e5e <__sflush_r+0xc6>
 8004da4:	684a      	ldr	r2, [r1, #4]
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	dc04      	bgt.n	8004db4 <__sflush_r+0x1c>
 8004daa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	dc01      	bgt.n	8004db4 <__sflush_r+0x1c>
 8004db0:	2000      	movs	r0, #0
 8004db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004db4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004db6:	2f00      	cmp	r7, #0
 8004db8:	d0fa      	beq.n	8004db0 <__sflush_r+0x18>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2080      	movs	r0, #128	; 0x80
 8004dbe:	682e      	ldr	r6, [r5, #0]
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	0140      	lsls	r0, r0, #5
 8004dc6:	6a21      	ldr	r1, [r4, #32]
 8004dc8:	4002      	ands	r2, r0
 8004dca:	4203      	tst	r3, r0
 8004dcc:	d034      	beq.n	8004e38 <__sflush_r+0xa0>
 8004dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	075b      	lsls	r3, r3, #29
 8004dd4:	d506      	bpl.n	8004de4 <__sflush_r+0x4c>
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	1ac0      	subs	r0, r0, r3
 8004dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <__sflush_r+0x4c>
 8004de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de2:	1ac0      	subs	r0, r0, r3
 8004de4:	0002      	movs	r2, r0
 8004de6:	2300      	movs	r3, #0
 8004de8:	0028      	movs	r0, r5
 8004dea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004dec:	6a21      	ldr	r1, [r4, #32]
 8004dee:	47b8      	blx	r7
 8004df0:	89a2      	ldrh	r2, [r4, #12]
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	d106      	bne.n	8004e04 <__sflush_r+0x6c>
 8004df6:	6829      	ldr	r1, [r5, #0]
 8004df8:	291d      	cmp	r1, #29
 8004dfa:	d82c      	bhi.n	8004e56 <__sflush_r+0xbe>
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <__sflush_r+0x110>)
 8004dfe:	410b      	asrs	r3, r1
 8004e00:	07db      	lsls	r3, r3, #31
 8004e02:	d428      	bmi.n	8004e56 <__sflush_r+0xbe>
 8004e04:	2300      	movs	r3, #0
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	04d2      	lsls	r2, r2, #19
 8004e0e:	d505      	bpl.n	8004e1c <__sflush_r+0x84>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <__sflush_r+0x82>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d100      	bne.n	8004e1c <__sflush_r+0x84>
 8004e1a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e1e:	602e      	str	r6, [r5, #0]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d0c5      	beq.n	8004db0 <__sflush_r+0x18>
 8004e24:	0023      	movs	r3, r4
 8004e26:	3344      	adds	r3, #68	; 0x44
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	d002      	beq.n	8004e32 <__sflush_r+0x9a>
 8004e2c:	0028      	movs	r0, r5
 8004e2e:	f000 fa61 	bl	80052f4 <_free_r>
 8004e32:	2000      	movs	r0, #0
 8004e34:	6360      	str	r0, [r4, #52]	; 0x34
 8004e36:	e7bc      	b.n	8004db2 <__sflush_r+0x1a>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d1c6      	bne.n	8004dd0 <__sflush_r+0x38>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0c3      	beq.n	8004dd0 <__sflush_r+0x38>
 8004e48:	2b1d      	cmp	r3, #29
 8004e4a:	d001      	beq.n	8004e50 <__sflush_r+0xb8>
 8004e4c:	2b16      	cmp	r3, #22
 8004e4e:	d101      	bne.n	8004e54 <__sflush_r+0xbc>
 8004e50:	602e      	str	r6, [r5, #0]
 8004e52:	e7ad      	b.n	8004db0 <__sflush_r+0x18>
 8004e54:	89a2      	ldrh	r2, [r4, #12]
 8004e56:	2340      	movs	r3, #64	; 0x40
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	e7a9      	b.n	8004db2 <__sflush_r+0x1a>
 8004e5e:	690e      	ldr	r6, [r1, #16]
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	d0a5      	beq.n	8004db0 <__sflush_r+0x18>
 8004e64:	680f      	ldr	r7, [r1, #0]
 8004e66:	600e      	str	r6, [r1, #0]
 8004e68:	1bba      	subs	r2, r7, r6
 8004e6a:	9201      	str	r2, [sp, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d100      	bne.n	8004e74 <__sflush_r+0xdc>
 8004e72:	694a      	ldr	r2, [r1, #20]
 8004e74:	60a2      	str	r2, [r4, #8]
 8004e76:	9b01      	ldr	r3, [sp, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dd99      	ble.n	8004db0 <__sflush_r+0x18>
 8004e7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e7e:	0032      	movs	r2, r6
 8004e80:	001f      	movs	r7, r3
 8004e82:	0028      	movs	r0, r5
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	6a21      	ldr	r1, [r4, #32]
 8004e88:	47b8      	blx	r7
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	dc06      	bgt.n	8004e9c <__sflush_r+0x104>
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	2001      	movs	r0, #1
 8004e92:	89a2      	ldrh	r2, [r4, #12]
 8004e94:	4240      	negs	r0, r0
 8004e96:	4313      	orrs	r3, r2
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	e78a      	b.n	8004db2 <__sflush_r+0x1a>
 8004e9c:	9b01      	ldr	r3, [sp, #4]
 8004e9e:	1836      	adds	r6, r6, r0
 8004ea0:	1a1b      	subs	r3, r3, r0
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	e7e7      	b.n	8004e76 <__sflush_r+0xde>
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	dfbffffe 	.word	0xdfbffffe

08004eac <_fflush_r>:
 8004eac:	690b      	ldr	r3, [r1, #16]
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	0005      	movs	r5, r0
 8004eb2:	000c      	movs	r4, r1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <_fflush_r+0x12>
 8004eb8:	2500      	movs	r5, #0
 8004eba:	0028      	movs	r0, r5
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d004      	beq.n	8004ecc <_fflush_r+0x20>
 8004ec2:	6a03      	ldr	r3, [r0, #32]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <_fflush_r+0x20>
 8004ec8:	f7ff fb86 	bl	80045d8 <__sinit>
 8004ecc:	220c      	movs	r2, #12
 8004ece:	5ea3      	ldrsh	r3, [r4, r2]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f1      	beq.n	8004eb8 <_fflush_r+0xc>
 8004ed4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ed6:	07d2      	lsls	r2, r2, #31
 8004ed8:	d404      	bmi.n	8004ee4 <_fflush_r+0x38>
 8004eda:	059b      	lsls	r3, r3, #22
 8004edc:	d402      	bmi.n	8004ee4 <_fflush_r+0x38>
 8004ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee0:	f7ff fbf0 	bl	80046c4 <__retarget_lock_acquire_recursive>
 8004ee4:	0028      	movs	r0, r5
 8004ee6:	0021      	movs	r1, r4
 8004ee8:	f7ff ff56 	bl	8004d98 <__sflush_r>
 8004eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eee:	0005      	movs	r5, r0
 8004ef0:	07db      	lsls	r3, r3, #31
 8004ef2:	d4e2      	bmi.n	8004eba <_fflush_r+0xe>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	059b      	lsls	r3, r3, #22
 8004ef8:	d4df      	bmi.n	8004eba <_fflush_r+0xe>
 8004efa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efc:	f7ff fbe3 	bl	80046c6 <__retarget_lock_release_recursive>
 8004f00:	e7db      	b.n	8004eba <_fflush_r+0xe>
	...

08004f04 <__malloc_lock>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4802      	ldr	r0, [pc, #8]	; (8004f10 <__malloc_lock+0xc>)
 8004f08:	f7ff fbdc 	bl	80046c4 <__retarget_lock_acquire_recursive>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	20000378 	.word	0x20000378

08004f14 <__malloc_unlock>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4802      	ldr	r0, [pc, #8]	; (8004f20 <__malloc_unlock+0xc>)
 8004f18:	f7ff fbd5 	bl	80046c6 <__retarget_lock_release_recursive>
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	20000378 	.word	0x20000378

08004f24 <__sread>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	000c      	movs	r4, r1
 8004f28:	250e      	movs	r5, #14
 8004f2a:	5f49      	ldrsh	r1, [r1, r5]
 8004f2c:	f000 f99c 	bl	8005268 <_read_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	db03      	blt.n	8004f3c <__sread+0x18>
 8004f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f36:	181b      	adds	r3, r3, r0
 8004f38:	6563      	str	r3, [r4, #84]	; 0x54
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	4a02      	ldr	r2, [pc, #8]	; (8004f48 <__sread+0x24>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e7f9      	b.n	8004f3a <__sread+0x16>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	ffffefff 	.word	0xffffefff

08004f4c <__swrite>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	001f      	movs	r7, r3
 8004f50:	898b      	ldrh	r3, [r1, #12]
 8004f52:	0005      	movs	r5, r0
 8004f54:	000c      	movs	r4, r1
 8004f56:	0016      	movs	r6, r2
 8004f58:	05db      	lsls	r3, r3, #23
 8004f5a:	d505      	bpl.n	8004f68 <__swrite+0x1c>
 8004f5c:	230e      	movs	r3, #14
 8004f5e:	5ec9      	ldrsh	r1, [r1, r3]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2302      	movs	r3, #2
 8004f64:	f000 f96c 	bl	8005240 <_lseek_r>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <__swrite+0x34>)
 8004f6c:	0028      	movs	r0, r5
 8004f6e:	4013      	ands	r3, r2
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	0032      	movs	r2, r6
 8004f74:	230e      	movs	r3, #14
 8004f76:	5ee1      	ldrsh	r1, [r4, r3]
 8004f78:	003b      	movs	r3, r7
 8004f7a:	f000 f99b 	bl	80052b4 <_write_r>
 8004f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f80:	ffffefff 	.word	0xffffefff

08004f84 <__sseek>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	000c      	movs	r4, r1
 8004f88:	250e      	movs	r5, #14
 8004f8a:	5f49      	ldrsh	r1, [r1, r5]
 8004f8c:	f000 f958 	bl	8005240 <_lseek_r>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	1c42      	adds	r2, r0, #1
 8004f94:	d103      	bne.n	8004f9e <__sseek+0x1a>
 8004f96:	4a05      	ldr	r2, [pc, #20]	; (8004fac <__sseek+0x28>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	0152      	lsls	r2, r2, #5
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8004fa8:	e7f8      	b.n	8004f9c <__sseek+0x18>
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	ffffefff 	.word	0xffffefff

08004fb0 <__sclose>:
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	230e      	movs	r3, #14
 8004fb4:	5ec9      	ldrsh	r1, [r1, r3]
 8004fb6:	f000 f90d 	bl	80051d4 <_close_r>
 8004fba:	bd10      	pop	{r4, pc}

08004fbc <__swbuf_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	0006      	movs	r6, r0
 8004fc0:	000d      	movs	r5, r1
 8004fc2:	0014      	movs	r4, r2
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d004      	beq.n	8004fd2 <__swbuf_r+0x16>
 8004fc8:	6a03      	ldr	r3, [r0, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <__swbuf_r+0x16>
 8004fce:	f7ff fb03 	bl	80045d8 <__sinit>
 8004fd2:	69a3      	ldr	r3, [r4, #24]
 8004fd4:	60a3      	str	r3, [r4, #8]
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	071b      	lsls	r3, r3, #28
 8004fda:	d528      	bpl.n	800502e <__swbuf_r+0x72>
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d025      	beq.n	800502e <__swbuf_r+0x72>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	b2ef      	uxtb	r7, r5
 8004fe8:	1ac0      	subs	r0, r0, r3
 8004fea:	6963      	ldr	r3, [r4, #20]
 8004fec:	b2ed      	uxtb	r5, r5
 8004fee:	4283      	cmp	r3, r0
 8004ff0:	dc05      	bgt.n	8004ffe <__swbuf_r+0x42>
 8004ff2:	0021      	movs	r1, r4
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	f7ff ff59 	bl	8004eac <_fflush_r>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d11d      	bne.n	800503a <__swbuf_r+0x7e>
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	3001      	adds	r0, #1
 8005002:	3b01      	subs	r3, #1
 8005004:	60a3      	str	r3, [r4, #8]
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	6022      	str	r2, [r4, #0]
 800500c:	701f      	strb	r7, [r3, #0]
 800500e:	6963      	ldr	r3, [r4, #20]
 8005010:	4283      	cmp	r3, r0
 8005012:	d004      	beq.n	800501e <__swbuf_r+0x62>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d507      	bpl.n	800502a <__swbuf_r+0x6e>
 800501a:	2d0a      	cmp	r5, #10
 800501c:	d105      	bne.n	800502a <__swbuf_r+0x6e>
 800501e:	0021      	movs	r1, r4
 8005020:	0030      	movs	r0, r6
 8005022:	f7ff ff43 	bl	8004eac <_fflush_r>
 8005026:	2800      	cmp	r0, #0
 8005028:	d107      	bne.n	800503a <__swbuf_r+0x7e>
 800502a:	0028      	movs	r0, r5
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502e:	0021      	movs	r1, r4
 8005030:	0030      	movs	r0, r6
 8005032:	f000 f805 	bl	8005040 <__swsetup_r>
 8005036:	2800      	cmp	r0, #0
 8005038:	d0d3      	beq.n	8004fe2 <__swbuf_r+0x26>
 800503a:	2501      	movs	r5, #1
 800503c:	426d      	negs	r5, r5
 800503e:	e7f4      	b.n	800502a <__swbuf_r+0x6e>

08005040 <__swsetup_r>:
 8005040:	4b30      	ldr	r3, [pc, #192]	; (8005104 <__swsetup_r+0xc4>)
 8005042:	b570      	push	{r4, r5, r6, lr}
 8005044:	0005      	movs	r5, r0
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	000c      	movs	r4, r1
 800504a:	2800      	cmp	r0, #0
 800504c:	d004      	beq.n	8005058 <__swsetup_r+0x18>
 800504e:	6a03      	ldr	r3, [r0, #32]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <__swsetup_r+0x18>
 8005054:	f7ff fac0 	bl	80045d8 <__sinit>
 8005058:	230c      	movs	r3, #12
 800505a:	5ee2      	ldrsh	r2, [r4, r3]
 800505c:	b293      	uxth	r3, r2
 800505e:	0711      	lsls	r1, r2, #28
 8005060:	d423      	bmi.n	80050aa <__swsetup_r+0x6a>
 8005062:	06d9      	lsls	r1, r3, #27
 8005064:	d407      	bmi.n	8005076 <__swsetup_r+0x36>
 8005066:	2309      	movs	r3, #9
 8005068:	2001      	movs	r0, #1
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	3337      	adds	r3, #55	; 0x37
 800506e:	4313      	orrs	r3, r2
 8005070:	81a3      	strh	r3, [r4, #12]
 8005072:	4240      	negs	r0, r0
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	075b      	lsls	r3, r3, #29
 8005078:	d513      	bpl.n	80050a2 <__swsetup_r+0x62>
 800507a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800507c:	2900      	cmp	r1, #0
 800507e:	d008      	beq.n	8005092 <__swsetup_r+0x52>
 8005080:	0023      	movs	r3, r4
 8005082:	3344      	adds	r3, #68	; 0x44
 8005084:	4299      	cmp	r1, r3
 8005086:	d002      	beq.n	800508e <__swsetup_r+0x4e>
 8005088:	0028      	movs	r0, r5
 800508a:	f000 f933 	bl	80052f4 <_free_r>
 800508e:	2300      	movs	r3, #0
 8005090:	6363      	str	r3, [r4, #52]	; 0x34
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	4393      	bics	r3, r2
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	2300      	movs	r3, #0
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	2308      	movs	r3, #8
 80050a4:	89a2      	ldrh	r2, [r4, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <__swsetup_r+0x88>
 80050b0:	21a0      	movs	r1, #160	; 0xa0
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	0089      	lsls	r1, r1, #2
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	400b      	ands	r3, r1
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <__swsetup_r+0x88>
 80050c0:	0021      	movs	r1, r4
 80050c2:	0028      	movs	r0, r5
 80050c4:	f000 f848 	bl	8005158 <__smakebuf_r>
 80050c8:	220c      	movs	r2, #12
 80050ca:	5ea3      	ldrsh	r3, [r4, r2]
 80050cc:	2001      	movs	r0, #1
 80050ce:	001a      	movs	r2, r3
 80050d0:	b299      	uxth	r1, r3
 80050d2:	4002      	ands	r2, r0
 80050d4:	4203      	tst	r3, r0
 80050d6:	d00f      	beq.n	80050f8 <__swsetup_r+0xb8>
 80050d8:	2200      	movs	r2, #0
 80050da:	60a2      	str	r2, [r4, #8]
 80050dc:	6962      	ldr	r2, [r4, #20]
 80050de:	4252      	negs	r2, r2
 80050e0:	61a2      	str	r2, [r4, #24]
 80050e2:	2000      	movs	r0, #0
 80050e4:	6922      	ldr	r2, [r4, #16]
 80050e6:	4282      	cmp	r2, r0
 80050e8:	d1c4      	bne.n	8005074 <__swsetup_r+0x34>
 80050ea:	0609      	lsls	r1, r1, #24
 80050ec:	d5c2      	bpl.n	8005074 <__swsetup_r+0x34>
 80050ee:	2240      	movs	r2, #64	; 0x40
 80050f0:	4313      	orrs	r3, r2
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	3801      	subs	r0, #1
 80050f6:	e7bd      	b.n	8005074 <__swsetup_r+0x34>
 80050f8:	0788      	lsls	r0, r1, #30
 80050fa:	d400      	bmi.n	80050fe <__swsetup_r+0xbe>
 80050fc:	6962      	ldr	r2, [r4, #20]
 80050fe:	60a2      	str	r2, [r4, #8]
 8005100:	e7ef      	b.n	80050e2 <__swsetup_r+0xa2>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	200000b4 	.word	0x200000b4

08005108 <__swhatbuf_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	000e      	movs	r6, r1
 800510c:	001d      	movs	r5, r3
 800510e:	230e      	movs	r3, #14
 8005110:	5ec9      	ldrsh	r1, [r1, r3]
 8005112:	0014      	movs	r4, r2
 8005114:	b096      	sub	sp, #88	; 0x58
 8005116:	2900      	cmp	r1, #0
 8005118:	da0c      	bge.n	8005134 <__swhatbuf_r+0x2c>
 800511a:	89b2      	ldrh	r2, [r6, #12]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	0011      	movs	r1, r2
 8005120:	4019      	ands	r1, r3
 8005122:	421a      	tst	r2, r3
 8005124:	d013      	beq.n	800514e <__swhatbuf_r+0x46>
 8005126:	2100      	movs	r1, #0
 8005128:	3b40      	subs	r3, #64	; 0x40
 800512a:	2000      	movs	r0, #0
 800512c:	6029      	str	r1, [r5, #0]
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	b016      	add	sp, #88	; 0x58
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	466a      	mov	r2, sp
 8005136:	f000 f85f 	bl	80051f8 <_fstat_r>
 800513a:	2800      	cmp	r0, #0
 800513c:	dbed      	blt.n	800511a <__swhatbuf_r+0x12>
 800513e:	23f0      	movs	r3, #240	; 0xf0
 8005140:	9901      	ldr	r1, [sp, #4]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4019      	ands	r1, r3
 8005146:	4b03      	ldr	r3, [pc, #12]	; (8005154 <__swhatbuf_r+0x4c>)
 8005148:	18c9      	adds	r1, r1, r3
 800514a:	424b      	negs	r3, r1
 800514c:	4159      	adcs	r1, r3
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	e7ea      	b.n	800512a <__swhatbuf_r+0x22>
 8005154:	ffffe000 	.word	0xffffe000

08005158 <__smakebuf_r>:
 8005158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800515a:	2602      	movs	r6, #2
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	0005      	movs	r5, r0
 8005160:	000c      	movs	r4, r1
 8005162:	4233      	tst	r3, r6
 8005164:	d006      	beq.n	8005174 <__smakebuf_r+0x1c>
 8005166:	0023      	movs	r3, r4
 8005168:	3347      	adds	r3, #71	; 0x47
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	2301      	movs	r3, #1
 8005170:	6163      	str	r3, [r4, #20]
 8005172:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005174:	466a      	mov	r2, sp
 8005176:	ab01      	add	r3, sp, #4
 8005178:	f7ff ffc6 	bl	8005108 <__swhatbuf_r>
 800517c:	9900      	ldr	r1, [sp, #0]
 800517e:	0007      	movs	r7, r0
 8005180:	0028      	movs	r0, r5
 8005182:	f7ff fc07 	bl	8004994 <_malloc_r>
 8005186:	2800      	cmp	r0, #0
 8005188:	d108      	bne.n	800519c <__smakebuf_r+0x44>
 800518a:	220c      	movs	r2, #12
 800518c:	5ea3      	ldrsh	r3, [r4, r2]
 800518e:	059a      	lsls	r2, r3, #22
 8005190:	d4ef      	bmi.n	8005172 <__smakebuf_r+0x1a>
 8005192:	2203      	movs	r2, #3
 8005194:	4393      	bics	r3, r2
 8005196:	431e      	orrs	r6, r3
 8005198:	81a6      	strh	r6, [r4, #12]
 800519a:	e7e4      	b.n	8005166 <__smakebuf_r+0xe>
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	89a2      	ldrh	r2, [r4, #12]
 80051a0:	6020      	str	r0, [r4, #0]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	9b00      	ldr	r3, [sp, #0]
 80051a8:	6120      	str	r0, [r4, #16]
 80051aa:	6163      	str	r3, [r4, #20]
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <__smakebuf_r+0x74>
 80051b2:	0028      	movs	r0, r5
 80051b4:	230e      	movs	r3, #14
 80051b6:	5ee1      	ldrsh	r1, [r4, r3]
 80051b8:	f000 f830 	bl	800521c <_isatty_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d005      	beq.n	80051cc <__smakebuf_r+0x74>
 80051c0:	2303      	movs	r3, #3
 80051c2:	89a2      	ldrh	r2, [r4, #12]
 80051c4:	439a      	bics	r2, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	4313      	orrs	r3, r2
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	433b      	orrs	r3, r7
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	e7ce      	b.n	8005172 <__smakebuf_r+0x1a>

080051d4 <_close_r>:
 80051d4:	2300      	movs	r3, #0
 80051d6:	b570      	push	{r4, r5, r6, lr}
 80051d8:	4d06      	ldr	r5, [pc, #24]	; (80051f4 <_close_r+0x20>)
 80051da:	0004      	movs	r4, r0
 80051dc:	0008      	movs	r0, r1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	f7fb ff75 	bl	80010ce <_close>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d103      	bne.n	80051f0 <_close_r+0x1c>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d000      	beq.n	80051f0 <_close_r+0x1c>
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	20000384 	.word	0x20000384

080051f8 <_fstat_r>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b570      	push	{r4, r5, r6, lr}
 80051fc:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_fstat_r+0x20>)
 80051fe:	0004      	movs	r4, r0
 8005200:	0008      	movs	r0, r1
 8005202:	0011      	movs	r1, r2
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	f7fb ff6c 	bl	80010e2 <_fstat>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d103      	bne.n	8005216 <_fstat_r+0x1e>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d000      	beq.n	8005216 <_fstat_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	20000384 	.word	0x20000384

0800521c <_isatty_r>:
 800521c:	2300      	movs	r3, #0
 800521e:	b570      	push	{r4, r5, r6, lr}
 8005220:	4d06      	ldr	r5, [pc, #24]	; (800523c <_isatty_r+0x20>)
 8005222:	0004      	movs	r4, r0
 8005224:	0008      	movs	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fb ff69 	bl	80010fe <_isatty>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d103      	bne.n	8005238 <_isatty_r+0x1c>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d000      	beq.n	8005238 <_isatty_r+0x1c>
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	bd70      	pop	{r4, r5, r6, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	20000384 	.word	0x20000384

08005240 <_lseek_r>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	0004      	movs	r4, r0
 8005244:	0008      	movs	r0, r1
 8005246:	0011      	movs	r1, r2
 8005248:	001a      	movs	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	4d05      	ldr	r5, [pc, #20]	; (8005264 <_lseek_r+0x24>)
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7fb ff5e 	bl	8001110 <_lseek>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d103      	bne.n	8005260 <_lseek_r+0x20>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d000      	beq.n	8005260 <_lseek_r+0x20>
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	20000384 	.word	0x20000384

08005268 <_read_r>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	0004      	movs	r4, r0
 800526c:	0008      	movs	r0, r1
 800526e:	0011      	movs	r1, r2
 8005270:	001a      	movs	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	4d05      	ldr	r5, [pc, #20]	; (800528c <_read_r+0x24>)
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb ff0c 	bl	8001094 <_read>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d103      	bne.n	8005288 <_read_r+0x20>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d000      	beq.n	8005288 <_read_r+0x20>
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20000384 	.word	0x20000384

08005290 <_sbrk_r>:
 8005290:	2300      	movs	r3, #0
 8005292:	b570      	push	{r4, r5, r6, lr}
 8005294:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_sbrk_r+0x20>)
 8005296:	0004      	movs	r4, r0
 8005298:	0008      	movs	r0, r1
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f7fb ff44 	bl	8001128 <_sbrk>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d103      	bne.n	80052ac <_sbrk_r+0x1c>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d000      	beq.n	80052ac <_sbrk_r+0x1c>
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000384 	.word	0x20000384

080052b4 <_write_r>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	0004      	movs	r4, r0
 80052b8:	0008      	movs	r0, r1
 80052ba:	0011      	movs	r1, r2
 80052bc:	001a      	movs	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	4d05      	ldr	r5, [pc, #20]	; (80052d8 <_write_r+0x24>)
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fb fb50 	bl	8000968 <_write>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d103      	bne.n	80052d4 <_write_r+0x20>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d000      	beq.n	80052d4 <_write_r+0x20>
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	20000384 	.word	0x20000384

080052dc <memchr>:
 80052dc:	b2c9      	uxtb	r1, r1
 80052de:	1882      	adds	r2, r0, r2
 80052e0:	4290      	cmp	r0, r2
 80052e2:	d101      	bne.n	80052e8 <memchr+0xc>
 80052e4:	2000      	movs	r0, #0
 80052e6:	4770      	bx	lr
 80052e8:	7803      	ldrb	r3, [r0, #0]
 80052ea:	428b      	cmp	r3, r1
 80052ec:	d0fb      	beq.n	80052e6 <memchr+0xa>
 80052ee:	3001      	adds	r0, #1
 80052f0:	e7f6      	b.n	80052e0 <memchr+0x4>
	...

080052f4 <_free_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	0005      	movs	r5, r0
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d010      	beq.n	800531e <_free_r+0x2a>
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	da00      	bge.n	8005306 <_free_r+0x12>
 8005304:	18e4      	adds	r4, r4, r3
 8005306:	0028      	movs	r0, r5
 8005308:	f7ff fdfc 	bl	8004f04 <__malloc_lock>
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <_free_r+0x90>)
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <_free_r+0x2c>
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	6014      	str	r4, [r2, #0]
 8005318:	0028      	movs	r0, r5
 800531a:	f7ff fdfb 	bl	8004f14 <__malloc_unlock>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	42a3      	cmp	r3, r4
 8005322:	d908      	bls.n	8005336 <_free_r+0x42>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	1821      	adds	r1, r4, r0
 8005328:	428b      	cmp	r3, r1
 800532a:	d1f3      	bne.n	8005314 <_free_r+0x20>
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	1809      	adds	r1, r1, r0
 8005332:	6021      	str	r1, [r4, #0]
 8005334:	e7ee      	b.n	8005314 <_free_r+0x20>
 8005336:	001a      	movs	r2, r3
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <_free_r+0x4e>
 800533e:	42a3      	cmp	r3, r4
 8005340:	d9f9      	bls.n	8005336 <_free_r+0x42>
 8005342:	6811      	ldr	r1, [r2, #0]
 8005344:	1850      	adds	r0, r2, r1
 8005346:	42a0      	cmp	r0, r4
 8005348:	d10b      	bne.n	8005362 <_free_r+0x6e>
 800534a:	6820      	ldr	r0, [r4, #0]
 800534c:	1809      	adds	r1, r1, r0
 800534e:	1850      	adds	r0, r2, r1
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	4283      	cmp	r3, r0
 8005354:	d1e0      	bne.n	8005318 <_free_r+0x24>
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	1841      	adds	r1, r0, r1
 800535c:	6011      	str	r1, [r2, #0]
 800535e:	6053      	str	r3, [r2, #4]
 8005360:	e7da      	b.n	8005318 <_free_r+0x24>
 8005362:	42a0      	cmp	r0, r4
 8005364:	d902      	bls.n	800536c <_free_r+0x78>
 8005366:	230c      	movs	r3, #12
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	e7d5      	b.n	8005318 <_free_r+0x24>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	1821      	adds	r1, r4, r0
 8005370:	428b      	cmp	r3, r1
 8005372:	d103      	bne.n	800537c <_free_r+0x88>
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	1809      	adds	r1, r1, r0
 800537a:	6021      	str	r1, [r4, #0]
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6054      	str	r4, [r2, #4]
 8005380:	e7ca      	b.n	8005318 <_free_r+0x24>
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	2000037c 	.word	0x2000037c

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
