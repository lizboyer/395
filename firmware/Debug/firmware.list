
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041fc  080041fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004204  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000005c  08004260  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004260  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef04  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002026  00000000  00000000  0002efcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aaf  00000000  00000000  00031d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001144e  00000000  00000000  0003283f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106b1  00000000  00000000  00043c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b1ab  00000000  00000000  0005433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003178  00000000  00000000  000bf4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c2664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004150 	.word	0x08004150

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004150 	.word	0x08004150

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80004b0:	250f      	movs	r5, #15
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_2G);
 80004b8:	197c      	adds	r4, r7, r5
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2240      	movs	r2, #64	; 0x40
 80004be:	2110      	movs	r1, #16
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f94b 	bl	800075c <accelerometer_write>
 80004c6:	0003      	movs	r3, r0
 80004c8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80004ca:	197b      	adds	r3, r7, r5
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d002      	beq.n	80004d8 <acc_init+0x30>
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	e02c      	b.n	8000532 <acc_init+0x8a>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80004d8:	250f      	movs	r5, #15
 80004da:	197c      	adds	r4, r7, r5
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	2111      	movs	r1, #17
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f93a 	bl	800075c <accelerometer_write>
 80004e8:	0003      	movs	r3, r0
 80004ea:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK) return status;
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d002      	beq.n	80004fa <acc_init+0x52>
 80004f4:	197b      	adds	r3, r7, r5
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	e01b      	b.n	8000532 <acc_init+0x8a>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 80004fa:	250f      	movs	r5, #15
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2201      	movs	r2, #1
 8000502:	210e      	movs	r1, #14
 8000504:	0018      	movs	r0, r3
 8000506:	f000 f929 	bl	800075c <accelerometer_write>
 800050a:	0003      	movs	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) return status;
 800050e:	197b      	adds	r3, r7, r5
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <acc_init+0x74>
 8000516:	197b      	adds	r3, r7, r5
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	e00a      	b.n	8000532 <acc_init+0x8a>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 800051c:	250f      	movs	r5, #15
 800051e:	197c      	adds	r4, r7, r5
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2103      	movs	r1, #3
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f809 	bl	800053c <read_axis>
 800052a:	0003      	movs	r3, r0
 800052c:	7023      	strb	r3, [r4, #0]

    return status;
 800052e:	197b      	adds	r3, r7, r5
 8000530:	781b      	ldrb	r3, [r3, #0]

}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800053c <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af04      	add	r7, sp, #16
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	000a      	movs	r2, r1
 8000546:	1cfb      	adds	r3, r7, #3
 8000548:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054a:	b672      	cpsid	i
}
 800054c:	46c0      	nop			; (mov r8, r8)

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 800054e:	230f      	movs	r3, #15
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]

    switch(axis){
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d00b      	beq.n	8000576 <read_axis+0x3a>
 800055e:	dd00      	ble.n	8000562 <read_axis+0x26>
 8000560:	e0ee      	b.n	8000740 <read_axis+0x204>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d100      	bne.n	8000568 <read_axis+0x2c>
 8000566:	e098      	b.n	800069a <read_axis+0x15e>
 8000568:	dd00      	ble.n	800056c <read_axis+0x30>
 800056a:	e0e9      	b.n	8000740 <read_axis+0x204>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <read_axis+0x3a>
 8000570:	2b01      	cmp	r3, #1
 8000572:	d04a      	beq.n	800060a <read_axis+0xce>
 8000574:	e0e4      	b.n	8000740 <read_axis+0x204>
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	b299      	uxth	r1, r3
 800057e:	250f      	movs	r5, #15
 8000580:	197c      	adds	r4, r7, r5
 8000582:	4874      	ldr	r0, [pc, #464]	; (8000754 <read_axis+0x218>)
 8000584:	2301      	movs	r3, #1
 8000586:	425b      	negs	r3, r3
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	4b72      	ldr	r3, [pc, #456]	; (8000758 <read_axis+0x21c>)
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	2229      	movs	r2, #41	; 0x29
 8000596:	f001 f9a7 	bl	80018e8 <HAL_I2C_Mem_Read>
 800059a:	0003      	movs	r3, r0
 800059c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800059e:	0028      	movs	r0, r5
 80005a0:	183b      	adds	r3, r7, r0
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d000      	beq.n	80005aa <read_axis+0x6e>
 80005a8:	e0bb      	b.n	8000722 <read_axis+0x1e6>
		  acc->x_xlr = *read_buffer << 8;
 80005aa:	4b6b      	ldr	r3, [pc, #428]	; (8000758 <read_axis+0x21c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	b299      	uxth	r1, r3
 80005be:	0005      	movs	r5, r0
 80005c0:	183c      	adds	r4, r7, r0
 80005c2:	4864      	ldr	r0, [pc, #400]	; (8000754 <read_axis+0x218>)
 80005c4:	2301      	movs	r3, #1
 80005c6:	425b      	negs	r3, r3
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4b62      	ldr	r3, [pc, #392]	; (8000758 <read_axis+0x21c>)
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2228      	movs	r2, #40	; 0x28
 80005d6:	f001 f987 	bl	80018e8 <HAL_I2C_Mem_Read>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80005de:	197b      	adds	r3, r7, r5
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d000      	beq.n	80005e8 <read_axis+0xac>
 80005e6:	e09e      	b.n	8000726 <read_axis+0x1ea>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	885b      	ldrh	r3, [r3, #2]
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <read_axis+0x21c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	18d3      	adds	r3, r2, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 8000600:	1cfb      	adds	r3, r7, #3
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d000      	beq.n	800060a <read_axis+0xce>
 8000608:	e08f      	b.n	800072a <read_axis+0x1ee>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	b299      	uxth	r1, r3
 8000612:	250f      	movs	r5, #15
 8000614:	197c      	adds	r4, r7, r5
 8000616:	484f      	ldr	r0, [pc, #316]	; (8000754 <read_axis+0x218>)
 8000618:	2301      	movs	r3, #1
 800061a:	425b      	negs	r3, r3
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2301      	movs	r3, #1
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <read_axis+0x21c>)
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	222b      	movs	r2, #43	; 0x2b
 800062a:	f001 f95d 	bl	80018e8 <HAL_I2C_Mem_Read>
 800062e:	0003      	movs	r3, r0
 8000630:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000632:	0028      	movs	r0, r5
 8000634:	183b      	adds	r3, r7, r0
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d000      	beq.n	800063e <read_axis+0x102>
 800063c:	e077      	b.n	800072e <read_axis+0x1f2>
		  acc->y_xlr = *read_buffer << 8;
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <read_axis+0x21c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	b299      	uxth	r1, r3
 8000652:	0005      	movs	r5, r0
 8000654:	183c      	adds	r4, r7, r0
 8000656:	483f      	ldr	r0, [pc, #252]	; (8000754 <read_axis+0x218>)
 8000658:	2301      	movs	r3, #1
 800065a:	425b      	negs	r3, r3
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <read_axis+0x21c>)
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	222a      	movs	r2, #42	; 0x2a
 800066a:	f001 f93d 	bl	80018e8 <HAL_I2C_Mem_Read>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000672:	197b      	adds	r3, r7, r5
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d15b      	bne.n	8000732 <read_axis+0x1f6>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	b21b      	sxth	r3, r3
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <read_axis+0x21c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b29b      	uxth	r3, r3
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	b29b      	uxth	r3, r3
 800068c:	b21a      	sxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 8000692:	1cfb      	adds	r3, r7, #3
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d14d      	bne.n	8000736 <read_axis+0x1fa>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	b299      	uxth	r1, r3
 80006a2:	250f      	movs	r5, #15
 80006a4:	197c      	adds	r4, r7, r5
 80006a6:	482b      	ldr	r0, [pc, #172]	; (8000754 <read_axis+0x218>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	425b      	negs	r3, r3
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <read_axis+0x21c>)
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	222d      	movs	r2, #45	; 0x2d
 80006ba:	f001 f915 	bl	80018e8 <HAL_I2C_Mem_Read>
 80006be:	0003      	movs	r3, r0
 80006c0:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80006c2:	0028      	movs	r0, r5
 80006c4:	183b      	adds	r3, r7, r0
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d136      	bne.n	800073a <read_axis+0x1fe>
		  acc->z_xlr = *read_buffer << 8;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <read_axis+0x21c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b299      	uxth	r1, r3
 80006e0:	0005      	movs	r5, r0
 80006e2:	183c      	adds	r4, r7, r0
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <read_axis+0x218>)
 80006e6:	2301      	movs	r3, #1
 80006e8:	425b      	negs	r3, r3
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <read_axis+0x21c>)
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	222c      	movs	r2, #44	; 0x2c
 80006f8:	f001 f8f6 	bl	80018e8 <HAL_I2C_Mem_Read>
 80006fc:	0003      	movs	r3, r0
 80006fe:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d11a      	bne.n	800073e <read_axis+0x202>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	88db      	ldrh	r3, [r3, #6]
 800070c:	b21b      	sxth	r3, r3
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <read_axis+0x21c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	b21a      	sxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	80da      	strh	r2, [r3, #6]
		  break;
 8000720:	e00e      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	e00c      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	e00a      	b.n	8000740 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	e008      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	e006      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	e004      	b.n	8000740 <read_axis+0x204>
		  if(axis != ALL_AXIS) break;
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	e002      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	e000      	b.n	8000740 <read_axis+0x204>
		  if(status != HAL_OK) break;
 800073e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8000740:	b662      	cpsie	i
}
 8000742:	46c0      	nop			; (mov r8, r8)
	}

    __enable_irq();

    return status;
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b004      	add	sp, #16
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	2000007c 	.word	0x2000007c
 8000758:	20000078 	.word	0x20000078

0800075c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af04      	add	r7, sp, #16
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	0008      	movs	r0, r1
 8000766:	0011      	movs	r1, r2
 8000768:	1cfb      	adds	r3, r7, #3
 800076a:	1c02      	adds	r2, r0, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	1cbb      	adds	r3, r7, #2
 8000770:	1c0a      	adds	r2, r1, #0
 8000772:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 8000778:	250c      	movs	r5, #12
 800077a:	197b      	adds	r3, r7, r5
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <accelerometer_write+0x6c>)
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	701a      	strb	r2, [r3, #0]
	*write_buffer = data;
 8000782:	197b      	adds	r3, r7, r5
 8000784:	1cba      	adds	r2, r7, #2
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b299      	uxth	r1, r3
 8000792:	1cfb      	adds	r3, r7, #3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b29a      	uxth	r2, r3
 8000798:	260f      	movs	r6, #15
 800079a:	19bc      	adds	r4, r7, r6
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <accelerometer_write+0x70>)
 800079e:	2301      	movs	r3, #1
 80007a0:	425b      	negs	r3, r3
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	197b      	adds	r3, r7, r5
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	f000 ff6d 	bl	800168c <HAL_I2C_Mem_Write>
 80007b2:	0003      	movs	r3, r0
 80007b4:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007b6:	b662      	cpsie	i
}
 80007b8:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
	return status;
 80007ba:	19bb      	adds	r3, r7, r6
 80007bc:	781b      	ldrb	r3, [r3, #0]
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b005      	add	sp, #20
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	08004168 	.word	0x08004168
 80007cc:	2000007c 	.word	0x2000007c

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0


  HAL_Init();
 80007d4:	f000 fbce 	bl	8000f74 <HAL_Init>
  SystemClock_Config();
 80007d8:	f000 f83c 	bl	8000854 <SystemClock_Config>
  MX_GPIO_Init();
 80007dc:	f000 f914 	bl	8000a08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e0:	f000 f8a4 	bl	800092c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80007e4:	f000 f8e2 	bl	80009ac <MX_LPUART1_UART_Init>

  acc_init(&xl_l);
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <main+0x70>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fe5c 	bl	80004a8 <acc_init>
  acc_init(&xl_r);
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <main+0x74>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe58 	bl	80004a8 <acc_init>

  MX_TIM2_Init();
 80007f8:	f000 f9d2 	bl	8000ba0 <MX_TIM2_Init>
  MX_TIM21_Init();
 80007fc:	f000 fa24 	bl	8000c48 <MX_TIM21_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	0059      	lsls	r1, r3, #1
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2201      	movs	r2, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fe6e 	bl	80014ec <HAL_GPIO_WritePin>

  // start polling the accelerometer(s)
  HAL_TIM_Base_Start_IT(&htim21);
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <main+0x78>)
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fc3a 	bl	800308c <HAL_TIM_Base_Start_IT>

  while (1)
  {
	if(xl_r.z_xlr < -0x1000)
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <main+0x74>)
 800081a:	88db      	ldrh	r3, [r3, #6]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <main+0x7c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	daf9      	bge.n	8000818 <main+0x48>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <main+0x80>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fc30 	bl	800308c <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	0059      	lsls	r1, r3, #1
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	2200      	movs	r2, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fe58 	bl	80014ec <HAL_GPIO_WritePin>
	if(xl_r.z_xlr < -0x1000)
 800083c:	e7ec      	b.n	8000818 <main+0x48>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000028 	.word	0x20000028
 8000844:	20000000 	.word	0x20000000
 8000848:	20000110 	.word	0x20000110
 800084c:	fffff000 	.word	0xfffff000
 8000850:	200000d0 	.word	0x200000d0

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b099      	sub	sp, #100	; 0x64
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	242c      	movs	r4, #44	; 0x2c
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2334      	movs	r3, #52	; 0x34
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f003 fc47 	bl	80040f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	2318      	movs	r3, #24
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f003 fc3f 	bl	80040f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087a:	003b      	movs	r3, r7
 800087c:	0018      	movs	r0, r3
 800087e:	2318      	movs	r3, #24
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f003 fc38 	bl	80040f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <SystemClock_Config+0xd4>)
 800088e:	401a      	ands	r2, r3
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <SystemClock_Config+0xd0>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	0109      	lsls	r1, r1, #4
 8000896:	430a      	orrs	r2, r1
 8000898:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2210      	movs	r2, #16
 80008a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	22a0      	movs	r2, #160	; 0xa0
 80008b2:	0212      	lsls	r2, r2, #8
 80008b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fcd8 	bl	8002274 <HAL_RCC_OscConfig>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008c8:	f000 fa14 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	2118      	movs	r1, #24
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	220f      	movs	r2, #15
 80008d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 f83b 	bl	800296c <HAL_RCC_ClockConfig>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008fa:	f000 f9fb 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fe:	003b      	movs	r3, r7
 8000900:	2208      	movs	r2, #8
 8000902:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000904:	003b      	movs	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	003b      	movs	r3, r7
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fa51 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000916:	f000 f9ed 	bl	8000cf4 <Error_Handler>
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b019      	add	sp, #100	; 0x64
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40007000 	.word	0x40007000
 8000928:	ffffe7ff 	.word	0xffffe7ff

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0


  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000932:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <MX_I2C1_Init+0x7c>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000938:	22e1      	movs	r2, #225	; 0xe1
 800093a:	00d2      	lsls	r2, r2, #3
 800093c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000946:	2201      	movs	r2, #1
 8000948:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_I2C1_Init+0x78>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x78>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x78>)
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fdf8 	bl	8001560 <HAL_I2C_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 f9be 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C1_Init+0x78>)
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fbe1 	bl	8002144 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 f9b5 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2C1_Init+0x78>)
 800098c:	2100      	movs	r1, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fc24 	bl	80021dc <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 f9ac 	bl	8000cf4 <Error_Handler>
  }

}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	2000007c 	.word	0x2000007c
 80009a8:	40005400 	.word	0x40005400

080009ac <MX_LPUART1_UART_Init>:

/**
  * @brief LPUART1 Initialization Function
  */
static void MX_LPUART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  hlpuart1.Instance = LPUART1;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <MX_LPUART1_UART_Init+0x58>)
 80009b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009b8:	2296      	movs	r2, #150	; 0x96
 80009ba:	01d2      	lsls	r2, r2, #7
 80009bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MX_LPUART1_UART_Init+0x54>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 febc 	bl	8003768 <HAL_UART_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f97e 	bl	8000cf4 <Error_Handler>
  }
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000150 	.word	0x20000150
 8000a04:	40004800 	.word	0x40004800

08000a08 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	240c      	movs	r4, #12
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	0018      	movs	r0, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f003 fb6d 	bl	80040f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a24:	2102      	movs	r1, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0xb8>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	0059      	lsls	r1, r3, #1
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	2200      	movs	r2, #0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fd47 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT0_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT0_Pin|ACC_INT1_Pin;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2203      	movs	r2, #3
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2284      	movs	r2, #132	; 0x84
 8000a68:	0392      	lsls	r2, r2, #14
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <MX_GPIO_Init+0xbc>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f000 fbc9 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7e:	0021      	movs	r1, r4
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fbb4 	bl	8001210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2005      	movs	r0, #5
 8000aae:	f000 fb7d 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000ab2:	2005      	movs	r0, #5
 8000ab4:	f000 fb8f 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b009      	add	sp, #36	; 0x24
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	50000400 	.word	0x50000400

08000ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief Interrupt Callback function
  * @param GPIO_Pin - the pin that triggered the interrupt
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	801a      	strh	r2, [r3, #0]

	if(xl_r.irq_pin == GPIO_Pin)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ad6:	8c1b      	ldrh	r3, [r3, #32]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	1dba      	adds	r2, r7, #6
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d108      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		status = read_axis(&xl_r, ALL_AXIS);
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fd28 	bl	800053c <read_axis>
 8000aec:	0003      	movs	r3, r0
 8000aee:	001a      	movs	r2, r3
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000af2:	701a      	strb	r2, [r3, #0]

	}
	if(xl_l.irq_pin == GPIO_Pin)
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x60>)
 8000af6:	8c1b      	ldrh	r3, [r3, #32]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	1dba      	adds	r2, r7, #6
 8000afc:	8812      	ldrh	r2, [r2, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d109      	bne.n	8000b16 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		status = read_axis(&xl_l, ALL_AXIS);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b04:	2103      	movs	r1, #3
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fd18 	bl	800053c <read_axis>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	001a      	movs	r2, r3
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b12:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46c0      	nop			; (mov r8, r8)
}
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000000 	.word	0x20000000
 8000b24:	200001d8 	.word	0x200001d8
 8000b28:	20000028 	.word	0x20000028

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief Timer Callback function
  * @param htim - the timer that triggered the callback
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  uint8_t msg[25] = "test\n";
 8000b34:	230c      	movs	r3, #12
 8000b36:	18f9      	adds	r1, r7, r3
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b3a:	000b      	movs	r3, r1
 8000b3c:	6810      	ldr	r0, [r2, #0]
 8000b3e:	6018      	str	r0, [r3, #0]
 8000b40:	8892      	ldrh	r2, [r2, #4]
 8000b42:	809a      	strh	r2, [r3, #4]
 8000b44:	2306      	movs	r3, #6
 8000b46:	18cb      	adds	r3, r1, r3
 8000b48:	2213      	movs	r2, #19
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 fad3 	bl	80040f8 <memset>

  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d107      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	0059      	lsls	r1, r3, #1
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2201      	movs	r2, #1
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fcc1 	bl	80014ec <HAL_GPIO_WritePin>
  }
  if (htim == &htim21)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d108      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
	  status = read_axis(&xl_r, ALL_AXIS);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b74:	2103      	movs	r1, #3
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fce0 	bl	800053c <read_axis>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	001a      	movs	r2, r3
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b82:	701a      	strb	r2, [r3, #0]
//	  sprintf(msg, "%d,%d,%d", xl_r.x_xlr, xl_r.y_xlr, xl_r.z_xlr);
//	  HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg), 10);
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b00a      	add	sp, #40	; 0x28
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	0800416c 	.word	0x0800416c
 8000b90:	200000d0 	.word	0x200000d0
 8000b94:	20000110 	.word	0x20000110
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	200001d8 	.word	0x200001d8

08000ba0 <MX_TIM2_Init>:

/**
  * @brief TIM2 Initialization Function
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	2310      	movs	r3, #16
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 faa1 	bl	80040f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2308      	movs	r3, #8
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 fa9a 	bl	80040f8 <memset>

  htim2.Instance = TIM2;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	05d2      	lsls	r2, r2, #23
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 243;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bce:	22f3      	movs	r2, #243	; 0xf3
 8000bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 / 2;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 fa0d 	bl	800300c <HAL_TIM_Base_Init>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000bf6:	f000 f87d 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	0152      	lsls	r2, r2, #5
 8000c02:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c04:	187a      	adds	r2, r7, r1
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fb72 	bl	80032f4 <HAL_TIM_ConfigClockSource>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c14:	f000 f86e 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	003a      	movs	r2, r7
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fd44 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c34:	f000 f85e 	bl	8000cf4 <Error_Handler>
  }

}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000d0 	.word	0x200000d0
 8000c44:	00007fff 	.word	0x00007fff

08000c48 <MX_TIM21_Init>:

/**
  * @brief TIM21 Initialization Function
  */
static void MX_TIM21_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	2308      	movs	r3, #8
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	0018      	movs	r0, r3
 8000c54:	2310      	movs	r3, #16
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f003 fa4d 	bl	80040f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	003b      	movs	r3, r7
 8000c60:	0018      	movs	r0, r3
 8000c62:	2308      	movs	r3, #8
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f003 fa46 	bl	80040f8 <memset>

  htim21.Instance = TIM21;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <MX_TIM21_Init+0xa4>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 15999;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_TIM21_Init+0xa8>)
 8000c76:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c7a:	2210      	movs	r2, #16
 8000c7c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 f9ba 	bl	800300c <HAL_TIM_Base_Init>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000c9c:	f000 f82a 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	0152      	lsls	r2, r2, #5
 8000ca8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000caa:	187a      	adds	r2, r7, r1
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 fb1f 	bl	80032f4 <HAL_TIM_ConfigClockSource>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000cba:	f000 f81b 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000cca:	003a      	movs	r2, r7
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_TIM21_Init+0xa0>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 fcf1 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000cda:	f000 f80b 	bl	8000cf4 <Error_Handler>
  }

}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	00003e7f 	.word	0x00003e7f

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_MspInit+0x24>)
 8000d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x24>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_MspInit+0x24>)
 8000d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_MspInit+0x24>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0549      	lsls	r1, r1, #21
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	240c      	movs	r4, #12
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 f9dc 	bl	80040f8 <memset>
  if(hi2c->Instance==I2C1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_I2C_MspInit+0x80>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12a      	bne.n	8000da0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	22c0      	movs	r2, #192	; 0xc0
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6a:	0021      	movs	r1, r4
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2212      	movs	r2, #18
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2201      	movs	r2, #1
 8000d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	187a      	adds	r2, r7, r1
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fa3f 	bl	8001210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0389      	lsls	r1, r1, #14
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b009      	add	sp, #36	; 0x24
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	40005400 	.word	0x40005400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	240c      	movs	r4, #12
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f003 f998 	bl	80040f8 <memset>
  if(huart->Instance==LPUART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d129      	bne.n	8000e26 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	02c9      	lsls	r1, r1, #11
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df8:	0021      	movs	r1, r4
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2202      	movs	r2, #2
 8000e04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2206      	movs	r2, #6
 8000e16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	187a      	adds	r2, r7, r1
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 f9f5 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b009      	add	sp, #36	; 0x24
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40004800 	.word	0x40004800
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d10e      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_TIM_Base_MspInit+0x60>)
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_TIM_Base_MspInit+0x60>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f000 f9a5 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f9b7 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000e68:	e012      	b.n	8000e90 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM21)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0x64>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10d      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_TIM_Base_MspInit+0x60>)
 8000e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_TIM_Base_MspInit+0x60>)
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2014      	movs	r0, #20
 8000e86:	f000 f991 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000e8a:	2014      	movs	r0, #20
 8000e8c:	f000 f9a3 	bl	80011d6 <HAL_NVIC_EnableIRQ>
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f8aa 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT0_Pin);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fb28 	bl	8001528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f000 fb25 	bl	8001528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <TIM2_IRQHandler+0x14>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f002 f91a 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	200000d0 	.word	0x200000d0

08000efc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <TIM21_IRQHandler+0x14>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 f90e 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	20000110 	.word	0x20000110

08000f14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff fff6 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 f8db 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fc3d 	bl	80007d0 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
   ldr   r0, =_estack
 8000f58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f64:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 8000f68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f6c:	200001e0 	.word	0x200001e0

08000f70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_COMP_IRQHandler>
	...

08000f74 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x3c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Init+0x3c>)
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f811 	bl	8000fb4 <HAL_InitTick>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e001      	b.n	8000fa2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f9e:	f7ff feaf 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x5c>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_InitTick+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	23fa      	movs	r3, #250	; 0xfa
 8000fc8:	0098      	lsls	r0, r3, #2
 8000fca:	f7ff f89d 	bl	8000108 <__udivsi3>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f7ff f898 	bl	8000108 <__udivsi3>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 f90b 	bl	80011f6 <HAL_SYSTICK_Config>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00f      	b.n	8001008 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d80b      	bhi.n	8001006 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 f8d8 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_InitTick+0x64>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20000050 	.word	0x20000050
 8001014:	20000058 	.word	0x20000058
 8001018:	20000054 	.word	0x20000054

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	18d2      	adds	r2, r2, r3
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_IncTick+0x20>)
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	20000058 	.word	0x20000058
 800103c:	200001dc 	.word	0x200001dc

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	200001dc 	.word	0x200001dc

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	0002      	movs	r2, r0
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b7f      	cmp	r3, #127	; 0x7f
 8001066:	d809      	bhi.n	800107c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	001a      	movs	r2, r3
 800106e:	231f      	movs	r3, #31
 8001070:	401a      	ands	r2, r3
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_EnableIRQ+0x30>)
 8001074:	2101      	movs	r1, #1
 8001076:	4091      	lsls	r1, r2
 8001078:	000a      	movs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
  }
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7f      	cmp	r3, #127	; 0x7f
 800109c:	d828      	bhi.n	80010f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	33c0      	adds	r3, #192	; 0xc0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	589b      	ldr	r3, [r3, r2]
 80010ae:	1dfa      	adds	r2, r7, #7
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	0011      	movs	r1, r2
 80010b4:	2203      	movs	r2, #3
 80010b6:	400a      	ands	r2, r1
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	21ff      	movs	r1, #255	; 0xff
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	43d2      	mvns	r2, r2
 80010c2:	401a      	ands	r2, r3
 80010c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	401a      	ands	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	0018      	movs	r0, r3
 80010d4:	2303      	movs	r3, #3
 80010d6:	4003      	ands	r3, r0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	33c0      	adds	r3, #192	; 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ee:	e031      	b.n	8001154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <__NVIC_SetPriority+0xd8>)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0019      	movs	r1, r3
 80010f8:	230f      	movs	r3, #15
 80010fa:	400b      	ands	r3, r1
 80010fc:	3b08      	subs	r3, #8
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <__NVIC_SetPriority+0xd8>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	001c      	movs	r4, r3
 8001140:	230f      	movs	r3, #15
 8001142:	4023      	ands	r3, r4
 8001144:	3b08      	subs	r3, #8
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	3306      	adds	r3, #6
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	18c3      	adds	r3, r0, r3
 8001150:	3304      	adds	r3, #4
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	045b      	lsls	r3, r3, #17
 8001174:	429a      	cmp	r2, r3
 8001176:	d301      	bcc.n	800117c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001178:	2301      	movs	r3, #1
 800117a:	e010      	b.n	800119e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SysTick_Config+0x44>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3a01      	subs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	2103      	movs	r1, #3
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff7c 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x44>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	0002      	movs	r2, r0
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ff33 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ffaf 	bl	8001164 <SysTick_Config>
 8001206:	0003      	movs	r3, r0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001226:	e149      	b.n	80014bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x30>
 800123e:	e13a      	b.n	80014b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2107      	movs	r1, #7
 800132e:	400b      	ands	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	401a      	ands	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x17c>
 800138a:	e094      	b.n	80014b6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 800138e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <HAL_GPIO_Init+0x2c8>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	589b      	ldr	r3, [r3, r2]
 80013a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	23a0      	movs	r3, #160	; 0xa0
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x1de>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a44      	ldr	r2, [pc, #272]	; (80014dc <HAL_GPIO_Init+0x2cc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x1da>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x1d6>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <HAL_GPIO_Init+0x2d4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x1d2>
 80013de:	2305      	movs	r3, #5
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013ee:	2300      	movs	r3, #0
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	2103      	movs	r1, #3
 80013f4:	400a      	ands	r2, r1
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x2c8>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	035b      	lsls	r3, r3, #13
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	4013      	ands	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	1e13      	subs	r3, r2, #0
 80014c6:	d000      	beq.n	80014ca <HAL_GPIO_Init+0x2ba>
 80014c8:	e6ae      	b.n	8001228 <HAL_GPIO_Init+0x18>
  }
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b006      	add	sp, #24
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	50000400 	.word	0x50000400
 80014e0:	50000800 	.word	0x50000800
 80014e4:	50001c00 	.word	0x50001c00
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	0008      	movs	r0, r1
 80014f6:	0011      	movs	r1, r2
 80014f8:	1cbb      	adds	r3, r7, #2
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	1c7b      	adds	r3, r7, #1
 8001500:	1c0a      	adds	r2, r1, #0
 8001502:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001504:	1c7b      	adds	r3, r7, #1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	1dba      	adds	r2, r7, #6
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	4013      	ands	r3, r2
 800153e:	d008      	beq.n	8001552 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001542:	1dba      	adds	r2, r7, #6
 8001544:	8812      	ldrh	r2, [r2, #0]
 8001546:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001548:	1dbb      	adds	r3, r7, #6
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fabb 	bl	8000ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e082      	b.n	8001678 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2241      	movs	r2, #65	; 0x41
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d107      	bne.n	800158e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	2100      	movs	r1, #0
 8001584:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fbcd 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2241      	movs	r2, #65	; 0x41
 8001592:	2124      	movs	r1, #36	; 0x24
 8001594:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	438a      	bics	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_I2C_Init+0x120>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4931      	ldr	r1, [pc, #196]	; (8001684 <HAL_I2C_Init+0x124>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0209      	lsls	r1, r1, #8
 80015d8:	430a      	orrs	r2, r1
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	e007      	b.n	80015ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2184      	movs	r1, #132	; 0x84
 80015e8:	0209      	lsls	r1, r1, #8
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d104      	bne.n	8001600 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	491f      	ldr	r1, [pc, #124]	; (8001688 <HAL_I2C_Init+0x128>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	491a      	ldr	r1, [pc, #104]	; (8001684 <HAL_I2C_Init+0x124>)
 800161c:	400a      	ands	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	431a      	orrs	r2, r3
 800162a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69d9      	ldr	r1, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2241      	movs	r2, #65	; 0x41
 8001664:	2120      	movs	r1, #32
 8001666:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2242      	movs	r2, #66	; 0x42
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}
 8001680:	f0ffffff 	.word	0xf0ffffff
 8001684:	ffff7fff 	.word	0xffff7fff
 8001688:	02008000 	.word	0x02008000

0800168c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	000c      	movs	r4, r1
 8001696:	0010      	movs	r0, r2
 8001698:	0019      	movs	r1, r3
 800169a:	230a      	movs	r3, #10
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	1c22      	adds	r2, r4, #0
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	2308      	movs	r3, #8
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	1c0a      	adds	r2, r1, #0
 80016ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2241      	movs	r2, #65	; 0x41
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d000      	beq.n	80016be <HAL_I2C_Mem_Write+0x32>
 80016bc:	e10c      	b.n	80018d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_I2C_Mem_Write+0x42>
 80016c4:	232c      	movs	r3, #44	; 0x2c
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0ff      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	5c9b      	ldrb	r3, [r3, r2]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_I2C_Mem_Write+0x5c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e0f8      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f0:	f7ff fca6 	bl	8001040 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	0219      	lsls	r1, r3, #8
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2319      	movs	r3, #25
 8001704:	2201      	movs	r2, #1
 8001706:	f000 fb0b 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0e3      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2241      	movs	r2, #65	; 0x41
 8001716:	2121      	movs	r1, #33	; 0x21
 8001718:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2242      	movs	r2, #66	; 0x42
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	222c      	movs	r2, #44	; 0x2c
 8001732:	18ba      	adds	r2, r7, r2
 8001734:	8812      	ldrh	r2, [r2, #0]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800173e:	1dbb      	adds	r3, r7, #6
 8001740:	881c      	ldrh	r4, [r3, #0]
 8001742:	2308      	movs	r3, #8
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	230a      	movs	r3, #10
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	8819      	ldrh	r1, [r3, #0]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	0023      	movs	r3, r4
 800175a:	f000 f9f9 	bl	8001b50 <I2C_RequestMemoryWrite>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d005      	beq.n	800176e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0b5      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2bff      	cmp	r3, #255	; 0xff
 8001776:	d911      	bls.n	800179c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	22ff      	movs	r2, #255	; 0xff
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	045c      	lsls	r4, r3, #17
 8001788:	230a      	movs	r3, #10
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	8819      	ldrh	r1, [r3, #0]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	0023      	movs	r3, r4
 8001796:	f000 fc9b 	bl	80020d0 <I2C_TransferConfig>
 800179a:	e012      	b.n	80017c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	049c      	lsls	r4, r3, #18
 80017b0:	230a      	movs	r3, #10
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	8819      	ldrh	r1, [r3, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	0023      	movs	r3, r4
 80017be:	f000 fc87 	bl	80020d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 faf7 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e081      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03a      	beq.n	8001886 <HAL_I2C_Mem_Write+0x1fa>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d136      	bne.n	8001886 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	0013      	movs	r3, r2
 8001822:	2200      	movs	r2, #0
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	f000 fa7b 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e053      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2bff      	cmp	r3, #255	; 0xff
 800183a:	d911      	bls.n	8001860 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	b2da      	uxtb	r2, r3
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	045c      	lsls	r4, r3, #17
 800184c:	230a      	movs	r3, #10
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	8819      	ldrh	r1, [r3, #0]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	0023      	movs	r3, r4
 800185a:	f000 fc39 	bl	80020d0 <I2C_TransferConfig>
 800185e:	e012      	b.n	8001886 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186e:	b2da      	uxtb	r2, r3
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049c      	lsls	r4, r3, #18
 8001874:	230a      	movs	r3, #10
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	2300      	movs	r3, #0
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	0023      	movs	r3, r4
 8001882:	f000 fc25 	bl	80020d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d198      	bne.n	80017c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fad6 	bl	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e01a      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2220      	movs	r2, #32
 80018aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	490b      	ldr	r1, [pc, #44]	; (80018e4 <HAL_I2C_Mem_Write+0x258>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2241      	movs	r2, #65	; 0x41
 80018c0:	2120      	movs	r1, #32
 80018c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2242      	movs	r2, #66	; 0x42
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	2100      	movs	r1, #0
 80018d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e000      	b.n	80018da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80018d8:	2302      	movs	r3, #2
  }
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b007      	add	sp, #28
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	fe00e800 	.word	0xfe00e800

080018e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	000c      	movs	r4, r1
 80018f2:	0010      	movs	r0, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	230a      	movs	r3, #10
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	1c22      	adds	r2, r4, #0
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	2308      	movs	r3, #8
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	1c02      	adds	r2, r0, #0
 8001904:	801a      	strh	r2, [r3, #0]
 8001906:	1dbb      	adds	r3, r7, #6
 8001908:	1c0a      	adds	r2, r1, #0
 800190a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2241      	movs	r2, #65	; 0x41
 8001910:	5c9b      	ldrb	r3, [r3, r2]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b20      	cmp	r3, #32
 8001916:	d000      	beq.n	800191a <HAL_I2C_Mem_Read+0x32>
 8001918:	e110      	b.n	8001b3c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_I2C_Mem_Read+0x42>
 8001920:	232c      	movs	r3, #44	; 0x2c
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e103      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_I2C_Mem_Read+0x5c>
 8001940:	2302      	movs	r3, #2
 8001942:	e0fc      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800194c:	f7ff fb78 	bl	8001040 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	0219      	lsls	r1, r3, #8
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2319      	movs	r3, #25
 8001960:	2201      	movs	r2, #1
 8001962:	f000 f9dd 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0e7      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2241      	movs	r2, #65	; 0x41
 8001972:	2122      	movs	r1, #34	; 0x22
 8001974:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2242      	movs	r2, #66	; 0x42
 800197a:	2140      	movs	r1, #64	; 0x40
 800197c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	222c      	movs	r2, #44	; 0x2c
 800198e:	18ba      	adds	r2, r7, r2
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	881c      	ldrh	r4, [r3, #0]
 800199e:	2308      	movs	r3, #8
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	230a      	movs	r3, #10
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	8819      	ldrh	r1, [r3, #0]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	0023      	movs	r3, r4
 80019b6:	f000 f92f 	bl	8001c18 <I2C_RequestMemoryRead>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d005      	beq.n	80019ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2100      	movs	r1, #0
 80019c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0b9      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2bff      	cmp	r3, #255	; 0xff
 80019d2:	d911      	bls.n	80019f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	045c      	lsls	r4, r3, #17
 80019e4:	230a      	movs	r3, #10
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_I2C_Mem_Read+0x260>)
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	0023      	movs	r3, r4
 80019f2:	f000 fb6d 	bl	80020d0 <I2C_TransferConfig>
 80019f6:	e012      	b.n	8001a1e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	049c      	lsls	r4, r3, #18
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	8819      	ldrh	r1, [r3, #0]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_I2C_Mem_Read+0x260>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	0023      	movs	r3, r4
 8001a1a:	f000 fb59 	bl	80020d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	0013      	movs	r3, r2
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	f000 f978 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e082      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03a      	beq.n	8001aea <HAL_I2C_Mem_Read+0x202>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d136      	bne.n	8001aea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	0013      	movs	r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	f000 f949 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e053      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2bff      	cmp	r3, #255	; 0xff
 8001a9e:	d911      	bls.n	8001ac4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	045c      	lsls	r4, r3, #17
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	8819      	ldrh	r1, [r3, #0]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0023      	movs	r3, r4
 8001abe:	f000 fb07 	bl	80020d0 <I2C_TransferConfig>
 8001ac2:	e012      	b.n	8001aea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	049c      	lsls	r4, r3, #18
 8001ad8:	230a      	movs	r3, #10
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	0023      	movs	r3, r4
 8001ae6:	f000 faf3 	bl	80020d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d194      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 f9a4 	bl	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e01a      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <HAL_I2C_Mem_Read+0x264>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2241      	movs	r2, #65	; 0x41
 8001b24:	2120      	movs	r1, #32
 8001b26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2242      	movs	r2, #66	; 0x42
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e000      	b.n	8001b3e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
  }
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b007      	add	sp, #28
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	80002400 	.word	0x80002400
 8001b4c:	fe00e800 	.word	0xfe00e800

08001b50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	000c      	movs	r4, r1
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	250a      	movs	r5, #10
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	1c22      	adds	r2, r4, #0
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	2308      	movs	r3, #8
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	1dbb      	adds	r3, r7, #6
 8001b70:	1c0a      	adds	r2, r1, #0
 8001b72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	045c      	lsls	r4, r3, #17
 8001b7e:	197b      	adds	r3, r7, r5
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <I2C_RequestMemoryWrite+0xc4>)
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 faa1 	bl	80020d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f911 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e033      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001baa:	2308      	movs	r3, #8
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bb8:	e019      	b.n	8001bee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	6a39      	ldr	r1, [r7, #32]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f8f2 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d001      	beq.n	8001be0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e014      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be0:	2308      	movs	r3, #8
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	f000 f890 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d001      	beq.n	8001c08 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	80002000 	.word	0x80002000

08001c18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	000c      	movs	r4, r1
 8001c22:	0010      	movs	r0, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	250a      	movs	r5, #10
 8001c28:	197b      	adds	r3, r7, r5
 8001c2a:	1c22      	adds	r2, r4, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	2308      	movs	r3, #8
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	1c0a      	adds	r2, r1, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c3c:	1dbb      	adds	r3, r7, #6
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	197b      	adds	r3, r7, r5
 8001c44:	8819      	ldrh	r1, [r3, #0]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <I2C_RequestMemoryRead+0xc0>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f000 fa3f 	bl	80020d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f8af 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e033      	b.n	8001cce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6e:	2308      	movs	r3, #8
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c7c:	e019      	b.n	8001cb2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7e:	2308      	movs	r3, #8
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	6a39      	ldr	r1, [r7, #32]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f890 	bl	8001dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d001      	beq.n	8001ca4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e014      	b.n	8001cce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb2:	6a3a      	ldr	r2, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	0013      	movs	r3, r2
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2140      	movs	r1, #64	; 0x40
 8001cc0:	f000 f82e 	bl	8001d20 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d001      	beq.n	8001ccc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	80002000 	.word	0x80002000

08001cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d103      	bne.n	8001cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	619a      	str	r2, [r3, #24]
  }
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d30:	e030      	b.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	d02d      	beq.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d38:	f7ff f982 	bl	8001040 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d302      	bcc.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d122      	bne.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	4013      	ands	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	425a      	negs	r2, r3
 8001d5e:	4153      	adcs	r3, r2
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	001a      	movs	r2, r3
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d113      	bne.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2220      	movs	r2, #32
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2241      	movs	r2, #65	; 0x41
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2242      	movs	r2, #66	; 0x42
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e00f      	b.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	425a      	negs	r2, r3
 8001da4:	4153      	adcs	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	001a      	movs	r2, r3
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d0bf      	beq.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc8:	e032      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f87d 	bl	8001ed0 <I2C_IsErrorOccurred>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e030      	b.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	d025      	beq.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff f92c 	bl	8001040 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11a      	bne.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d013      	beq.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2241      	movs	r2, #65	; 0x41
 8001e18:	2120      	movs	r1, #32
 8001e1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2242      	movs	r2, #66	; 0x42
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d1c5      	bne.n	8001dca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e54:	e02f      	b.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 f837 	bl	8001ed0 <I2C_IsErrorOccurred>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e02d      	b.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6a:	f7ff f8e9 	bl	8001040 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11a      	bne.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d013      	beq.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	2220      	movs	r2, #32
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2241      	movs	r2, #65	; 0x41
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2242      	movs	r2, #66	; 0x42
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e007      	b.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d1c8      	bne.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b08b      	sub	sp, #44	; 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2327      	movs	r3, #39	; 0x27
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d100      	bne.n	8001efe <I2C_IsErrorOccurred+0x2e>
 8001efc:	e082      	b.n	8002004 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f06:	e060      	b.n	8001fca <I2C_IsErrorOccurred+0xfa>
 8001f08:	2427      	movs	r4, #39	; 0x27
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	193a      	adds	r2, r7, r4
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	d058      	beq.n	8001fca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f18:	f7ff f892 	bl	8001040 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d306      	bcc.n	8001f36 <I2C_IsErrorOccurred+0x66>
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	193a      	adds	r2, r7, r4
 8001f2c:	7812      	ldrb	r2, [r2, #0]
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d149      	bne.n	8001fca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	01db      	lsls	r3, r3, #7
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f44:	2013      	movs	r0, #19
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	2142      	movs	r1, #66	; 0x42
 8001f4c:	5c52      	ldrb	r2, [r2, r1]
 8001f4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d126      	bne.n	8001fb2 <I2C_IsErrorOccurred+0xe2>
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	01db      	lsls	r3, r3, #7
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d021      	beq.n	8001fb2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d01d      	beq.n	8001fb2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	01c9      	lsls	r1, r1, #7
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f88:	f7ff f85a 	bl	8001040 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e00f      	b.n	8001fb2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f92:	f7ff f855 	bl	8001040 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b19      	cmp	r3, #25
 8001f9e:	d908      	bls.n	8001fb2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fa8:	2327      	movs	r3, #39	; 0x27
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]

              break;
 8001fb0:	e00b      	b.n	8001fca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2127      	movs	r1, #39	; 0x27
 8001fbe:	187a      	adds	r2, r7, r1
 8001fc0:	1879      	adds	r1, r7, r1
 8001fc2:	7809      	ldrb	r1, [r1, #0]
 8001fc4:	7011      	strb	r1, [r2, #0]
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d1e3      	bne.n	8001f92 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d004      	beq.n	8001fe2 <I2C_IsErrorOccurred+0x112>
 8001fd8:	2327      	movs	r3, #39	; 0x27
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d092      	beq.n	8001f08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fe2:	2327      	movs	r3, #39	; 0x27
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ffc:	2327      	movs	r3, #39	; 0x27
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d00c      	beq.n	8002030 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	2201      	movs	r2, #1
 800201a:	4313      	orrs	r3, r2
 800201c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	0052      	lsls	r2, r2, #1
 8002026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002028:	2327      	movs	r3, #39	; 0x27
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4013      	ands	r3, r2
 8002038:	d00c      	beq.n	8002054 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	2208      	movs	r2, #8
 800203e:	4313      	orrs	r3, r2
 8002040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	00d2      	lsls	r2, r2, #3
 800204a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800204c:	2327      	movs	r3, #39	; 0x27
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d00c      	beq.n	8002078 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2202      	movs	r2, #2
 8002062:	4313      	orrs	r3, r2
 8002064:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002070:	2327      	movs	r3, #39	; 0x27
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002078:	2327      	movs	r3, #39	; 0x27
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff fe29 	bl	8001cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	490d      	ldr	r1, [pc, #52]	; (80020cc <I2C_IsErrorOccurred+0x1fc>)
 8002096:	400a      	ands	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	2120      	movs	r1, #32
 80020ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2242      	movs	r2, #66	; 0x42
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020be:	2327      	movs	r3, #39	; 0x27
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	781b      	ldrb	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b00b      	add	sp, #44	; 0x2c
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	fe00e800 	.word	0xfe00e800

080020d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	0008      	movs	r0, r1
 80020da:	0011      	movs	r1, r2
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	240a      	movs	r4, #10
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	1c02      	adds	r2, r0, #0
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	2009      	movs	r0, #9
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	1c0a      	adds	r2, r1, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	059b      	lsls	r3, r3, #22
 80020f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020f6:	183b      	adds	r3, r7, r0
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	0419      	lsls	r1, r3, #16
 80020fc:	23ff      	movs	r3, #255	; 0xff
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002102:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	4313      	orrs	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211a:	0d51      	lsrs	r1, r2, #21
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	400a      	ands	r2, r1
 8002122:	4907      	ldr	r1, [pc, #28]	; (8002140 <I2C_TransferConfig+0x70>)
 8002124:	430a      	orrs	r2, r1
 8002126:	43d2      	mvns	r2, r2
 8002128:	401a      	ands	r2, r3
 800212a:	0011      	movs	r1, r2
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b007      	add	sp, #28
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	03ff63ff 	.word	0x03ff63ff

08002144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2241      	movs	r2, #65	; 0x41
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	d138      	bne.n	80021cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002164:	2302      	movs	r3, #2
 8002166:	e032      	b.n	80021ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2241      	movs	r2, #65	; 0x41
 8002174:	2124      	movs	r1, #36	; 0x24
 8002176:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4911      	ldr	r1, [pc, #68]	; (80021d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002194:	400a      	ands	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2101      	movs	r1, #1
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2241      	movs	r2, #65	; 0x41
 80021bc:	2120      	movs	r1, #32
 80021be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	ffffefff 	.word	0xffffefff

080021dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2241      	movs	r2, #65	; 0x41
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d139      	bne.n	8002266 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e033      	b.n	8002268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	2101      	movs	r1, #1
 8002206:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2241      	movs	r2, #65	; 0x41
 800220c:	2124      	movs	r1, #36	; 0x24
 800220e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	438a      	bics	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	2120      	movs	r1, #32
 8002258:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
  }
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b004      	add	sp, #16
 800226e:	bd80      	pop	{r7, pc}
 8002270:	fffff0ff 	.word	0xfffff0ff

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 fb6c 	bl	8002960 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002288:	4bc8      	ldr	r3, [pc, #800]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	220c      	movs	r2, #12
 800228e:	4013      	ands	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002292:	4bc6      	ldr	r3, [pc, #792]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x36>
 80022a8:	e07d      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d112      	bne.n	80022dc <HAL_RCC_OscConfig+0x68>
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	025b      	lsls	r3, r3, #9
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10d      	bne.n	80022dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4bba      	ldr	r3, [pc, #744]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	029b      	lsls	r3, r3, #10
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x5a>
 80022cc:	e06a      	b.n	80023a4 <HAL_RCC_OscConfig+0x130>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d166      	bne.n	80023a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f000 fb42 	bl	8002960 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x84>
 80022e8:	4bb0      	ldr	r3, [pc, #704]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4baf      	ldr	r3, [pc, #700]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0249      	lsls	r1, r1, #9
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e027      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	23a0      	movs	r3, #160	; 0xa0
 80022fe:	02db      	lsls	r3, r3, #11
 8002300:	429a      	cmp	r2, r3
 8002302:	d10e      	bne.n	8002322 <HAL_RCC_OscConfig+0xae>
 8002304:	4ba9      	ldr	r3, [pc, #676]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4ba8      	ldr	r3, [pc, #672]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	02c9      	lsls	r1, r1, #11
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4ba6      	ldr	r3, [pc, #664]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4ba5      	ldr	r3, [pc, #660]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0249      	lsls	r1, r1, #9
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e012      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 8002322:	4ba2      	ldr	r3, [pc, #648]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4ba1      	ldr	r3, [pc, #644]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002328:	49a1      	ldr	r1, [pc, #644]	; (80025b0 <HAL_RCC_OscConfig+0x33c>)
 800232a:	400a      	ands	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	4b9f      	ldr	r3, [pc, #636]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	025b      	lsls	r3, r3, #9
 8002336:	4013      	ands	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4b9b      	ldr	r3, [pc, #620]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b9a      	ldr	r3, [pc, #616]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002342:	499c      	ldr	r1, [pc, #624]	; (80025b4 <HAL_RCC_OscConfig+0x340>)
 8002344:	400a      	ands	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d014      	beq.n	800237a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fe76 	bl	8001040 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235a:	f7fe fe71 	bl	8001040 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e2f9      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236c:	4b8f      	ldr	r3, [pc, #572]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	4013      	ands	r3, r2
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe61 	bl	8001040 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fe5c 	bl	8001040 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e2e4      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	4013      	ands	r3, r2
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x110>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_RCC_OscConfig+0x13e>
 80023b0:	e099      	b.n	80024e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	2220      	movs	r2, #32
 80023bc:	4013      	ands	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80023c0:	4b7a      	ldr	r3, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80023c6:	2120      	movs	r1, #32
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	2220      	movs	r2, #32
 80023d0:	4393      	bics	r3, r2
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d13e      	bne.n	800245e <HAL_RCC_OscConfig+0x1ea>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d13b      	bne.n	800245e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023e6:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2204      	movs	r2, #4
 80023ec:	4013      	ands	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_RCC_OscConfig+0x186>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e2b2      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x344>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	021a      	lsls	r2, r3, #8
 800240a:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2209      	movs	r2, #9
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800241c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002422:	f000 fbeb 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002426:	0001      	movs	r1, r0
 8002428:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	220f      	movs	r2, #15
 8002430:	4013      	ands	r3, r2
 8002432:	4a62      	ldr	r2, [pc, #392]	; (80025bc <HAL_RCC_OscConfig+0x348>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	000a      	movs	r2, r1
 8002438:	40da      	lsrs	r2, r3
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x34c>)
 800243c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800243e:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x350>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2513      	movs	r5, #19
 8002444:	197c      	adds	r4, r7, r5
 8002446:	0018      	movs	r0, r3
 8002448:	f7fe fdb4 	bl	8000fb4 <HAL_InitTick>
 800244c:	0003      	movs	r3, r0
 800244e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002450:	197b      	adds	r3, r7, r5
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d046      	beq.n	80024e6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002458:	197b      	adds	r3, r7, r5
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	e280      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d027      	beq.n	80024b4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002464:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2209      	movs	r2, #9
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fde3 	bl	8001040 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe fdde 	bl	8001040 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e266      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002492:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
 800249a:	d0f1      	beq.n	8002480 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <HAL_RCC_OscConfig+0x344>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e018      	b.n	80024e6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fdbe 	bl	8001040 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ca:	f7fe fdb9 	bl	8001040 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e241      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2204      	movs	r2, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2210      	movs	r2, #16
 80024ec:	4013      	ands	r3, r2
 80024ee:	d100      	bne.n	80024f2 <HAL_RCC_OscConfig+0x27e>
 80024f0:	e0a1      	b.n	8002636 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d140      	bne.n	800257a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x29c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e227      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <HAL_RCC_OscConfig+0x354>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	0a19      	lsrs	r1, r3, #8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	061a      	lsls	r2, r3, #24
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	0b5b      	lsrs	r3, r3, #13
 800253e:	3301      	adds	r3, #1
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0212      	lsls	r2, r2, #8
 8002544:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	210f      	movs	r1, #15
 800254e:	400b      	ands	r3, r1
 8002550:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x348>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x34c>)
 8002558:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x350>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2513      	movs	r5, #19
 8002560:	197c      	adds	r4, r7, r5
 8002562:	0018      	movs	r0, r3
 8002564:	f7fe fd26 	bl	8000fb4 <HAL_InitTick>
 8002568:	0003      	movs	r3, r0
 800256a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800256c:	197b      	adds	r3, r7, r5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d060      	beq.n	8002636 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002574:	197b      	adds	r3, r7, r5
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	e1f2      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03f      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0049      	lsls	r1, r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fd56 	bl	8001040 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259a:	f7fe fd51 	bl	8001040 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d911      	bls.n	80025cc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1d9      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	fffeffff 	.word	0xfffeffff
 80025b4:	fffbffff 	.word	0xfffbffff
 80025b8:	ffffe0ff 	.word	0xffffe0ff
 80025bc:	08004188 	.word	0x08004188
 80025c0:	20000050 	.word	0x20000050
 80025c4:	20000054 	.word	0x20000054
 80025c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025cc:	4bc9      	ldr	r3, [pc, #804]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d0e0      	beq.n	800259a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4bc6      	ldr	r3, [pc, #792]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4ac6      	ldr	r2, [pc, #792]	; (80028f8 <HAL_RCC_OscConfig+0x684>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	4bc3      	ldr	r3, [pc, #780]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ec:	4bc1      	ldr	r3, [pc, #772]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	0a19      	lsrs	r1, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	061a      	lsls	r2, r3, #24
 80025fa:	4bbe      	ldr	r3, [pc, #760]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	e019      	b.n	8002636 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002602:	4bbc      	ldr	r3, [pc, #752]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4bbb      	ldr	r3, [pc, #748]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002608:	49bc      	ldr	r1, [pc, #752]	; (80028fc <HAL_RCC_OscConfig+0x688>)
 800260a:	400a      	ands	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fd17 	bl	8001040 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002618:	f7fe fd12 	bl	8001040 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e19a      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800262a:	4bb2      	ldr	r3, [pc, #712]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2208      	movs	r2, #8
 800263c:	4013      	ands	r3, r2
 800263e:	d036      	beq.n	80026ae <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d019      	beq.n	800267c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4baa      	ldr	r3, [pc, #680]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800264a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264c:	4ba9      	ldr	r3, [pc, #676]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe fcf4 	bl	8001040 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fcef 	bl	8001040 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e177      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002670:	4ba0      	ldr	r3, [pc, #640]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d0f1      	beq.n	800265e <HAL_RCC_OscConfig+0x3ea>
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b9d      	ldr	r3, [pc, #628]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002680:	4b9c      	ldr	r3, [pc, #624]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7fe fcda 	bl	8001040 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe fcd5 	bl	8001040 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e15d      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026a4:	4b93      	ldr	r3, [pc, #588]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d1f1      	bne.n	8002692 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_RCC_OscConfig+0x446>
 80026b8:	e0ae      	b.n	8002818 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2023      	movs	r0, #35	; 0x23
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	055b      	lsls	r3, r3, #21
 80026ca:	4013      	ands	r3, r2
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80026d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d2:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0549      	lsls	r1, r1, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b87      	ldr	r3, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x68c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x68c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x68c>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0049      	lsls	r1, r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fca0 	bl	8001040 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7fe fc9b 	bl	8001040 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e123      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b79      	ldr	r3, [pc, #484]	; (8002900 <HAL_RCC_OscConfig+0x68c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x4cc>
 8002730:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0049      	lsls	r1, r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
 800273e:	e031      	b.n	80027a4 <HAL_RCC_OscConfig+0x530>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x4ee>
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800274a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800274e:	496b      	ldr	r1, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x688>)
 8002750:	400a      	ands	r2, r1
 8002752:	651a      	str	r2, [r3, #80]	; 0x50
 8002754:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002758:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800275a:	496a      	ldr	r1, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x690>)
 800275c:	400a      	ands	r2, r1
 800275e:	651a      	str	r2, [r3, #80]	; 0x50
 8002760:	e020      	b.n	80027a4 <HAL_RCC_OscConfig+0x530>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	23a0      	movs	r3, #160	; 0xa0
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	429a      	cmp	r2, r3
 800276c:	d10e      	bne.n	800278c <HAL_RCC_OscConfig+0x518>
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002772:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	00c9      	lsls	r1, r1, #3
 8002778:	430a      	orrs	r2, r1
 800277a:	651a      	str	r2, [r3, #80]	; 0x50
 800277c:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800277e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002780:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	0049      	lsls	r1, r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	651a      	str	r2, [r3, #80]	; 0x50
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x530>
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800278e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002792:	495a      	ldr	r1, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x688>)
 8002794:	400a      	ands	r2, r1
 8002796:	651a      	str	r2, [r3, #80]	; 0x50
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279c:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800279e:	4959      	ldr	r1, [pc, #356]	; (8002904 <HAL_RCC_OscConfig+0x690>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe fc48 	bl	8001040 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fc43 	bl	8001040 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x694>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0ca      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80027cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d0ef      	beq.n	80027b6 <HAL_RCC_OscConfig+0x542>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fc32 	bl	8001040 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fc2d 	bl	8001040 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4a46      	ldr	r2, [pc, #280]	; (8002908 <HAL_RCC_OscConfig+0x694>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b4      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80027f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d1ef      	bne.n	80027e2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002802:	2323      	movs	r3, #35	; 0x23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800280e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002812:	493e      	ldr	r1, [pc, #248]	; (800290c <HAL_RCC_OscConfig+0x698>)
 8002814:	400a      	ands	r2, r1
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d100      	bne.n	8002822 <HAL_RCC_OscConfig+0x5ae>
 8002820:	e09d      	b.n	800295e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d100      	bne.n	800282a <HAL_RCC_OscConfig+0x5b6>
 8002828:	e076      	b.n	8002918 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b02      	cmp	r3, #2
 8002830:	d145      	bne.n	80028be <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x69c>)
 800283a:	400a      	ands	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fbff 	bl	8001040 <HAL_GetTick>
 8002842:	0003      	movs	r3, r0
 8002844:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fbfa 	bl	8001040 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e082      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	049b      	lsls	r3, r3, #18
 8002862:	4013      	ands	r3, r2
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x6a0>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	431a      	orrs	r2, r3
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0449      	lsls	r1, r1, #17
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fbd4 	bl	8001040 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fbcf 	bl	8001040 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e057      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	049b      	lsls	r3, r3, #18
 80028b8:	4013      	ands	r3, r2
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x62a>
 80028bc:	e04f      	b.n	800295e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80028c4:	4912      	ldr	r1, [pc, #72]	; (8002910 <HAL_RCC_OscConfig+0x69c>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fbb9 	bl	8001040 <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fbb4 	bl	8001040 <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e03c      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028e6:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCC_OscConfig+0x680>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	049b      	lsls	r3, r3, #18
 80028ee:	4013      	ands	r3, r2
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x660>
 80028f2:	e034      	b.n	800295e <HAL_RCC_OscConfig+0x6ea>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	ffff1fff 	.word	0xffff1fff
 80028fc:	fffffeff 	.word	0xfffffeff
 8002900:	40007000 	.word	0x40007000
 8002904:	fffffbff 	.word	0xfffffbff
 8002908:	00001388 	.word	0x00001388
 800290c:	efffffff 	.word	0xefffffff
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01d      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x6f4>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	429a      	cmp	r2, r3
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	23f0      	movs	r3, #240	; 0xf0
 800293e:	039b      	lsls	r3, r3, #14
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d107      	bne.n	800295a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	23c0      	movs	r3, #192	; 0xc0
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	401a      	ands	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b00a      	add	sp, #40	; 0x28
 8002966:	bdb0      	pop	{r4, r5, r7, pc}
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e128      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b96      	ldr	r3, [pc, #600]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	4013      	ands	r3, r2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d91e      	bls.n	80029cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b93      	ldr	r3, [pc, #588]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4393      	bics	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	4b90      	ldr	r3, [pc, #576]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fb4e 	bl	8001040 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	e009      	b.n	80029be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fe fb49 	bl	8001040 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4a8a      	ldr	r2, [pc, #552]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e109      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b87      	ldr	r3, [pc, #540]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	22f0      	movs	r2, #240	; 0xf0
 80029dc:	4393      	bics	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 80029e6:	430a      	orrs	r2, r1
 80029e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d100      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x8a>
 80029f4:	e089      	b.n	8002b0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029fe:	4b79      	ldr	r3, [pc, #484]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	029b      	lsls	r3, r3, #10
 8002a06:	4013      	ands	r3, r2
 8002a08:	d120      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0e1      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	049b      	lsls	r3, r3, #18
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d114      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0d5      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2204      	movs	r2, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d109      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0ca      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a3c:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0c2      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2203      	movs	r2, #3
 8002a52:	4393      	bics	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe faee 	bl	8001040 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a72:	f7fe fae5 	bl	8001040 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0a5      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d1ef      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x106>
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7fe facf 	bl	8001040 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e08f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d1ef      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x132>
 8002abe:	e024      	b.n	8002b0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11b      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aca:	f7fe fab9 	bl	8001040 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e079      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_ClockConfig+0x15e>
 8002aea:	e00e      	b.n	8002b0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe faa8 	bl	8001040 <HAL_GetTick>
 8002af0:	0002      	movs	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e068      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	220c      	movs	r2, #12
 8002b06:	4013      	ands	r3, r2
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4013      	ands	r3, r2
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d21e      	bcs.n	8002b56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b2a:	f7fe fa89 	bl	8001040 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	e009      	b.n	8002b48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fa84 	bl	8001040 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e044      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x27c>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_RCC_ClockConfig+0x280>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00da      	lsls	r2, r3, #3
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b94:	f000 f832 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002b98:	0001      	movs	r1, r0
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x278>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x284>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	000a      	movs	r2, r1
 8002baa:	40da      	lsrs	r2, r3
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCC_ClockConfig+0x288>)
 8002bae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x28c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	250b      	movs	r5, #11
 8002bb6:	197c      	adds	r4, r7, r5
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fe f9fb 	bl	8000fb4 <HAL_InitTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002bc2:	197b      	adds	r3, r7, r5
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002bca:	197b      	adds	r3, r7, r5
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	00001388 	.word	0x00001388
 8002be4:	40021000 	.word	0x40021000
 8002be8:	fffff8ff 	.word	0xfffff8ff
 8002bec:	ffffc7ff 	.word	0xffffc7ff
 8002bf0:	08004188 	.word	0x08004188
 8002bf4:	20000050 	.word	0x20000050
 8002bf8:	20000054 	.word	0x20000054

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d014      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x40>
 8002c12:	d900      	bls.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1a>
 8002c14:	e07b      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x112>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x24>
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d00b      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e076      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2210      	movs	r2, #16
 8002c26:	4013      	ands	r3, r2
 8002c28:	d002      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c2e:	e07c      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x140>)
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c34:	e079      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c36:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x144>)
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c3a:	e076      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	0c9a      	lsrs	r2, r3, #18
 8002c40:	230f      	movs	r3, #15
 8002c42:	401a      	ands	r2, r3
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x148>)
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	0d9a      	lsrs	r2, r3, #22
 8002c4e:	2303      	movs	r3, #3
 8002c50:	4013      	ands	r3, r2
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d01a      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	4a35      	ldr	r2, [pc, #212]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x144>)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	69b8      	ldr	r0, [r7, #24]
 8002c70:	69f9      	ldr	r1, [r7, #28]
 8002c72:	f7fd faf5 	bl	8000260 <__aeabi_lmul>
 8002c76:	0002      	movs	r2, r0
 8002c78:	000b      	movs	r3, r1
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f7fd fac9 	bl	8000220 <__aeabi_uldivmod>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	000b      	movs	r3, r1
 8002c92:	0013      	movs	r3, r2
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
 8002c96:	e037      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cac:	2300      	movs	r3, #0
 8002cae:	68b8      	ldr	r0, [r7, #8]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	f7fd fad5 	bl	8000260 <__aeabi_lmul>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	000b      	movs	r3, r1
 8002cba:	0010      	movs	r0, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f7fd faa9 	bl	8000220 <__aeabi_uldivmod>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	000b      	movs	r3, r1
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	e017      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	0018      	movs	r0, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	0019      	movs	r1, r3
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x140>)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f7fd fabc 	bl	8000260 <__aeabi_lmul>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	000b      	movs	r3, r1
 8002cec:	0010      	movs	r0, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	001c      	movs	r4, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	001d      	movs	r5, r3
 8002cf8:	0022      	movs	r2, r4
 8002cfa:	002b      	movs	r3, r5
 8002cfc:	f7fd fa90 	bl	8000220 <__aeabi_uldivmod>
 8002d00:	0002      	movs	r2, r0
 8002d02:	000b      	movs	r3, r1
 8002d04:	0013      	movs	r3, r2
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d0c:	e00d      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	2207      	movs	r2, #7
 8002d16:	4013      	ands	r3, r2
 8002d18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	0212      	lsls	r2, r2, #8
 8002d22:	409a      	lsls	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00e      	add	sp, #56	; 0x38
 8002d32:	bdb0      	pop	{r4, r5, r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	003d0900 	.word	0x003d0900
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200
 8002d44:	080041a0 	.word	0x080041a0

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	20000050 	.word	0x20000050

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d60:	f7ff fff2 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d64:	0001      	movs	r1, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	4013      	ands	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	000b      	movs	r3, r1
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004198 	.word	0x08004198

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	0001      	movs	r1, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	40d9      	lsrs	r1, r3
 8002da2:	000b      	movs	r3, r1
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08004198 	.word	0x08004198

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002dbc:	2017      	movs	r0, #23
 8002dbe:	183b      	adds	r3, r7, r0
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d100      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002dce:	e0c7      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd0:	4b84      	ldr	r3, [pc, #528]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d109      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de0:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	0549      	lsls	r1, r1, #21
 8002de6:	430a      	orrs	r2, r1
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d11a      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfc:	4b7a      	ldr	r3, [pc, #488]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	0049      	lsls	r1, r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f919 	bl	8001040 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe f914 	bl	8001040 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0d9      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e32:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	23c0      	movs	r3, #192	; 0xc0
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	23c0      	movs	r3, #192	; 0xc0
 8002e44:	039b      	lsls	r3, r3, #14
 8002e46:	4013      	ands	r3, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d013      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	401a      	ands	r2, r3
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10a      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e60:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	029b      	lsls	r3, r3, #10
 8002e68:	401a      	ands	r2, r3
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	029b      	lsls	r3, r3, #10
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0b1      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e7a:	23c0      	movs	r3, #192	; 0xc0
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	23c0      	movs	r3, #192	; 0xc0
 8002e8e:	029b      	lsls	r3, r3, #10
 8002e90:	4013      	ands	r3, r2
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d033      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d02e      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	4a51      	ldr	r2, [pc, #324]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eac:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	0309      	lsls	r1, r1, #12
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ebe:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ec0:	494b      	ldr	r1, [pc, #300]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d014      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f8b3 	bl	8001040 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ede:	e009      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f8ae 	bl	8001040 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	4a42      	ldr	r2, [pc, #264]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e072      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4013      	ands	r3, r2
 8002efe:	d0ef      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2220      	movs	r2, #32
 8002f06:	4013      	ands	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	401a      	ands	r2, r3
 8002f14:	23c0      	movs	r3, #192	; 0xc0
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a35      	ldr	r2, [pc, #212]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	039b      	lsls	r3, r3, #14
 8002f2e:	401a      	ands	r2, r3
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	23c0      	movs	r3, #192	; 0xc0
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	401a      	ands	r2, r3
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f58:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f5a:	4928      	ldr	r1, [pc, #160]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	220c      	movs	r2, #12
 8002f70:	4393      	bics	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2204      	movs	r2, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	fffcffff 	.word	0xfffcffff
 8002ff0:	fff7ffff 	.word	0xfff7ffff
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	ffcfffff 	.word	0xffcfffff
 8002ffc:	efffffff 	.word	0xefffffff
 8003000:	fffff3ff 	.word	0xfffff3ff
 8003004:	ffffcfff 	.word	0xffffcfff
 8003008:	fff3ffff 	.word	0xfff3ffff

0800300c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e032      	b.n	8003084 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2239      	movs	r2, #57	; 0x39
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2238      	movs	r2, #56	; 0x38
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd feff 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2239      	movs	r2, #57	; 0x39
 800303e:	2102      	movs	r1, #2
 8003040:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	0019      	movs	r1, r3
 800304c:	0010      	movs	r0, r2
 800304e:	f000 fa45 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223e      	movs	r2, #62	; 0x3e
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223a      	movs	r2, #58	; 0x3a
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223b      	movs	r2, #59	; 0x3b
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223c      	movs	r2, #60	; 0x3c
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223d      	movs	r2, #61	; 0x3d
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2239      	movs	r2, #57	; 0x39
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2239      	movs	r2, #57	; 0x39
 8003098:	5c9b      	ldrb	r3, [r3, r2]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e036      	b.n	8003112 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2239      	movs	r2, #57	; 0x39
 80030a8:	2102      	movs	r1, #2
 80030aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d009      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x50>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_TIM_Base_Start_IT+0x90>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x50>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <HAL_TIM_Base_Start_IT+0x94>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d010      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	e007      	b.n	8003110 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	40010800 	.word	0x40010800
 8003120:	40011400 	.word	0x40011400

08003124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d124      	bne.n	8003184 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d11d      	bne.n	8003184 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2203      	movs	r2, #3
 800314e:	4252      	negs	r2, r2
 8003150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f9a0 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800316c:	e007      	b.n	800317e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 f993 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f99f 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	2b04      	cmp	r3, #4
 8003190:	d125      	bne.n	80031de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2204      	movs	r2, #4
 800319a:	4013      	ands	r3, r2
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11e      	bne.n	80031de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2205      	movs	r2, #5
 80031a6:	4252      	negs	r2, r2
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	23c0      	movs	r3, #192	; 0xc0
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4013      	ands	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f973 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 80031c6:	e007      	b.n	80031d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f966 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f972 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d124      	bne.n	8003236 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2208      	movs	r2, #8
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11d      	bne.n	8003236 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2209      	movs	r2, #9
 8003200:	4252      	negs	r2, r2
 8003202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2204      	movs	r2, #4
 8003208:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	2203      	movs	r2, #3
 8003212:	4013      	ands	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f947 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800321e:	e007      	b.n	8003230 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f93a 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0018      	movs	r0, r3
 800322c:	f000 f946 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2210      	movs	r2, #16
 800323e:	4013      	ands	r3, r2
 8003240:	2b10      	cmp	r3, #16
 8003242:	d125      	bne.n	8003290 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2210      	movs	r2, #16
 800324c:	4013      	ands	r3, r2
 800324e:	2b10      	cmp	r3, #16
 8003250:	d11e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2211      	movs	r2, #17
 8003258:	4252      	negs	r2, r2
 800325a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2208      	movs	r2, #8
 8003260:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	23c0      	movs	r3, #192	; 0xc0
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4013      	ands	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 f91a 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 8003278:	e007      	b.n	800328a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f90d 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 f919 	bl	80034bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10f      	bne.n	80032be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2202      	movs	r2, #2
 80032b2:	4252      	negs	r2, r2
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7fd fc37 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d10f      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d108      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2241      	movs	r2, #65	; 0x41
 80032e0:	4252      	negs	r2, r2
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 f8f0 	bl	80034cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	230f      	movs	r3, #15
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2238      	movs	r2, #56	; 0x38
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x20>
 8003310:	2302      	movs	r3, #2
 8003312:	e0bc      	b.n	800348e <HAL_TIM_ConfigClockSource+0x19a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2238      	movs	r2, #56	; 0x38
 8003318:	2101      	movs	r1, #1
 800331a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2239      	movs	r2, #57	; 0x39
 8003320:	2102      	movs	r1, #2
 8003322:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2277      	movs	r2, #119	; 0x77
 8003330:	4393      	bics	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	0192      	lsls	r2, r2, #6
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xde>
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	0192      	lsls	r2, r2, #6
 8003354:	4293      	cmp	r3, r2
 8003356:	d900      	bls.n	800335a <HAL_TIM_ConfigClockSource+0x66>
 8003358:	e088      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0152      	lsls	r2, r2, #5
 800335e:	4293      	cmp	r3, r2
 8003360:	d100      	bne.n	8003364 <HAL_TIM_ConfigClockSource+0x70>
 8003362:	e088      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x182>
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0152      	lsls	r2, r2, #5
 8003368:	4293      	cmp	r3, r2
 800336a:	d900      	bls.n	800336e <HAL_TIM_ConfigClockSource+0x7a>
 800336c:	e07e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 800336e:	2b70      	cmp	r3, #112	; 0x70
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0xb0>
 8003372:	d900      	bls.n	8003376 <HAL_TIM_ConfigClockSource+0x82>
 8003374:	e07a      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 8003376:	2b60      	cmp	r3, #96	; 0x60
 8003378:	d04f      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x126>
 800337a:	d900      	bls.n	800337e <HAL_TIM_ConfigClockSource+0x8a>
 800337c:	e076      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 800337e:	2b50      	cmp	r3, #80	; 0x50
 8003380:	d03b      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x106>
 8003382:	d900      	bls.n	8003386 <HAL_TIM_ConfigClockSource+0x92>
 8003384:	e072      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d057      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x146>
 800338a:	d900      	bls.n	800338e <HAL_TIM_ConfigClockSource+0x9a>
 800338c:	e06e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 800338e:	2b30      	cmp	r3, #48	; 0x30
 8003390:	d063      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x166>
 8003392:	d86b      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d060      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x166>
 8003398:	d868      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x178>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d05d      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x166>
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d05b      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x166>
 80033a2:	e063      	b.n	800346c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033b4:	f000 f960 	bl	8003678 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2277      	movs	r2, #119	; 0x77
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
      break;
 80033d0:	e052      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e2:	f000 f949 	bl	8003678 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	01c9      	lsls	r1, r1, #7
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e03e      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	001a      	movs	r2, r3
 8003408:	f000 f8bc 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2150      	movs	r1, #80	; 0x50
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f916 	bl	8003644 <TIM_ITRx_SetConfig>
      break;
 8003418:	e02e      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003426:	001a      	movs	r2, r3
 8003428:	f000 f8da 	bl	80035e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2160      	movs	r1, #96	; 0x60
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f906 	bl	8003644 <TIM_ITRx_SetConfig>
      break;
 8003438:	e01e      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	001a      	movs	r2, r3
 8003448:	f000 f89c 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f8f6 	bl	8003644 <TIM_ITRx_SetConfig>
      break;
 8003458:	e00e      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f000 f8ed 	bl	8003644 <TIM_ITRx_SetConfig>
      break;
 800346a:	e005      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800346c:	230f      	movs	r3, #15
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
      break;
 8003474:	e000      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003476:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2239      	movs	r2, #57	; 0x39
 800347c:	2101      	movs	r1, #1
 800347e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2238      	movs	r2, #56	; 0x38
 8003484:	2100      	movs	r1, #0
 8003486:	5499      	strb	r1, [r3, r2]

  return status;
 8003488:	230f      	movs	r3, #15
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	781b      	ldrb	r3, [r3, #0]
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	ffff00ff 	.word	0xffff00ff

0800349c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0x2a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <TIM_Base_SetConfig+0x9c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x2a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <TIM_Base_SetConfig+0xa0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d108      	bne.n	8003518 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2270      	movs	r2, #112	; 0x70
 800350a:	4393      	bics	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	429a      	cmp	r2, r3
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0x56>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <TIM_Base_SetConfig+0x9c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x56>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <TIM_Base_SetConfig+0xa0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <TIM_Base_SetConfig+0xa4>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	4393      	bics	r3, r2
 800354a:	001a      	movs	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	615a      	str	r2, [r3, #20]
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	b004      	add	sp, #16
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40010800 	.word	0x40010800
 800357c:	40011400 	.word	0x40011400
 8003580:	fffffcff 	.word	0xfffffcff

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	2201      	movs	r2, #1
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	22f0      	movs	r2, #240	; 0xf0
 80035ae:	4393      	bics	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	220a      	movs	r2, #10
 80035c0:	4393      	bics	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}

080035e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	2210      	movs	r2, #16
 80035f2:	4393      	bics	r3, r2
 80035f4:	001a      	movs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <TIM_TI2_ConfigInputStage+0x60>)
 800360a:	4013      	ands	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	22a0      	movs	r2, #160	; 0xa0
 800361c:	4393      	bics	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	ffff0fff 	.word	0xffff0fff

08003644 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2270      	movs	r2, #112	; 0x70
 8003658:	4393      	bics	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	2207      	movs	r2, #7
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <TIM_ETR_SetConfig+0x3c>)
 8003690:	4013      	ands	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	431a      	orrs	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b006      	add	sp, #24
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	ffff00ff 	.word	0xffff00ff

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2238      	movs	r2, #56	; 0x38
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e042      	b.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2238      	movs	r2, #56	; 0x38
 80036d4:	2101      	movs	r1, #1
 80036d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2239      	movs	r2, #57	; 0x39
 80036dc:	2102      	movs	r1, #2
 80036de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2270      	movs	r2, #112	; 0x70
 80036f4:	4393      	bics	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	05db      	lsls	r3, r3, #23
 8003712:	429a      	cmp	r2, r3
 8003714:	d009      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0f      	ldr	r2, [pc, #60]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10c      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	4393      	bics	r3, r2
 8003730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2239      	movs	r2, #57	; 0x39
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2238      	movs	r2, #56	; 0x38
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40010800 	.word	0x40010800
 8003764:	40011400 	.word	0x40011400

08003768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e044      	b.n	8003804 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2278      	movs	r2, #120	; 0x78
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7fd fb0f 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2101      	movs	r1, #1
 80037a4:	438a      	bics	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f830 	bl	8003810 <UART_SetConfig>
 80037b0:	0003      	movs	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e024      	b.n	8003804 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fa6d 	bl	8003ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	490d      	ldr	r1, [pc, #52]	; (800380c <HAL_UART_Init+0xa4>)
 80037d6:	400a      	ands	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	212a      	movs	r1, #42	; 0x2a
 80037e6:	438a      	bics	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fb05 	bl	8003e0c <UART_CheckIdleState>
 8003802:	0003      	movs	r3, r0
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}
 800380c:	ffffb7ff 	.word	0xffffb7ff

08003810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b08e      	sub	sp, #56	; 0x38
 8003814:	af00      	add	r7, sp, #0
 8003816:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003818:	231a      	movs	r3, #26
 800381a:	2218      	movs	r2, #24
 800381c:	189b      	adds	r3, r3, r2
 800381e:	19db      	adds	r3, r3, r7
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	431a      	orrs	r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	431a      	orrs	r2, r3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4313      	orrs	r3, r2
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4ab4      	ldr	r2, [pc, #720]	; (8003b14 <UART_SetConfig+0x304>)
 8003844:	4013      	ands	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4aaf      	ldr	r2, [pc, #700]	; (8003b18 <UART_SetConfig+0x308>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4aa9      	ldr	r2, [pc, #676]	; (8003b1c <UART_SetConfig+0x30c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003880:	4313      	orrs	r3, r2
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4aa5      	ldr	r2, [pc, #660]	; (8003b20 <UART_SetConfig+0x310>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4aa1      	ldr	r2, [pc, #644]	; (8003b24 <UART_SetConfig+0x314>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d131      	bne.n	8003908 <UART_SetConfig+0xf8>
 80038a4:	4ba0      	ldr	r3, [pc, #640]	; (8003b28 <UART_SetConfig+0x318>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	220c      	movs	r2, #12
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d01d      	beq.n	80038ec <UART_SetConfig+0xdc>
 80038b0:	d823      	bhi.n	80038fa <UART_SetConfig+0xea>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d00c      	beq.n	80038d0 <UART_SetConfig+0xc0>
 80038b6:	d820      	bhi.n	80038fa <UART_SetConfig+0xea>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <UART_SetConfig+0xb2>
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00e      	beq.n	80038de <UART_SetConfig+0xce>
 80038c0:	e01b      	b.n	80038fa <UART_SetConfig+0xea>
 80038c2:	231b      	movs	r3, #27
 80038c4:	2218      	movs	r2, #24
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	19db      	adds	r3, r3, r7
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e065      	b.n	800399c <UART_SetConfig+0x18c>
 80038d0:	231b      	movs	r3, #27
 80038d2:	2218      	movs	r2, #24
 80038d4:	189b      	adds	r3, r3, r2
 80038d6:	19db      	adds	r3, r3, r7
 80038d8:	2202      	movs	r2, #2
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e05e      	b.n	800399c <UART_SetConfig+0x18c>
 80038de:	231b      	movs	r3, #27
 80038e0:	2218      	movs	r2, #24
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	19db      	adds	r3, r3, r7
 80038e6:	2204      	movs	r2, #4
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e057      	b.n	800399c <UART_SetConfig+0x18c>
 80038ec:	231b      	movs	r3, #27
 80038ee:	2218      	movs	r2, #24
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	19db      	adds	r3, r3, r7
 80038f4:	2208      	movs	r2, #8
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e050      	b.n	800399c <UART_SetConfig+0x18c>
 80038fa:	231b      	movs	r3, #27
 80038fc:	2218      	movs	r2, #24
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	19db      	adds	r3, r3, r7
 8003902:	2210      	movs	r2, #16
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e049      	b.n	800399c <UART_SetConfig+0x18c>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a83      	ldr	r2, [pc, #524]	; (8003b1c <UART_SetConfig+0x30c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d13e      	bne.n	8003990 <UART_SetConfig+0x180>
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <UART_SetConfig+0x318>)
 8003914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003916:	23c0      	movs	r3, #192	; 0xc0
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4013      	ands	r3, r2
 800391c:	22c0      	movs	r2, #192	; 0xc0
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <UART_SetConfig+0x164>
 8003924:	22c0      	movs	r2, #192	; 0xc0
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	4293      	cmp	r3, r2
 800392a:	d82a      	bhi.n	8003982 <UART_SetConfig+0x172>
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	4293      	cmp	r3, r2
 8003932:	d011      	beq.n	8003958 <UART_SetConfig+0x148>
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	4293      	cmp	r3, r2
 800393a:	d822      	bhi.n	8003982 <UART_SetConfig+0x172>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <UART_SetConfig+0x13a>
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	00d2      	lsls	r2, r2, #3
 8003944:	4293      	cmp	r3, r2
 8003946:	d00e      	beq.n	8003966 <UART_SetConfig+0x156>
 8003948:	e01b      	b.n	8003982 <UART_SetConfig+0x172>
 800394a:	231b      	movs	r3, #27
 800394c:	2218      	movs	r2, #24
 800394e:	189b      	adds	r3, r3, r2
 8003950:	19db      	adds	r3, r3, r7
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e021      	b.n	800399c <UART_SetConfig+0x18c>
 8003958:	231b      	movs	r3, #27
 800395a:	2218      	movs	r2, #24
 800395c:	189b      	adds	r3, r3, r2
 800395e:	19db      	adds	r3, r3, r7
 8003960:	2202      	movs	r2, #2
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e01a      	b.n	800399c <UART_SetConfig+0x18c>
 8003966:	231b      	movs	r3, #27
 8003968:	2218      	movs	r2, #24
 800396a:	189b      	adds	r3, r3, r2
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2204      	movs	r2, #4
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e013      	b.n	800399c <UART_SetConfig+0x18c>
 8003974:	231b      	movs	r3, #27
 8003976:	2218      	movs	r2, #24
 8003978:	189b      	adds	r3, r3, r2
 800397a:	19db      	adds	r3, r3, r7
 800397c:	2208      	movs	r2, #8
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e00c      	b.n	800399c <UART_SetConfig+0x18c>
 8003982:	231b      	movs	r3, #27
 8003984:	2218      	movs	r2, #24
 8003986:	189b      	adds	r3, r3, r2
 8003988:	19db      	adds	r3, r3, r7
 800398a:	2210      	movs	r2, #16
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e005      	b.n	800399c <UART_SetConfig+0x18c>
 8003990:	231b      	movs	r3, #27
 8003992:	2218      	movs	r2, #24
 8003994:	189b      	adds	r3, r3, r2
 8003996:	19db      	adds	r3, r3, r7
 8003998:	2210      	movs	r2, #16
 800399a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5e      	ldr	r2, [pc, #376]	; (8003b1c <UART_SetConfig+0x30c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d000      	beq.n	80039a8 <UART_SetConfig+0x198>
 80039a6:	e084      	b.n	8003ab2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039a8:	231b      	movs	r3, #27
 80039aa:	2218      	movs	r2, #24
 80039ac:	189b      	adds	r3, r3, r2
 80039ae:	19db      	adds	r3, r3, r7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d01d      	beq.n	80039f2 <UART_SetConfig+0x1e2>
 80039b6:	dc20      	bgt.n	80039fa <UART_SetConfig+0x1ea>
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d015      	beq.n	80039e8 <UART_SetConfig+0x1d8>
 80039bc:	dc1d      	bgt.n	80039fa <UART_SetConfig+0x1ea>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <UART_SetConfig+0x1b8>
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d005      	beq.n	80039d2 <UART_SetConfig+0x1c2>
 80039c6:	e018      	b.n	80039fa <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7ff f9c8 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 80039cc:	0003      	movs	r3, r0
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039d0:	e01c      	b.n	8003a0c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <UART_SetConfig+0x318>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2210      	movs	r2, #16
 80039d8:	4013      	ands	r3, r2
 80039da:	d002      	beq.n	80039e2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <UART_SetConfig+0x31c>)
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039e0:	e014      	b.n	8003a0c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80039e2:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <UART_SetConfig+0x320>)
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039e6:	e011      	b.n	8003a0c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e8:	f7ff f908 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80039ec:	0003      	movs	r3, r0
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039f0:	e00c      	b.n	8003a0c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039f8:	e008      	b.n	8003a0c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80039fe:	231a      	movs	r3, #26
 8003a00:	2218      	movs	r2, #24
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	19db      	adds	r3, r3, r7
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
        break;
 8003a0a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d100      	bne.n	8003a14 <UART_SetConfig+0x204>
 8003a12:	e12f      	b.n	8003c74 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	0013      	movs	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d305      	bcc.n	8003a30 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d906      	bls.n	8003a3e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003a30:	231a      	movs	r3, #26
 8003a32:	2218      	movs	r2, #24
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e11a      	b.n	8003c74 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	000b      	movs	r3, r1
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	0010      	movs	r0, r2
 8003a50:	0205      	lsls	r5, r0, #8
 8003a52:	431d      	orrs	r5, r3
 8003a54:	000b      	movs	r3, r1
 8003a56:	021c      	lsls	r4, r3, #8
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	1900      	adds	r0, r0, r4
 8003a6a:	4169      	adcs	r1, r5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f7fc fbd1 	bl	8000220 <__aeabi_uldivmod>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	000b      	movs	r3, r1
 8003a82:	0013      	movs	r3, r2
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a88:	23c0      	movs	r3, #192	; 0xc0
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d309      	bcc.n	8003aa4 <UART_SetConfig+0x294>
 8003a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	035b      	lsls	r3, r3, #13
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d204      	bcs.n	8003aa4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	e0e7      	b.n	8003c74 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003aa4:	231a      	movs	r3, #26
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e0e0      	b.n	8003c74 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d000      	beq.n	8003ac0 <UART_SetConfig+0x2b0>
 8003abe:	e082      	b.n	8003bc6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003ac0:	231b      	movs	r3, #27
 8003ac2:	2218      	movs	r2, #24
 8003ac4:	189b      	adds	r3, r3, r2
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d834      	bhi.n	8003b38 <UART_SetConfig+0x328>
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <UART_SetConfig+0x324>)
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7ff f940 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003adc:	0003      	movs	r3, r0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ae0:	e033      	b.n	8003b4a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae2:	f7ff f951 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003aea:	e02e      	b.n	8003b4a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <UART_SetConfig+0x318>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2210      	movs	r2, #16
 8003af2:	4013      	ands	r3, r2
 8003af4:	d002      	beq.n	8003afc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <UART_SetConfig+0x31c>)
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003afa:	e026      	b.n	8003b4a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <UART_SetConfig+0x320>)
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b00:	e023      	b.n	8003b4a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7ff f87b 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8003b06:	0003      	movs	r3, r0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b0a:	e01e      	b.n	8003b4a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b12:	e01a      	b.n	8003b4a <UART_SetConfig+0x33a>
 8003b14:	efff69f3 	.word	0xefff69f3
 8003b18:	ffffcfff 	.word	0xffffcfff
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	fffff4ff 	.word	0xfffff4ff
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	003d0900 	.word	0x003d0900
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	080041ac 	.word	0x080041ac
      default:
        pclk = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b3c:	231a      	movs	r3, #26
 8003b3e:	2218      	movs	r2, #24
 8003b40:	189b      	adds	r3, r3, r2
 8003b42:	19db      	adds	r3, r3, r7
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
        break;
 8003b48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d100      	bne.n	8003b52 <UART_SetConfig+0x342>
 8003b50:	e090      	b.n	8003c74 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	18d2      	adds	r2, r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0019      	movs	r1, r3
 8003b64:	0010      	movs	r0, r2
 8003b66:	f7fc facf 	bl	8000108 <__udivsi3>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d921      	bls.n	8003bb8 <UART_SetConfig+0x3a8>
 8003b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d21c      	bcs.n	8003bb8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	200e      	movs	r0, #14
 8003b84:	2418      	movs	r4, #24
 8003b86:	1903      	adds	r3, r0, r4
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2207      	movs	r2, #7
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	1903      	adds	r3, r0, r4
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	1902      	adds	r2, r0, r4
 8003ba2:	19d2      	adds	r2, r2, r7
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	1902      	adds	r2, r0, r4
 8003bb0:	19d2      	adds	r2, r2, r7
 8003bb2:	8812      	ldrh	r2, [r2, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e05d      	b.n	8003c74 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb8:	231a      	movs	r3, #26
 8003bba:	2218      	movs	r2, #24
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e056      	b.n	8003c74 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc6:	231b      	movs	r3, #27
 8003bc8:	2218      	movs	r2, #24
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	19db      	adds	r3, r3, r7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d822      	bhi.n	8003c1a <UART_SetConfig+0x40a>
 8003bd4:	009a      	lsls	r2, r3, #2
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <UART_SetConfig+0x484>)
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7ff f8bd 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003be2:	0003      	movs	r3, r0
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003be6:	e021      	b.n	8003c2c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7ff f8ce 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003bec:	0003      	movs	r3, r0
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bf0:	e01c      	b.n	8003c2c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <UART_SetConfig+0x488>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d002      	beq.n	8003c02 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <UART_SetConfig+0x48c>)
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c00:	e014      	b.n	8003c2c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <UART_SetConfig+0x490>)
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c06:	e011      	b.n	8003c2c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c08:	f7fe fff8 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c10:	e00c      	b.n	8003c2c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c18:	e008      	b.n	8003c2c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c1e:	231a      	movs	r3, #26
 8003c20:	2218      	movs	r2, #24
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	19db      	adds	r3, r3, r7
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]
        break;
 8003c2a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085a      	lsrs	r2, r3, #1
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	18d2      	adds	r2, r2, r3
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0019      	movs	r1, r3
 8003c42:	0010      	movs	r0, r2
 8003c44:	f7fc fa60 	bl	8000108 <__udivsi3>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d90a      	bls.n	8003c68 <UART_SetConfig+0x458>
 8003c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	025b      	lsls	r3, r3, #9
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d205      	bcs.n	8003c68 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	e005      	b.n	8003c74 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003c68:	231a      	movs	r3, #26
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c80:	231a      	movs	r3, #26
 8003c82:	2218      	movs	r2, #24
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b00e      	add	sp, #56	; 0x38
 8003c90:	bdb0      	pop	{r4, r5, r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	080041d0 	.word	0x080041d0
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	003d0900 	.word	0x003d0900
 8003ca0:	00f42400 	.word	0x00f42400

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	; (8003de8 <UART_AdvFeatureConfig+0x144>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a43      	ldr	r2, [pc, #268]	; (8003dec <UART_AdvFeatureConfig+0x148>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <UART_AdvFeatureConfig+0x14c>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2208      	movs	r2, #8
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4a34      	ldr	r2, [pc, #208]	; (8003df4 <UART_AdvFeatureConfig+0x150>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	0019      	movs	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <UART_AdvFeatureConfig+0x154>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <UART_AdvFeatureConfig+0x158>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <UART_AdvFeatureConfig+0x15c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	035b      	lsls	r3, r3, #13
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10b      	bne.n	8003dbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <UART_AdvFeatureConfig+0x160>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <UART_AdvFeatureConfig+0x164>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	fffdffff 	.word	0xfffdffff
 8003dec:	fffeffff 	.word	0xfffeffff
 8003df0:	fffbffff 	.word	0xfffbffff
 8003df4:	ffff7fff 	.word	0xffff7fff
 8003df8:	ffffefff 	.word	0xffffefff
 8003dfc:	ffffdfff 	.word	0xffffdfff
 8003e00:	ffefffff 	.word	0xffefffff
 8003e04:	ff9fffff 	.word	0xff9fffff
 8003e08:	fff7ffff 	.word	0xfff7ffff

08003e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b092      	sub	sp, #72	; 0x48
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2284      	movs	r2, #132	; 0x84
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e1c:	f7fd f910 	bl	8001040 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d12c      	bne.n	8003e8c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	0391      	lsls	r1, r2, #14
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4a46      	ldr	r2, [pc, #280]	; (8003f54 <UART_CheckIdleState+0x148>)
 8003e3c:	9200      	str	r2, [sp, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f000 f88c 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d021      	beq.n	8003e8c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e52:	2301      	movs	r3, #1
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2278      	movs	r2, #120	; 0x78
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e05f      	b.n	8003f4c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2204      	movs	r2, #4
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d146      	bne.n	8003f28 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	03d1      	lsls	r1, r2, #15
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <UART_CheckIdleState+0x148>)
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f000 f858 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d03b      	beq.n	8003f28 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	2301      	movs	r3, #1
 8003ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f383 8810 	msr	PRIMASK, r3
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4921      	ldr	r1, [pc, #132]	; (8003f58 <UART_CheckIdleState+0x14c>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f383 8810 	msr	PRIMASK, r3
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
 8003eec:	2301      	movs	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f383 8810 	msr	PRIMASK, r3
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	438a      	bics	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2278      	movs	r2, #120	; 0x78
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e011      	b.n	8003f4c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	2120      	movs	r1, #32
 8003f34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2278      	movs	r2, #120	; 0x78
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b010      	add	sp, #64	; 0x40
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	01ffffff 	.word	0x01ffffff
 8003f58:	fffffedf 	.word	0xfffffedf

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e04b      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3301      	adds	r3, #1
 8003f72:	d048      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f74:	f7fd f864 	bl	8001040 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04b      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d035      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d111      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f83c 	bl	8004030 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2284      	movs	r2, #132	; 0x84
 8003fbc:	2108      	movs	r1, #8
 8003fbe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2278      	movs	r2, #120	; 0x78
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e02c      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d112      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 f81f 	bl	8004030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2284      	movs	r2, #132	; 0x84
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2278      	movs	r2, #120	; 0x78
 8003ffe:	2100      	movs	r1, #0
 8004000:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	425a      	negs	r2, r3
 8004016:	4153      	adcs	r3, r2
 8004018:	b2db      	uxtb	r3, r3
 800401a:	001a      	movs	r2, r3
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0a4      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	; 0x38
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	617b      	str	r3, [r7, #20]
  return(result);
 800403e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4926      	ldr	r1, [pc, #152]	; (80040f4 <UART_EndRxTransfer+0xc4>)
 800405a:	400a      	ands	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	623b      	str	r3, [r7, #32]
  return(result);
 8004070:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	438a      	bics	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d118      	bne.n	80040d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a4:	f3ef 8310 	mrs	r3, PRIMASK
 80040a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	2301      	movs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2110      	movs	r1, #16
 80040c6:	438a      	bics	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	2120      	movs	r1, #32
 80040dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b00e      	add	sp, #56	; 0x38
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	fffffedf 	.word	0xfffffedf

080040f8 <memset>:
 80040f8:	0003      	movs	r3, r0
 80040fa:	1882      	adds	r2, r0, r2
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d100      	bne.n	8004102 <memset+0xa>
 8004100:	4770      	bx	lr
 8004102:	7019      	strb	r1, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	e7f9      	b.n	80040fc <memset+0x4>

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2600      	movs	r6, #0
 800410c:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x38>)
 800410e:	4d0d      	ldr	r5, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	2600      	movs	r6, #0
 800411a:	f000 f819 	bl	8004150 <_init>
 800411e:	4c0a      	ldr	r4, [pc, #40]	; (8004148 <__libc_init_array+0x40>)
 8004120:	4d0a      	ldr	r5, [pc, #40]	; (800414c <__libc_init_array+0x44>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	00b3      	lsls	r3, r6, #2
 800412e:	58eb      	ldr	r3, [r5, r3]
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	00b3      	lsls	r3, r6, #2
 8004138:	58eb      	ldr	r3, [r5, r3]
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	080041fc 	.word	0x080041fc
 8004144:	080041fc 	.word	0x080041fc
 8004148:	08004200 	.word	0x08004200
 800414c:	080041fc 	.word	0x080041fc

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
