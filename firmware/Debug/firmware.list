
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cbc  08002cbc  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc4  08002cc4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002ccc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000004c  08002d18  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002d18  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f50  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175f  00000000  00000000  00027007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00028768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000056a  00000000  00000000  00028e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe89  00000000  00000000  000293fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b93  00000000  00000000  00039283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f162  00000000  00000000  00042e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a8  00000000  00000000  000a1f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a3820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000004c 	.word	0x2000004c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c84 	.word	0x08002c84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000050 	.word	0x20000050
 8000104:	08002c84 	.word	0x08002c84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80004b0:	250f      	movs	r5, #15
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_2G);
 80004b8:	197c      	adds	r4, r7, r5
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2240      	movs	r2, #64	; 0x40
 80004be:	2110      	movs	r1, #16
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f937 	bl	8000734 <accelerometer_write>
 80004c6:	0003      	movs	r3, r0
 80004c8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80004ca:	197b      	adds	r3, r7, r5
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d002      	beq.n	80004d8 <acc_init+0x30>
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	e01c      	b.n	8000512 <acc_init+0x6a>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80004d8:	250f      	movs	r5, #15
 80004da:	197c      	adds	r4, r7, r5
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	2111      	movs	r1, #17
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f926 	bl	8000734 <accelerometer_write>
 80004e8:	0003      	movs	r3, r0
 80004ea:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK) return status;
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d002      	beq.n	80004fa <acc_init+0x52>
 80004f4:	197b      	adds	r3, r7, r5
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	e00b      	b.n	8000512 <acc_init+0x6a>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 80004fa:	250f      	movs	r5, #15
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2201      	movs	r2, #1
 8000502:	210e      	movs	r1, #14
 8000504:	0018      	movs	r0, r3
 8000506:	f000 f915 	bl	8000734 <accelerometer_write>
 800050a:	0003      	movs	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]

    return status;
 800050e:	197b      	adds	r3, r7, r5
 8000510:	781b      	ldrb	r3, [r3, #0]

}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b004      	add	sp, #16
 8000518:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800051c <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af04      	add	r7, sp, #16
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	000a      	movs	r2, r1
 8000526:	1cfb      	adds	r3, r7, #3
 8000528:	701a      	strb	r2, [r3, #0]
    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 800052a:	230f      	movs	r3, #15
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]

    switch(axis){
 8000532:	1cfb      	adds	r3, r7, #3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d00b      	beq.n	8000552 <read_axis+0x36>
 800053a:	dd00      	ble.n	800053e <read_axis+0x22>
 800053c:	e0ee      	b.n	800071c <read_axis+0x200>
 800053e:	2b02      	cmp	r3, #2
 8000540:	d100      	bne.n	8000544 <read_axis+0x28>
 8000542:	e098      	b.n	8000676 <read_axis+0x15a>
 8000544:	dd00      	ble.n	8000548 <read_axis+0x2c>
 8000546:	e0e9      	b.n	800071c <read_axis+0x200>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <read_axis+0x36>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d04a      	beq.n	80005e6 <read_axis+0xca>
 8000550:	e0e4      	b.n	800071c <read_axis+0x200>
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	b299      	uxth	r1, r3
 800055a:	250f      	movs	r5, #15
 800055c:	197c      	adds	r4, r7, r5
 800055e:	4873      	ldr	r0, [pc, #460]	; (800072c <read_axis+0x210>)
 8000560:	2301      	movs	r3, #1
 8000562:	425b      	negs	r3, r3
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	2301      	movs	r3, #1
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	4b71      	ldr	r3, [pc, #452]	; (8000730 <read_axis+0x214>)
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	2229      	movs	r2, #41	; 0x29
 8000572:	f000 ffff 	bl	8001574 <HAL_I2C_Mem_Read>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800057a:	0028      	movs	r0, r5
 800057c:	183b      	adds	r3, r7, r0
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d000      	beq.n	8000586 <read_axis+0x6a>
 8000584:	e0bb      	b.n	80006fe <read_axis+0x1e2>
		  acc->x_xlr = *read_buffer << 8;
 8000586:	4b6a      	ldr	r3, [pc, #424]	; (8000730 <read_axis+0x214>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21a      	sxth	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	b299      	uxth	r1, r3
 800059a:	0005      	movs	r5, r0
 800059c:	183c      	adds	r4, r7, r0
 800059e:	4863      	ldr	r0, [pc, #396]	; (800072c <read_axis+0x210>)
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	4b61      	ldr	r3, [pc, #388]	; (8000730 <read_axis+0x214>)
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2228      	movs	r2, #40	; 0x28
 80005b2:	f000 ffdf 	bl	8001574 <HAL_I2C_Mem_Read>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <read_axis+0xa8>
 80005c2:	e09e      	b.n	8000702 <read_axis+0x1e6>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	885b      	ldrh	r3, [r3, #2]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b58      	ldr	r3, [pc, #352]	; (8000730 <read_axis+0x214>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 80005dc:	1cfb      	adds	r3, r7, #3
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d000      	beq.n	80005e6 <read_axis+0xca>
 80005e4:	e08f      	b.n	8000706 <read_axis+0x1ea>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	b299      	uxth	r1, r3
 80005ee:	250f      	movs	r5, #15
 80005f0:	197c      	adds	r4, r7, r5
 80005f2:	484e      	ldr	r0, [pc, #312]	; (800072c <read_axis+0x210>)
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b4c      	ldr	r3, [pc, #304]	; (8000730 <read_axis+0x214>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	222b      	movs	r2, #43	; 0x2b
 8000606:	f000 ffb5 	bl	8001574 <HAL_I2C_Mem_Read>
 800060a:	0003      	movs	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800060e:	0028      	movs	r0, r5
 8000610:	183b      	adds	r3, r7, r0
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d000      	beq.n	800061a <read_axis+0xfe>
 8000618:	e077      	b.n	800070a <read_axis+0x1ee>
		  acc->y_xlr = *read_buffer << 8;
 800061a:	4b45      	ldr	r3, [pc, #276]	; (8000730 <read_axis+0x214>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21a      	sxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b299      	uxth	r1, r3
 800062e:	0005      	movs	r5, r0
 8000630:	183c      	adds	r4, r7, r0
 8000632:	483e      	ldr	r0, [pc, #248]	; (800072c <read_axis+0x210>)
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <read_axis+0x214>)
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	222a      	movs	r2, #42	; 0x2a
 8000646:	f000 ff95 	bl	8001574 <HAL_I2C_Mem_Read>
 800064a:	0003      	movs	r3, r0
 800064c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800064e:	197b      	adds	r3, r7, r5
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d15b      	bne.n	800070e <read_axis+0x1f2>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	889b      	ldrh	r3, [r3, #4]
 800065a:	b21b      	sxth	r3, r3
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <read_axis+0x214>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	b21a      	sxth	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d14d      	bne.n	8000712 <read_axis+0x1f6>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	b299      	uxth	r1, r3
 800067e:	250f      	movs	r5, #15
 8000680:	197c      	adds	r4, r7, r5
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <read_axis+0x210>)
 8000684:	2301      	movs	r3, #1
 8000686:	425b      	negs	r3, r3
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2301      	movs	r3, #1
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <read_axis+0x214>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	222d      	movs	r2, #45	; 0x2d
 8000696:	f000 ff6d 	bl	8001574 <HAL_I2C_Mem_Read>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 800069e:	0028      	movs	r0, r5
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d136      	bne.n	8000716 <read_axis+0x1fa>
		  acc->z_xlr = *read_buffer << 8;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <read_axis+0x214>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	b299      	uxth	r1, r3
 80006bc:	0005      	movs	r5, r0
 80006be:	183c      	adds	r4, r7, r0
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <read_axis+0x210>)
 80006c2:	2301      	movs	r3, #1
 80006c4:	425b      	negs	r3, r3
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <read_axis+0x214>)
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	222c      	movs	r2, #44	; 0x2c
 80006d4:	f000 ff4e 	bl	8001574 <HAL_I2C_Mem_Read>
 80006d8:	0003      	movs	r3, r0
 80006da:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK) break;
 80006dc:	197b      	adds	r3, r7, r5
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d11a      	bne.n	800071a <read_axis+0x1fe>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	88db      	ldrh	r3, [r3, #6]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <read_axis+0x214>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	18d3      	adds	r3, r2, r3
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	80da      	strh	r2, [r3, #6]
		  break;
 80006fc:	e00e      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	e00c      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	e00a      	b.n	800071c <read_axis+0x200>
		  if(axis != ALL_AXIS) break;
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	e008      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	e006      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	e004      	b.n	800071c <read_axis+0x200>
		  if(axis != ALL_AXIS) break;
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	e002      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	e000      	b.n	800071c <read_axis+0x200>
		  if(status != HAL_OK) break;
 800071a:	46c0      	nop			; (mov r8, r8)
	}

    return status;
 800071c:	230f      	movs	r3, #15
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	781b      	ldrb	r3, [r3, #0]
}
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b004      	add	sp, #16
 8000728:	bdb0      	pop	{r4, r5, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	2000006c 	.word	0x2000006c
 8000730:	20000068 	.word	0x20000068

08000734 <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af04      	add	r7, sp, #16
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	0008      	movs	r0, r1
 800073e:	0011      	movs	r1, r2
 8000740:	1cfb      	adds	r3, r7, #3
 8000742:	1c02      	adds	r2, r0, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	1cbb      	adds	r3, r7, #2
 8000748:	1c0a      	adds	r2, r1, #0
 800074a:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer[] = { 0 };
 800074c:	240c      	movs	r4, #12
 800074e:	193b      	adds	r3, r7, r4
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <accelerometer_write+0x58>)
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
	*write_buffer = data;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	1cba      	adds	r2, r7, #2
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	785b      	ldrb	r3, [r3, #1]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	b299      	uxth	r1, r3
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b29a      	uxth	r2, r3
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <accelerometer_write+0x5c>)
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	2301      	movs	r3, #1
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	193b      	adds	r3, r7, r4
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	f000 fdcb 	bl	8001318 <HAL_I2C_Mem_Write>
 8000782:	0003      	movs	r3, r0
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b005      	add	sp, #20
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	08002c9c 	.word	0x08002c9c
 8000790:	2000006c 	.word	0x2000006c

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b087      	sub	sp, #28
 8000798:	af04      	add	r7, sp, #16

  HAL_Init();
 800079a:	f000 fa31 	bl	8000c00 <HAL_Init>
  SystemClock_Config();
 800079e:	f000 f83f 	bl	8000820 <SystemClock_Config>
  MX_GPIO_Init();
 80007a2:	f000 f8e9 	bl	8000978 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a6:	f000 f8a7 	bl	80008f8 <MX_I2C1_Init>

  acc_init(&xl_l);
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <main+0x80>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fe7b 	bl	80004a8 <acc_init>
  acc_init(&xl_r);
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <main+0x84>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fe77 	bl	80004a8 <acc_init>

  uint8_t write_buffer = { 0x40 };
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, 0xd4, 0x10, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	1dbc      	adds	r4, r7, #6
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x88>)
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	9200      	str	r2, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	2210      	movs	r2, #16
 80007da:	21d4      	movs	r1, #212	; 0xd4
 80007dc:	f000 fd9c 	bl	8001318 <HAL_I2C_Mem_Write>
 80007e0:	0003      	movs	r3, r0
 80007e2:	7023      	strb	r3, [r4, #0]

  while (1)
  {

	if(xl_r.x_xlr < 0)
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <main+0x84>)
 80007e6:	885b      	ldrh	r3, [r3, #2]
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da08      	bge.n	8000800 <main+0x6c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	0059      	lsls	r1, r3, #1
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2201      	movs	r2, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fcbd 	bl	8001178 <HAL_GPIO_WritePin>
 80007fe:	e7f1      	b.n	80007e4 <main+0x50>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	0059      	lsls	r1, r3, #1
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2200      	movs	r2, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fcb4 	bl	8001178 <HAL_GPIO_WritePin>
	if(xl_r.x_xlr < 0)
 8000810:	e7e8      	b.n	80007e4 <main+0x50>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000020 	.word	0x20000020
 8000818:	20000000 	.word	0x20000000
 800081c:	2000006c 	.word	0x2000006c

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b099      	sub	sp, #100	; 0x64
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	242c      	movs	r4, #44	; 0x2c
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f002 f9fb 	bl	8002c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	2318      	movs	r3, #24
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2314      	movs	r3, #20
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f002 f9f3 	bl	8002c2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2318      	movs	r3, #24
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f002 f9ec 	bl	8002c2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <SystemClock_Config+0xd4>)
 800085a:	401a      	ands	r2, r3
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xd0>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0109      	lsls	r1, r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2210      	movs	r2, #16
 800086c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2201      	movs	r2, #1
 8000872:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22a0      	movs	r2, #160	; 0xa0
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	187b      	adds	r3, r7, r1
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fb38 	bl	8001f00 <HAL_RCC_OscConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000894:	f000 f904 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	2118      	movs	r1, #24
 800089a:	187b      	adds	r3, r7, r1
 800089c:	220f      	movs	r2, #15
 800089e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2100      	movs	r1, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fe9b 	bl	80025f8 <HAL_RCC_ClockConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008c6:	f000 f8eb 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2208      	movs	r2, #8
 80008ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d6:	003b      	movs	r3, r7
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f87b 	bl	80029d4 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f8dd 	bl	8000aa0 <Error_Handler>
  }
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b019      	add	sp, #100	; 0x64
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40007000 	.word	0x40007000
 80008f4:	ffffe7ff 	.word	0xffffe7ff

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0


  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_I2C1_Init+0x78>)
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <MX_I2C1_Init+0x7c>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_I2C1_Init+0x78>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	00d2      	lsls	r2, r2, #3
 8000908:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_I2C1_Init+0x78>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_I2C1_Init+0x78>)
 8000912:	2201      	movs	r2, #1
 8000914:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_I2C1_Init+0x78>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_I2C1_Init+0x78>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_I2C1_Init+0x78>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C1_Init+0x78>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_I2C1_Init+0x78>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2C1_Init+0x78>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fc58 	bl	80011ec <HAL_I2C_Init>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 f8ae 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_I2C1_Init+0x78>)
 8000946:	2100      	movs	r1, #0
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fa41 	bl	8001dd0 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000952:	f000 f8a5 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2C1_Init+0x78>)
 8000958:	2100      	movs	r1, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fa84 	bl	8001e68 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000964:	f000 f89c 	bl	8000aa0 <Error_Handler>
  }

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	2000006c 	.word	0x2000006c
 8000974:	40005400 	.word	0x40005400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	240c      	movs	r4, #12
 8000980:	193b      	adds	r3, r7, r4
 8000982:	0018      	movs	r0, r3
 8000984:	2314      	movs	r3, #20
 8000986:	001a      	movs	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f002 f94f 	bl	8002c2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_GPIO_Init+0xb8>)
 8000990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_GPIO_Init+0xb8>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_GPIO_Init+0xb8>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_GPIO_Init+0xb8>)
 80009a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_GPIO_Init+0xb8>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_GPIO_Init+0xb8>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	2201      	movs	r2, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0059      	lsls	r1, r3, #1
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fbd5 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT0_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT0_Pin|ACC_INT1_Pin;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2203      	movs	r2, #3
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2284      	movs	r2, #132	; 0x84
 80009d8:	0392      	lsls	r2, r2, #14
 80009da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_GPIO_Init+0xbc>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 fa57 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ee:	0021      	movs	r1, r4
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	23a0      	movs	r3, #160	; 0xa0
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fa42 	bl	8000e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2005      	movs	r0, #5
 8000a1e:	f000 fa0b 	bl	8000e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f000 fa1d 	bl	8000e62 <HAL_NVIC_EnableIRQ>

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b009      	add	sp, #36	; 0x24
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	50000400 	.word	0x50000400

08000a38 <HAL_GPIO_EXTI_Callback>:
  * @brief Interrupt Callback function
  * @param GPIO_Pin - the pin that triggered the interrupt
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	801a      	strh	r2, [r3, #0]
	static HAL_StatusTypeDef status;
	switch(GPIO_Pin)
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d002      	beq.n	8000a52 <HAL_GPIO_EXTI_Callback+0x1a>
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d00a      	beq.n	8000a66 <HAL_GPIO_EXTI_Callback+0x2e>
 8000a50:	e013      	b.n	8000a7a <HAL_GPIO_EXTI_Callback+0x42>
	{
		case GPIO_PIN_0:
			status = read_axis(&xl_r, ALL_AXIS);
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a54:	2103      	movs	r1, #3
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fd60 	bl	800051c <read_axis>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	001a      	movs	r2, r3
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a62:	701a      	strb	r2, [r3, #0]
			break;
 8000a64:	e00b      	b.n	8000a7e <HAL_GPIO_EXTI_Callback+0x46>
		case GPIO_PIN_1:
			status = read_axis(&xl_l, ALL_AXIS);
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x64>)
 8000a68:	2103      	movs	r1, #3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fd56 	bl	800051c <read_axis>
 8000a70:	0003      	movs	r3, r0
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a76:	701a      	strb	r2, [r3, #0]
			break;
 8000a78:	e001      	b.n	8000a7e <HAL_GPIO_EXTI_Callback+0x46>
		default:
			__NOP();
 8000a7a:	46c0      	nop			; (mov r8, r8)
			break;
 8000a7c:	46c0      	nop			; (mov r8, r8)
	}

	if(status != HAL_OK)
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_GPIO_EXTI_Callback+0x52>
	{
		__NOP();
 8000a86:	46c0      	nop			; (mov r8, r8)
	}

	return;
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46c0      	nop			; (mov r8, r8)
}
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000000 	.word	0x20000000
 8000a98:	200000c0 	.word	0x200000c0
 8000a9c:	20000020 	.word	0x20000020

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_MspInit+0x24>)
 8000abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_MspInit+0x24>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0549      	lsls	r1, r1, #21
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	240c      	movs	r4, #12
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2314      	movs	r3, #20
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 f8a0 	bl	8002c2c <memset>
  if(hi2c->Instance==I2C1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_I2C_MspInit+0x80>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12a      	bne.n	8000b4c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	22c0      	movs	r2, #192	; 0xc0
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2212      	movs	r2, #18
 8000b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2203      	movs	r2, #3
 8000b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 f9af 	bl	8000e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x84>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0389      	lsls	r1, r1, #14
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b009      	add	sp, #36	; 0x24
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40021000 	.word	0x40021000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f892 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT0_Pin);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 fb10 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fb0d 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fff6 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 f82f 	bl	8002c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fdd9 	bl	8000794 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
   ldr   r0, =_estack
 8000be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000bf0:	08002ccc 	.word	0x08002ccc
  ldr r2, =_sbss
 8000bf4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000bf8:	200000c8 	.word	0x200000c8

08000bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_COMP_IRQHandler>
	...

08000c00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x3c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Init+0x3c>)
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f811 	bl	8000c40 <HAL_InitTick>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e001      	b.n	8000c2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2a:	f7ff ff3f 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa57 	bl	8000108 <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa52 	bl	8000108 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f90b 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00f      	b.n	8000c94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d80b      	bhi.n	8000c92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f8d8 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_InitTick+0x64>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	20000048 	.word	0x20000048
 8000ca4:	20000044 	.word	0x20000044

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x1c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	18d2      	adds	r2, r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000048 	.word	0x20000048
 8000cc8:	200000c4 	.word	0x200000c4

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	200000c4 	.word	0x200000c4

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	d809      	bhi.n	8000d08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_EnableIRQ+0x30>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
  }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7f      	cmp	r3, #127	; 0x7f
 8000d28:	d828      	bhi.n	8000d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	589b      	ldr	r3, [r3, r2]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	; 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7a:	e031      	b.n	8000de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	400b      	ands	r3, r1
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3306      	adds	r3, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	400a      	ands	r2, r1
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	401a      	ands	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	001c      	movs	r4, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	3304      	adds	r3, #4
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	045b      	lsls	r3, r3, #17
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d301      	bcc.n	8000e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e04:	2301      	movs	r3, #1
 8000e06:	e010      	b.n	8000e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SysTick_Config+0x44>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2103      	movs	r1, #3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff7c 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x44>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x44>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	210f      	movs	r1, #15
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffaf 	bl	8000df0 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eb2:	e149      	b.n	8001148 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x30>
 8000eca:	e13a      	b.n	8001142 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2107      	movs	r1, #7
 8000fba:	400b      	ands	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	23c0      	movs	r3, #192	; 0xc0
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x17c>
 8001016:	e094      	b.n	8001142 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x2c4>)
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_GPIO_Init+0x2c4>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001024:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	589b      	ldr	r3, [r3, r2]
 8001030:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	429a      	cmp	r2, r3
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1de>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a44      	ldr	r2, [pc, #272]	; (8001168 <HAL_GPIO_Init+0x2cc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1da>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a43      	ldr	r2, [pc, #268]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a42      	ldr	r2, [pc, #264]	; (8001170 <HAL_GPIO_Init+0x2d4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1d2>
 800106a:	2305      	movs	r3, #5
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x1e0>
 800106e:	2306      	movs	r3, #6
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x1e0>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x1e0>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x1e0>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	2103      	movs	r1, #3
 8001080:	400a      	ands	r2, r1
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4935      	ldr	r1, [pc, #212]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	4013      	ands	r3, r2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	039b      	lsls	r3, r3, #14
 80010dc:	4013      	ands	r3, r2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	029b      	lsls	r3, r3, #10
 8001106:	4013      	ands	r3, r2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	025b      	lsls	r3, r3, #9
 8001130:	4013      	ands	r3, r2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	40da      	lsrs	r2, r3
 8001150:	1e13      	subs	r3, r2, #0
 8001152:	d000      	beq.n	8001156 <HAL_GPIO_Init+0x2ba>
 8001154:	e6ae      	b.n	8000eb4 <HAL_GPIO_Init+0x18>
  }
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b006      	add	sp, #24
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000
 8001168:	50000400 	.word	0x50000400
 800116c:	50000800 	.word	0x50000800
 8001170:	50001c00 	.word	0x50001c00
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	0008      	movs	r0, r1
 8001182:	0011      	movs	r1, r2
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	1c7b      	adds	r3, r7, #1
 800118c:	1c0a      	adds	r2, r1, #0
 800118e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001190:	1c7b      	adds	r3, r7, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001198:	1cbb      	adds	r3, r7, #2
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011a0:	e003      	b.n	80011aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011a2:	1cbb      	adds	r3, r7, #2
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	0002      	movs	r2, r0
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	1dba      	adds	r2, r7, #6
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	4013      	ands	r3, r2
 80011ca:	d008      	beq.n	80011de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011ce:	1dba      	adds	r2, r7, #6
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff fc2d 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e082      	b.n	8001304 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2241      	movs	r2, #65	; 0x41
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2240      	movs	r2, #64	; 0x40
 800120e:	2100      	movs	r1, #0
 8001210:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff fc5d 	bl	8000ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2241      	movs	r2, #65	; 0x41
 800121e:	2124      	movs	r1, #36	; 0x24
 8001220:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	438a      	bics	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4934      	ldr	r1, [pc, #208]	; (800130c <HAL_I2C_Init+0x120>)
 800123c:	400a      	ands	r2, r1
 800123e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4931      	ldr	r1, [pc, #196]	; (8001310 <HAL_I2C_Init+0x124>)
 800124c:	400a      	ands	r2, r1
 800124e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0209      	lsls	r1, r1, #8
 8001264:	430a      	orrs	r2, r1
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	e007      	b.n	800127a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2184      	movs	r1, #132	; 0x84
 8001274:	0209      	lsls	r1, r1, #8
 8001276:	430a      	orrs	r2, r1
 8001278:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d104      	bne.n	800128c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	491f      	ldr	r1, [pc, #124]	; (8001314 <HAL_I2C_Init+0x128>)
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	491a      	ldr	r1, [pc, #104]	; (8001310 <HAL_I2C_Init+0x124>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69d9      	ldr	r1, [r3, #28]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2241      	movs	r2, #65	; 0x41
 80012f0:	2120      	movs	r1, #32
 80012f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2242      	movs	r2, #66	; 0x42
 80012fe:	2100      	movs	r1, #0
 8001300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f0ffffff 	.word	0xf0ffffff
 8001310:	ffff7fff 	.word	0xffff7fff
 8001314:	02008000 	.word	0x02008000

08001318 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	000c      	movs	r4, r1
 8001322:	0010      	movs	r0, r2
 8001324:	0019      	movs	r1, r3
 8001326:	230a      	movs	r3, #10
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	1c22      	adds	r2, r4, #0
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	2308      	movs	r3, #8
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	1c02      	adds	r2, r0, #0
 8001334:	801a      	strh	r2, [r3, #0]
 8001336:	1dbb      	adds	r3, r7, #6
 8001338:	1c0a      	adds	r2, r1, #0
 800133a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2241      	movs	r2, #65	; 0x41
 8001340:	5c9b      	ldrb	r3, [r3, r2]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b20      	cmp	r3, #32
 8001346:	d000      	beq.n	800134a <HAL_I2C_Mem_Write+0x32>
 8001348:	e10c      	b.n	8001564 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_I2C_Mem_Write+0x42>
 8001350:	232c      	movs	r3, #44	; 0x2c
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0ff      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	5c9b      	ldrb	r3, [r3, r2]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_I2C_Mem_Write+0x5c>
 8001370:	2302      	movs	r3, #2
 8001372:	e0f8      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	2101      	movs	r1, #1
 800137a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800137c:	f7ff fca6 	bl	8000ccc <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	0219      	lsls	r1, r3, #8
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2319      	movs	r3, #25
 8001390:	2201      	movs	r2, #1
 8001392:	f000 fb0b 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0e3      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2241      	movs	r2, #65	; 0x41
 80013a2:	2121      	movs	r1, #33	; 0x21
 80013a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2242      	movs	r2, #66	; 0x42
 80013aa:	2140      	movs	r1, #64	; 0x40
 80013ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	222c      	movs	r2, #44	; 0x2c
 80013be:	18ba      	adds	r2, r7, r2
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ca:	1dbb      	adds	r3, r7, #6
 80013cc:	881c      	ldrh	r4, [r3, #0]
 80013ce:	2308      	movs	r3, #8
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	230a      	movs	r3, #10
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	0023      	movs	r3, r4
 80013e6:	f000 f9f9 	bl	80017dc <I2C_RequestMemoryWrite>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d005      	beq.n	80013fa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0b5      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2bff      	cmp	r3, #255	; 0xff
 8001402:	d911      	bls.n	8001428 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	22ff      	movs	r2, #255	; 0xff
 8001408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140e:	b2da      	uxtb	r2, r3
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	045c      	lsls	r4, r3, #17
 8001414:	230a      	movs	r3, #10
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	8819      	ldrh	r1, [r3, #0]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	0023      	movs	r3, r4
 8001422:	f000 fc9b 	bl	8001d5c <I2C_TransferConfig>
 8001426:	e012      	b.n	800144e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001436:	b2da      	uxtb	r2, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	049c      	lsls	r4, r3, #18
 800143c:	230a      	movs	r3, #10
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	8819      	ldrh	r1, [r3, #0]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	2300      	movs	r3, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	0023      	movs	r3, r4
 800144a:	f000 fc87 	bl	8001d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0018      	movs	r0, r3
 8001456:	f000 faf7 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e081      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147c:	b29b      	uxth	r3, r3
 800147e:	3b01      	subs	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001496:	b29b      	uxth	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d03a      	beq.n	8001512 <HAL_I2C_Mem_Write+0x1fa>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d136      	bne.n	8001512 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	0013      	movs	r3, r2
 80014ae:	2200      	movs	r2, #0
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	f000 fa7b 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e053      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d911      	bls.n	80014ec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	045c      	lsls	r4, r3, #17
 80014d8:	230a      	movs	r3, #10
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	8819      	ldrh	r1, [r3, #0]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	0023      	movs	r3, r4
 80014e6:	f000 fc39 	bl	8001d5c <I2C_TransferConfig>
 80014ea:	e012      	b.n	8001512 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	049c      	lsls	r4, r3, #18
 8001500:	230a      	movs	r3, #10
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	8819      	ldrh	r1, [r3, #0]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	2300      	movs	r3, #0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	0023      	movs	r3, r4
 800150e:	f000 fc25 	bl	8001d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d198      	bne.n	800144e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	0018      	movs	r0, r3
 8001524:	f000 fad6 	bl	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e01a      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2220      	movs	r2, #32
 8001536:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	490b      	ldr	r1, [pc, #44]	; (8001570 <HAL_I2C_Mem_Write+0x258>)
 8001544:	400a      	ands	r2, r1
 8001546:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2241      	movs	r2, #65	; 0x41
 800154c:	2120      	movs	r1, #32
 800154e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2242      	movs	r2, #66	; 0x42
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001564:	2302      	movs	r3, #2
  }
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b007      	add	sp, #28
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	fe00e800 	.word	0xfe00e800

08001574 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	000c      	movs	r4, r1
 800157e:	0010      	movs	r0, r2
 8001580:	0019      	movs	r1, r3
 8001582:	230a      	movs	r3, #10
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	1c22      	adds	r2, r4, #0
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	2308      	movs	r3, #8
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	1c02      	adds	r2, r0, #0
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	1dbb      	adds	r3, r7, #6
 8001594:	1c0a      	adds	r2, r1, #0
 8001596:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	5c9b      	ldrb	r3, [r3, r2]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d000      	beq.n	80015a6 <HAL_I2C_Mem_Read+0x32>
 80015a4:	e110      	b.n	80017c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_I2C_Mem_Read+0x42>
 80015ac:	232c      	movs	r3, #44	; 0x2c
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e103      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2C_Mem_Read+0x5c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0fc      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2240      	movs	r2, #64	; 0x40
 80015d4:	2101      	movs	r1, #1
 80015d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff fb78 	bl	8000ccc <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	0219      	lsls	r1, r3, #8
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2319      	movs	r3, #25
 80015ec:	2201      	movs	r2, #1
 80015ee:	f000 f9dd 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e7      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2241      	movs	r2, #65	; 0x41
 80015fe:	2122      	movs	r1, #34	; 0x22
 8001600:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2242      	movs	r2, #66	; 0x42
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	222c      	movs	r2, #44	; 0x2c
 800161a:	18ba      	adds	r2, r7, r2
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001626:	1dbb      	adds	r3, r7, #6
 8001628:	881c      	ldrh	r4, [r3, #0]
 800162a:	2308      	movs	r3, #8
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	230a      	movs	r3, #10
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	8819      	ldrh	r1, [r3, #0]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0023      	movs	r3, r4
 8001642:	f000 f92f 	bl	80018a4 <I2C_RequestMemoryRead>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d005      	beq.n	8001656 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0b9      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2bff      	cmp	r3, #255	; 0xff
 800165e:	d911      	bls.n	8001684 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	b2da      	uxtb	r2, r3
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	045c      	lsls	r4, r3, #17
 8001670:	230a      	movs	r3, #10
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	8819      	ldrh	r1, [r3, #0]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <HAL_I2C_Mem_Read+0x260>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	0023      	movs	r3, r4
 800167e:	f000 fb6d 	bl	8001d5c <I2C_TransferConfig>
 8001682:	e012      	b.n	80016aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001692:	b2da      	uxtb	r2, r3
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	049c      	lsls	r4, r3, #18
 8001698:	230a      	movs	r3, #10
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	8819      	ldrh	r1, [r3, #0]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_I2C_Mem_Read+0x260>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	0023      	movs	r3, r4
 80016a6:	f000 fb59 	bl	8001d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	0013      	movs	r3, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	2104      	movs	r1, #4
 80016b8:	f000 f978 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e082      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03a      	beq.n	8001776 <HAL_I2C_Mem_Read+0x202>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d136      	bne.n	8001776 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	0013      	movs	r3, r2
 8001712:	2200      	movs	r2, #0
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	f000 f949 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e053      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	d911      	bls.n	8001750 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001736:	b2da      	uxtb	r2, r3
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	045c      	lsls	r4, r3, #17
 800173c:	230a      	movs	r3, #10
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	8819      	ldrh	r1, [r3, #0]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	0023      	movs	r3, r4
 800174a:	f000 fb07 	bl	8001d5c <I2C_TransferConfig>
 800174e:	e012      	b.n	8001776 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175e:	b2da      	uxtb	r2, r3
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	049c      	lsls	r4, r3, #18
 8001764:	230a      	movs	r3, #10
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	8819      	ldrh	r1, [r3, #0]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	0023      	movs	r3, r4
 8001772:	f000 faf3 	bl	8001d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d194      	bne.n	80016aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f9a4 	bl	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e01a      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2220      	movs	r2, #32
 800179a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	490c      	ldr	r1, [pc, #48]	; (80017d8 <HAL_I2C_Mem_Read+0x264>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2241      	movs	r2, #65	; 0x41
 80017b0:	2120      	movs	r1, #32
 80017b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2242      	movs	r2, #66	; 0x42
 80017b8:	2100      	movs	r1, #0
 80017ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2240      	movs	r2, #64	; 0x40
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
  }
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b007      	add	sp, #28
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	80002400 	.word	0x80002400
 80017d8:	fe00e800 	.word	0xfe00e800

080017dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	000c      	movs	r4, r1
 80017e6:	0010      	movs	r0, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	250a      	movs	r5, #10
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	1c22      	adds	r2, r4, #0
 80017f0:	801a      	strh	r2, [r3, #0]
 80017f2:	2308      	movs	r3, #8
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	1c02      	adds	r2, r0, #0
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	1c0a      	adds	r2, r1, #0
 80017fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001800:	1dbb      	adds	r3, r7, #6
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	045c      	lsls	r4, r3, #17
 800180a:	197b      	adds	r3, r7, r5
 800180c:	8819      	ldrh	r1, [r3, #0]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <I2C_RequestMemoryWrite+0xc4>)
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	0023      	movs	r3, r4
 8001816:	f000 faa1 	bl	8001d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f911 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e033      	b.n	8001896 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001836:	2308      	movs	r3, #8
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
 8001844:	e019      	b.n	800187a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001846:	2308      	movs	r3, #8
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	6a39      	ldr	r1, [r7, #32]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	0018      	movs	r0, r3
 8001860:	f000 f8f2 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001864:	1e03      	subs	r3, r0, #0
 8001866:	d001      	beq.n	800186c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e014      	b.n	8001896 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800186c:	2308      	movs	r3, #8
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	0013      	movs	r3, r2
 8001884:	2200      	movs	r2, #0
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	f000 f890 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bdb0      	pop	{r4, r5, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	80002000 	.word	0x80002000

080018a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	000c      	movs	r4, r1
 80018ae:	0010      	movs	r0, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	250a      	movs	r5, #10
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	1c22      	adds	r2, r4, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	2308      	movs	r3, #8
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	8819      	ldrh	r1, [r3, #0]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <I2C_RequestMemoryRead+0xc0>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	f000 fa3f 	bl	8001d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f8af 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fa:	2308      	movs	r3, #8
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
 8001908:	e019      	b.n	800193e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	6a39      	ldr	r1, [r7, #32]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f890 	bl	8001a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e014      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001930:	2308      	movs	r3, #8
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800193e:	6a3a      	ldr	r2, [r7, #32]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	0013      	movs	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	f000 f82e 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bdb0      	pop	{r4, r5, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	80002000 	.word	0x80002000

08001968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d103      	bne.n	8001986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	2b01      	cmp	r3, #1
 8001992:	d007      	beq.n	80019a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]
  }
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019bc:	e030      	b.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	d02d      	beq.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c4:	f7ff f982 	bl	8000ccc <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d302      	bcc.n	80019da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d122      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	4013      	ands	r3, r2
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	425a      	negs	r2, r3
 80019ea:	4153      	adcs	r3, r2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	001a      	movs	r2, r3
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d113      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	2220      	movs	r2, #32
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2241      	movs	r2, #65	; 0x41
 8001a08:	2120      	movs	r1, #32
 8001a0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2242      	movs	r2, #66	; 0x42
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e00f      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	425a      	negs	r2, r3
 8001a30:	4153      	adcs	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	001a      	movs	r2, r3
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0bf      	beq.n	80019be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a54:	e032      	b.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 f87d 	bl	8001b5c <I2C_IsErrorOccurred>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e030      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	d025      	beq.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a70:	f7ff f92c 	bl	8000ccc <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d302      	bcc.n	8001a86 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11a      	bne.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d013      	beq.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	2220      	movs	r2, #32
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2241      	movs	r2, #65	; 0x41
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2242      	movs	r2, #66	; 0x42
 8001aac:	2100      	movs	r1, #0
 8001aae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e007      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d1c5      	bne.n	8001a56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae0:	e02f      	b.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 f837 	bl	8001b5c <I2C_IsErrorOccurred>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e02d      	b.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7ff f8e9 	bl	8000ccc <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11a      	bne.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2220      	movs	r2, #32
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d013      	beq.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	2220      	movs	r2, #32
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2241      	movs	r2, #65	; 0x41
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2242      	movs	r2, #66	; 0x42
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d1c8      	bne.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b08b      	sub	sp, #44	; 0x2c
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2327      	movs	r3, #39	; 0x27
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2210      	movs	r2, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <I2C_IsErrorOccurred+0x2e>
 8001b88:	e082      	b.n	8001c90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b92:	e060      	b.n	8001c56 <I2C_IsErrorOccurred+0xfa>
 8001b94:	2427      	movs	r4, #39	; 0x27
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	193a      	adds	r2, r7, r4
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	d058      	beq.n	8001c56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f892 	bl	8000ccc <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d306      	bcc.n	8001bc2 <I2C_IsErrorOccurred+0x66>
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	193a      	adds	r2, r7, r4
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d149      	bne.n	8001c56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	01db      	lsls	r3, r3, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bd0:	2013      	movs	r0, #19
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	2142      	movs	r1, #66	; 0x42
 8001bd8:	5c52      	ldrb	r2, [r2, r1]
 8001bda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	401a      	ands	r2, r3
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d126      	bne.n	8001c3e <I2C_IsErrorOccurred+0xe2>
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	01db      	lsls	r3, r3, #7
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d021      	beq.n	8001c3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d01d      	beq.n	8001c3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	01c9      	lsls	r1, r1, #7
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c14:	f7ff f85a 	bl	8000ccc <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1c:	e00f      	b.n	8001c3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c1e:	f7ff f855 	bl	8000ccc <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b19      	cmp	r3, #25
 8001c2a:	d908      	bls.n	8001c3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	4313      	orrs	r3, r2
 8001c32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c34:	2327      	movs	r3, #39	; 0x27
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]

              break;
 8001c3c:	e00b      	b.n	8001c56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	2127      	movs	r1, #39	; 0x27
 8001c4a:	187a      	adds	r2, r7, r1
 8001c4c:	1879      	adds	r1, r7, r1
 8001c4e:	7809      	ldrb	r1, [r1, #0]
 8001c50:	7011      	strb	r1, [r2, #0]
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d1e3      	bne.n	8001c1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d004      	beq.n	8001c6e <I2C_IsErrorOccurred+0x112>
 8001c64:	2327      	movs	r3, #39	; 0x27
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d092      	beq.n	8001b94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c6e:	2327      	movs	r3, #39	; 0x27
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	2204      	movs	r2, #4
 8001c84:	4313      	orrs	r3, r2
 8001c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c88:	2327      	movs	r3, #39	; 0x27
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d00c      	beq.n	8001cbc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cb4:	2327      	movs	r3, #39	; 0x27
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d00c      	beq.n	8001ce0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd8:	2327      	movs	r3, #39	; 0x27
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00c      	beq.n	8001d04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfc:	2327      	movs	r3, #39	; 0x27
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d04:	2327      	movs	r3, #39	; 0x27
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01d      	beq.n	8001d4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fe29 	bl	8001968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	490d      	ldr	r1, [pc, #52]	; (8001d58 <I2C_IsErrorOccurred+0x1fc>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	2120      	movs	r1, #32
 8001d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2242      	movs	r2, #66	; 0x42
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d4a:	2327      	movs	r3, #39	; 0x27
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b00b      	add	sp, #44	; 0x2c
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	fe00e800 	.word	0xfe00e800

08001d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	0008      	movs	r0, r1
 8001d66:	0011      	movs	r1, r2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	240a      	movs	r4, #10
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	1c02      	adds	r2, r0, #0
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	2009      	movs	r0, #9
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	1c0a      	adds	r2, r1, #0
 8001d78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	059b      	lsls	r3, r3, #22
 8001d80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	0419      	lsls	r1, r3, #16
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	4313      	orrs	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da6:	0d51      	lsrs	r1, r2, #21
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	00d2      	lsls	r2, r2, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	4907      	ldr	r1, [pc, #28]	; (8001dcc <I2C_TransferConfig+0x70>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	43d2      	mvns	r2, r2
 8001db4:	401a      	ands	r2, r3
 8001db6:	0011      	movs	r1, r2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b007      	add	sp, #28
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	03ff63ff 	.word	0x03ff63ff

08001dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2241      	movs	r2, #65	; 0x41
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d138      	bne.n	8001e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e032      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	2101      	movs	r1, #1
 8001dfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2241      	movs	r2, #65	; 0x41
 8001e00:	2124      	movs	r1, #36	; 0x24
 8001e02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	438a      	bics	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4911      	ldr	r1, [pc, #68]	; (8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2241      	movs	r2, #65	; 0x41
 8001e48:	2120      	movs	r1, #32
 8001e4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	ffffefff 	.word	0xffffefff

08001e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2241      	movs	r2, #65	; 0x41
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d139      	bne.n	8001ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e033      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2241      	movs	r2, #65	; 0x41
 8001e98:	2124      	movs	r1, #36	; 0x24
 8001e9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	; 0x41
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	fffff0ff 	.word	0xfffff0ff

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f000 fb6c 	bl	80025ec <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4bc8      	ldr	r3, [pc, #800]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	4bc6      	ldr	r3, [pc, #792]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x36>
 8001f34:	e07d      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d007      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x68>
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4bba      	ldr	r3, [pc, #744]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5a>
 8001f58:	e06a      	b.n	8002030 <HAL_RCC_OscConfig+0x130>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d166      	bne.n	8002030 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f000 fb42 	bl	80025ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x84>
 8001f74:	4bb0      	ldr	r3, [pc, #704]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4baf      	ldr	r3, [pc, #700]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0249      	lsls	r1, r1, #9
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e027      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	23a0      	movs	r3, #160	; 0xa0
 8001f8a:	02db      	lsls	r3, r3, #11
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10e      	bne.n	8001fae <HAL_RCC_OscConfig+0xae>
 8001f90:	4ba9      	ldr	r3, [pc, #676]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4ba8      	ldr	r3, [pc, #672]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	02c9      	lsls	r1, r1, #11
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba5      	ldr	r3, [pc, #660]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0249      	lsls	r1, r1, #9
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e012      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001fae:	4ba2      	ldr	r3, [pc, #648]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	49a1      	ldr	r1, [pc, #644]	; (800223c <HAL_RCC_OscConfig+0x33c>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	4b9f      	ldr	r3, [pc, #636]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4b9b      	ldr	r3, [pc, #620]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b9a      	ldr	r3, [pc, #616]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001fce:	499c      	ldr	r1, [pc, #624]	; (8002240 <HAL_RCC_OscConfig+0x340>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d014      	beq.n	8002006 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe76 	bl	8000ccc <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fe71 	bl	8000ccc <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e2f9      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xe6>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe61 	bl	8000ccc <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fe5c 	bl	8000ccc <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e2e4      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x110>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_RCC_OscConfig+0x13e>
 800203c:	e099      	b.n	8002172 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800204c:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b79      	ldr	r3, [pc, #484]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002052:	2120      	movs	r1, #32
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	2220      	movs	r2, #32
 800205c:	4393      	bics	r3, r2
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d13e      	bne.n	80020ea <HAL_RCC_OscConfig+0x1ea>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d13b      	bne.n	80020ea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002072:	4b71      	ldr	r3, [pc, #452]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_RCC_OscConfig+0x186>
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e2b2      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x344>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	021a      	lsls	r2, r3, #8
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800209c:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2209      	movs	r2, #9
 80020a2:	4393      	bics	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	4b64      	ldr	r3, [pc, #400]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80020a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 fbeb 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80020b2:	0001      	movs	r1, r0
 80020b4:	4b60      	ldr	r3, [pc, #384]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	220f      	movs	r2, #15
 80020bc:	4013      	ands	r3, r2
 80020be:	4a62      	ldr	r2, [pc, #392]	; (8002248 <HAL_RCC_OscConfig+0x348>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	000a      	movs	r2, r1
 80020c4:	40da      	lsrs	r2, r3
 80020c6:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_RCC_OscConfig+0x34c>)
 80020c8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020ca:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2513      	movs	r5, #19
 80020d0:	197c      	adds	r4, r7, r5
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fdb4 	bl	8000c40 <HAL_InitTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020dc:	197b      	adds	r3, r7, r5
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d046      	beq.n	8002172 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80020e4:	197b      	adds	r3, r7, r5
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	e280      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d027      	beq.n	8002140 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020f0:	4b51      	ldr	r3, [pc, #324]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2209      	movs	r2, #9
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fde3 	bl	8000ccc <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7fe fdde 	bl	8000ccc <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e266      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d0f1      	beq.n	800210c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a45      	ldr	r2, [pc, #276]	; (8002244 <HAL_RCC_OscConfig+0x344>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	021a      	lsls	r2, r3, #8
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe fdbe 	bl	8000ccc <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002156:	f7fe fdb9 	bl	8000ccc <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e241      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2204      	movs	r2, #4
 800216e:	4013      	ands	r3, r2
 8002170:	d1f1      	bne.n	8002156 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2210      	movs	r2, #16
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x27e>
 800217c:	e0a1      	b.n	80022c2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d140      	bne.n	8002206 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x29c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e227      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <HAL_RCC_OscConfig+0x354>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	0a19      	lsrs	r1, r3, #8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	061a      	lsls	r2, r3, #24
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	0b5b      	lsrs	r3, r3, #13
 80021ca:	3301      	adds	r3, #1
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0212      	lsls	r2, r2, #8
 80021d0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	210f      	movs	r1, #15
 80021da:	400b      	ands	r3, r1
 80021dc:	491a      	ldr	r1, [pc, #104]	; (8002248 <HAL_RCC_OscConfig+0x348>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x34c>)
 80021e4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x350>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2513      	movs	r5, #19
 80021ec:	197c      	adds	r4, r7, r5
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fe fd26 	bl	8000c40 <HAL_InitTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d060      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002200:	197b      	adds	r3, r7, r5
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	e1f2      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03f      	beq.n	800228e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x338>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0049      	lsls	r1, r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fd56 	bl	8000ccc <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002224:	e018      	b.n	8002258 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe fd51 	bl	8000ccc <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d911      	bls.n	8002258 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1d9      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
 8002238:	40021000 	.word	0x40021000
 800223c:	fffeffff 	.word	0xfffeffff
 8002240:	fffbffff 	.word	0xfffbffff
 8002244:	ffffe0ff 	.word	0xffffe0ff
 8002248:	08002ca0 	.word	0x08002ca0
 800224c:	20000040 	.word	0x20000040
 8002250:	20000044 	.word	0x20000044
 8002254:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002258:	4bc9      	ldr	r3, [pc, #804]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d0e0      	beq.n	8002226 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002264:	4bc6      	ldr	r3, [pc, #792]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4ac6      	ldr	r2, [pc, #792]	; (8002584 <HAL_RCC_OscConfig+0x684>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4bc3      	ldr	r3, [pc, #780]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002278:	4bc1      	ldr	r3, [pc, #772]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	0a19      	lsrs	r1, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	061a      	lsls	r2, r3, #24
 8002286:	4bbe      	ldr	r3, [pc, #760]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	e019      	b.n	80022c2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228e:	4bbc      	ldr	r3, [pc, #752]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4bbb      	ldr	r3, [pc, #748]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002294:	49bc      	ldr	r1, [pc, #752]	; (8002588 <HAL_RCC_OscConfig+0x688>)
 8002296:	400a      	ands	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fd17 	bl	8000ccc <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a4:	f7fe fd12 	bl	8000ccc <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e19a      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022b6:	4bb2      	ldr	r3, [pc, #712]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d036      	beq.n	800233a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d019      	beq.n	8002308 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d4:	4baa      	ldr	r3, [pc, #680]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80022d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d8:	4ba9      	ldr	r3, [pc, #676]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80022da:	2101      	movs	r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fcf4 	bl	8000ccc <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe fcef 	bl	8000ccc <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e177      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022fc:	4ba0      	ldr	r3, [pc, #640]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d0f1      	beq.n	80022ea <HAL_RCC_OscConfig+0x3ea>
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b9d      	ldr	r3, [pc, #628]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800230a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230c:	4b9c      	ldr	r3, [pc, #624]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800230e:	2101      	movs	r1, #1
 8002310:	438a      	bics	r2, r1
 8002312:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe fcda 	bl	8000ccc <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe fcd5 	bl	8000ccc <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e15d      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002330:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d1f1      	bne.n	800231e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	d100      	bne.n	8002346 <HAL_RCC_OscConfig+0x446>
 8002344:	e0ae      	b.n	80024a4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2023      	movs	r0, #35	; 0x23
 8002348:	183b      	adds	r3, r7, r0
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	055b      	lsls	r3, r3, #21
 8002356:	4013      	ands	r3, r2
 8002358:	d109      	bne.n	800236e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b89      	ldr	r3, [pc, #548]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800235c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0549      	lsls	r1, r1, #21
 8002364:	430a      	orrs	r2, r1
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002368:	183b      	adds	r3, r7, r0
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b87      	ldr	r3, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x68c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d11a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCC_OscConfig+0x68c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b83      	ldr	r3, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x68c>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0049      	lsls	r1, r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002388:	f7fe fca0 	bl	8000ccc <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fc9b 	bl	8000ccc <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e123      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b79      	ldr	r3, [pc, #484]	; (800258c <HAL_RCC_OscConfig+0x68c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x4cc>
 80023bc:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	0049      	lsls	r1, r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50
 80023ca:	e031      	b.n	8002430 <HAL_RCC_OscConfig+0x530>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x4ee>
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d8:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023da:	496b      	ldr	r1, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x688>)
 80023dc:	400a      	ands	r2, r1
 80023de:	651a      	str	r2, [r3, #80]	; 0x50
 80023e0:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023e6:	496a      	ldr	r1, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x690>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	651a      	str	r2, [r3, #80]	; 0x50
 80023ec:	e020      	b.n	8002430 <HAL_RCC_OscConfig+0x530>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d10e      	bne.n	8002418 <HAL_RCC_OscConfig+0x518>
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	4b60      	ldr	r3, [pc, #384]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	00c9      	lsls	r1, r1, #3
 8002404:	430a      	orrs	r2, r1
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
 8002408:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800240a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800240c:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	0049      	lsls	r1, r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	651a      	str	r2, [r3, #80]	; 0x50
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x530>
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800241a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800241c:	4b58      	ldr	r3, [pc, #352]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800241e:	495a      	ldr	r1, [pc, #360]	; (8002588 <HAL_RCC_OscConfig+0x688>)
 8002420:	400a      	ands	r2, r1
 8002422:	651a      	str	r2, [r3, #80]	; 0x50
 8002424:	4b56      	ldr	r3, [pc, #344]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800242a:	4959      	ldr	r1, [pc, #356]	; (8002590 <HAL_RCC_OscConfig+0x690>)
 800242c:	400a      	ands	r2, r1
 800242e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe fc48 	bl	8000ccc <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002440:	e009      	b.n	8002456 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fc43 	bl	8000ccc <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a51      	ldr	r2, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x694>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0ca      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4013      	ands	r3, r2
 8002460:	d0ef      	beq.n	8002442 <HAL_RCC_OscConfig+0x542>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe fc32 	bl	8000ccc <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246c:	e009      	b.n	8002482 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fc2d 	bl	8000ccc <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a46      	ldr	r2, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x694>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0b4      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248e:	2323      	movs	r3, #35	; 0x23
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800249a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800249e:	493e      	ldr	r1, [pc, #248]	; (8002598 <HAL_RCC_OscConfig+0x698>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d100      	bne.n	80024ae <HAL_RCC_OscConfig+0x5ae>
 80024ac:	e09d      	b.n	80025ea <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d100      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5b6>
 80024b4:	e076      	b.n	80025a4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d145      	bne.n	800254a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_RCC_OscConfig+0x69c>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fbff 	bl	8000ccc <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fbfa 	bl	8000ccc <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e082      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	049b      	lsls	r3, r3, #18
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x6a0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	431a      	orrs	r2, r3
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800250e:	430a      	orrs	r2, r1
 8002510:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0449      	lsls	r1, r1, #17
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fbd4 	bl	8000ccc <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fbcf 	bl	8000ccc <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e057      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	4013      	ands	r3, r2
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x62a>
 8002548:	e04f      	b.n	80025ea <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <HAL_RCC_OscConfig+0x69c>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fbb9 	bl	8000ccc <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fbb4 	bl	8000ccc <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e03c      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002572:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_OscConfig+0x680>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	049b      	lsls	r3, r3, #18
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x660>
 800257e:	e034      	b.n	80025ea <HAL_RCC_OscConfig+0x6ea>
 8002580:	40021000 	.word	0x40021000
 8002584:	ffff1fff 	.word	0xffff1fff
 8002588:	fffffeff 	.word	0xfffffeff
 800258c:	40007000 	.word	0x40007000
 8002590:	fffffbff 	.word	0xfffffbff
 8002594:	00001388 	.word	0x00001388
 8002598:	efffffff 	.word	0xefffffff
 800259c:	feffffff 	.word	0xfeffffff
 80025a0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x6f4>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10f      	bne.n	80025e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	23f0      	movs	r3, #240	; 0xf0
 80025ca:	039b      	lsls	r3, r3, #14
 80025cc:	401a      	ands	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	23c0      	movs	r3, #192	; 0xc0
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b00a      	add	sp, #40	; 0x28
 80025f2:	bdb0      	pop	{r4, r5, r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e128      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b96      	ldr	r3, [pc, #600]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d91e      	bls.n	8002658 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b93      	ldr	r3, [pc, #588]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	4393      	bics	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	4b90      	ldr	r3, [pc, #576]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800262c:	f7fe fb4e 	bl	8000ccc <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002634:	e009      	b.n	800264a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002636:	f7fe fb49 	bl	8000ccc <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4a8a      	ldr	r2, [pc, #552]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e109      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b87      	ldr	r3, [pc, #540]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002662:	4b83      	ldr	r3, [pc, #524]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	22f0      	movs	r2, #240	; 0xf0
 8002668:	4393      	bics	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 8002672:	430a      	orrs	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCC_ClockConfig+0x8a>
 8002680:	e089      	b.n	8002796 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268a:	4b79      	ldr	r3, [pc, #484]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	029b      	lsls	r3, r3, #10
 8002692:	4013      	ands	r3, r2
 8002694:	d120      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0e1      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	049b      	lsls	r3, r3, #18
 80026aa:	4013      	ands	r3, r2
 80026ac:	d114      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0d5      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d109      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0ca      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026c8:	4b69      	ldr	r3, [pc, #420]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0c2      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d8:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2203      	movs	r2, #3
 80026de:	4393      	bics	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe faee 	bl	8000ccc <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fe:	f7fe fae5 	bl	8000ccc <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0a5      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	220c      	movs	r2, #12
 8002718:	4013      	ands	r3, r2
 800271a:	2b08      	cmp	r3, #8
 800271c:	d1ef      	bne.n	80026fe <HAL_RCC_ClockConfig+0x106>
 800271e:	e03a      	b.n	8002796 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d111      	bne.n	800274c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	e009      	b.n	800273e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272a:	f7fe facf 	bl	8000ccc <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a4d      	ldr	r2, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e08f      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	220c      	movs	r2, #12
 8002744:	4013      	ands	r3, r2
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_ClockConfig+0x132>
 800274a:	e024      	b.n	8002796 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d11b      	bne.n	800278c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002754:	e009      	b.n	800276a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7fe fab9 	bl	8000ccc <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e079      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	220c      	movs	r2, #12
 8002770:	4013      	ands	r3, r2
 8002772:	2b04      	cmp	r3, #4
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_ClockConfig+0x15e>
 8002776:	e00e      	b.n	8002796 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe faa8 	bl	8000ccc <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e068      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	220c      	movs	r2, #12
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d21e      	bcs.n	80027e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4393      	bics	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027b6:	f7fe fa89 	bl	8000ccc <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	e009      	b.n	80027d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fa84 	bl	8000ccc <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HAL_RCC_ClockConfig+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e044      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x27c>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 80027fc:	430a      	orrs	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2208      	movs	r2, #8
 8002806:	4013      	ands	r3, r2
 8002808:	d00a      	beq.n	8002820 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_RCC_ClockConfig+0x280>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	00da      	lsls	r2, r3, #3
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002820:	f000 f832 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002824:	0001      	movs	r1, r0
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCC_ClockConfig+0x278>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	220f      	movs	r2, #15
 800282e:	4013      	ands	r3, r2
 8002830:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x284>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	000a      	movs	r2, r1
 8002836:	40da      	lsrs	r2, r3
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_ClockConfig+0x288>)
 800283a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_ClockConfig+0x28c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	250b      	movs	r5, #11
 8002842:	197c      	adds	r4, r7, r5
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe f9fb 	bl	8000c40 <HAL_InitTick>
 800284a:	0003      	movs	r3, r0
 800284c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800284e:	197b      	adds	r3, r7, r5
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002856:	197b      	adds	r3, r7, r5
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	e000      	b.n	800285e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	40022000 	.word	0x40022000
 800286c:	00001388 	.word	0x00001388
 8002870:	40021000 	.word	0x40021000
 8002874:	fffff8ff 	.word	0xfffff8ff
 8002878:	ffffc7ff 	.word	0xffffc7ff
 800287c:	08002ca0 	.word	0x08002ca0
 8002880:	20000040 	.word	0x20000040
 8002884:	20000044 	.word	0x20000044

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800288e:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002896:	230c      	movs	r3, #12
 8002898:	4013      	ands	r3, r2
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d014      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 800289e:	d900      	bls.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80028a0:	e07b      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x112>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x24>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028aa:	e076      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028ac:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028b6:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028ba:	e07c      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028bc:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028c0:	e079      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCC_GetSysClockFreq+0x144>)
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028c6:	e076      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	0c9a      	lsrs	r2, r3, #18
 80028cc:	230f      	movs	r3, #15
 80028ce:	401a      	ands	r2, r3
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80028d2:	5c9b      	ldrb	r3, [r3, r2]
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	0d9a      	lsrs	r2, r3, #22
 80028da:	2303      	movs	r3, #3
 80028dc:	4013      	ands	r3, r2
 80028de:	3301      	adds	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	4013      	ands	r3, r2
 80028ec:	d01a      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	4a35      	ldr	r2, [pc, #212]	; (80029cc <HAL_RCC_GetSysClockFreq+0x144>)
 80028f8:	2300      	movs	r3, #0
 80028fa:	69b8      	ldr	r0, [r7, #24]
 80028fc:	69f9      	ldr	r1, [r7, #28]
 80028fe:	f7fd fcaf 	bl	8000260 <__aeabi_lmul>
 8002902:	0002      	movs	r2, r0
 8002904:	000b      	movs	r3, r1
 8002906:	0010      	movs	r0, r2
 8002908:	0019      	movs	r1, r3
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f7fd fc83 	bl	8000220 <__aeabi_uldivmod>
 800291a:	0002      	movs	r2, r0
 800291c:	000b      	movs	r3, r1
 800291e:	0013      	movs	r3, r2
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
 8002922:	e037      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	d01a      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002938:	2300      	movs	r3, #0
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	f7fd fc8f 	bl	8000260 <__aeabi_lmul>
 8002942:	0002      	movs	r2, r0
 8002944:	000b      	movs	r3, r1
 8002946:	0010      	movs	r0, r2
 8002948:	0019      	movs	r1, r3
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f7fd fc63 	bl	8000220 <__aeabi_uldivmod>
 800295a:	0002      	movs	r2, r0
 800295c:	000b      	movs	r3, r1
 800295e:	0013      	movs	r3, r2
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
 8002962:	e017      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	0018      	movs	r0, r3
 8002968:	2300      	movs	r3, #0
 800296a:	0019      	movs	r1, r3
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800296e:	2300      	movs	r3, #0
 8002970:	f7fd fc76 	bl	8000260 <__aeabi_lmul>
 8002974:	0002      	movs	r2, r0
 8002976:	000b      	movs	r3, r1
 8002978:	0010      	movs	r0, r2
 800297a:	0019      	movs	r1, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	001c      	movs	r4, r3
 8002980:	2300      	movs	r3, #0
 8002982:	001d      	movs	r5, r3
 8002984:	0022      	movs	r2, r4
 8002986:	002b      	movs	r3, r5
 8002988:	f7fd fc4a 	bl	8000220 <__aeabi_uldivmod>
 800298c:	0002      	movs	r2, r0
 800298e:	000b      	movs	r3, r1
 8002990:	0013      	movs	r3, r2
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002998:	e00d      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	2207      	movs	r2, #7
 80029a2:	4013      	ands	r3, r2
 80029a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	3301      	adds	r3, #1
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	0212      	lsls	r2, r2, #8
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b00e      	add	sp, #56	; 0x38
 80029be:	bdb0      	pop	{r4, r5, r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	003d0900 	.word	0x003d0900
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200
 80029d0:	08002cb0 	.word	0x08002cb0

080029d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029dc:	2017      	movs	r0, #23
 80029de:	183b      	adds	r3, r7, r0
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2220      	movs	r2, #32
 80029ea:	4013      	ands	r3, r2
 80029ec:	d100      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80029ee:	e0c7      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	055b      	lsls	r3, r3, #21
 80029f8:	4013      	ands	r3, r2
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a00:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0549      	lsls	r1, r1, #21
 8002a06:	430a      	orrs	r2, r1
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b7d      	ldr	r3, [pc, #500]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d11a      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1c:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	0049      	lsls	r1, r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe f94f 	bl	8000ccc <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe f94a 	bl	8000ccc <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0d9      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a52:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	23c0      	movs	r3, #192	; 0xc0
 8002a58:	039b      	lsls	r3, r3, #14
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	039b      	lsls	r3, r3, #14
 8002a66:	4013      	ands	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d013      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	401a      	ands	r2, r3
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d10a      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a80:	4b60      	ldr	r3, [pc, #384]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	401a      	ands	r2, r3
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	029b      	lsls	r3, r3, #10
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d101      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0b1      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a9a:	23c0      	movs	r3, #192	; 0xc0
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d03b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	23c0      	movs	r3, #192	; 0xc0
 8002aae:	029b      	lsls	r3, r3, #10
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d033      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2220      	movs	r2, #32
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d02e      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ac2:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac6:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002acc:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	0309      	lsls	r1, r1, #12
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ae0:	494b      	ldr	r1, [pc, #300]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe f8e9 	bl	8000ccc <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	e009      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe f8e4 	bl	8000ccc <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e072      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0ef      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2220      	movs	r2, #32
 8002b26:	4013      	ands	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	23c0      	movs	r3, #192	; 0xc0
 8002b30:	029b      	lsls	r3, r3, #10
 8002b32:	401a      	ands	r2, r3
 8002b34:	23c0      	movs	r3, #192	; 0xc0
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a35      	ldr	r2, [pc, #212]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	23c0      	movs	r3, #192	; 0xc0
 8002b4c:	039b      	lsls	r3, r3, #14
 8002b4e:	401a      	ands	r2, r3
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	23c0      	movs	r3, #192	; 0xc0
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	401a      	ands	r2, r3
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6a:	2317      	movs	r3, #23
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b7a:	4928      	ldr	r1, [pc, #160]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2202      	movs	r2, #2
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	220c      	movs	r2, #12
 8002b90:	4393      	bics	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	4013      	ands	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b006      	add	sp, #24
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	fffcffff 	.word	0xfffcffff
 8002c10:	fff7ffff 	.word	0xfff7ffff
 8002c14:	00001388 	.word	0x00001388
 8002c18:	ffcfffff 	.word	0xffcfffff
 8002c1c:	efffffff 	.word	0xefffffff
 8002c20:	fffff3ff 	.word	0xfffff3ff
 8002c24:	ffffcfff 	.word	0xffffcfff
 8002c28:	fff3ffff 	.word	0xfff3ffff

08002c2c <memset>:
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	1882      	adds	r2, r0, r2
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	7019      	strb	r1, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <__libc_init_array>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	2600      	movs	r6, #0
 8002c40:	4c0c      	ldr	r4, [pc, #48]	; (8002c74 <__libc_init_array+0x38>)
 8002c42:	4d0d      	ldr	r5, [pc, #52]	; (8002c78 <__libc_init_array+0x3c>)
 8002c44:	1b64      	subs	r4, r4, r5
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	42a6      	cmp	r6, r4
 8002c4a:	d109      	bne.n	8002c60 <__libc_init_array+0x24>
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	f000 f819 	bl	8002c84 <_init>
 8002c52:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <__libc_init_array+0x40>)
 8002c54:	4d0a      	ldr	r5, [pc, #40]	; (8002c80 <__libc_init_array+0x44>)
 8002c56:	1b64      	subs	r4, r4, r5
 8002c58:	10a4      	asrs	r4, r4, #2
 8002c5a:	42a6      	cmp	r6, r4
 8002c5c:	d105      	bne.n	8002c6a <__libc_init_array+0x2e>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	00b3      	lsls	r3, r6, #2
 8002c62:	58eb      	ldr	r3, [r5, r3]
 8002c64:	4798      	blx	r3
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7ee      	b.n	8002c48 <__libc_init_array+0xc>
 8002c6a:	00b3      	lsls	r3, r6, #2
 8002c6c:	58eb      	ldr	r3, [r5, r3]
 8002c6e:	4798      	blx	r3
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7f2      	b.n	8002c5a <__libc_init_array+0x1e>
 8002c74:	08002cc4 	.word	0x08002cc4
 8002c78:	08002cc4 	.word	0x08002cc4
 8002c7c:	08002cc8 	.word	0x08002cc8
 8002c80:	08002cc4 	.word	0x08002cc4

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
