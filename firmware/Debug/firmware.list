
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029dc  080029dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029e4  080029e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080029f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080029f8  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006411  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000155a  00000000  00000000  00026488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000279e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000544  00000000  00000000  000280d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc7c  00000000  00000000  0002861c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009432  00000000  00000000  00038298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005efd3  00000000  00000000  000416ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001818  00000000  00000000  000a06a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a1eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029a4 	.word	0x080029a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029a4 	.word	0x080029a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <read_axis>:
 * returns:
 * 		- a signed 16-bit integer representing +-MAX_ACCELERATION at each of
 * 		  the respective bounds
 **/
static int16_t read_axis(axis_t axis)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
	  static uint8_t read_buffer[] = { 0 };
	  static int16_t measurement = 0;

	  switch(axis){
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d060      	beq.n	800057e <read_axis+0xd6>
 80004bc:	dd00      	ble.n	80004c0 <read_axis+0x18>
 80004be:	e08b      	b.n	80005d8 <read_axis+0x130>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <read_axis+0x22>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d02d      	beq.n	8000524 <read_axis+0x7c>
 80004c8:	e086      	b.n	80005d8 <read_axis+0x130>
	  	  case X_AXIS:
	  		  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80004ca:	4847      	ldr	r0, [pc, #284]	; (80005e8 <read_axis+0x140>)
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4b45      	ldr	r3, [pc, #276]	; (80005ec <read_axis+0x144>)
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	2229      	movs	r2, #41	; 0x29
 80004de:	21d5      	movs	r1, #213	; 0xd5
 80004e0:	f000 fed8 	bl	8001294 <HAL_I2C_Mem_Read>
	  		  measurement = *read_buffer << 8;
 80004e4:	4b41      	ldr	r3, [pc, #260]	; (80005ec <read_axis+0x144>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <read_axis+0x148>)
 80004ee:	801a      	strh	r2, [r3, #0]
			  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80004f0:	483d      	ldr	r0, [pc, #244]	; (80005e8 <read_axis+0x140>)
 80004f2:	2301      	movs	r3, #1
 80004f4:	425b      	negs	r3, r3
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	2301      	movs	r3, #1
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <read_axis+0x144>)
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	21d5      	movs	r1, #213	; 0xd5
 8000506:	f000 fec5 	bl	8001294 <HAL_I2C_Mem_Read>
			  measurement = measurement + *read_buffer;
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <read_axis+0x144>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <read_axis+0x148>)
 8000512:	2100      	movs	r1, #0
 8000514:	5e5b      	ldrsh	r3, [r3, r1]
 8000516:	b29b      	uxth	r3, r3
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	b29b      	uxth	r3, r3
 800051c:	b21a      	sxth	r2, r3
 800051e:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <read_axis+0x148>)
 8000520:	801a      	strh	r2, [r3, #0]
			  break;
 8000522:	e059      	b.n	80005d8 <read_axis+0x130>
	  	  case Y_AXIS:
	  		  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000524:	4830      	ldr	r0, [pc, #192]	; (80005e8 <read_axis+0x140>)
 8000526:	2301      	movs	r3, #1
 8000528:	425b      	negs	r3, r3
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	2301      	movs	r3, #1
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <read_axis+0x144>)
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	222b      	movs	r2, #43	; 0x2b
 8000538:	21d5      	movs	r1, #213	; 0xd5
 800053a:	f000 feab 	bl	8001294 <HAL_I2C_Mem_Read>
	  		  measurement = *read_buffer << 8;
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <read_axis+0x144>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <read_axis+0x148>)
 8000548:	801a      	strh	r2, [r3, #0]
	  		  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800054a:	4827      	ldr	r0, [pc, #156]	; (80005e8 <read_axis+0x140>)
 800054c:	2301      	movs	r3, #1
 800054e:	425b      	negs	r3, r3
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	2301      	movs	r3, #1
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	4b25      	ldr	r3, [pc, #148]	; (80005ec <read_axis+0x144>)
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	222a      	movs	r2, #42	; 0x2a
 800055e:	21d5      	movs	r1, #213	; 0xd5
 8000560:	f000 fe98 	bl	8001294 <HAL_I2C_Mem_Read>
	  		  measurement = measurement + *read_buffer;
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <read_axis+0x144>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <read_axis+0x148>)
 800056c:	2100      	movs	r1, #0
 800056e:	5e5b      	ldrsh	r3, [r3, r1]
 8000570:	b29b      	uxth	r3, r3
 8000572:	18d3      	adds	r3, r2, r3
 8000574:	b29b      	uxth	r3, r3
 8000576:	b21a      	sxth	r2, r3
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <read_axis+0x148>)
 800057a:	801a      	strh	r2, [r3, #0]
	  		  break;
 800057c:	e02c      	b.n	80005d8 <read_axis+0x130>
	  	  case Z_AXIS:
	  		  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <read_axis+0x140>)
 8000580:	2301      	movs	r3, #1
 8000582:	425b      	negs	r3, r3
 8000584:	9302      	str	r3, [sp, #8]
 8000586:	2301      	movs	r3, #1
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <read_axis+0x144>)
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	222d      	movs	r2, #45	; 0x2d
 8000592:	21d5      	movs	r1, #213	; 0xd5
 8000594:	f000 fe7e 	bl	8001294 <HAL_I2C_Mem_Read>
	  		  measurement = *read_buffer << 8;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <read_axis+0x144>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <read_axis+0x148>)
 80005a2:	801a      	strh	r2, [r3, #0]
	  		  HAL_I2C_Mem_Read(&hi2c1, ACC_R_ADDR, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <read_axis+0x140>)
 80005a6:	2301      	movs	r3, #1
 80005a8:	425b      	negs	r3, r3
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <read_axis+0x144>)
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	222c      	movs	r2, #44	; 0x2c
 80005b8:	21d5      	movs	r1, #213	; 0xd5
 80005ba:	f000 fe6b 	bl	8001294 <HAL_I2C_Mem_Read>
	  		  measurement = measurement + *read_buffer;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <read_axis+0x144>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <read_axis+0x148>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	5e5b      	ldrsh	r3, [r3, r1]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <read_axis+0x148>)
 80005d4:	801a      	strh	r2, [r3, #0]
	  		  break;
 80005d6:	46c0      	nop			; (mov r8, r8)
	  }

	  return measurement;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <read_axis+0x148>)
 80005da:	2200      	movs	r2, #0
 80005dc:	5e9b      	ldrsh	r3, [r3, r2]
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	20000028 	.word	0x20000028
 80005ec:	2000007c 	.word	0x2000007c
 80005f0:	2000007e 	.word	0x2000007e

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 f9d1 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f869 	bl	80006d4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f913 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f000 f8d1 	bl	80007ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uint8_t write_buffer[] = { ACC_104HZ_2G };
 800060a:	003b      	movs	r3, r7
 800060c:	4a2f      	ldr	r2, [pc, #188]	; (80006cc <main+0xd8>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	701a      	strb	r2, [r3, #0]

  // configure the accelerometer to 104Hz
  HAL_I2C_Mem_Write(&hi2c1, ACC_W_ADDR, REG_CTRL1_XL, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 8000612:	482f      	ldr	r0, [pc, #188]	; (80006d0 <main+0xdc>)
 8000614:	2301      	movs	r3, #1
 8000616:	425b      	negs	r3, r3
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	003b      	movs	r3, r7
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2210      	movs	r2, #16
 8000626:	21d4      	movs	r1, #212	; 0xd4
 8000628:	f000 fd06 	bl	8001038 <HAL_I2C_Mem_Write>

  // turn the gyroscope off
  write_buffer[0] = GYRO_OFF;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, ACC_W_ADDR, REG_CTRL2_G,  I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 8000632:	4827      	ldr	r0, [pc, #156]	; (80006d0 <main+0xdc>)
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	003b      	movs	r3, r7
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2211      	movs	r2, #17
 8000646:	21d4      	movs	r1, #212	; 0xd4
 8000648:	f000 fcf6 	bl	8001038 <HAL_I2C_Mem_Write>


  int16_t x_measurement = 0;
 800064c:	230e      	movs	r3, #14
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
  int16_t y_measurement = 0;
 8000654:	230c      	movs	r3, #12
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
  int16_t z_measurement = 0;
 800065c:	230a      	movs	r3, #10
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	2200      	movs	r2, #0
 8000662:	801a      	strh	r2, [r3, #0]
  int32_t total = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

	  // poll the accelerometer
	  x_measurement = read_axis(X_AXIS);
 8000668:	250e      	movs	r5, #14
 800066a:	197c      	adds	r4, r7, r5
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff ff1b 	bl	80004a8 <read_axis>
 8000672:	0003      	movs	r3, r0
 8000674:	8023      	strh	r3, [r4, #0]
	  y_measurement = read_axis(Y_AXIS);
 8000676:	260c      	movs	r6, #12
 8000678:	19bc      	adds	r4, r7, r6
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff14 	bl	80004a8 <read_axis>
 8000680:	0003      	movs	r3, r0
 8000682:	8023      	strh	r3, [r4, #0]
	  z_measurement = read_axis(Z_AXIS);
 8000684:	230a      	movs	r3, #10
 8000686:	18fc      	adds	r4, r7, r3
 8000688:	2002      	movs	r0, #2
 800068a:	f7ff ff0d 	bl	80004a8 <read_axis>
 800068e:	0003      	movs	r3, r0
 8000690:	8023      	strh	r3, [r4, #0]

	  total = x_measurement + y_measurement + z_measurement;
 8000692:	002c      	movs	r4, r5
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2100      	movs	r1, #0
 8000698:	5e5a      	ldrsh	r2, [r3, r1]
 800069a:	0035      	movs	r5, r6
 800069c:	197b      	adds	r3, r7, r5
 800069e:	2100      	movs	r1, #0
 80006a0:	5e5b      	ldrsh	r3, [r3, r1]
 80006a2:	18d2      	adds	r2, r2, r3
 80006a4:	260a      	movs	r6, #10
 80006a6:	19bb      	adds	r3, r7, r6
 80006a8:	2100      	movs	r1, #0
 80006aa:	5e5b      	ldrsh	r3, [r3, r1]
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	607b      	str	r3, [r7, #4]

	  HAL_Delay(250);
 80006b0:	20fa      	movs	r0, #250	; 0xfa
 80006b2:	f000 f9e5 	bl	8000a80 <HAL_Delay>
	  z_measurement = 0;
 80006b6:	19bb      	adds	r3, r7, r6
 80006b8:	2200      	movs	r2, #0
 80006ba:	801a      	strh	r2, [r3, #0]
	  y_measurement = 0;
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	2200      	movs	r2, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	  x_measurement = 0;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	801a      	strh	r2, [r3, #0]
	  x_measurement = read_axis(X_AXIS);
 80006c8:	e7ce      	b.n	8000668 <main+0x74>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	080029bc 	.word	0x080029bc
 80006d0:	20000028 	.word	0x20000028

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b099      	sub	sp, #100	; 0x64
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	242c      	movs	r4, #44	; 0x2c
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2334      	movs	r3, #52	; 0x34
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 f931 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	2318      	movs	r3, #24
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2314      	movs	r3, #20
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f002 f929 	bl	800294c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	2318      	movs	r3, #24
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f002 f922 	bl	800294c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <SystemClock_Config+0xd4>)
 800070e:	401a      	ands	r2, r3
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xd0>)
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	0109      	lsls	r1, r1, #4
 8000716:	430a      	orrs	r2, r1
 8000718:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2210      	movs	r2, #16
 8000720:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	22a0      	movs	r2, #160	; 0xa0
 8000732:	0212      	lsls	r2, r2, #8
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	187b      	adds	r3, r7, r1
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fa6e 	bl	8001c20 <HAL_RCC_OscConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000748:	f000 f886 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	2118      	movs	r1, #24
 800074e:	187b      	adds	r3, r7, r1
 8000750:	220f      	movs	r2, #15
 8000752:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2100      	movs	r1, #0
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fdd1 	bl	8002318 <HAL_RCC_ClockConfig>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800077a:	f000 f86d 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800077e:	003b      	movs	r3, r7
 8000780:	2208      	movs	r2, #8
 8000782:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	003b      	movs	r3, r7
 800078c:	0018      	movs	r0, r3
 800078e:	f001 ffb1 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000796:	f000 f85f 	bl	8000858 <Error_Handler>
  }
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b019      	add	sp, #100	; 0x64
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40007000 	.word	0x40007000
 80007a8:	ffffe7ff 	.word	0xffffe7ff

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_I2C1_Init+0x78>)
 80007b2:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_I2C1_Init+0x7c>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_I2C1_Init+0x78>)
 80007b8:	22e1      	movs	r2, #225	; 0xe1
 80007ba:	00d2      	lsls	r2, r2, #3
 80007bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_I2C1_Init+0x78>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_I2C1_Init+0x78>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_I2C1_Init+0x78>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_I2C1_Init+0x78>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_I2C1_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_I2C1_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x78>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fb8e 	bl	8000f0c <HAL_I2C_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 f830 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x78>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f977 	bl	8001af0 <HAL_I2CEx_ConfigAnalogFilter>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 f827 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x78>)
 800080c:	2100      	movs	r1, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f9ba 	bl	8001b88 <HAL_I2CEx_ConfigDigitalFilter>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 f81e 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000028 	.word	0x20000028
 8000828:	40005400 	.word	0x40005400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_GPIO_Init+0x28>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_GPIO_Init+0x28>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_GPIO_Init+0x28>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_MspInit+0x24>)
 800086a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x24>)
 800086e:	2101      	movs	r1, #1
 8000870:	430a      	orrs	r2, r1
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_MspInit+0x24>)
 8000876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_MspInit+0x24>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0549      	lsls	r1, r1, #21
 800087e:	430a      	orrs	r2, r1
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	240c      	movs	r4, #12
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 f854 	bl	800294c <memset>
  if(hi2c->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <HAL_I2C_MspInit+0x80>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12a      	bne.n	8000904 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	22c0      	movs	r2, #192	; 0xc0
 80008ca:	00d2      	lsls	r2, r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2212      	movs	r2, #18
 80008d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2201      	movs	r2, #1
 80008da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2203      	movs	r2, #3
 80008e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2201      	movs	r2, #1
 80008e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	187a      	adds	r2, r7, r1
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f99d 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0389      	lsls	r1, r1, #14
 8000900:	430a      	orrs	r2, r1
 8000902:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b009      	add	sp, #36	; 0x24
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	40005400 	.word	0x40005400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f886 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f7ff fff7 	bl	8000942 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 ffef 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fe39 	bl	80005f4 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
   ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080029ec 	.word	0x080029ec
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000084 	.word	0x20000084

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Init+0x3c>)
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f811 	bl	80009e0 <HAL_InitTick>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d003      	beq.n	80009ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e001      	b.n	80009ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ca:	f7ff ff4b 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	; 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb87 	bl	8000108 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb82 	bl	8000108 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f905 	bl	8000c16 <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8e2 	bl	8000bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000080 	.word	0x20000080

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000080 	.word	0x20000080

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	0002      	movs	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b7f      	cmp	r3, #127	; 0x7f
 8000adc:	d828      	bhi.n	8000b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	589b      	ldr	r3, [r3, r2]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	; 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	430a      	orrs	r2, r1
 8000b28:	33c0      	adds	r3, #192	; 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2e:	e031      	b.n	8000b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0019      	movs	r1, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3306      	adds	r3, #6
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	3304      	adds	r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	0011      	movs	r1, r2
 8000b50:	2203      	movs	r2, #3
 8000b52:	400a      	ands	r2, r1
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	21ff      	movs	r1, #255	; 0xff
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	401a      	ands	r2, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2303      	movs	r3, #3
 8000b72:	4003      	ands	r3, r0
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001c      	movs	r4, r3
 8000b80:	230f      	movs	r3, #15
 8000b82:	4023      	ands	r3, r4
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	3306      	adds	r3, #6
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	18c3      	adds	r3, r0, r3
 8000b90:	3304      	adds	r3, #4
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b003      	add	sp, #12
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	045b      	lsls	r3, r3, #17
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d301      	bcc.n	8000bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e010      	b.n	8000bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SysTick_Config+0x44>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2103      	movs	r1, #3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ff7c 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x44>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ffbf 	bl	8000ba4 <SysTick_Config>
 8000c26:	0003      	movs	r3, r0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c46:	e149      	b.n	8000edc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <HAL_GPIO_Init+0x30>
 8000c5e:	e13a      	b.n	8000ed6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	58d3      	ldr	r3, [r2, r3]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2207      	movs	r2, #7
 8000d34:	4013      	ands	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	400b      	ands	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2203      	movs	r2, #3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	029b      	lsls	r3, r3, #10
 8000da6:	4013      	ands	r3, r2
 8000da8:	d100      	bne.n	8000dac <HAL_GPIO_Init+0x17c>
 8000daa:	e094      	b.n	8000ed6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b51      	ldr	r3, [pc, #324]	; (8000ef4 <HAL_GPIO_Init+0x2c4>)
 8000dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x2c4>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	589b      	ldr	r3, [r3, r2]
 8000dc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x1de>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a44      	ldr	r2, [pc, #272]	; (8000efc <HAL_GPIO_Init+0x2cc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x1da>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a43      	ldr	r2, [pc, #268]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x1d6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a42      	ldr	r2, [pc, #264]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x1d2>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	2103      	movs	r1, #3
 8000e14:	400a      	ands	r2, r1
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	035b      	lsls	r3, r3, #13
 8000e46:	4013      	ands	r3, r2
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	039b      	lsls	r3, r3, #14
 8000e70:	4013      	ands	r3, r2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	40da      	lsrs	r2, r3
 8000ee4:	1e13      	subs	r3, r2, #0
 8000ee6:	d000      	beq.n	8000eea <HAL_GPIO_Init+0x2ba>
 8000ee8:	e6ae      	b.n	8000c48 <HAL_GPIO_Init+0x18>
  }
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	50000400 	.word	0x50000400
 8000f00:	50000800 	.word	0x50000800
 8000f04:	50001c00 	.word	0x50001c00
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e082      	b.n	8001024 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2241      	movs	r2, #65	; 0x41
 8000f22:	5c9b      	ldrb	r3, [r3, r2]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d107      	bne.n	8000f3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fca9 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2241      	movs	r2, #65	; 0x41
 8000f3e:	2124      	movs	r1, #36	; 0x24
 8000f40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4934      	ldr	r1, [pc, #208]	; (800102c <HAL_I2C_Init+0x120>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4931      	ldr	r1, [pc, #196]	; (8001030 <HAL_I2C_Init+0x124>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0209      	lsls	r1, r1, #8
 8000f84:	430a      	orrs	r2, r1
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	e007      	b.n	8000f9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2184      	movs	r1, #132	; 0x84
 8000f94:	0209      	lsls	r1, r1, #8
 8000f96:	430a      	orrs	r2, r1
 8000f98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d104      	bne.n	8000fac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	491f      	ldr	r1, [pc, #124]	; (8001034 <HAL_I2C_Init+0x128>)
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	491a      	ldr	r1, [pc, #104]	; (8001030 <HAL_I2C_Init+0x124>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69d9      	ldr	r1, [r3, #28]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1a      	ldr	r2, [r3, #32]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2241      	movs	r2, #65	; 0x41
 8001010:	2120      	movs	r1, #32
 8001012:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2242      	movs	r2, #66	; 0x42
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f0ffffff 	.word	0xf0ffffff
 8001030:	ffff7fff 	.word	0xffff7fff
 8001034:	02008000 	.word	0x02008000

08001038 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	000c      	movs	r4, r1
 8001042:	0010      	movs	r0, r2
 8001044:	0019      	movs	r1, r3
 8001046:	230a      	movs	r3, #10
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	1c22      	adds	r2, r4, #0
 800104c:	801a      	strh	r2, [r3, #0]
 800104e:	2308      	movs	r3, #8
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	1c02      	adds	r2, r0, #0
 8001054:	801a      	strh	r2, [r3, #0]
 8001056:	1dbb      	adds	r3, r7, #6
 8001058:	1c0a      	adds	r2, r1, #0
 800105a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2241      	movs	r2, #65	; 0x41
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b20      	cmp	r3, #32
 8001066:	d000      	beq.n	800106a <HAL_I2C_Mem_Write+0x32>
 8001068:	e10c      	b.n	8001284 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <HAL_I2C_Mem_Write+0x42>
 8001070:	232c      	movs	r3, #44	; 0x2c
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d105      	bne.n	8001086 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0ff      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2240      	movs	r2, #64	; 0x40
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_I2C_Mem_Write+0x5c>
 8001090:	2302      	movs	r3, #2
 8001092:	e0f8      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800109c:	f7ff fce6 	bl	8000a6c <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	0219      	lsls	r1, r3, #8
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2319      	movs	r3, #25
 80010b0:	2201      	movs	r2, #1
 80010b2:	f000 fb0b 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0e3      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2241      	movs	r2, #65	; 0x41
 80010c2:	2121      	movs	r1, #33	; 0x21
 80010c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2242      	movs	r2, #66	; 0x42
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	222c      	movs	r2, #44	; 0x2c
 80010de:	18ba      	adds	r2, r7, r2
 80010e0:	8812      	ldrh	r2, [r2, #0]
 80010e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	881c      	ldrh	r4, [r3, #0]
 80010ee:	2308      	movs	r3, #8
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	230a      	movs	r3, #10
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	8819      	ldrh	r1, [r3, #0]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	0023      	movs	r3, r4
 8001106:	f000 f9f9 	bl	80014fc <I2C_RequestMemoryWrite>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d005      	beq.n	800111a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2240      	movs	r2, #64	; 0x40
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0b5      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111e:	b29b      	uxth	r3, r3
 8001120:	2bff      	cmp	r3, #255	; 0xff
 8001122:	d911      	bls.n	8001148 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112e:	b2da      	uxtb	r2, r3
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	045c      	lsls	r4, r3, #17
 8001134:	230a      	movs	r3, #10
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	8819      	ldrh	r1, [r3, #0]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	0023      	movs	r3, r4
 8001142:	f000 fc9b 	bl	8001a7c <I2C_TransferConfig>
 8001146:	e012      	b.n	800116e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29a      	uxth	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	b2da      	uxtb	r2, r3
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	049c      	lsls	r4, r3, #18
 800115c:	230a      	movs	r3, #10
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	8819      	ldrh	r1, [r3, #0]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	0023      	movs	r3, r4
 800116a:	f000 fc87 	bl	8001a7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	0018      	movs	r0, r3
 8001176:	f000 faf7 	bl	8001768 <I2C_WaitOnTXISFlagUntilTimeout>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e081      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d03a      	beq.n	8001232 <HAL_I2C_Mem_Write+0x1fa>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d136      	bne.n	8001232 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	0013      	movs	r3, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	f000 fa7b 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e053      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d911      	bls.n	800120c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	045c      	lsls	r4, r3, #17
 80011f8:	230a      	movs	r3, #10
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	8819      	ldrh	r1, [r3, #0]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	2300      	movs	r3, #0
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	0023      	movs	r3, r4
 8001206:	f000 fc39 	bl	8001a7c <I2C_TransferConfig>
 800120a:	e012      	b.n	8001232 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121a:	b2da      	uxtb	r2, r3
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	049c      	lsls	r4, r3, #18
 8001220:	230a      	movs	r3, #10
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	8819      	ldrh	r1, [r3, #0]
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	0023      	movs	r3, r4
 800122e:	f000 fc25 	bl	8001a7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001236:	b29b      	uxth	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d198      	bne.n	800116e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fad6 	bl	80017f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d001      	beq.n	8001250 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e01a      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2220      	movs	r2, #32
 8001256:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	490b      	ldr	r1, [pc, #44]	; (8001290 <HAL_I2C_Mem_Write+0x258>)
 8001264:	400a      	ands	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2120      	movs	r1, #32
 800126e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2242      	movs	r2, #66	; 0x42
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001284:	2302      	movs	r3, #2
  }
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b007      	add	sp, #28
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	fe00e800 	.word	0xfe00e800

08001294 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	000c      	movs	r4, r1
 800129e:	0010      	movs	r0, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	230a      	movs	r3, #10
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	1c22      	adds	r2, r4, #0
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	2308      	movs	r3, #8
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	1dbb      	adds	r3, r7, #6
 80012b4:	1c0a      	adds	r2, r1, #0
 80012b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2241      	movs	r2, #65	; 0x41
 80012bc:	5c9b      	ldrb	r3, [r3, r2]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d000      	beq.n	80012c6 <HAL_I2C_Mem_Read+0x32>
 80012c4:	e110      	b.n	80014e8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_I2C_Mem_Read+0x42>
 80012cc:	232c      	movs	r3, #44	; 0x2c
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e103      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_I2C_Mem_Read+0x5c>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e0fc      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2240      	movs	r2, #64	; 0x40
 80012f4:	2101      	movs	r1, #1
 80012f6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012f8:	f7ff fbb8 	bl	8000a6c <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	0219      	lsls	r1, r3, #8
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2319      	movs	r3, #25
 800130c:	2201      	movs	r2, #1
 800130e:	f000 f9dd 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0e7      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2241      	movs	r2, #65	; 0x41
 800131e:	2122      	movs	r1, #34	; 0x22
 8001320:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2242      	movs	r2, #66	; 0x42
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	222c      	movs	r2, #44	; 0x2c
 800133a:	18ba      	adds	r2, r7, r2
 800133c:	8812      	ldrh	r2, [r2, #0]
 800133e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	881c      	ldrh	r4, [r3, #0]
 800134a:	2308      	movs	r3, #8
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	881a      	ldrh	r2, [r3, #0]
 8001350:	230a      	movs	r3, #10
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	8819      	ldrh	r1, [r3, #0]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	0023      	movs	r3, r4
 8001362:	f000 f92f 	bl	80015c4 <I2C_RequestMemoryRead>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d005      	beq.n	8001376 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2240      	movs	r2, #64	; 0x40
 800136e:	2100      	movs	r1, #0
 8001370:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0b9      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d911      	bls.n	80013a4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	b2da      	uxtb	r2, r3
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	045c      	lsls	r4, r3, #17
 8001390:	230a      	movs	r3, #10
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	8819      	ldrh	r1, [r3, #0]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_I2C_Mem_Read+0x260>)
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	0023      	movs	r3, r4
 800139e:	f000 fb6d 	bl	8001a7c <I2C_TransferConfig>
 80013a2:	e012      	b.n	80013ca <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	049c      	lsls	r4, r3, #18
 80013b8:	230a      	movs	r3, #10
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	8819      	ldrh	r1, [r3, #0]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_I2C_Mem_Read+0x260>)
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	0023      	movs	r3, r4
 80013c6:	f000 fb59 	bl	8001a7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	0013      	movs	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	2104      	movs	r1, #4
 80013d8:	f000 f978 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e082      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d03a      	beq.n	8001496 <HAL_I2C_Mem_Read+0x202>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d136      	bne.n	8001496 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	0013      	movs	r3, r2
 8001432:	2200      	movs	r2, #0
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	f000 f949 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e053      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	2bff      	cmp	r3, #255	; 0xff
 800144a:	d911      	bls.n	8001470 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001456:	b2da      	uxtb	r2, r3
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	045c      	lsls	r4, r3, #17
 800145c:	230a      	movs	r3, #10
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	8819      	ldrh	r1, [r3, #0]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	2300      	movs	r3, #0
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	0023      	movs	r3, r4
 800146a:	f000 fb07 	bl	8001a7c <I2C_TransferConfig>
 800146e:	e012      	b.n	8001496 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	b2da      	uxtb	r2, r3
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	049c      	lsls	r4, r3, #18
 8001484:	230a      	movs	r3, #10
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	8819      	ldrh	r1, [r3, #0]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	0023      	movs	r3, r4
 8001492:	f000 faf3 	bl	8001a7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d194      	bne.n	80013ca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 f9a4 	bl	80017f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e01a      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2220      	movs	r2, #32
 80014ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	490c      	ldr	r1, [pc, #48]	; (80014f8 <HAL_I2C_Mem_Read+0x264>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2241      	movs	r2, #65	; 0x41
 80014d0:	2120      	movs	r1, #32
 80014d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2242      	movs	r2, #66	; 0x42
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	2100      	movs	r1, #0
 80014e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e000      	b.n	80014ea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
  }
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b007      	add	sp, #28
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	80002400 	.word	0x80002400
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	000c      	movs	r4, r1
 8001506:	0010      	movs	r0, r2
 8001508:	0019      	movs	r1, r3
 800150a:	250a      	movs	r5, #10
 800150c:	197b      	adds	r3, r7, r5
 800150e:	1c22      	adds	r2, r4, #0
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	2308      	movs	r3, #8
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	1c02      	adds	r2, r0, #0
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	1dbb      	adds	r3, r7, #6
 800151c:	1c0a      	adds	r2, r1, #0
 800151e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	045c      	lsls	r4, r3, #17
 800152a:	197b      	adds	r3, r7, r5
 800152c:	8819      	ldrh	r1, [r3, #0]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <I2C_RequestMemoryWrite+0xc4>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	0023      	movs	r3, r4
 8001536:	f000 faa1 	bl	8001a7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f911 	bl	8001768 <I2C_WaitOnTXISFlagUntilTimeout>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e033      	b.n	80015b6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001556:	2308      	movs	r3, #8
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
 8001564:	e019      	b.n	800159a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001566:	2308      	movs	r3, #8
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2da      	uxtb	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157a:	6a39      	ldr	r1, [r7, #32]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8f2 	bl	8001768 <I2C_WaitOnTXISFlagUntilTimeout>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d001      	beq.n	800158c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e014      	b.n	80015b6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800158c:	2308      	movs	r3, #8
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800159a:	6a3a      	ldr	r2, [r7, #32]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	0013      	movs	r3, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	f000 f890 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	80002000 	.word	0x80002000

080015c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	000c      	movs	r4, r1
 80015ce:	0010      	movs	r0, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	250a      	movs	r5, #10
 80015d4:	197b      	adds	r3, r7, r5
 80015d6:	1c22      	adds	r2, r4, #0
 80015d8:	801a      	strh	r2, [r3, #0]
 80015da:	2308      	movs	r3, #8
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	1c02      	adds	r2, r0, #0
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	1c0a      	adds	r2, r1, #0
 80015e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	8819      	ldrh	r1, [r3, #0]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <I2C_RequestMemoryRead+0xc0>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	f000 fa3f 	bl	8001a7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f8af 	bl	8001768 <I2C_WaitOnTXISFlagUntilTimeout>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e033      	b.n	800167a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001612:	1dbb      	adds	r3, r7, #6
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800161a:	2308      	movs	r3, #8
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
 8001628:	e019      	b.n	800165e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800162a:	2308      	movs	r3, #8
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0018      	movs	r0, r3
 8001644:	f000 f890 	bl	8001768 <I2C_WaitOnTXISFlagUntilTimeout>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d001      	beq.n	8001650 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e014      	b.n	800167a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001650:	2308      	movs	r3, #8
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800165e:	6a3a      	ldr	r2, [r7, #32]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	0013      	movs	r3, r2
 8001668:	2200      	movs	r2, #0
 800166a:	2140      	movs	r1, #64	; 0x40
 800166c:	f000 f82e 	bl	80016cc <I2C_WaitOnFlagUntilTimeout>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bdb0      	pop	{r4, r5, r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	80002000 	.word	0x80002000

08001688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d103      	bne.n	80016a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d007      	beq.n	80016c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
  }
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016dc:	e030      	b.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	d02d      	beq.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e4:	f7ff f9c2 	bl	8000a6c <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d302      	bcc.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d122      	bne.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4013      	ands	r3, r2
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	425a      	negs	r2, r3
 800170a:	4153      	adcs	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	001a      	movs	r2, r3
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d113      	bne.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2220      	movs	r2, #32
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2241      	movs	r2, #65	; 0x41
 8001728:	2120      	movs	r1, #32
 800172a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2242      	movs	r2, #66	; 0x42
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e00f      	b.n	8001760 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4013      	ands	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	425a      	negs	r2, r3
 8001750:	4153      	adcs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	001a      	movs	r2, r3
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d0bf      	beq.n	80016de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}

08001768 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001774:	e032      	b.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0018      	movs	r0, r3
 800177e:	f000 f87d 	bl	800187c <I2C_IsErrorOccurred>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e030      	b.n	80017ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	d025      	beq.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001790:	f7ff f96c 	bl	8000a6c <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d302      	bcc.n	80017a6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11a      	bne.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d013      	beq.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	2220      	movs	r2, #32
 80017ba:	431a      	orrs	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2241      	movs	r2, #65	; 0x41
 80017c4:	2120      	movs	r1, #32
 80017c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2242      	movs	r2, #66	; 0x42
 80017cc:	2100      	movs	r1, #0
 80017ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e007      	b.n	80017ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d1c5      	bne.n	8001776 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001800:	e02f      	b.n	8001862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 f837 	bl	800187c <I2C_IsErrorOccurred>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e02d      	b.n	8001872 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff f929 	bl	8000a6c <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2220      	movs	r2, #32
 8001834:	4013      	ands	r3, r2
 8001836:	2b20      	cmp	r3, #32
 8001838:	d013      	beq.n	8001862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	2220      	movs	r2, #32
 8001840:	431a      	orrs	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2241      	movs	r2, #65	; 0x41
 800184a:	2120      	movs	r1, #32
 800184c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2242      	movs	r2, #66	; 0x42
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2240      	movs	r2, #64	; 0x40
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e007      	b.n	8001872 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2220      	movs	r2, #32
 800186a:	4013      	ands	r3, r2
 800186c:	2b20      	cmp	r3, #32
 800186e:	d1c8      	bne.n	8001802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b08b      	sub	sp, #44	; 0x2c
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001888:	2327      	movs	r3, #39	; 0x27
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2210      	movs	r2, #16
 80018a4:	4013      	ands	r3, r2
 80018a6:	d100      	bne.n	80018aa <I2C_IsErrorOccurred+0x2e>
 80018a8:	e082      	b.n	80019b0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2210      	movs	r2, #16
 80018b0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018b2:	e060      	b.n	8001976 <I2C_IsErrorOccurred+0xfa>
 80018b4:	2427      	movs	r4, #39	; 0x27
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	193a      	adds	r2, r7, r4
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	d058      	beq.n	8001976 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c4:	f7ff f8d2 	bl	8000a6c <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d306      	bcc.n	80018e2 <I2C_IsErrorOccurred+0x66>
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	193a      	adds	r2, r7, r4
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d149      	bne.n	8001976 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4013      	ands	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018f0:	2013      	movs	r0, #19
 80018f2:	183b      	adds	r3, r7, r0
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	2142      	movs	r1, #66	; 0x42
 80018f8:	5c52      	ldrb	r2, [r2, r1]
 80018fa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	401a      	ands	r2, r3
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	429a      	cmp	r2, r3
 800190e:	d126      	bne.n	800195e <I2C_IsErrorOccurred+0xe2>
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	01db      	lsls	r3, r3, #7
 8001916:	429a      	cmp	r2, r3
 8001918:	d021      	beq.n	800195e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800191a:	183b      	adds	r3, r7, r0
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b20      	cmp	r3, #32
 8001920:	d01d      	beq.n	800195e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	01c9      	lsls	r1, r1, #7
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001934:	f7ff f89a 	bl	8000a6c <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193c:	e00f      	b.n	800195e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800193e:	f7ff f895 	bl	8000a6c <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b19      	cmp	r3, #25
 800194a:	d908      	bls.n	800195e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2220      	movs	r2, #32
 8001950:	4313      	orrs	r3, r2
 8001952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001954:	2327      	movs	r3, #39	; 0x27
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]

              break;
 800195c:	e00b      	b.n	8001976 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2220      	movs	r2, #32
 8001966:	4013      	ands	r3, r2
 8001968:	2127      	movs	r1, #39	; 0x27
 800196a:	187a      	adds	r2, r7, r1
 800196c:	1879      	adds	r1, r7, r1
 800196e:	7809      	ldrb	r1, [r1, #0]
 8001970:	7011      	strb	r1, [r2, #0]
 8001972:	2b20      	cmp	r3, #32
 8001974:	d1e3      	bne.n	800193e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2220      	movs	r2, #32
 800197e:	4013      	ands	r3, r2
 8001980:	2b20      	cmp	r3, #32
 8001982:	d004      	beq.n	800198e <I2C_IsErrorOccurred+0x112>
 8001984:	2327      	movs	r3, #39	; 0x27
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d092      	beq.n	80018b4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800198e:	2327      	movs	r3, #39	; 0x27
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2220      	movs	r2, #32
 800199e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4313      	orrs	r3, r2
 80019a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019a8:	2327      	movs	r3, #39	; 0x27
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d00c      	beq.n	80019dc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0052      	lsls	r2, r2, #1
 80019d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019d4:	2327      	movs	r3, #39	; 0x27
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	d00c      	beq.n	8001a00 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	2208      	movs	r2, #8
 80019ea:	4313      	orrs	r3, r2
 80019ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019f8:	2327      	movs	r3, #39	; 0x27
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d00c      	beq.n	8001a24 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a1c:	2327      	movs	r3, #39	; 0x27
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001a24:	2327      	movs	r3, #39	; 0x27
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01d      	beq.n	8001a6a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fe29 	bl	8001688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	490d      	ldr	r1, [pc, #52]	; (8001a78 <I2C_IsErrorOccurred+0x1fc>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2241      	movs	r2, #65	; 0x41
 8001a56:	2120      	movs	r1, #32
 8001a58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2242      	movs	r2, #66	; 0x42
 8001a5e:	2100      	movs	r1, #0
 8001a60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	2100      	movs	r1, #0
 8001a68:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001a6a:	2327      	movs	r3, #39	; 0x27
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b00b      	add	sp, #44	; 0x2c
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	fe00e800 	.word	0xfe00e800

08001a7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	0008      	movs	r0, r1
 8001a86:	0011      	movs	r1, r2
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	240a      	movs	r4, #10
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	2009      	movs	r0, #9
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	1c0a      	adds	r2, r1, #0
 8001a98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	059b      	lsls	r3, r3, #22
 8001aa0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	0419      	lsls	r1, r3, #16
 8001aa8:	23ff      	movs	r3, #255	; 0xff
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001aae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	0d51      	lsrs	r1, r2, #21
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	00d2      	lsls	r2, r2, #3
 8001acc:	400a      	ands	r2, r1
 8001ace:	4907      	ldr	r1, [pc, #28]	; (8001aec <I2C_TransferConfig+0x70>)
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	43d2      	mvns	r2, r2
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b007      	add	sp, #28
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	03ff63ff 	.word	0x03ff63ff

08001af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2241      	movs	r2, #65	; 0x41
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d138      	bne.n	8001b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2240      	movs	r2, #64	; 0x40
 8001b0a:	5c9b      	ldrb	r3, [r3, r2]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e032      	b.n	8001b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	2101      	movs	r1, #1
 8001b1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2124      	movs	r1, #36	; 0x24
 8001b22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	438a      	bics	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4911      	ldr	r1, [pc, #68]	; (8001b84 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2241      	movs	r2, #65	; 0x41
 8001b68:	2120      	movs	r1, #32
 8001b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	2100      	movs	r1, #0
 8001b72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	ffffefff 	.word	0xffffefff

08001b88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2241      	movs	r2, #65	; 0x41
 8001b96:	5c9b      	ldrb	r3, [r3, r2]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d139      	bne.n	8001c12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e033      	b.n	8001c14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2241      	movs	r2, #65	; 0x41
 8001bb8:	2124      	movs	r1, #36	; 0x24
 8001bba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2241      	movs	r2, #65	; 0x41
 8001c02:	2120      	movs	r1, #32
 8001c04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
  }
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	fffff0ff 	.word	0xfffff0ff

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb6c 	bl	800230c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	4bc8      	ldr	r3, [pc, #800]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3e:	4bc6      	ldr	r3, [pc, #792]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x36>
 8001c54:	e07d      	b.n	8001d52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d112      	bne.n	8001c88 <HAL_RCC_OscConfig+0x68>
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4bba      	ldr	r3, [pc, #744]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	4013      	ands	r3, r2
 8001c76:	d100      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5a>
 8001c78:	e06a      	b.n	8001d50 <HAL_RCC_OscConfig+0x130>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d166      	bne.n	8001d50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f000 fb42 	bl	800230c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x84>
 8001c94:	4bb0      	ldr	r3, [pc, #704]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0249      	lsls	r1, r1, #9
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e027      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	02db      	lsls	r3, r3, #11
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10e      	bne.n	8001cce <HAL_RCC_OscConfig+0xae>
 8001cb0:	4ba9      	ldr	r3, [pc, #676]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4ba8      	ldr	r3, [pc, #672]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	02c9      	lsls	r1, r1, #11
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	4ba6      	ldr	r3, [pc, #664]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0249      	lsls	r1, r1, #9
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e012      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cce:	4ba2      	ldr	r3, [pc, #648]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4ba1      	ldr	r3, [pc, #644]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	49a1      	ldr	r1, [pc, #644]	; (8001f5c <HAL_RCC_OscConfig+0x33c>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b9f      	ldr	r3, [pc, #636]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4b9b      	ldr	r3, [pc, #620]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cee:	499c      	ldr	r1, [pc, #624]	; (8001f60 <HAL_RCC_OscConfig+0x340>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe feb6 	bl	8000a6c <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d06:	f7fe feb1 	bl	8000a6c <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e2f9      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	029b      	lsls	r3, r3, #10
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0xe6>
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fea1 	bl	8000a6c <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7fe fe9c 	bl	8000a6c <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2e4      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d42:	4b85      	ldr	r3, [pc, #532]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x110>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCC_OscConfig+0x13e>
 8001d5c:	e099      	b.n	8001e92 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	2220      	movs	r2, #32
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d6c:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d72:	2120      	movs	r1, #32
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d13e      	bne.n	8001e0a <HAL_RCC_OscConfig+0x1ea>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d13b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d92:	4b71      	ldr	r3, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2204      	movs	r2, #4
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_RCC_OscConfig+0x186>
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e2b2      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	021a      	lsls	r2, r3, #8
 8001db6:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 fbeb 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8001dd2:	0001      	movs	r1, r0
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	220f      	movs	r2, #15
 8001ddc:	4013      	ands	r3, r2
 8001dde:	4a62      	ldr	r2, [pc, #392]	; (8001f68 <HAL_RCC_OscConfig+0x348>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	000a      	movs	r2, r1
 8001de4:	40da      	lsrs	r2, r3
 8001de6:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_RCC_OscConfig+0x34c>)
 8001de8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001dea:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_OscConfig+0x350>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2513      	movs	r5, #19
 8001df0:	197c      	adds	r4, r7, r5
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7fe fdf4 	bl	80009e0 <HAL_InitTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001dfc:	197b      	adds	r3, r7, r5
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d046      	beq.n	8001e92 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001e04:	197b      	adds	r3, r7, r5
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	e280      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d027      	beq.n	8001e60 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e10:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2209      	movs	r2, #9
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe fe23 	bl	8000a6c <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fe1e 	bl	8000a6c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e266      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2204      	movs	r2, #4
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f1      	beq.n	8001e2c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e018      	b.n	8001e92 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	438a      	bics	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fdfe 	bl	8000a6c <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe fdf9 	bl	8000a6c <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e241      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f1      	bne.n	8001e76 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2210      	movs	r2, #16
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x27e>
 8001e9c:	e0a1      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d140      	bne.n	8001f26 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x29c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e227      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <HAL_RCC_OscConfig+0x354>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	0a19      	lsrs	r1, r3, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	061a      	lsls	r2, r3, #24
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	0b5b      	lsrs	r3, r3, #13
 8001eea:	3301      	adds	r3, #1
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0212      	lsls	r2, r2, #8
 8001ef0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	210f      	movs	r1, #15
 8001efa:	400b      	ands	r3, r1
 8001efc:	491a      	ldr	r1, [pc, #104]	; (8001f68 <HAL_RCC_OscConfig+0x348>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_OscConfig+0x34c>)
 8001f04:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_OscConfig+0x350>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2513      	movs	r5, #19
 8001f0c:	197c      	adds	r4, r7, r5
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe fd66 	bl	80009e0 <HAL_InitTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f18:	197b      	adds	r3, r7, r5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d060      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	e1f2      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03f      	beq.n	8001fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fd96 	bl	8000a6c <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f44:	e018      	b.n	8001f78 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f46:	f7fe fd91 	bl	8000a6c <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d911      	bls.n	8001f78 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1d9      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	fffeffff 	.word	0xfffeffff
 8001f60:	fffbffff 	.word	0xfffbffff
 8001f64:	ffffe0ff 	.word	0xffffe0ff
 8001f68:	080029c0 	.word	0x080029c0
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004
 8001f74:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f78:	4bc9      	ldr	r3, [pc, #804]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0e0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f84:	4bc6      	ldr	r3, [pc, #792]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4ac6      	ldr	r2, [pc, #792]	; (80022a4 <HAL_RCC_OscConfig+0x684>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4bc3      	ldr	r3, [pc, #780]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f98:	4bc1      	ldr	r3, [pc, #772]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	0a19      	lsrs	r1, r3, #8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	061a      	lsls	r2, r3, #24
 8001fa6:	4bbe      	ldr	r3, [pc, #760]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	e019      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fae:	4bbc      	ldr	r3, [pc, #752]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4bbb      	ldr	r3, [pc, #748]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001fb4:	49bc      	ldr	r1, [pc, #752]	; (80022a8 <HAL_RCC_OscConfig+0x688>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fd57 	bl	8000a6c <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fd52 	bl	8000a6c <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e19a      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fd6:	4bb2      	ldr	r3, [pc, #712]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d036      	beq.n	800205a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d019      	beq.n	8002028 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff4:	4baa      	ldr	r3, [pc, #680]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff8:	4ba9      	ldr	r3, [pc, #676]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7fe fd34 	bl	8000a6c <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200a:	f7fe fd2f 	bl	8000a6c <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e177      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800201c:	4ba0      	ldr	r3, [pc, #640]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d0f1      	beq.n	800200a <HAL_RCC_OscConfig+0x3ea>
 8002026:	e018      	b.n	800205a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002028:	4b9d      	ldr	r3, [pc, #628]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800202a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202c:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7fe fd1a 	bl	8000a6c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe fd15 	bl	8000a6c <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e15d      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002050:	4b93      	ldr	r3, [pc, #588]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d1f1      	bne.n	800203e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x446>
 8002064:	e0ae      	b.n	80021c4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2023      	movs	r0, #35	; 0x23
 8002068:	183b      	adds	r3, r7, r0
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	055b      	lsls	r3, r3, #21
 8002076:	4013      	ands	r3, r2
 8002078:	d109      	bne.n	800208e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800207c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	0549      	lsls	r1, r1, #21
 8002084:	430a      	orrs	r2, r1
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002088:	183b      	adds	r3, r7, r0
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b87      	ldr	r3, [pc, #540]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d11a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b83      	ldr	r3, [pc, #524]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0049      	lsls	r1, r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fce0 	bl	8000a6c <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fcdb 	bl	8000a6c <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e123      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4cc>
 80020dc:	4b70      	ldr	r3, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80020de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	0049      	lsls	r1, r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	651a      	str	r2, [r3, #80]	; 0x50
 80020ea:	e031      	b.n	8002150 <HAL_RCC_OscConfig+0x530>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x4ee>
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f8:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80020fa:	496b      	ldr	r1, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x688>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002100:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002104:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002106:	496a      	ldr	r1, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x690>)
 8002108:	400a      	ands	r2, r1
 800210a:	651a      	str	r2, [r3, #80]	; 0x50
 800210c:	e020      	b.n	8002150 <HAL_RCC_OscConfig+0x530>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	23a0      	movs	r3, #160	; 0xa0
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	429a      	cmp	r2, r3
 8002118:	d10e      	bne.n	8002138 <HAL_RCC_OscConfig+0x518>
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800211c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800211e:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	00c9      	lsls	r1, r1, #3
 8002124:	430a      	orrs	r2, r1
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800212a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	0049      	lsls	r1, r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	651a      	str	r2, [r3, #80]	; 0x50
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x530>
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800213a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800213e:	495a      	ldr	r1, [pc, #360]	; (80022a8 <HAL_RCC_OscConfig+0x688>)
 8002140:	400a      	ands	r2, r1
 8002142:	651a      	str	r2, [r3, #80]	; 0x50
 8002144:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800214a:	4959      	ldr	r1, [pc, #356]	; (80022b0 <HAL_RCC_OscConfig+0x690>)
 800214c:	400a      	ands	r2, r1
 800214e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7fe fc88 	bl	8000a6c <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002160:	e009      	b.n	8002176 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fc83 	bl	8000a6c <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_RCC_OscConfig+0x694>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0ca      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d0ef      	beq.n	8002162 <HAL_RCC_OscConfig+0x542>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe fc72 	bl	8000a6c <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fc6d 	bl	8000a6c <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_RCC_OscConfig+0x694>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0b4      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80021a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1ef      	bne.n	800218e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ae:	2323      	movs	r3, #35	; 0x23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80021ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80021be:	493e      	ldr	r1, [pc, #248]	; (80022b8 <HAL_RCC_OscConfig+0x698>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x5ae>
 80021cc:	e09d      	b.n	800230a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5b6>
 80021d4:	e076      	b.n	80022c4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d145      	bne.n	800226a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_RCC_OscConfig+0x69c>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fc3f 	bl	8000a6c <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fc3a 	bl	8000a6c <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e082      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	049b      	lsls	r3, r3, #18
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x6a0>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	431a      	orrs	r2, r3
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800222e:	430a      	orrs	r2, r1
 8002230:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0449      	lsls	r1, r1, #17
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fc14 	bl	8000a6c <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fc0f 	bl	8000a6c <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e057      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	049b      	lsls	r3, r3, #18
 8002264:	4013      	ands	r3, r2
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x62a>
 8002268:	e04f      	b.n	800230a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002270:	4912      	ldr	r1, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x69c>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fbf9 	bl	8000a6c <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fbf4 	bl	8000a6c <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03c      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	4013      	ands	r3, r2
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x660>
 800229e:	e034      	b.n	800230a <HAL_RCC_OscConfig+0x6ea>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	ffff1fff 	.word	0xffff1fff
 80022a8:	fffffeff 	.word	0xfffffeff
 80022ac:	40007000 	.word	0x40007000
 80022b0:	fffffbff 	.word	0xfffffbff
 80022b4:	00001388 	.word	0x00001388
 80022b8:	efffffff 	.word	0xefffffff
 80022bc:	feffffff 	.word	0xfeffffff
 80022c0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x6f4>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	401a      	ands	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	23f0      	movs	r3, #240	; 0xf0
 80022ea:	039b      	lsls	r3, r3, #14
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b00a      	add	sp, #40	; 0x28
 8002312:	bdb0      	pop	{r4, r5, r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e128      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b96      	ldr	r3, [pc, #600]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d91e      	bls.n	8002378 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b93      	ldr	r3, [pc, #588]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4393      	bics	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	4b90      	ldr	r3, [pc, #576]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800234c:	f7fe fb8e 	bl	8000a6c <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	e009      	b.n	800236a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7fe fb89 	bl	8000a6c <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e109      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	4b83      	ldr	r3, [pc, #524]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	22f0      	movs	r2, #240	; 0xf0
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002392:	430a      	orrs	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
 80023a0:	e089      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023aa:	4b79      	ldr	r3, [pc, #484]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4013      	ands	r3, r2
 80023b4:	d120      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0e1      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c2:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	049b      	lsls	r3, r3, #18
 80023ca:	4013      	ands	r3, r2
 80023cc:	d114      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0d5      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ca      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023e8:	4b69      	ldr	r3, [pc, #420]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0c2      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f8:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2203      	movs	r2, #3
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fb2e 	bl	8000a6c <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d111      	bne.n	8002440 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	e009      	b.n	8002432 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241e:	f7fe fb25 	bl	8000a6c <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0a5      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002432:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	220c      	movs	r2, #12
 8002438:	4013      	ands	r3, r2
 800243a:	2b08      	cmp	r3, #8
 800243c:	d1ef      	bne.n	800241e <HAL_RCC_ClockConfig+0x106>
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d111      	bne.n	800246c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	e009      	b.n	800245e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244a:	f7fe fb0f 	bl	8000a6c <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	4a4d      	ldr	r2, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e08f      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	220c      	movs	r2, #12
 8002464:	4013      	ands	r3, r2
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_ClockConfig+0x132>
 800246a:	e024      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11b      	bne.n	80024ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002474:	e009      	b.n	800248a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002476:	f7fe faf9 	bl	8000a6c <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e079      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	220c      	movs	r2, #12
 8002490:	4013      	ands	r3, r2
 8002492:	2b04      	cmp	r3, #4
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_ClockConfig+0x15e>
 8002496:	e00e      	b.n	80024b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fae8 	bl	8000a6c <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e068      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	220c      	movs	r2, #12
 80024b2:	4013      	ands	r3, r2
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d21e      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d6:	f7fe fac9 	bl	8000a6c <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e009      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fac4 	bl	8000a6c <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e044      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2204      	movs	r2, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x27c>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	4013      	ands	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_RCC_ClockConfig+0x280>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00da      	lsls	r2, r3, #3
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002540:	f000 f832 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002544:	0001      	movs	r1, r0
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_ClockConfig+0x278>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	220f      	movs	r2, #15
 800254e:	4013      	ands	r3, r2
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x284>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	000a      	movs	r2, r1
 8002556:	40da      	lsrs	r2, r3
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_ClockConfig+0x288>)
 800255a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_ClockConfig+0x28c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	250b      	movs	r5, #11
 8002562:	197c      	adds	r4, r7, r5
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe fa3b 	bl	80009e0 <HAL_InitTick>
 800256a:	0003      	movs	r3, r0
 800256c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800256e:	197b      	adds	r3, r7, r5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002576:	197b      	adds	r3, r7, r5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	e000      	b.n	800257e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40022000 	.word	0x40022000
 800258c:	00001388 	.word	0x00001388
 8002590:	40021000 	.word	0x40021000
 8002594:	fffff8ff 	.word	0xfffff8ff
 8002598:	ffffc7ff 	.word	0xffffc7ff
 800259c:	080029c0 	.word	0x080029c0
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025ae:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	230c      	movs	r3, #12
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d014      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025be:	d900      	bls.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80025c0:	e07b      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x112>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x24>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ca:	e076      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025cc:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2210      	movs	r2, #16
 80025d2:	4013      	ands	r3, r2
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025da:	e07c      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e0:	e079      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_GetSysClockFreq+0x144>)
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e6:	e076      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	0c9a      	lsrs	r2, r3, #18
 80025ec:	230f      	movs	r3, #15
 80025ee:	401a      	ands	r2, r3
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	0d9a      	lsrs	r2, r3, #22
 80025fa:	2303      	movs	r3, #3
 80025fc:	4013      	ands	r3, r2
 80025fe:	3301      	adds	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4013      	ands	r3, r2
 800260c:	d01a      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	4a35      	ldr	r2, [pc, #212]	; (80026ec <HAL_RCC_GetSysClockFreq+0x144>)
 8002618:	2300      	movs	r3, #0
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	69f9      	ldr	r1, [r7, #28]
 800261e:	f7fd fe1f 	bl	8000260 <__aeabi_lmul>
 8002622:	0002      	movs	r2, r0
 8002624:	000b      	movs	r3, r1
 8002626:	0010      	movs	r0, r2
 8002628:	0019      	movs	r1, r3
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f7fd fdf3 	bl	8000220 <__aeabi_uldivmod>
 800263a:	0002      	movs	r2, r0
 800263c:	000b      	movs	r3, r1
 800263e:	0013      	movs	r3, r2
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	e037      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2210      	movs	r2, #16
 800264a:	4013      	ands	r3, r2
 800264c:	d01a      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002658:	2300      	movs	r3, #0
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	f7fd fdff 	bl	8000260 <__aeabi_lmul>
 8002662:	0002      	movs	r2, r0
 8002664:	000b      	movs	r3, r1
 8002666:	0010      	movs	r0, r2
 8002668:	0019      	movs	r1, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f7fd fdd3 	bl	8000220 <__aeabi_uldivmod>
 800267a:	0002      	movs	r2, r0
 800267c:	000b      	movs	r3, r1
 800267e:	0013      	movs	r3, r2
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
 8002682:	e017      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	0018      	movs	r0, r3
 8002688:	2300      	movs	r3, #0
 800268a:	0019      	movs	r1, r3
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800268e:	2300      	movs	r3, #0
 8002690:	f7fd fde6 	bl	8000260 <__aeabi_lmul>
 8002694:	0002      	movs	r2, r0
 8002696:	000b      	movs	r3, r1
 8002698:	0010      	movs	r0, r2
 800269a:	0019      	movs	r1, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	001c      	movs	r4, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	001d      	movs	r5, r3
 80026a4:	0022      	movs	r2, r4
 80026a6:	002b      	movs	r3, r5
 80026a8:	f7fd fdba 	bl	8000220 <__aeabi_uldivmod>
 80026ac:	0002      	movs	r2, r0
 80026ae:	000b      	movs	r3, r1
 80026b0:	0013      	movs	r3, r2
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026b8:	e00d      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	3301      	adds	r3, #1
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0212      	lsls	r2, r2, #8
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b00e      	add	sp, #56	; 0x38
 80026de:	bdb0      	pop	{r4, r5, r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	080029d0 	.word	0x080029d0

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80026fc:	2017      	movs	r0, #23
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	4013      	ands	r3, r2
 800270c:	d100      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800270e:	e0c7      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002710:	4b84      	ldr	r3, [pc, #528]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	d109      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800271e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002720:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0549      	lsls	r1, r1, #21
 8002726:	430a      	orrs	r2, r1
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800272a:	183b      	adds	r3, r7, r0
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d11a      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273c:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0049      	lsls	r1, r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe f98f 	bl	8000a6c <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	e008      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe f98a 	bl	8000a6c <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0d9      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4013      	ands	r3, r2
 8002770:	d0f0      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	039b      	lsls	r3, r3, #14
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	039b      	lsls	r3, r3, #14
 8002786:	4013      	ands	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	429a      	cmp	r2, r3
 800278c:	d013      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	401a      	ands	r2, r3
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	429a      	cmp	r2, r3
 800279e:	d10a      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027a0:	4b60      	ldr	r3, [pc, #384]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	029b      	lsls	r3, r3, #10
 80027a8:	401a      	ands	r2, r3
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d101      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0b1      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03b      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	23c0      	movs	r3, #192	; 0xc0
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	4013      	ands	r3, r2
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d033      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	4013      	ands	r3, r2
 80027e0:	d02e      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027e2:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0309      	lsls	r1, r1, #12
 80027f6:	430a      	orrs	r2, r1
 80027f8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002800:	494b      	ldr	r1, [pc, #300]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002802:	400a      	ands	r2, r1
 8002804:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4013      	ands	r3, r2
 8002814:	d014      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe f929 	bl	8000a6c <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	e009      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe f924 	bl	8000a6c <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e072      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d0ef      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2220      	movs	r2, #32
 8002846:	4013      	ands	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	23c0      	movs	r3, #192	; 0xc0
 8002850:	029b      	lsls	r3, r3, #10
 8002852:	401a      	ands	r2, r3
 8002854:	23c0      	movs	r3, #192	; 0xc0
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	429a      	cmp	r2, r3
 800285a:	d10c      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a35      	ldr	r2, [pc, #212]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	23c0      	movs	r3, #192	; 0xc0
 800286c:	039b      	lsls	r3, r3, #14
 800286e:	401a      	ands	r2, r3
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002878:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	029b      	lsls	r3, r3, #10
 8002882:	401a      	ands	r2, r3
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002886:	430a      	orrs	r2, r1
 8002888:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800288a:	2317      	movs	r3, #23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800289a:	4928      	ldr	r1, [pc, #160]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800289c:	400a      	ands	r2, r1
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	220c      	movs	r2, #12
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2204      	movs	r2, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2208      	movs	r2, #8
 80028e2:	4013      	ands	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	4013      	ands	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002914:	430a      	orrs	r2, r1
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b006      	add	sp, #24
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
 800292c:	fffcffff 	.word	0xfffcffff
 8002930:	fff7ffff 	.word	0xfff7ffff
 8002934:	00001388 	.word	0x00001388
 8002938:	ffcfffff 	.word	0xffcfffff
 800293c:	efffffff 	.word	0xefffffff
 8002940:	fffff3ff 	.word	0xfffff3ff
 8002944:	ffffcfff 	.word	0xffffcfff
 8002948:	fff3ffff 	.word	0xfff3ffff

0800294c <memset>:
 800294c:	0003      	movs	r3, r0
 800294e:	1882      	adds	r2, r0, r2
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4c0c      	ldr	r4, [pc, #48]	; (8002994 <__libc_init_array+0x38>)
 8002962:	4d0d      	ldr	r5, [pc, #52]	; (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	2600      	movs	r6, #0
 800296e:	f000 f819 	bl	80029a4 <_init>
 8002972:	4c0a      	ldr	r4, [pc, #40]	; (800299c <__libc_init_array+0x40>)
 8002974:	4d0a      	ldr	r5, [pc, #40]	; (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	00b3      	lsls	r3, r6, #2
 8002982:	58eb      	ldr	r3, [r5, r3]
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	00b3      	lsls	r3, r6, #2
 800298c:	58eb      	ldr	r3, [r5, r3]
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	080029e4 	.word	0x080029e4
 8002998:	080029e4 	.word	0x080029e4
 800299c:	080029e8 	.word	0x080029e8
 80029a0:	080029e4 	.word	0x080029e4

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
