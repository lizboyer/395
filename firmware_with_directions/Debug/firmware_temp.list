
firmware_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e70  08006e70  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e78  08006e78  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006e80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200000b8  08006f38  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006f38  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165cc  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c12  00000000  00000000  000366f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00039310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdf  00000000  00000000  0003a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020744  00000000  00000000  0003b737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187a3  00000000  00000000  0005be7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf078  00000000  00000000  0007461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fc8  00000000  00000000  00143698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00149660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800674c 	.word	0x0800674c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000bc 	.word	0x200000bc
 800021c:	0800674c 	.word	0x0800674c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	72fb      	strb	r3, [r7, #11]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 80005c8:	224c      	movs	r2, #76	; 0x4c
 80005ca:	2110      	movs	r1, #16
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f965 	bl	800089c <accelerometer_write>
 80005d2:	4603      	mov	r3, r0
 80005d4:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK) return status;
 80005d6:	7afb      	ldrb	r3, [r7, #11]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <acc_init+0x24>
 80005dc:	7afb      	ldrb	r3, [r7, #11]
 80005de:	e065      	b.n	80006ac <acc_init+0xf0>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2111      	movs	r1, #17
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f959 	bl	800089c <accelerometer_write>
 80005ea:	4603      	mov	r3, r0
 80005ec:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) return status;
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <acc_init+0x3c>
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	e059      	b.n	80006ac <acc_init+0xf0>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 80005f8:	2201      	movs	r2, #1
 80005fa:	210e      	movs	r1, #14
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f94d 	bl	800089c <accelerometer_write>
 8000602:	4603      	mov	r3, r0
 8000604:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <acc_init+0x54>
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	e04d      	b.n	80006ac <acc_init+0xf0>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000610:	2103      	movs	r1, #3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f850 	bl	80006b8 <read_axis>
 8000618:	4603      	mov	r3, r0
 800061a:	72fb      	strb	r3, [r7, #11]

    // enable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x80);
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	210d      	movs	r1, #13
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f93b 	bl	800089c <accelerometer_write>
 8000626:	4603      	mov	r3, r0
 8000628:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <acc_init+0x78>
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	e03b      	b.n	80006ac <acc_init+0xf0>

    // enable MLC
    status = accelerometer_write(acc, MLC_EN, 0x10);
 8000634:	2210      	movs	r2, #16
 8000636:	2105      	movs	r1, #5
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f92f 	bl	800089c <accelerometer_write>
 800063e:	4603      	mov	r3, r0
 8000640:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <acc_init+0x90>
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	e02f      	b.n	80006ac <acc_init+0xf0>

    // MLC route to INT1
    status = accelerometer_write(acc, MLC_INT1, 0x01);
 800064c:	2201      	movs	r2, #1
 800064e:	210d      	movs	r1, #13
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f923 	bl	800089c <accelerometer_write>
 8000656:	4603      	mov	r3, r0
 8000658:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <acc_init+0xa8>
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	e023      	b.n	80006ac <acc_init+0xf0>

    for (int i = 0; i < (sizeof(mlc_configuration) /
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e00f      	b.n	800068a <acc_init+0xce>
                      sizeof(ucf_line_t) ); i++ ) {
      accelerometer_write(acc, mlc_configuration[i].address, (uint8_t)mlc_configuration[i].data);
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <acc_init+0xf8>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <acc_init+0xf8>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	461a      	mov	r2, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f90c 	bl	800089c <accelerometer_write>
                      sizeof(ucf_line_t) ); i++ ) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < (sizeof(mlc_configuration) /
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8000690:	d9eb      	bls.n	800066a <acc_init+0xae>
    }

    // disable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x00);
 8000692:	2200      	movs	r2, #0
 8000694:	210d      	movs	r1, #13
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f900 	bl	800089c <accelerometer_write>
 800069c:	4603      	mov	r3, r0
 800069e:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <acc_init+0xee>
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	e000      	b.n	80006ac <acc_init+0xf0>

    return status;
 80006aa:	7afb      	ldrb	r3, [r7, #11]

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	080067f0 	.word	0x080067f0

080006b8 <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af04      	add	r7, sp, #16
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

    switch(axis){
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	f200 80d8 	bhi.w	8000884 <read_axis+0x1cc>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <read_axis+0x24>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	0800076f 	.word	0x0800076f
 80006e4:	080007ed 	.word	0x080007ed
 80006e8:	080006ed 	.word	0x080006ed
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b299      	uxth	r1, r3
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b65      	ldr	r3, [pc, #404]	; (8000894 <read_axis+0x1dc>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	2229      	movs	r2, #41	; 0x29
 8000706:	4864      	ldr	r0, [pc, #400]	; (8000898 <read_axis+0x1e0>)
 8000708:	f001 fd60 	bl	80021cc <HAL_I2C_Mem_Read>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 80a7 	bne.w	8000866 <read_axis+0x1ae>
		  acc->x_xlr = *read_buffer << 8;
 8000718:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <read_axis+0x1dc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	b299      	uxth	r1, r3
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2301      	movs	r3, #1
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b57      	ldr	r3, [pc, #348]	; (8000894 <read_axis+0x1dc>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2228      	movs	r2, #40	; 0x28
 800073e:	4856      	ldr	r0, [pc, #344]	; (8000898 <read_axis+0x1e0>)
 8000740:	f001 fd44 	bl	80021cc <HAL_I2C_Mem_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 808d 	bne.w	800086a <read_axis+0x1b2>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	885b      	ldrh	r3, [r3, #2]
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <read_axis+0x1dc>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	b21a      	sxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d17f      	bne.n	800086e <read_axis+0x1b6>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b299      	uxth	r1, r3
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <read_axis+0x1dc>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	222b      	movs	r2, #43	; 0x2b
 8000788:	4843      	ldr	r0, [pc, #268]	; (8000898 <read_axis+0x1e0>)
 800078a:	f001 fd1f 	bl	80021cc <HAL_I2C_Mem_Read>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d16c      	bne.n	8000872 <read_axis+0x1ba>
		  acc->y_xlr = *read_buffer << 8;
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <read_axis+0x1dc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	b21a      	sxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b299      	uxth	r1, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	2301      	movs	r3, #1
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <read_axis+0x1dc>)
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	222a      	movs	r2, #42	; 0x2a
 80007be:	4836      	ldr	r0, [pc, #216]	; (8000898 <read_axis+0x1e0>)
 80007c0:	f001 fd04 	bl	80021cc <HAL_I2C_Mem_Read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d153      	bne.n	8000876 <read_axis+0x1be>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	889b      	ldrh	r3, [r3, #4]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <read_axis+0x1dc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d146      	bne.n	800087a <read_axis+0x1c2>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	b299      	uxth	r1, r3
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <read_axis+0x1dc>)
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	222d      	movs	r2, #45	; 0x2d
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <read_axis+0x1e0>)
 8000808:	f001 fce0 	bl	80021cc <HAL_I2C_Mem_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d133      	bne.n	800087e <read_axis+0x1c6>
		  acc->z_xlr = *read_buffer << 8;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <read_axis+0x1dc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	b21a      	sxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b299      	uxth	r1, r3
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <read_axis+0x1dc>)
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	222c      	movs	r2, #44	; 0x2c
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <read_axis+0x1e0>)
 800083e:	f001 fcc5 	bl	80021cc <HAL_I2C_Mem_Read>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11a      	bne.n	8000882 <read_axis+0x1ca>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	88db      	ldrh	r3, [r3, #6]
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <read_axis+0x1dc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	80da      	strh	r2, [r3, #6]
		  break;
 8000864:	e00e      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000866:	bf00      	nop
 8000868:	e00c      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800086a:	bf00      	nop
 800086c:	e00a      	b.n	8000884 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 800086e:	bf00      	nop
 8000870:	e008      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000872:	bf00      	nop
 8000874:	e006      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000876:	bf00      	nop
 8000878:	e004      	b.n	8000884 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 800087a:	bf00      	nop
 800087c:	e002      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800087e:	bf00      	nop
 8000880:	e000      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000882:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000884:	b662      	cpsie	i
}
 8000886:	bf00      	nop
	}

    __enable_irq();

    return status;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000d4 	.word	0x200000d4
 8000898:	200000ec 	.word	0x200000ec

0800089c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
 80008a8:	4613      	mov	r3, r2
 80008aa:	70bb      	strb	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 80008b0:	2300      	movs	r3, #0
 80008b2:	733b      	strb	r3, [r7, #12]
	*write_buffer = data;
 80008b4:	78bb      	ldrb	r3, [r7, #2]
 80008b6:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	b299      	uxth	r1, r3
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <accelerometer_write+0x54>)
 80008d8:	f001 fb64 	bl	8001fa4 <HAL_I2C_Mem_Write>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80008e0:	b662      	cpsie	i
}
 80008e2:	bf00      	nop
	__enable_irq();
	return status;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000ec 	.word	0x200000ec

080008f4 <accelerometer_read>:
HAL_StatusTypeDef accelerometer_read(volatile accelerometer_t* acc, uint8_t reg, uint8_t* data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	460b      	mov	r3, r1
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	72fb      	strb	r3, [r7, #11]
  __ASM volatile ("cpsid i" : : : "memory");
 8000902:	b672      	cpsid	i
}
 8000904:	bf00      	nop
	__disable_irq();
    uint8_t read_buffer[] = { 1 };
 8000906:	2301      	movs	r3, #1
 8000908:	753b      	strb	r3, [r7, #20]
//	*read_buffer = data;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, reg, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b299      	uxth	r1, r3
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	b29a      	uxth	r2, r3
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <accelerometer_read+0x54>)
 800092a:	f001 fc4f 	bl	80021cc <HAL_I2C_Mem_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
	*data = *read_buffer;
 8000932:	7d3a      	ldrb	r2, [r7, #20]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000938:	b662      	cpsie	i
}
 800093a:	bf00      	nop
	__enable_irq();
	return status;
 800093c:	7dfb      	ldrb	r3, [r7, #23]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000ec 	.word	0x200000ec

0800094c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static volatile HAL_StatusTypeDef status;

int _write(int fd, char* ptr, int len) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <_write+0x28>)
 8000964:	f003 fc0c 	bl	8004180 <HAL_UART_Transmit>
  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000138 	.word	0x20000138

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//SINE WAVE START
	sample_dt = F_OUT/F_SAMPLE;
 800097e:	4b6f      	ldr	r3, [pc, #444]	; (8000b3c <main+0x1c4>)
 8000980:	4a6f      	ldr	r2, [pc, #444]	; (8000b40 <main+0x1c8>)
 8000982:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8000984:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <main+0x1cc>)
 8000986:	22a6      	movs	r2, #166	; 0xa6
 8000988:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fd3e 	bl	800140a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f8ff 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 faad 	bl	8000ef0 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000996:	f000 f947 	bl	8000c28 <MX_DAC1_Init>
  MX_I2C1_Init();
 800099a:	f000 f97f 	bl	8000c9c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800099e:	f000 f9bd 	bl	8000d1c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80009a2:	f000 fa59 	bl	8000e58 <MX_TIM2_Init>
  MX_TIM1_Init();
 80009a6:	f000 fa03 	bl	8000db0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //SINE WAVE START
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80009aa:	2100      	movs	r1, #0
 80009ac:	4866      	ldr	r0, [pc, #408]	; (8000b48 <main+0x1d0>)
 80009ae:	f000 fec4 	bl	800173a <HAL_DAC_Start>
  //SINE WAVE END

  HAL_TIM_Base_Start_IT(&htim1);
 80009b2:	4866      	ldr	r0, [pc, #408]	; (8000b4c <main+0x1d4>)
 80009b4:	f003 f882 	bl	8003abc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80009b8:	4865      	ldr	r0, [pc, #404]	; (8000b50 <main+0x1d8>)
 80009ba:	f003 f87f 	bl	8003abc <HAL_TIM_Base_Start_IT>

  uint8_t status_mlc1;

  acc_init(&xl_l);
 80009be:	4865      	ldr	r0, [pc, #404]	; (8000b54 <main+0x1dc>)
 80009c0:	f7ff fdfc 	bl	80005bc <acc_init>
  acc_init(&xl_r);
 80009c4:	4864      	ldr	r0, [pc, #400]	; (8000b58 <main+0x1e0>)
 80009c6:	f7ff fdf9 	bl	80005bc <acc_init>

  status = accelerometer_read(&xl_r, WHO_AM_I, &status_mlc1);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	461a      	mov	r2, r3
 80009ce:	210f      	movs	r1, #15
 80009d0:	4861      	ldr	r0, [pc, #388]	; (8000b58 <main+0x1e0>)
 80009d2:	f7ff ff8f 	bl	80008f4 <accelerometer_read>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <main+0x1e4>)
 80009dc:	701a      	strb	r2, [r3, #0]
  printf("ID: %d\r\n",status_mlc1);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4619      	mov	r1, r3
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <main+0x1e8>)
 80009e4:	f004 faa8 	bl	8004f38 <iprintf>

  if (status != HAL_OK) printf("init error\r\n");
 80009e8:	4b5c      	ldr	r3, [pc, #368]	; (8000b5c <main+0x1e4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <main+0x80>
 80009f2:	485c      	ldr	r0, [pc, #368]	; (8000b64 <main+0x1ec>)
 80009f4:	f004 fb06 	bl	8005004 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 127);
 80009f8:	237f      	movs	r3, #127	; 0x7f
 80009fa:	2208      	movs	r2, #8
 80009fc:	2100      	movs	r1, #0
 80009fe:	4852      	ldr	r0, [pc, #328]	; (8000b48 <main+0x1d0>)
 8000a00:	f000 feee 	bl	80017e0 <HAL_DAC_SetValue>

	  mySinVal = sinf(i_t * 2 * PI * sample_dt);//Convert from float to decimal
 8000a04:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <main+0x1f0>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a12:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000b6c <main+0x1f4>
 8000a16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <main+0x1c4>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a24:	eeb0 0a67 	vmov.f32	s0, s15
 8000a28:	f005 f956 	bl	8005cd8 <sinf>
 8000a2c:	eef0 7a40 	vmov.f32	s15, s0
 8000a30:	4b4f      	ldr	r3, [pc, #316]	; (8000b70 <main+0x1f8>)
 8000a32:	edc3 7a00 	vstr	s15, [r3]
	  myDacVal = (mySinVal + 1)*127; //Output the sample to the STM DAC
 8000a36:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <main+0x1f8>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a44:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000b74 <main+0x1fc>
 8000a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a50:	ee17 2a90 	vmov	r2, s15
 8000a54:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <main+0x200>)
 8000a56:	601a      	str	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, myDacVal);
 8000a58:	4b47      	ldr	r3, [pc, #284]	; (8000b78 <main+0x200>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4839      	ldr	r0, [pc, #228]	; (8000b48 <main+0x1d0>)
 8000a62:	f000 febd 	bl	80017e0 <HAL_DAC_SetValue>
	  i_t++;
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <main+0x1f0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <main+0x1f0>)
 8000a70:	801a      	strh	r2, [r3, #0]
	  if(i_t>= sample_N) i_t = 0;
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <main+0x1f0>)
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <main+0x1cc>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d302      	bcc.n	8000a84 <main+0x10c>
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <main+0x1f0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fd31 	bl	80014ec <HAL_Delay>

	  status = read_axis(&xl_r, ALL_AXIS);
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	4832      	ldr	r0, [pc, #200]	; (8000b58 <main+0x1e0>)
 8000a8e:	f7ff fe13 	bl	80006b8 <read_axis>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <main+0x1e4>)
 8000a98:	701a      	strb	r2, [r3, #0]
	  status = read_axis(&xl_l, ALL_AXIS);
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	482d      	ldr	r0, [pc, #180]	; (8000b54 <main+0x1dc>)
 8000a9e:	f7ff fe0b 	bl	80006b8 <read_axis>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <main+0x1e4>)
 8000aa8:	701a      	strb	r2, [r3, #0]
//	  accelerometer_read(&xl_r, MLC_STATUS_MAINPAGE, &status_mlc1);
//	  printf("status change: %d\r\n",&status_mlc1);
	  status = accelerometer_read(&xl_r, MLC0_SRC, &status_mlc1);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	461a      	mov	r2, r3
 8000aae:	2170      	movs	r1, #112	; 0x70
 8000ab0:	4829      	ldr	r0, [pc, #164]	; (8000b58 <main+0x1e0>)
 8000ab2:	f7ff ff1f 	bl	80008f4 <accelerometer_read>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <main+0x1e4>)
 8000abc:	701a      	strb	r2, [r3, #0]
//		{
//			printf("hit L \r\n");
//			HAL_TIM_Base_Start_IT(&htim2);
//		}

	if(xl_r.z_xlr < -0x2000) // hit on right
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <main+0x1e0>)
 8000ac0:	88db      	ldrh	r3, [r3, #6]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000ac8:	da2e      	bge.n	8000b28 <main+0x1b0>
	{
		if(xl_r.x_xlr < -0x100) // right
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <main+0x1e0>)
 8000acc:	885b      	ldrh	r3, [r3, #2]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8000ad4:	da11      	bge.n	8000afa <main+0x182>
		{
			if(xl_r.y_xlr < -0x1000) // right-up
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <main+0x1e0>)
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000ae0:	da02      	bge.n	8000ae8 <main+0x170>
			{
				printf("right-up\n\r");
 8000ae2:	4826      	ldr	r0, [pc, #152]	; (8000b7c <main+0x204>)
 8000ae4:	f004 fa28 	bl	8004f38 <iprintf>
			}
			if(xl_r.y_xlr > 0x4800) // right-down
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <main+0x1e0>)
 8000aea:	889b      	ldrh	r3, [r3, #4]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 8000af2:	dd02      	ble.n	8000afa <main+0x182>
			{
				printf("right-down\n\r");
 8000af4:	4822      	ldr	r0, [pc, #136]	; (8000b80 <main+0x208>)
 8000af6:	f004 fa1f 	bl	8004f38 <iprintf>
			}
		}

		if(xl_r.x_xlr > 0x00) // left
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <main+0x1e0>)
 8000afc:	885b      	ldrh	r3, [r3, #2]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dd11      	ble.n	8000b28 <main+0x1b0>
		{
			if(xl_r.y_xlr < -0x1000) // left-up
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <main+0x1e0>)
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000b0e:	da02      	bge.n	8000b16 <main+0x19e>
			{
				printf("left-up\n\r");
 8000b10:	481c      	ldr	r0, [pc, #112]	; (8000b84 <main+0x20c>)
 8000b12:	f004 fa11 	bl	8004f38 <iprintf>
			}
			if(xl_r.y_xlr > 0x6000) // left-down
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <main+0x1e0>)
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000b20:	dd02      	ble.n	8000b28 <main+0x1b0>
			{
				printf("left-down\n\r");
 8000b22:	4819      	ldr	r0, [pc, #100]	; (8000b88 <main+0x210>)
 8000b24:	f004 fa08 	bl	8004f38 <iprintf>

//		printf("howdy\r\n");
//		printf("x:%d\r\n",xl_r.x_xlr);
//		printf("y:%d\r\n",xl_r.y_xlr);
//		printf("z:%d\r\n",xl_r.z_xlr);
	  if (status != HAL_OK) printf("run error\r\n");
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <main+0x1e4>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f43f af62 	beq.w	80009f8 <main+0x80>
 8000b34:	4815      	ldr	r0, [pc, #84]	; (8000b8c <main+0x214>)
 8000b36:	f004 fa65 	bl	8005004 <puts>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 127);
 8000b3a:	e75d      	b.n	80009f8 <main+0x80>
 8000b3c:	20000268 	.word	0x20000268
 8000b40:	3bc49ba6 	.word	0x3bc49ba6
 8000b44:	2000026c 	.word	0x2000026c
 8000b48:	200000d8 	.word	0x200000d8
 8000b4c:	200001c8 	.word	0x200001c8
 8000b50:	20000214 	.word	0x20000214
 8000b54:	20000028 	.word	0x20000028
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000260 	.word	0x20000260
 8000b60:	08006764 	.word	0x08006764
 8000b64:	08006770 	.word	0x08006770
 8000b68:	2000026e 	.word	0x2000026e
 8000b6c:	40490fd0 	.word	0x40490fd0
 8000b70:	20000264 	.word	0x20000264
 8000b74:	42fe0000 	.word	0x42fe0000
 8000b78:	20000270 	.word	0x20000270
 8000b7c:	0800677c 	.word	0x0800677c
 8000b80:	08006788 	.word	0x08006788
 8000b84:	08006798 	.word	0x08006798
 8000b88:	080067a4 	.word	0x080067a4
 8000b8c:	080067b0 	.word	0x080067b0

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2238      	movs	r2, #56	; 0x38
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fb10 	bl	80051c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb6:	f001 ff61 	bl	8002a7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 ffeb 	bl	8002bc4 <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bf4:	f000 f9b4 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 faef 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c1c:	f000 f9a0 	bl	8000f60 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2230      	movs	r2, #48	; 0x30
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fac5 	bl	80051c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_DAC1_Init+0x6c>)
 8000c3c:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_DAC1_Init+0x70>)
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <MX_DAC1_Init+0x6c>)
 8000c42:	f000 fd58 	bl	80016f6 <HAL_DAC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c4c:	f000 f988 	bl	8000f60 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c50:	2302      	movs	r3, #2
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_DAC1_Init+0x6c>)
 8000c7c:	f000 fdd8 	bl	8001830 <HAL_DAC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c86:	f000 f96b 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	50000800 	.word	0x50000800

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f001 f8d4 	bl	8001e84 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 f93d 	bl	8000f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f001 fe2f 	bl	800294c <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f934 	bl	8000f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f001 fe71 	bl	80029e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f92b 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000ec 	.word	0x200000ec
 8000d14:	40005400 	.word	0x40005400
 8000d18:	10707dbc 	.word	0x10707dbc

08000d1c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d20:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <MX_LPUART1_UART_Init+0x90>)
 8000d24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d28:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000d2c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d60:	f003 f9be 	bl	80040e0 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f8f9 	bl	8000f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d72:	f003 ff55 	bl	8004c20 <HAL_UARTEx_SetTxFifoThreshold>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000d7c:	f000 f8f0 	bl	8000f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d84:	f003 ff8a 	bl	8004c9c <HAL_UARTEx_SetRxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000d8e:	f000 f8e7 	bl	8000f60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_LPUART1_UART_Init+0x8c>)
 8000d94:	f003 ff0b 	bl	8004bae <HAL_UARTEx_DisableFifoMode>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000d9e:	f000 f8df 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000138 	.word	0x20000138
 8000dac:	40008000 	.word	0x40008000

08000db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_TIM1_Init+0xa4>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dd6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000dda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dde:	2210      	movs	r2, #16
 8000de0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000dfc:	f002 fe06 	bl	8003a0c <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e06:	f000 f8ab 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000e18:	f002 feba 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e22:	f000 f89d 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM1_Init+0xa0>)
 8000e38:	f003 f8d0 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e42:	f000 f88d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001c8 	.word	0x200001c8
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <MX_TIM2_Init+0x94>)
 8000e9e:	f002 fdb5 	bl	8003a0c <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ea8:	f000 f85a 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM2_Init+0x94>)
 8000eba:	f002 fe69 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f000 f84c 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM2_Init+0x94>)
 8000ed6:	f003 f881 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 f83e 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000214 	.word	0x20000214

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_GPIO_Init+0x68>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f36:	2309      	movs	r3, #9
 8000f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_GPIO_Init+0x6c>)
 8000f4a:	f000 fe19 	bl	8001b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <HAL_DAC_MspInit+0x74>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d124      	bne.n	8001020 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_DAC_MspInit+0x78>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	2310      	movs	r3, #16
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f000 fdb0 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	50000800 	.word	0x50000800
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09c      	sub	sp, #112	; 0x70
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	2244      	movs	r2, #68	; 0x44
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f8b7 	bl	80051c4 <memset>
  if(hi2c->Instance==I2C1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <HAL_I2C_MspInit+0xe0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d153      	bne.n	8001108 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001060:	2340      	movs	r3, #64	; 0x40
 8001062:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fadd 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001078:	f7ff ff72 	bl	8000f60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a24      	ldr	r2, [pc, #144]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010be:	2304      	movs	r3, #4
 80010c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fd58 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d4:	2312      	movs	r3, #18
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	2301      	movs	r3, #1
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e0:	2304      	movs	r3, #4
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_I2C_MspInit+0xe8>)
 80010ec:	f000 fd48 	bl	8001b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0xe4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3770      	adds	r7, #112	; 0x70
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400

0800111c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09a      	sub	sp, #104	; 0x68
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2244      	movs	r2, #68	; 0x44
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 f841 	bl	80051c4 <memset>
  if(huart->Instance==LPUART1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <HAL_UART_MspInit+0xa8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d136      	bne.n	80011ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800114c:	2320      	movs	r3, #32
 800114e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fa67 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001164:	f7ff fefc 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0xac>)
 800116a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0xac>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_MspInit+0xac>)
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_UART_MspInit+0xac>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_UART_MspInit+0xac>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_UART_MspInit+0xac>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001198:	230c      	movs	r3, #12
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011a8:	230c      	movs	r3, #12
 80011aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 fce3 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3768      	adds	r7, #104	; 0x68
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40008000 	.word	0x40008000
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_TIM_Base_MspInit+0x5c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10c      	bne.n	80011f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 80011e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011f6:	e010      	b.n	800121a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001200:	d10b      	bne.n	800121a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6593      	str	r3, [r2, #88]	; 0x58
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_TIM_Base_MspInit+0x60>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40012c00 	.word	0x40012c00
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f918 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e00a      	b.n	80012ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001296:	f3af 8000 	nop.w
 800129a:	4601      	mov	r1, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	b2ca      	uxtb	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf0      	blt.n	8001296 <_read+0x12>
  }

  return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_close>:
  }
  return len;
}

int _close(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e6:	605a      	str	r2, [r3, #4]
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f003 ff82 	bl	8005260 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20008000 	.word	0x20008000
 8001388:	00000400 	.word	0x00000400
 800138c:	20000274 	.word	0x20000274
 8001390:	200003c8 	.word	0x200003c8

08001394 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490e      	ldr	r1, [pc, #56]	; (80013f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0b      	ldr	r4, [pc, #44]	; (8001404 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e2:	f7ff ffd7 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f003 ff41 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ea:	f7ff fac5 	bl	8000978 <main>

080013ee <LoopForever>:

LoopForever:
    b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   r0, =_estack
 80013f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80013fc:	08006e80 	.word	0x08006e80
  ldr r2, =_sbss
 8001400:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001404:	200003c8 	.word	0x200003c8

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>

0800140a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f93d 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f80e 	bl	800143c <HAL_InitTick>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	e001      	b.n	8001430 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800142c:	f7ff fd9e 	bl	8000f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001430:	79fb      	ldrb	r3, [r7, #7]

}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_InitTick+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d022      	beq.n	8001496 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_InitTick+0x6c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_InitTick+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f93a 	bl	80016de <HAL_SYSTICK_Config>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10f      	bne.n	8001490 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d809      	bhi.n	800148a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	2200      	movs	r2, #0
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	f000 f914 	bl	80016aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0x70>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e007      	b.n	800149a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e004      	b.n	800149a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000058 	.word	0x20000058
 80014a8:	20000050 	.word	0x20000050
 80014ac:	20000054 	.word	0x20000054

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x1c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x20>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x1c>)
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000278 	.word	0x20000278
 80014d0:	20000058 	.word	0x20000058

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000278 	.word	0x20000278

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d004      	beq.n	8001510 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_Delay+0x40>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001510:	bf00      	nop
 8001512:	f7ff ffdf 	bl	80014d4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8f7      	bhi.n	8001512 <HAL_Delay+0x26>
  {
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000058 	.word	0x20000058

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb2 	bl	8001650 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e014      	b.n	8001732 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	791b      	ldrb	r3, [r3, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fc4b 	bl	8000fb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_DAC_Start+0x16>
 800174c:	2302      	movs	r3, #2
 800174e:	e043      	b.n	80017d8 <HAL_DAC_Start+0x9e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2201      	movs	r2, #1
 800176a:	409a      	lsls	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff feb9 	bl	80014ec <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800178a:	2b02      	cmp	r3, #2
 800178c:	d11d      	bne.n	80017ca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e014      	b.n	80017ca <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2102      	movs	r1, #2
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d107      	bne.n	80017ca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0202 	orr.w	r2, r2, #2
 80017c8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	3308      	adds	r3, #8
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e004      	b.n	800181a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	3314      	adds	r3, #20
 8001818:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	461a      	mov	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_DAC_ConfigChannel+0x18>
 8001844:	2302      	movs	r3, #2
 8001846:	e192      	b.n	8001b6e <HAL_DAC_ConfigChannel+0x33e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2202      	movs	r2, #2
 8001852:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d174      	bne.n	8001946 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800185c:	f7ff fe3a 	bl	80014d4 <HAL_GetTick>
 8001860:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d134      	bne.n	80018d2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001868:	e011      	b.n	800188e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800186a:	f7ff fe33 	bl	80014d4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d90a      	bls.n	800188e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f043 0208 	orr.w	r2, r3, #8
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2203      	movs	r2, #3
 8001888:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e16f      	b.n	8001b6e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e6      	bne.n	800186a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fe25 	bl	80014ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
 80018ac:	e01e      	b.n	80018ec <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80018ae:	f7ff fe11 	bl	80014d4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d90a      	bls.n	80018d2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f043 0208 	orr.w	r2, r3, #8
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2203      	movs	r2, #3
 80018cc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e14d      	b.n	8001b6e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dbe8      	blt.n	80018ae <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff fe05 	bl	80014ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	ea02 0103 	and.w	r1, r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	21ff      	movs	r1, #255	; 0xff
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	ea02 0103 	and.w	r1, r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d11d      	bne.n	800198a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4013      	ands	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	4313      	orrs	r3, r2
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2207      	movs	r2, #7
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	4013      	ands	r3, r2
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	e00f      	b.n	80019d4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d102      	bne.n	80019c2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	e008      	b.n	80019d4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	e001      	b.n	80019d4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	6a3a      	ldr	r2, [r7, #32]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4013      	ands	r3, r2
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_DAC_ConfigChannel+0x1d8>
 8001a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a06:	e000      	b.n	8001a0a <HAL_DAC_ConfigChannel+0x1da>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a22:	4013      	ands	r3, r2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	795b      	ldrb	r3, [r3, #5]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d102      	bne.n	8001a34 <HAL_DAC_ConfigChannel+0x204>
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a32:	e000      	b.n	8001a36 <HAL_DAC_ConfigChannel+0x206>
 8001a34:	2300      	movs	r3, #0
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d114      	bne.n	8001a76 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001a4c:	f001 fd70 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8001a50:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_DAC_ConfigChannel+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d904      	bls.n	8001a64 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e00f      	b.n	8001a84 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <HAL_DAC_ConfigChannel+0x34c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d90a      	bls.n	8001a82 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e006      	b.n	8001a84 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	e000      	b.n	8001a84 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001a82:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	4313      	orrs	r3, r2
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	4313      	orrs	r3, r2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	22c0      	movs	r2, #192	; 0xc0
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	ea02 0103 	and.w	r1, r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	09896800 	.word	0x09896800
 8001b7c:	04c4b400 	.word	0x04c4b400

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b8e:	e15a      	b.n	8001e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 814c 	beq.w	8001e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a6 	beq.w	8001e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d36:	d01f      	beq.n	8001d78 <HAL_GPIO_Init+0x1f8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a4c      	ldr	r2, [pc, #304]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d019      	beq.n	8001d74 <HAL_GPIO_Init+0x1f4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4b      	ldr	r2, [pc, #300]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_GPIO_Init+0x1f0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_GPIO_Init+0x2f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00d      	beq.n	8001d6c <HAL_GPIO_Init+0x1ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a49      	ldr	r2, [pc, #292]	; (8001e78 <HAL_GPIO_Init+0x2f8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x1e8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_GPIO_Init+0x2fc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_GPIO_Init+0x1e4>
 8001d60:	2305      	movs	r3, #5
 8001d62:	e00a      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e008      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8a:	4937      	ldr	r1, [pc, #220]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dbc:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3301      	adds	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f47f ae9d 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800
 8001e74:	48000c00 	.word	0x48000c00
 8001e78:	48001000 	.word	0x48001000
 8001e7c:	48001400 	.word	0x48001400
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e081      	b.n	8001f9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff f8c0 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d104      	bne.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69d9      	ldr	r1, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	f040 80f9 	bne.w	80021be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_I2C_Mem_Write+0x34>
 8001fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0ed      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Mem_Write+0x4e>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e0e6      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ffa:	f7ff fa6b 	bl	80014d4 <HAL_GetTick>
 8001ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fac3 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d1      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2221      	movs	r2, #33	; 0x21
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002044:	88f8      	ldrh	r0, [r7, #6]
 8002046:	893a      	ldrh	r2, [r7, #8]
 8002048:	8979      	ldrh	r1, [r7, #10]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	4603      	mov	r3, r0
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f9d3 	bl	8002400 <I2C_RequestMemoryWrite>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0a9      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	2bff      	cmp	r3, #255	; 0xff
 8002074:	d90e      	bls.n	8002094 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	b2da      	uxtb	r2, r3
 8002082:	8979      	ldrh	r1, [r7, #10]
 8002084:	2300      	movs	r3, #0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fc2b 	bl	80028e8 <I2C_TransferConfig>
 8002092:	e00f      	b.n	80020b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	2300      	movs	r3, #0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fc1a 	bl	80028e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 faad 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e07b      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d034      	beq.n	800216c <HAL_I2C_Mem_Write+0x1c8>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d130      	bne.n	800216c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fa3f 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e04d      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d90e      	bls.n	800214c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	b2da      	uxtb	r2, r3
 800213a:	8979      	ldrh	r1, [r7, #10]
 800213c:	2300      	movs	r3, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fbcf 	bl	80028e8 <I2C_TransferConfig>
 800214a:	e00f      	b.n	800216c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	b2da      	uxtb	r2, r3
 800215c:	8979      	ldrh	r1, [r7, #10]
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fbbe 	bl	80028e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d19e      	bne.n	80020b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa8c 	bl	8002698 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e01a      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2220      	movs	r2, #32
 8002190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_I2C_Mem_Write+0x224>)
 800219e:	400b      	ands	r3, r1
 80021a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021be:	2302      	movs	r3, #2
  }
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]
 80021de:	460b      	mov	r3, r1
 80021e0:	813b      	strh	r3, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	f040 80fd 	bne.w	80023ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_I2C_Mem_Read+0x34>
 80021fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0f1      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_I2C_Mem_Read+0x4e>
 8002216:	2302      	movs	r3, #2
 8002218:	e0ea      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002222:	f7ff f957 	bl	80014d4 <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2319      	movs	r3, #25
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f9af 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d5      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2222      	movs	r2, #34	; 0x22
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800226c:	88f8      	ldrh	r0, [r7, #6]
 800226e:	893a      	ldrh	r2, [r7, #8]
 8002270:	8979      	ldrh	r1, [r7, #10]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4603      	mov	r3, r0
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f913 	bl	80024a8 <I2C_RequestMemoryRead>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0ad      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d90e      	bls.n	80022bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	8979      	ldrh	r1, [r7, #10]
 80022ac:	4b52      	ldr	r3, [pc, #328]	; (80023f8 <HAL_I2C_Mem_Read+0x22c>)
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fb17 	bl	80028e8 <I2C_TransferConfig>
 80022ba:	e00f      	b.n	80022dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	8979      	ldrh	r1, [r7, #10]
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_I2C_Mem_Read+0x22c>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fb06 	bl	80028e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f956 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07c      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d034      	beq.n	800239c <HAL_I2C_Mem_Read+0x1d0>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	d130      	bne.n	800239c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f927 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e04d      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d90e      	bls.n	800237c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fab7 	bl	80028e8 <I2C_TransferConfig>
 800237a:	e00f      	b.n	800239c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	b2da      	uxtb	r2, r3
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 faa6 	bl	80028e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d19a      	bne.n	80022dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f974 	bl	8002698 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e01a      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2220      	movs	r2, #32
 80023c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_I2C_Mem_Read+0x230>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	80002400 	.word	0x80002400
 80023fc:	fe00e800 	.word	0xfe00e800

08002400 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	817b      	strh	r3, [r7, #10]
 8002412:	460b      	mov	r3, r1
 8002414:	813b      	strh	r3, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <I2C_RequestMemoryWrite+0xa4>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa5d 	bl	80028e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	69b9      	ldr	r1, [r7, #24]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8f0 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02c      	b.n	800249c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
 8002452:	e015      	b.n	8002480 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	69b9      	ldr	r1, [r7, #24]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8d6 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e012      	b.n	800249c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002476:	893b      	ldrh	r3, [r7, #8]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2200      	movs	r2, #0
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f884 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	80002000 	.word	0x80002000

080024a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	817b      	strh	r3, [r7, #10]
 80024ba:	460b      	mov	r3, r1
 80024bc:	813b      	strh	r3, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <I2C_RequestMemoryRead+0xa4>)
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa0a 	bl	80028e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f89d 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e02c      	b.n	8002542 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
 80024f8:	e015      	b.n	8002526 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024fa:	893b      	ldrh	r3, [r7, #8]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	b29b      	uxth	r3, r3
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f883 	bl	8002618 <I2C_WaitOnTXISFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e012      	b.n	8002542 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800251c:	893b      	ldrh	r3, [r7, #8]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f831 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	80002000 	.word	0x80002000

08002550 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d103      	bne.n	800256e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d007      	beq.n	800258c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	619a      	str	r2, [r3, #24]
  }
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a8:	e022      	b.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d01e      	beq.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7fe ff8f 	bl	80014d4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d113      	bne.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e00f      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d0cd      	beq.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002624:	e02c      	b.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f870 	bl	8002710 <I2C_IsErrorOccurred>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e02a      	b.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d01e      	beq.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7fe ff47 	bl	80014d4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d113      	bne.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d1cb      	bne.n	8002626 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a4:	e028      	b.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f830 	bl	8002710 <I2C_IsErrorOccurred>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e026      	b.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7fe ff0b 	bl	80014d4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d1cf      	bne.n	80026a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d075      	beq.n	8002828 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002744:	e056      	b.n	80027f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d052      	beq.n	80027f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7fe fec1 	bl	80014d4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_IsErrorOccurred+0x54>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d147      	bne.n	80027f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002776:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002786:	d12e      	bne.n	80027e6 <I2C_IsErrorOccurred+0xd6>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278e:	d02a      	beq.n	80027e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b20      	cmp	r3, #32
 8002794:	d027      	beq.n	80027e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027a6:	f7fe fe95 	bl	80014d4 <HAL_GetTick>
 80027aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e01b      	b.n	80027e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027ae:	f7fe fe91 	bl	80014d4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b19      	cmp	r3, #25
 80027ba:	d914      	bls.n	80027e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d1dc      	bne.n	80027ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d003      	beq.n	800280a <I2C_IsErrorOccurred+0xfa>
 8002802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002806:	2b00      	cmp	r3, #0
 8002808:	d09d      	beq.n	8002746 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800280a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2220      	movs	r2, #32
 8002818:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01c      	beq.n	80028d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fe56 	bl	8002550 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <I2C_IsErrorOccurred+0x1d4>)
 80028b0:	400b      	ands	r3, r1
 80028b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3728      	adds	r7, #40	; 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	4613      	mov	r3, r2
 80028f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002900:	7a7b      	ldrb	r3, [r7, #9]
 8002902:	041b      	lsls	r3, r3, #16
 8002904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002908:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	4313      	orrs	r3, r2
 8002912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002916:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	0d5b      	lsrs	r3, r3, #21
 8002922:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <I2C_TransferConfig+0x60>)
 8002928:	430b      	orrs	r3, r1
 800292a:	43db      	mvns	r3, r3
 800292c:	ea02 0103 	and.w	r1, r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	03ff63ff 	.word	0x03ff63ff

0800294c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	d138      	bne.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800296c:	2302      	movs	r3, #2
 800296e:	e032      	b.n	80029d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d139      	bne.n	8002a6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e033      	b.n	8002a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2224      	movs	r2, #36	; 0x24
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d141      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a96:	d131      	bne.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a98:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9e:	4a46      	ldr	r2, [pc, #280]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa8:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab0:	4a41      	ldr	r2, [pc, #260]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2232      	movs	r2, #50	; 0x32
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a3f      	ldr	r2, [pc, #252]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ace:	e002      	b.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d102      	bne.n	8002aea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f2      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d158      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e057      	b.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b0c:	e04d      	b.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b14:	d141      	bne.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b22:	d131      	bne.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b2a:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2232      	movs	r2, #50	; 0x32
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	0c9b      	lsrs	r3, r3, #18
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5a:	e002      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d102      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f2      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d112      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e011      	b.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b98:	e007      	b.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	20000050 	.word	0x20000050
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e306      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d075      	beq.n	8002cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bec:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3e>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d002      	beq.n	8002c08 <HAL_RCC_OscConfig+0x44>
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b8d      	ldr	r3, [pc, #564]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d157      	bne.n	8002ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e2e1      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x74>
 8002c2a:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a84      	ldr	r2, [pc, #528]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7e      	ldr	r2, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7b      	ldr	r2, [pc, #492]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a74      	ldr	r2, [pc, #464]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fc2a 	bl	80014d4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fc26 	bl	80014d4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e2a6      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fc16 	bl	80014d4 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fc12 	bl	80014d4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e292      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cda:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce4:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_OscConfig+0x136>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x13c>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x154>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e265      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4946      	ldr	r1, [pc, #280]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d2c:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fb83 	bl	800143c <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e251      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe fbbe 	bl	80014d4 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fbba 	bl	80014d4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e23a      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	492d      	ldr	r1, [pc, #180]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
 8002d8e:	e01a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fb9a 	bl	80014d4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7fe fb96 	bl	80014d4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e216      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1e0>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d041      	beq.n	8002e56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fb73 	bl	80014d4 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fb6f 	bl	80014d4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1ef      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ef      	beq.n	8002df2 <HAL_RCC_OscConfig+0x22e>
 8002e12:	e020      	b.n	8002e56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fb56 	bl	80014d4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2a:	e00d      	b.n	8002e48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fb52 	bl	80014d4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d906      	bls.n	8002e48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1d2      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e48:	4b8c      	ldr	r3, [pc, #560]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ea      	bne.n	8002e2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e68:	4b84      	ldr	r3, [pc, #528]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2b4>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x2b6>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	4b79      	ldr	r3, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x4bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4bc>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fb0f 	bl	80014d4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fe fb0b 	bl	80014d4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e18b      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4bc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x32e>
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	e024      	b.n	8002f3c <HAL_RCC_OscConfig+0x378>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d110      	bne.n	8002f1c <HAL_RCC_OscConfig+0x358>
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	4a5e      	ldr	r2, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCC_OscConfig+0x378>
 8002f1c:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fac6 	bl	80014d4 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fac2 	bl	80014d4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e140      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCC_OscConfig+0x388>
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe faaf 	bl	80014d4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe faab 	bl	80014d4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e129      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03c      	beq.n	8003036 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fca:	4a2c      	ldr	r2, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fa7e 	bl	80014d4 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fdc:	f7fe fa7a 	bl	80014d4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0fa      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x418>
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fa61 	bl	80014d4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003016:	f7fe fa5d 	bl	80014d4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0dd      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80d1 	beq.w	80031e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b0c      	cmp	r3, #12
 800304a:	f000 808b 	beq.w	8003164 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d15e      	bne.n	8003114 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <HAL_RCC_OscConfig+0x4b8>)
 800305c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe fa37 	bl	80014d4 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003068:	e00c      	b.n	8003084 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe fa33 	bl	80014d4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d905      	bls.n	8003084 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0b3      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ec      	bne.n	800306a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b56      	ldr	r3, [pc, #344]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <HAL_RCC_OscConfig+0x62c>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6a11      	ldr	r1, [r2, #32]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030aa:	0212      	lsls	r2, r2, #8
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030b2:	0852      	lsrs	r2, r2, #1
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0552      	lsls	r2, r2, #21
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0652      	lsls	r2, r2, #25
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030ca:	06d2      	lsls	r2, r2, #27
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4947      	ldr	r1, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f9f2 	bl	80014d4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe f9ee 	bl	80014d4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06e      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x530>
 8003112:	e066      	b.n	80031e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003120:	4b32      	ldr	r3, [pc, #200]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a31      	ldr	r2, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003132:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe f9ca 	bl	80014d4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe f9c6 	bl	80014d4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e046      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x580>
 8003162:	e03e      	b.n	80031e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e039      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_RCC_OscConfig+0x628>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d12c      	bne.n	80031de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	3b01      	subs	r3, #1
 8003190:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d123      	bne.n	80031de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11b      	bne.n	80031de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d113      	bne.n	80031de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d109      	bne.n	80031de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	019f800c 	.word	0x019f800c

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e11e      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b91      	ldr	r3, [pc, #580]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 020f 	bic.w	r2, r3, #15
 8003222:	498c      	ldr	r1, [pc, #560]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b8a      	ldr	r3, [pc, #552]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e106      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d073      	beq.n	8003330 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d129      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0f4      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003260:	f000 f99e 	bl	80035a0 <RCC_GetSysClockFreqFromPLLSource>
 8003264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_RCC_ClockConfig+0x268>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d93f      	bls.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800326e:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d033      	beq.n	80032ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d12f      	bne.n	80032ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003296:	4a70      	ldr	r2, [pc, #448]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e024      	b.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0c6      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0be      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032cc:	f000 f8ce 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCC_ClockConfig+0x268>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d909      	bls.n	80032ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032da:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b5a      	ldr	r3, [pc, #360]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4957      	ldr	r1, [pc, #348]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fe f8e8 	bl	80014d4 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe f8e4 	bl	80014d4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e095      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a42      	ldr	r2, [pc, #264]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003368:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800336a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800336e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4936      	ldr	r1, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
 8003382:	e008      	b.n	8003396 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d105      	bne.n	8003396 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4a32      	ldr	r2, [pc, #200]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003394:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d21d      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 020f 	bic.w	r2, r3, #15
 80033ac:	4929      	ldr	r1, [pc, #164]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033b4:	f7fe f88e 	bl	80014d4 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe f88a 	bl	80014d4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e03b      	b.n	800344a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1ed      	bne.n	80033bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4917      	ldr	r1, [pc, #92]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490f      	ldr	r1, [pc, #60]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341e:	f000 f825 	bl	800346c <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_ClockConfig+0x264>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <HAL_RCC_ClockConfig+0x26c>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x270>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fffa 	bl	800143c <HAL_InitTick>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	04c4b400 	.word	0x04c4b400
 8003460:	08006a2c 	.word	0x08006a2c
 8003464:	20000050 	.word	0x20000050
 8003468:	20000054 	.word	0x20000054

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d102      	bne.n	8003484 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e047      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d102      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e03e      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d136      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3301      	adds	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d10c      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	0a12      	lsrs	r2, r2, #8
 80034ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	617b      	str	r3, [r7, #20]
      break;
 80034d8:	e00c      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	0a12      	lsrs	r2, r2, #8
 80034e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
      break;
 80034f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0e5b      	lsrs	r3, r3, #25
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e001      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003514:	693b      	ldr	r3, [r7, #16]
}
 8003516:	4618      	mov	r0, r3
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000050 	.word	0x20000050

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08006a3c 	.word	0x08006a3c

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003578:	f7ff ffda 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0adb      	lsrs	r3, r3, #11
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_RCC_GetPCLK2Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08006a3c 	.word	0x08006a3c

080035a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3301      	adds	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d10c      	bne.n	80035de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ce:	68d2      	ldr	r2, [r2, #12]
 80035d0:	0a12      	lsrs	r2, r2, #8
 80035d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
    break;
 80035dc:	e00c      	b.n	80035f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	0a12      	lsrs	r2, r2, #8
 80035ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
    break;
 80035f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0e5b      	lsrs	r3, r3, #25
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003612:	687b      	ldr	r3, [r7, #4]
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	007a1200 	.word	0x007a1200
 8003628:	00f42400 	.word	0x00f42400

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003634:	2300      	movs	r3, #0
 8003636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003638:	2300      	movs	r3, #0
 800363a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8098 	beq.w	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b40      	ldr	r3, [pc, #256]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	4a3f      	ldr	r2, [pc, #252]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6593      	str	r3, [r2, #88]	; 0x58
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a39      	ldr	r2, [pc, #228]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003682:	f7fd ff27 	bl	80014d4 <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003688:	e009      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fd ff23 	bl	80014d4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d902      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	74fb      	strb	r3, [r7, #19]
        break;
 800369c:	e005      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800369e:	4b30      	ldr	r3, [pc, #192]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ef      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d159      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01e      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d019      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4a1f      	ldr	r2, [pc, #124]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd fee3 	bl	80014d4 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003710:	e00b      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fd fedf 	bl	80014d4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d902      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	74fb      	strb	r3, [r7, #19]
            break;
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ec      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4903      	ldr	r1, [pc, #12]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	74bb      	strb	r3, [r7, #18]
 800375a:	e005      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800375c:	40021000 	.word	0x40021000
 8003760:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003768:	7c7b      	ldrb	r3, [r7, #17]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4ba6      	ldr	r3, [pc, #664]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	4aa5      	ldr	r2, [pc, #660]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003786:	4ba0      	ldr	r3, [pc, #640]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f023 0203 	bic.w	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	499c      	ldr	r1, [pc, #624]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a8:	4b97      	ldr	r3, [pc, #604]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 020c 	bic.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4994      	ldr	r1, [pc, #592]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ca:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	498b      	ldr	r1, [pc, #556]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ec:	4b86      	ldr	r3, [pc, #536]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4983      	ldr	r1, [pc, #524]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800380e:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	497a      	ldr	r1, [pc, #488]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003830:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	4972      	ldr	r1, [pc, #456]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4969      	ldr	r1, [pc, #420]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4961      	ldr	r1, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	4958      	ldr	r1, [pc, #352]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	4950      	ldr	r1, [pc, #320]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f0:	4b45      	ldr	r3, [pc, #276]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4942      	ldr	r1, [pc, #264]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a3c      	ldr	r2, [pc, #240]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003928:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4934      	ldr	r1, [pc, #208]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003960:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4926      	ldr	r1, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4918      	ldr	r1, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d105      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	490a      	ldr	r1, [pc, #40]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fbca 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f99a 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e04a      	b.n	8003b6a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1a      	ldr	r2, [pc, #104]	; (8003b84 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d115      	bne.n	8003b54 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d015      	beq.n	8003b66 <HAL_TIM_Base_Start_IT+0xaa>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d011      	beq.n	8003b66 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e000      	b.n	8003b68 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40013400 	.word	0x40013400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	00010007 	.word	0x00010007

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0de      	b.n	8003d6a <HAL_TIM_ConfigClockSource+0x1da>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a63      	ldr	r2, [pc, #396]	; (8003d74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f000 80a9 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003bec:	4a61      	ldr	r2, [pc, #388]	; (8003d74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f200 80ae 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003bf4:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	f000 80a1 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003bfc:	4a5e      	ldr	r2, [pc, #376]	; (8003d78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	f200 80a6 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c04:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	f000 8099 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c0c:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f200 809e 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c14:	4a5a      	ldr	r2, [pc, #360]	; (8003d80 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	f000 8091 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f200 8096 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c28:	f000 8089 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c30:	f200 808e 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x128>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_TIM_ConfigClockSource+0x1c6>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c50:	2b70      	cmp	r3, #112	; 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xfa>
 8003c54:	2b70      	cmp	r3, #112	; 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x16e>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c60:	2b50      	cmp	r3, #80	; 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x14e>
 8003c64:	2b50      	cmp	r3, #80	; 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x18e>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c70:	2b30      	cmp	r3, #48	; 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x1ae>
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f000 f97f 	bl	8003f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f000 f968 	bl	8003f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8da 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	; 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f933 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f8f9 	bl	8003f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	; 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f923 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 f8ba 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	; 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f913 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 f90a 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100070 	.word	0x00100070
 8003d78:	00100040 	.word	0x00100040
 8003d7c:	00100030 	.word	0x00100030
 8003d80:	00100020 	.word	0x00100020

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <TIM_Base_SetConfig+0x104>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00f      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d00b      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a39      	ldr	r2, [pc, #228]	; (8003e8c <TIM_Base_SetConfig+0x108>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <TIM_Base_SetConfig+0x10c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a37      	ldr	r2, [pc, #220]	; (8003e94 <TIM_Base_SetConfig+0x110>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <TIM_Base_SetConfig+0x104>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <TIM_Base_SetConfig+0x108>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <TIM_Base_SetConfig+0x10c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <TIM_Base_SetConfig+0x110>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <TIM_Base_SetConfig+0x104>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0xe8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <TIM_Base_SetConfig+0x110>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0xe8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0xe8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0xe8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40013400 	.word	0x40013400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f043 0307 	orr.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e065      	b.n	80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d108      	bne.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800402e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d013      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40014000 	.word	0x40014000

080040e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e042      	b.n	8004178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fd f809 	bl	800111c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2224      	movs	r2, #36	; 0x24
 800410e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8c2 	bl	80042ac <UART_SetConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb82 	bl	8004844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fc09 	bl	8004988 <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	2b20      	cmp	r3, #32
 8004198:	f040 8083 	bne.w	80042a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_UART_Transmit+0x28>
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e07b      	b.n	80042a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Transmit+0x3a>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e074      	b.n	80042a4 <HAL_UART_Transmit+0x124>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2221      	movs	r2, #33	; 0x21
 80041ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041d2:	f7fd f97f 	bl	80014d4 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d108      	bne.n	8004204 <HAL_UART_Transmit+0x84>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e003      	b.n	800420c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004214:	e02c      	b.n	8004270 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fbfc 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e039      	b.n	80042a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004244:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3302      	adds	r3, #2
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e007      	b.n	800425e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1cc      	bne.n	8004216 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	2140      	movs	r1, #64	; 0x40
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fbc9 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e006      	b.n	80042a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b08c      	sub	sp, #48	; 0x30
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4bab      	ldr	r3, [pc, #684]	; (8004588 <UART_SetConfig+0x2dc>)
 80042dc:	4013      	ands	r3, r2
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4aa0      	ldr	r2, [pc, #640]	; (800458c <UART_SetConfig+0x2e0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004314:	4313      	orrs	r3, r2
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004322:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432c:	430b      	orrs	r3, r1
 800432e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	f023 010f 	bic.w	r1, r3, #15
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a91      	ldr	r2, [pc, #580]	; (8004590 <UART_SetConfig+0x2e4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d125      	bne.n	800439c <UART_SetConfig+0xf0>
 8004350:	4b90      	ldr	r3, [pc, #576]	; (8004594 <UART_SetConfig+0x2e8>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d81a      	bhi.n	8004394 <UART_SetConfig+0xe8>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0xb8>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004375 	.word	0x08004375
 8004368:	08004385 	.word	0x08004385
 800436c:	0800437d 	.word	0x0800437d
 8004370:	0800438d 	.word	0x0800438d
 8004374:	2301      	movs	r3, #1
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437a:	e0d6      	b.n	800452a <UART_SetConfig+0x27e>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004382:	e0d2      	b.n	800452a <UART_SetConfig+0x27e>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e0ce      	b.n	800452a <UART_SetConfig+0x27e>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004392:	e0ca      	b.n	800452a <UART_SetConfig+0x27e>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439a:	e0c6      	b.n	800452a <UART_SetConfig+0x27e>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a7d      	ldr	r2, [pc, #500]	; (8004598 <UART_SetConfig+0x2ec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d138      	bne.n	8004418 <UART_SetConfig+0x16c>
 80043a6:	4b7b      	ldr	r3, [pc, #492]	; (8004594 <UART_SetConfig+0x2e8>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d82d      	bhi.n	8004410 <UART_SetConfig+0x164>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0x110>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	08004411 	.word	0x08004411
 80043c4:	08004411 	.word	0x08004411
 80043c8:	08004411 	.word	0x08004411
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004411 	.word	0x08004411
 80043d8:	08004411 	.word	0x08004411
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	08004411 	.word	0x08004411
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004409 	.word	0x08004409
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f6:	e098      	b.n	800452a <UART_SetConfig+0x27e>
 80043f8:	2302      	movs	r3, #2
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fe:	e094      	b.n	800452a <UART_SetConfig+0x27e>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004406:	e090      	b.n	800452a <UART_SetConfig+0x27e>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440e:	e08c      	b.n	800452a <UART_SetConfig+0x27e>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004416:	e088      	b.n	800452a <UART_SetConfig+0x27e>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5f      	ldr	r2, [pc, #380]	; (800459c <UART_SetConfig+0x2f0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d125      	bne.n	800446e <UART_SetConfig+0x1c2>
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <UART_SetConfig+0x2e8>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d016      	beq.n	800445e <UART_SetConfig+0x1b2>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d818      	bhi.n	8004466 <UART_SetConfig+0x1ba>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d00a      	beq.n	800444e <UART_SetConfig+0x1a2>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d814      	bhi.n	8004466 <UART_SetConfig+0x1ba>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <UART_SetConfig+0x19a>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d008      	beq.n	8004456 <UART_SetConfig+0x1aa>
 8004444:	e00f      	b.n	8004466 <UART_SetConfig+0x1ba>
 8004446:	2300      	movs	r3, #0
 8004448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444c:	e06d      	b.n	800452a <UART_SetConfig+0x27e>
 800444e:	2302      	movs	r3, #2
 8004450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004454:	e069      	b.n	800452a <UART_SetConfig+0x27e>
 8004456:	2304      	movs	r3, #4
 8004458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445c:	e065      	b.n	800452a <UART_SetConfig+0x27e>
 800445e:	2308      	movs	r3, #8
 8004460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004464:	e061      	b.n	800452a <UART_SetConfig+0x27e>
 8004466:	2310      	movs	r3, #16
 8004468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446c:	e05d      	b.n	800452a <UART_SetConfig+0x27e>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <UART_SetConfig+0x2f4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d125      	bne.n	80044c4 <UART_SetConfig+0x218>
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <UART_SetConfig+0x2e8>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004482:	2bc0      	cmp	r3, #192	; 0xc0
 8004484:	d016      	beq.n	80044b4 <UART_SetConfig+0x208>
 8004486:	2bc0      	cmp	r3, #192	; 0xc0
 8004488:	d818      	bhi.n	80044bc <UART_SetConfig+0x210>
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d00a      	beq.n	80044a4 <UART_SetConfig+0x1f8>
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d814      	bhi.n	80044bc <UART_SetConfig+0x210>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <UART_SetConfig+0x1f0>
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d008      	beq.n	80044ac <UART_SetConfig+0x200>
 800449a:	e00f      	b.n	80044bc <UART_SetConfig+0x210>
 800449c:	2300      	movs	r3, #0
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e042      	b.n	800452a <UART_SetConfig+0x27e>
 80044a4:	2302      	movs	r3, #2
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e03e      	b.n	800452a <UART_SetConfig+0x27e>
 80044ac:	2304      	movs	r3, #4
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e03a      	b.n	800452a <UART_SetConfig+0x27e>
 80044b4:	2308      	movs	r3, #8
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ba:	e036      	b.n	800452a <UART_SetConfig+0x27e>
 80044bc:	2310      	movs	r3, #16
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c2:	e032      	b.n	800452a <UART_SetConfig+0x27e>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a30      	ldr	r2, [pc, #192]	; (800458c <UART_SetConfig+0x2e0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d12a      	bne.n	8004524 <UART_SetConfig+0x278>
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <UART_SetConfig+0x2e8>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044dc:	d01a      	beq.n	8004514 <UART_SetConfig+0x268>
 80044de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e2:	d81b      	bhi.n	800451c <UART_SetConfig+0x270>
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e8:	d00c      	beq.n	8004504 <UART_SetConfig+0x258>
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d815      	bhi.n	800451c <UART_SetConfig+0x270>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <UART_SetConfig+0x250>
 80044f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f8:	d008      	beq.n	800450c <UART_SetConfig+0x260>
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x270>
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e012      	b.n	800452a <UART_SetConfig+0x27e>
 8004504:	2302      	movs	r3, #2
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e00e      	b.n	800452a <UART_SetConfig+0x27e>
 800450c:	2304      	movs	r3, #4
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e00a      	b.n	800452a <UART_SetConfig+0x27e>
 8004514:	2308      	movs	r3, #8
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e006      	b.n	800452a <UART_SetConfig+0x27e>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004522:	e002      	b.n	800452a <UART_SetConfig+0x27e>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <UART_SetConfig+0x2e0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	f040 80a8 	bne.w	8004686 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800453a:	2b08      	cmp	r3, #8
 800453c:	d834      	bhi.n	80045a8 <UART_SetConfig+0x2fc>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x298>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004569 	.word	0x08004569
 8004548:	080045a9 	.word	0x080045a9
 800454c:	08004571 	.word	0x08004571
 8004550:	080045a9 	.word	0x080045a9
 8004554:	08004577 	.word	0x08004577
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045a9 	.word	0x080045a9
 8004564:	0800457f 	.word	0x0800457f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fe ffee 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 800456c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800456e:	e021      	b.n	80045b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <UART_SetConfig+0x2f8>)
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004574:	e01e      	b.n	80045b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004576:	f7fe ff79 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800457c:	e01a      	b.n	80045b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004584:	e016      	b.n	80045b4 <UART_SetConfig+0x308>
 8004586:	bf00      	nop
 8004588:	cfff69f3 	.word	0xcfff69f3
 800458c:	40008000 	.word	0x40008000
 8004590:	40013800 	.word	0x40013800
 8004594:	40021000 	.word	0x40021000
 8004598:	40004400 	.word	0x40004400
 800459c:	40004800 	.word	0x40004800
 80045a0:	40004c00 	.word	0x40004c00
 80045a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 812a 	beq.w	8004810 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	4a9e      	ldr	r2, [pc, #632]	; (800483c <UART_SetConfig+0x590>)
 80045c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d305      	bcc.n	80045ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d903      	bls.n	80045f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045f2:	e10d      	b.n	8004810 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	2200      	movs	r2, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	60fa      	str	r2, [r7, #12]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	4a8e      	ldr	r2, [pc, #568]	; (800483c <UART_SetConfig+0x590>)
 8004602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004606:	b29b      	uxth	r3, r3
 8004608:	2200      	movs	r2, #0
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004616:	f7fb fe53 	bl	80002c0 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	020b      	lsls	r3, r1, #8
 800462c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004630:	0202      	lsls	r2, r0, #8
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	6849      	ldr	r1, [r1, #4]
 8004636:	0849      	lsrs	r1, r1, #1
 8004638:	2000      	movs	r0, #0
 800463a:	460c      	mov	r4, r1
 800463c:	4605      	mov	r5, r0
 800463e:	eb12 0804 	adds.w	r8, r2, r4
 8004642:	eb43 0905 	adc.w	r9, r3, r5
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	469a      	mov	sl, r3
 800464e:	4693      	mov	fp, r2
 8004650:	4652      	mov	r2, sl
 8004652:	465b      	mov	r3, fp
 8004654:	4640      	mov	r0, r8
 8004656:	4649      	mov	r1, r9
 8004658:	f7fb fe32 	bl	80002c0 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4613      	mov	r3, r2
 8004662:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466a:	d308      	bcc.n	800467e <UART_SetConfig+0x3d2>
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d204      	bcs.n	800467e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e0c8      	b.n	8004810 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004684:	e0c4      	b.n	8004810 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d167      	bne.n	8004760 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004694:	2b08      	cmp	r3, #8
 8004696:	d828      	bhi.n	80046ea <UART_SetConfig+0x43e>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x3f4>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fe ff40 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe ff52 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b5a      	ldr	r3, [pc, #360]	; (8004840 <UART_SetConfig+0x594>)
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fec7 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8089 	beq.w	8004810 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	4a4e      	ldr	r2, [pc, #312]	; (800483c <UART_SetConfig+0x590>)
 8004704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004708:	461a      	mov	r2, r3
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004710:	005a      	lsls	r2, r3, #1
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	441a      	add	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d916      	bls.n	8004758 <UART_SetConfig+0x4ac>
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d212      	bcs.n	8004758 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f023 030f 	bic.w	r3, r3, #15
 800473a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	b29a      	uxth	r2, r3
 8004748:	8bfb      	ldrh	r3, [r7, #30]
 800474a:	4313      	orrs	r3, r2
 800474c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	8bfa      	ldrh	r2, [r7, #30]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e05b      	b.n	8004810 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800475e:	e057      	b.n	8004810 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004764:	2b08      	cmp	r3, #8
 8004766:	d828      	bhi.n	80047ba <UART_SetConfig+0x50e>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x4c4>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047bb 	.word	0x080047bb
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047bb 	.word	0x080047bb
 800478c:	080047bb 	.word	0x080047bb
 8004790:	080047b3 	.word	0x080047b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe fed8 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800479a:	e014      	b.n	80047c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7fe feea 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 80047a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047a2:	e010      	b.n	80047c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <UART_SetConfig+0x594>)
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047a8:	e00d      	b.n	80047c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047aa:	f7fe fe5f 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047b0:	e009      	b.n	80047c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047c4:	bf00      	nop
    }

    if (pclk != 0U)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d021      	beq.n	8004810 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <UART_SetConfig+0x590>)
 80047d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	fbb3 f2f2 	udiv	r2, r3, r2
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	441a      	add	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d909      	bls.n	800480a <UART_SetConfig+0x55e>
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d205      	bcs.n	800480a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	b29a      	uxth	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e002      	b.n	8004810 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2201      	movs	r2, #1
 8004814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2201      	movs	r2, #1
 800481c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800482c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004830:	4618      	mov	r0, r3
 8004832:	3730      	adds	r7, #48	; 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	08006a44 	.word	0x08006a44
 8004840:	00f42400 	.word	0x00f42400

08004844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01a      	beq.n	800495a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004942:	d10a      	bne.n	800495a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004998:	f7fc fd9c 	bl	80014d4 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d10e      	bne.n	80049ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f82f 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e025      	b.n	8004a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d10e      	bne.n	80049f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f819 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e00f      	b.n	8004a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b09c      	sub	sp, #112	; 0x70
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e0a9      	b.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	f000 80a5 	beq.w	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fc fd4b 	bl	80014d4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d140      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a64:	667b      	str	r3, [r7, #100]	; 0x64
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e5      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e069      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d051      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d149      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b4c:	623a      	str	r2, [r7, #32]
 8004b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e010      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f43f af46 	beq.w	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3770      	adds	r7, #112	; 0x70
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e027      	b.n	8004c14 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e02d      	b.n	8004c94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f84f 	bl	8004d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e02d      	b.n	8004d10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f811 	bl	8004d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d38:	e031      	b.n	8004d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d3e:	2308      	movs	r3, #8
 8004d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0e5b      	lsrs	r3, r3, #25
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	0f5b      	lsrs	r3, r3, #29
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	7b3a      	ldrb	r2, [r7, #12]
 8004d66:	4911      	ldr	r1, [pc, #68]	; (8004dac <UARTEx_SetNbDataToProcess+0x94>)
 8004d68:	5c8a      	ldrb	r2, [r1, r2]
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d6e:	7b3a      	ldrb	r2, [r7, #12]
 8004d70:	490f      	ldr	r1, [pc, #60]	; (8004db0 <UARTEx_SetNbDataToProcess+0x98>)
 8004d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	7b7a      	ldrb	r2, [r7, #13]
 8004d84:	4909      	ldr	r1, [pc, #36]	; (8004dac <UARTEx_SetNbDataToProcess+0x94>)
 8004d86:	5c8a      	ldrb	r2, [r1, r2]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d8c:	7b7a      	ldrb	r2, [r7, #13]
 8004d8e:	4908      	ldr	r1, [pc, #32]	; (8004db0 <UARTEx_SetNbDataToProcess+0x98>)
 8004d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	08006a5c 	.word	0x08006a5c
 8004db0:	08006a64 	.word	0x08006a64

08004db4 <std>:
 8004db4:	2300      	movs	r3, #0
 8004db6:	b510      	push	{r4, lr}
 8004db8:	4604      	mov	r4, r0
 8004dba:	e9c0 3300 	strd	r3, r3, [r0]
 8004dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc2:	6083      	str	r3, [r0, #8]
 8004dc4:	8181      	strh	r1, [r0, #12]
 8004dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc8:	81c2      	strh	r2, [r0, #14]
 8004dca:	6183      	str	r3, [r0, #24]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	2208      	movs	r2, #8
 8004dd0:	305c      	adds	r0, #92	; 0x5c
 8004dd2:	f000 f9f7 	bl	80051c4 <memset>
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <std+0x58>)
 8004dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <std+0x5c>)
 8004ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <std+0x60>)
 8004de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <std+0x64>)
 8004de4:	6323      	str	r3, [r4, #48]	; 0x30
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <std+0x68>)
 8004de8:	6224      	str	r4, [r4, #32]
 8004dea:	429c      	cmp	r4, r3
 8004dec:	d006      	beq.n	8004dfc <std+0x48>
 8004dee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004df2:	4294      	cmp	r4, r2
 8004df4:	d002      	beq.n	8004dfc <std+0x48>
 8004df6:	33d0      	adds	r3, #208	; 0xd0
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d105      	bne.n	8004e08 <std+0x54>
 8004dfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e04:	f000 ba56 	b.w	80052b4 <__retarget_lock_init_recursive>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08005015 	.word	0x08005015
 8004e10:	08005037 	.word	0x08005037
 8004e14:	0800506f 	.word	0x0800506f
 8004e18:	08005093 	.word	0x08005093
 8004e1c:	2000027c 	.word	0x2000027c

08004e20 <stdio_exit_handler>:
 8004e20:	4a02      	ldr	r2, [pc, #8]	; (8004e2c <stdio_exit_handler+0xc>)
 8004e22:	4903      	ldr	r1, [pc, #12]	; (8004e30 <stdio_exit_handler+0x10>)
 8004e24:	4803      	ldr	r0, [pc, #12]	; (8004e34 <stdio_exit_handler+0x14>)
 8004e26:	f000 b869 	b.w	8004efc <_fwalk_sglue>
 8004e2a:	bf00      	nop
 8004e2c:	2000005c 	.word	0x2000005c
 8004e30:	08005b61 	.word	0x08005b61
 8004e34:	20000068 	.word	0x20000068

08004e38 <cleanup_stdio>:
 8004e38:	6841      	ldr	r1, [r0, #4]
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <cleanup_stdio+0x34>)
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
 8004e42:	d001      	beq.n	8004e48 <cleanup_stdio+0x10>
 8004e44:	f000 fe8c 	bl	8005b60 <_fflush_r>
 8004e48:	68a1      	ldr	r1, [r4, #8]
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <cleanup_stdio+0x38>)
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d002      	beq.n	8004e56 <cleanup_stdio+0x1e>
 8004e50:	4620      	mov	r0, r4
 8004e52:	f000 fe85 	bl	8005b60 <_fflush_r>
 8004e56:	68e1      	ldr	r1, [r4, #12]
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <cleanup_stdio+0x3c>)
 8004e5a:	4299      	cmp	r1, r3
 8004e5c:	d004      	beq.n	8004e68 <cleanup_stdio+0x30>
 8004e5e:	4620      	mov	r0, r4
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	f000 be7c 	b.w	8005b60 <_fflush_r>
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2000027c 	.word	0x2000027c
 8004e70:	200002e4 	.word	0x200002e4
 8004e74:	2000034c 	.word	0x2000034c

08004e78 <global_stdio_init.part.0>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <global_stdio_init.part.0+0x30>)
 8004e7c:	4c0b      	ldr	r4, [pc, #44]	; (8004eac <global_stdio_init.part.0+0x34>)
 8004e7e:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <global_stdio_init.part.0+0x38>)
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	4620      	mov	r0, r4
 8004e84:	2200      	movs	r2, #0
 8004e86:	2104      	movs	r1, #4
 8004e88:	f7ff ff94 	bl	8004db4 <std>
 8004e8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e90:	2201      	movs	r2, #1
 8004e92:	2109      	movs	r1, #9
 8004e94:	f7ff ff8e 	bl	8004db4 <std>
 8004e98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea2:	2112      	movs	r1, #18
 8004ea4:	f7ff bf86 	b.w	8004db4 <std>
 8004ea8:	200003b4 	.word	0x200003b4
 8004eac:	2000027c 	.word	0x2000027c
 8004eb0:	08004e21 	.word	0x08004e21

08004eb4 <__sfp_lock_acquire>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__sfp_lock_acquire+0x8>)
 8004eb6:	f000 b9fe 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8004eba:	bf00      	nop
 8004ebc:	200003bd 	.word	0x200003bd

08004ec0 <__sfp_lock_release>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__sfp_lock_release+0x8>)
 8004ec2:	f000 b9f9 	b.w	80052b8 <__retarget_lock_release_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	200003bd 	.word	0x200003bd

08004ecc <__sinit>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4604      	mov	r4, r0
 8004ed0:	f7ff fff0 	bl	8004eb4 <__sfp_lock_acquire>
 8004ed4:	6a23      	ldr	r3, [r4, #32]
 8004ed6:	b11b      	cbz	r3, 8004ee0 <__sinit+0x14>
 8004ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004edc:	f7ff bff0 	b.w	8004ec0 <__sfp_lock_release>
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <__sinit+0x28>)
 8004ee2:	6223      	str	r3, [r4, #32]
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <__sinit+0x2c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f5      	bne.n	8004ed8 <__sinit+0xc>
 8004eec:	f7ff ffc4 	bl	8004e78 <global_stdio_init.part.0>
 8004ef0:	e7f2      	b.n	8004ed8 <__sinit+0xc>
 8004ef2:	bf00      	nop
 8004ef4:	08004e39 	.word	0x08004e39
 8004ef8:	200003b4 	.word	0x200003b4

08004efc <_fwalk_sglue>:
 8004efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f00:	4607      	mov	r7, r0
 8004f02:	4688      	mov	r8, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	2600      	movs	r6, #0
 8004f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f10:	d505      	bpl.n	8004f1e <_fwalk_sglue+0x22>
 8004f12:	6824      	ldr	r4, [r4, #0]
 8004f14:	2c00      	cmp	r4, #0
 8004f16:	d1f7      	bne.n	8004f08 <_fwalk_sglue+0xc>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	89ab      	ldrh	r3, [r5, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d907      	bls.n	8004f34 <_fwalk_sglue+0x38>
 8004f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	d003      	beq.n	8004f34 <_fwalk_sglue+0x38>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4638      	mov	r0, r7
 8004f30:	47c0      	blx	r8
 8004f32:	4306      	orrs	r6, r0
 8004f34:	3568      	adds	r5, #104	; 0x68
 8004f36:	e7e9      	b.n	8004f0c <_fwalk_sglue+0x10>

08004f38 <iprintf>:
 8004f38:	b40f      	push	{r0, r1, r2, r3}
 8004f3a:	b507      	push	{r0, r1, r2, lr}
 8004f3c:	4906      	ldr	r1, [pc, #24]	; (8004f58 <iprintf+0x20>)
 8004f3e:	ab04      	add	r3, sp, #16
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f46:	6881      	ldr	r1, [r0, #8]
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	f000 fad9 	bl	8005500 <_vfiprintf_r>
 8004f4e:	b003      	add	sp, #12
 8004f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f54:	b004      	add	sp, #16
 8004f56:	4770      	bx	lr
 8004f58:	200000b4 	.word	0x200000b4

08004f5c <_puts_r>:
 8004f5c:	6a03      	ldr	r3, [r0, #32]
 8004f5e:	b570      	push	{r4, r5, r6, lr}
 8004f60:	6884      	ldr	r4, [r0, #8]
 8004f62:	4605      	mov	r5, r0
 8004f64:	460e      	mov	r6, r1
 8004f66:	b90b      	cbnz	r3, 8004f6c <_puts_r+0x10>
 8004f68:	f7ff ffb0 	bl	8004ecc <__sinit>
 8004f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f6e:	07db      	lsls	r3, r3, #31
 8004f70:	d405      	bmi.n	8004f7e <_puts_r+0x22>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	0598      	lsls	r0, r3, #22
 8004f76:	d402      	bmi.n	8004f7e <_puts_r+0x22>
 8004f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7a:	f000 f99c 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	0719      	lsls	r1, r3, #28
 8004f82:	d513      	bpl.n	8004fac <_puts_r+0x50>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	b18b      	cbz	r3, 8004fac <_puts_r+0x50>
 8004f88:	3e01      	subs	r6, #1
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60a3      	str	r3, [r4, #8]
 8004f94:	b9e9      	cbnz	r1, 8004fd2 <_puts_r+0x76>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da2e      	bge.n	8004ff8 <_puts_r+0x9c>
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	210a      	movs	r1, #10
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 f87b 	bl	800509a <__swbuf_r>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d007      	beq.n	8004fb8 <_puts_r+0x5c>
 8004fa8:	250a      	movs	r5, #10
 8004faa:	e007      	b.n	8004fbc <_puts_r+0x60>
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 f8b0 	bl	8005114 <__swsetup_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d0e7      	beq.n	8004f88 <_puts_r+0x2c>
 8004fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fbe:	07da      	lsls	r2, r3, #31
 8004fc0:	d405      	bmi.n	8004fce <_puts_r+0x72>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	059b      	lsls	r3, r3, #22
 8004fc6:	d402      	bmi.n	8004fce <_puts_r+0x72>
 8004fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fca:	f000 f975 	bl	80052b8 <__retarget_lock_release_recursive>
 8004fce:	4628      	mov	r0, r5
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da04      	bge.n	8004fe0 <_puts_r+0x84>
 8004fd6:	69a2      	ldr	r2, [r4, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	dc06      	bgt.n	8004fea <_puts_r+0x8e>
 8004fdc:	290a      	cmp	r1, #10
 8004fde:	d004      	beq.n	8004fea <_puts_r+0x8e>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	6022      	str	r2, [r4, #0]
 8004fe6:	7019      	strb	r1, [r3, #0]
 8004fe8:	e7cf      	b.n	8004f8a <_puts_r+0x2e>
 8004fea:	4622      	mov	r2, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f854 	bl	800509a <__swbuf_r>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d1c9      	bne.n	8004f8a <_puts_r+0x2e>
 8004ff6:	e7df      	b.n	8004fb8 <_puts_r+0x5c>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	250a      	movs	r5, #10
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	701d      	strb	r5, [r3, #0]
 8005002:	e7db      	b.n	8004fbc <_puts_r+0x60>

08005004 <puts>:
 8005004:	4b02      	ldr	r3, [pc, #8]	; (8005010 <puts+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f7ff bfa7 	b.w	8004f5c <_puts_r>
 800500e:	bf00      	nop
 8005010:	200000b4 	.word	0x200000b4

08005014 <__sread>:
 8005014:	b510      	push	{r4, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501c:	f000 f8fc 	bl	8005218 <_read_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	bfab      	itete	ge
 8005024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005026:	89a3      	ldrhlt	r3, [r4, #12]
 8005028:	181b      	addge	r3, r3, r0
 800502a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800502e:	bfac      	ite	ge
 8005030:	6563      	strge	r3, [r4, #84]	; 0x54
 8005032:	81a3      	strhlt	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__swrite>:
 8005036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503a:	461f      	mov	r7, r3
 800503c:	898b      	ldrh	r3, [r1, #12]
 800503e:	05db      	lsls	r3, r3, #23
 8005040:	4605      	mov	r5, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4616      	mov	r6, r2
 8005046:	d505      	bpl.n	8005054 <__swrite+0x1e>
 8005048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504c:	2302      	movs	r3, #2
 800504e:	2200      	movs	r2, #0
 8005050:	f000 f8d0 	bl	80051f4 <_lseek_r>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	4632      	mov	r2, r6
 8005062:	463b      	mov	r3, r7
 8005064:	4628      	mov	r0, r5
 8005066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	f000 b8e7 	b.w	800523c <_write_r>

0800506e <__sseek>:
 800506e:	b510      	push	{r4, lr}
 8005070:	460c      	mov	r4, r1
 8005072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005076:	f000 f8bd 	bl	80051f4 <_lseek_r>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	bf15      	itete	ne
 8005080:	6560      	strne	r0, [r4, #84]	; 0x54
 8005082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800508a:	81a3      	strheq	r3, [r4, #12]
 800508c:	bf18      	it	ne
 800508e:	81a3      	strhne	r3, [r4, #12]
 8005090:	bd10      	pop	{r4, pc}

08005092 <__sclose>:
 8005092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005096:	f000 b89d 	b.w	80051d4 <_close_r>

0800509a <__swbuf_r>:
 800509a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509c:	460e      	mov	r6, r1
 800509e:	4614      	mov	r4, r2
 80050a0:	4605      	mov	r5, r0
 80050a2:	b118      	cbz	r0, 80050ac <__swbuf_r+0x12>
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	b90b      	cbnz	r3, 80050ac <__swbuf_r+0x12>
 80050a8:	f7ff ff10 	bl	8004ecc <__sinit>
 80050ac:	69a3      	ldr	r3, [r4, #24]
 80050ae:	60a3      	str	r3, [r4, #8]
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	071a      	lsls	r2, r3, #28
 80050b4:	d525      	bpl.n	8005102 <__swbuf_r+0x68>
 80050b6:	6923      	ldr	r3, [r4, #16]
 80050b8:	b31b      	cbz	r3, 8005102 <__swbuf_r+0x68>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	1a98      	subs	r0, r3, r2
 80050c0:	6963      	ldr	r3, [r4, #20]
 80050c2:	b2f6      	uxtb	r6, r6
 80050c4:	4283      	cmp	r3, r0
 80050c6:	4637      	mov	r7, r6
 80050c8:	dc04      	bgt.n	80050d4 <__swbuf_r+0x3a>
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fd47 	bl	8005b60 <_fflush_r>
 80050d2:	b9e0      	cbnz	r0, 800510e <__swbuf_r+0x74>
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60a3      	str	r3, [r4, #8]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	6022      	str	r2, [r4, #0]
 80050e0:	701e      	strb	r6, [r3, #0]
 80050e2:	6962      	ldr	r2, [r4, #20]
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d004      	beq.n	80050f4 <__swbuf_r+0x5a>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	07db      	lsls	r3, r3, #31
 80050ee:	d506      	bpl.n	80050fe <__swbuf_r+0x64>
 80050f0:	2e0a      	cmp	r6, #10
 80050f2:	d104      	bne.n	80050fe <__swbuf_r+0x64>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fd32 	bl	8005b60 <_fflush_r>
 80050fc:	b938      	cbnz	r0, 800510e <__swbuf_r+0x74>
 80050fe:	4638      	mov	r0, r7
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 f805 	bl	8005114 <__swsetup_r>
 800510a:	2800      	cmp	r0, #0
 800510c:	d0d5      	beq.n	80050ba <__swbuf_r+0x20>
 800510e:	f04f 37ff 	mov.w	r7, #4294967295
 8005112:	e7f4      	b.n	80050fe <__swbuf_r+0x64>

08005114 <__swsetup_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <__swsetup_r+0xac>)
 8005118:	4605      	mov	r5, r0
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	460c      	mov	r4, r1
 800511e:	b118      	cbz	r0, 8005128 <__swsetup_r+0x14>
 8005120:	6a03      	ldr	r3, [r0, #32]
 8005122:	b90b      	cbnz	r3, 8005128 <__swsetup_r+0x14>
 8005124:	f7ff fed2 	bl	8004ecc <__sinit>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800512e:	0718      	lsls	r0, r3, #28
 8005130:	d422      	bmi.n	8005178 <__swsetup_r+0x64>
 8005132:	06d9      	lsls	r1, r3, #27
 8005134:	d407      	bmi.n	8005146 <__swsetup_r+0x32>
 8005136:	2309      	movs	r3, #9
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e034      	b.n	80051b0 <__swsetup_r+0x9c>
 8005146:	0758      	lsls	r0, r3, #29
 8005148:	d512      	bpl.n	8005170 <__swsetup_r+0x5c>
 800514a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800514c:	b141      	cbz	r1, 8005160 <__swsetup_r+0x4c>
 800514e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005152:	4299      	cmp	r1, r3
 8005154:	d002      	beq.n	800515c <__swsetup_r+0x48>
 8005156:	4628      	mov	r0, r5
 8005158:	f000 f8b0 	bl	80052bc <_free_r>
 800515c:	2300      	movs	r3, #0
 800515e:	6363      	str	r3, [r4, #52]	; 0x34
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005166:	81a3      	strh	r3, [r4, #12]
 8005168:	2300      	movs	r3, #0
 800516a:	6063      	str	r3, [r4, #4]
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f043 0308 	orr.w	r3, r3, #8
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	b94b      	cbnz	r3, 8005190 <__swsetup_r+0x7c>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005186:	d003      	beq.n	8005190 <__swsetup_r+0x7c>
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fd36 	bl	8005bfc <__smakebuf_r>
 8005190:	89a0      	ldrh	r0, [r4, #12]
 8005192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005196:	f010 0301 	ands.w	r3, r0, #1
 800519a:	d00a      	beq.n	80051b2 <__swsetup_r+0x9e>
 800519c:	2300      	movs	r3, #0
 800519e:	60a3      	str	r3, [r4, #8]
 80051a0:	6963      	ldr	r3, [r4, #20]
 80051a2:	425b      	negs	r3, r3
 80051a4:	61a3      	str	r3, [r4, #24]
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	b943      	cbnz	r3, 80051bc <__swsetup_r+0xa8>
 80051aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051ae:	d1c4      	bne.n	800513a <__swsetup_r+0x26>
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	0781      	lsls	r1, r0, #30
 80051b4:	bf58      	it	pl
 80051b6:	6963      	ldrpl	r3, [r4, #20]
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	e7f4      	b.n	80051a6 <__swsetup_r+0x92>
 80051bc:	2000      	movs	r0, #0
 80051be:	e7f7      	b.n	80051b0 <__swsetup_r+0x9c>
 80051c0:	200000b4 	.word	0x200000b4

080051c4 <memset>:
 80051c4:	4402      	add	r2, r0
 80051c6:	4603      	mov	r3, r0
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <memset+0xa>
 80051cc:	4770      	bx	lr
 80051ce:	f803 1b01 	strb.w	r1, [r3], #1
 80051d2:	e7f9      	b.n	80051c8 <memset+0x4>

080051d4 <_close_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d06      	ldr	r5, [pc, #24]	; (80051f0 <_close_r+0x1c>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	f7fc f86d 	bl	80012be <_close>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_close_r+0x1a>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_close_r+0x1a>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	200003b8 	.word	0x200003b8

080051f4 <_lseek_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	; (8005214 <_lseek_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc f882 	bl	800130c <_lseek>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_lseek_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_lseek_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	200003b8 	.word	0x200003b8

08005218 <_read_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	; (8005238 <_read_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fc f82c 	bl	8001284 <_read>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_read_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_read_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200003b8 	.word	0x200003b8

0800523c <_write_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	; (800525c <_write_r+0x20>)
 8005240:	4604      	mov	r4, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fb fb7e 	bl	800094c <_write>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_write_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_write_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	200003b8 	.word	0x200003b8

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	; (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	200000b4 	.word	0x200000b4

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f001 fa64 	bl	800674c <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08006e78 	.word	0x08006e78
 80052a8:	08006e78 	.word	0x08006e78
 80052ac:	08006e78 	.word	0x08006e78
 80052b0:	08006e7c 	.word	0x08006e7c

080052b4 <__retarget_lock_init_recursive>:
 80052b4:	4770      	bx	lr

080052b6 <__retarget_lock_acquire_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_release_recursive>:
 80052b8:	4770      	bx	lr
	...

080052bc <_free_r>:
 80052bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052be:	2900      	cmp	r1, #0
 80052c0:	d044      	beq.n	800534c <_free_r+0x90>
 80052c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c6:	9001      	str	r0, [sp, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f1a1 0404 	sub.w	r4, r1, #4
 80052ce:	bfb8      	it	lt
 80052d0:	18e4      	addlt	r4, r4, r3
 80052d2:	f000 f8df 	bl	8005494 <__malloc_lock>
 80052d6:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <_free_r+0x94>)
 80052d8:	9801      	ldr	r0, [sp, #4]
 80052da:	6813      	ldr	r3, [r2, #0]
 80052dc:	b933      	cbnz	r3, 80052ec <_free_r+0x30>
 80052de:	6063      	str	r3, [r4, #4]
 80052e0:	6014      	str	r4, [r2, #0]
 80052e2:	b003      	add	sp, #12
 80052e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e8:	f000 b8da 	b.w	80054a0 <__malloc_unlock>
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d908      	bls.n	8005302 <_free_r+0x46>
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	1961      	adds	r1, r4, r5
 80052f4:	428b      	cmp	r3, r1
 80052f6:	bf01      	itttt	eq
 80052f8:	6819      	ldreq	r1, [r3, #0]
 80052fa:	685b      	ldreq	r3, [r3, #4]
 80052fc:	1949      	addeq	r1, r1, r5
 80052fe:	6021      	streq	r1, [r4, #0]
 8005300:	e7ed      	b.n	80052de <_free_r+0x22>
 8005302:	461a      	mov	r2, r3
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b10b      	cbz	r3, 800530c <_free_r+0x50>
 8005308:	42a3      	cmp	r3, r4
 800530a:	d9fa      	bls.n	8005302 <_free_r+0x46>
 800530c:	6811      	ldr	r1, [r2, #0]
 800530e:	1855      	adds	r5, r2, r1
 8005310:	42a5      	cmp	r5, r4
 8005312:	d10b      	bne.n	800532c <_free_r+0x70>
 8005314:	6824      	ldr	r4, [r4, #0]
 8005316:	4421      	add	r1, r4
 8005318:	1854      	adds	r4, r2, r1
 800531a:	42a3      	cmp	r3, r4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	d1e0      	bne.n	80052e2 <_free_r+0x26>
 8005320:	681c      	ldr	r4, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	6053      	str	r3, [r2, #4]
 8005326:	440c      	add	r4, r1
 8005328:	6014      	str	r4, [r2, #0]
 800532a:	e7da      	b.n	80052e2 <_free_r+0x26>
 800532c:	d902      	bls.n	8005334 <_free_r+0x78>
 800532e:	230c      	movs	r3, #12
 8005330:	6003      	str	r3, [r0, #0]
 8005332:	e7d6      	b.n	80052e2 <_free_r+0x26>
 8005334:	6825      	ldr	r5, [r4, #0]
 8005336:	1961      	adds	r1, r4, r5
 8005338:	428b      	cmp	r3, r1
 800533a:	bf04      	itt	eq
 800533c:	6819      	ldreq	r1, [r3, #0]
 800533e:	685b      	ldreq	r3, [r3, #4]
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	bf04      	itt	eq
 8005344:	1949      	addeq	r1, r1, r5
 8005346:	6021      	streq	r1, [r4, #0]
 8005348:	6054      	str	r4, [r2, #4]
 800534a:	e7ca      	b.n	80052e2 <_free_r+0x26>
 800534c:	b003      	add	sp, #12
 800534e:	bd30      	pop	{r4, r5, pc}
 8005350:	200003c0 	.word	0x200003c0

08005354 <sbrk_aligned>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4e0e      	ldr	r6, [pc, #56]	; (8005390 <sbrk_aligned+0x3c>)
 8005358:	460c      	mov	r4, r1
 800535a:	6831      	ldr	r1, [r6, #0]
 800535c:	4605      	mov	r5, r0
 800535e:	b911      	cbnz	r1, 8005366 <sbrk_aligned+0x12>
 8005360:	f000 fcaa 	bl	8005cb8 <_sbrk_r>
 8005364:	6030      	str	r0, [r6, #0]
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 fca5 	bl	8005cb8 <_sbrk_r>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	d00a      	beq.n	8005388 <sbrk_aligned+0x34>
 8005372:	1cc4      	adds	r4, r0, #3
 8005374:	f024 0403 	bic.w	r4, r4, #3
 8005378:	42a0      	cmp	r0, r4
 800537a:	d007      	beq.n	800538c <sbrk_aligned+0x38>
 800537c:	1a21      	subs	r1, r4, r0
 800537e:	4628      	mov	r0, r5
 8005380:	f000 fc9a 	bl	8005cb8 <_sbrk_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d101      	bne.n	800538c <sbrk_aligned+0x38>
 8005388:	f04f 34ff 	mov.w	r4, #4294967295
 800538c:	4620      	mov	r0, r4
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	200003c4 	.word	0x200003c4

08005394 <_malloc_r>:
 8005394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005398:	1ccd      	adds	r5, r1, #3
 800539a:	f025 0503 	bic.w	r5, r5, #3
 800539e:	3508      	adds	r5, #8
 80053a0:	2d0c      	cmp	r5, #12
 80053a2:	bf38      	it	cc
 80053a4:	250c      	movcc	r5, #12
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	4607      	mov	r7, r0
 80053aa:	db01      	blt.n	80053b0 <_malloc_r+0x1c>
 80053ac:	42a9      	cmp	r1, r5
 80053ae:	d905      	bls.n	80053bc <_malloc_r+0x28>
 80053b0:	230c      	movs	r3, #12
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	2600      	movs	r6, #0
 80053b6:	4630      	mov	r0, r6
 80053b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005490 <_malloc_r+0xfc>
 80053c0:	f000 f868 	bl	8005494 <__malloc_lock>
 80053c4:	f8d8 3000 	ldr.w	r3, [r8]
 80053c8:	461c      	mov	r4, r3
 80053ca:	bb5c      	cbnz	r4, 8005424 <_malloc_r+0x90>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	f7ff ffc0 	bl	8005354 <sbrk_aligned>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	4604      	mov	r4, r0
 80053d8:	d155      	bne.n	8005486 <_malloc_r+0xf2>
 80053da:	f8d8 4000 	ldr.w	r4, [r8]
 80053de:	4626      	mov	r6, r4
 80053e0:	2e00      	cmp	r6, #0
 80053e2:	d145      	bne.n	8005470 <_malloc_r+0xdc>
 80053e4:	2c00      	cmp	r4, #0
 80053e6:	d048      	beq.n	800547a <_malloc_r+0xe6>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	4631      	mov	r1, r6
 80053ec:	4638      	mov	r0, r7
 80053ee:	eb04 0903 	add.w	r9, r4, r3
 80053f2:	f000 fc61 	bl	8005cb8 <_sbrk_r>
 80053f6:	4581      	cmp	r9, r0
 80053f8:	d13f      	bne.n	800547a <_malloc_r+0xe6>
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	1a6d      	subs	r5, r5, r1
 80053fe:	4629      	mov	r1, r5
 8005400:	4638      	mov	r0, r7
 8005402:	f7ff ffa7 	bl	8005354 <sbrk_aligned>
 8005406:	3001      	adds	r0, #1
 8005408:	d037      	beq.n	800547a <_malloc_r+0xe6>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	442b      	add	r3, r5
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	f8d8 3000 	ldr.w	r3, [r8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d038      	beq.n	800548a <_malloc_r+0xf6>
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	42a2      	cmp	r2, r4
 800541c:	d12b      	bne.n	8005476 <_malloc_r+0xe2>
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	e00f      	b.n	8005444 <_malloc_r+0xb0>
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	1b52      	subs	r2, r2, r5
 8005428:	d41f      	bmi.n	800546a <_malloc_r+0xd6>
 800542a:	2a0b      	cmp	r2, #11
 800542c:	d917      	bls.n	800545e <_malloc_r+0xca>
 800542e:	1961      	adds	r1, r4, r5
 8005430:	42a3      	cmp	r3, r4
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	bf18      	it	ne
 8005436:	6059      	strne	r1, [r3, #4]
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	bf08      	it	eq
 800543c:	f8c8 1000 	streq.w	r1, [r8]
 8005440:	5162      	str	r2, [r4, r5]
 8005442:	604b      	str	r3, [r1, #4]
 8005444:	4638      	mov	r0, r7
 8005446:	f104 060b 	add.w	r6, r4, #11
 800544a:	f000 f829 	bl	80054a0 <__malloc_unlock>
 800544e:	f026 0607 	bic.w	r6, r6, #7
 8005452:	1d23      	adds	r3, r4, #4
 8005454:	1af2      	subs	r2, r6, r3
 8005456:	d0ae      	beq.n	80053b6 <_malloc_r+0x22>
 8005458:	1b9b      	subs	r3, r3, r6
 800545a:	50a3      	str	r3, [r4, r2]
 800545c:	e7ab      	b.n	80053b6 <_malloc_r+0x22>
 800545e:	42a3      	cmp	r3, r4
 8005460:	6862      	ldr	r2, [r4, #4]
 8005462:	d1dd      	bne.n	8005420 <_malloc_r+0x8c>
 8005464:	f8c8 2000 	str.w	r2, [r8]
 8005468:	e7ec      	b.n	8005444 <_malloc_r+0xb0>
 800546a:	4623      	mov	r3, r4
 800546c:	6864      	ldr	r4, [r4, #4]
 800546e:	e7ac      	b.n	80053ca <_malloc_r+0x36>
 8005470:	4634      	mov	r4, r6
 8005472:	6876      	ldr	r6, [r6, #4]
 8005474:	e7b4      	b.n	80053e0 <_malloc_r+0x4c>
 8005476:	4613      	mov	r3, r2
 8005478:	e7cc      	b.n	8005414 <_malloc_r+0x80>
 800547a:	230c      	movs	r3, #12
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4638      	mov	r0, r7
 8005480:	f000 f80e 	bl	80054a0 <__malloc_unlock>
 8005484:	e797      	b.n	80053b6 <_malloc_r+0x22>
 8005486:	6025      	str	r5, [r4, #0]
 8005488:	e7dc      	b.n	8005444 <_malloc_r+0xb0>
 800548a:	605b      	str	r3, [r3, #4]
 800548c:	deff      	udf	#255	; 0xff
 800548e:	bf00      	nop
 8005490:	200003c0 	.word	0x200003c0

08005494 <__malloc_lock>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__malloc_lock+0x8>)
 8005496:	f7ff bf0e 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 800549a:	bf00      	nop
 800549c:	200003bc 	.word	0x200003bc

080054a0 <__malloc_unlock>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__malloc_unlock+0x8>)
 80054a2:	f7ff bf09 	b.w	80052b8 <__retarget_lock_release_recursive>
 80054a6:	bf00      	nop
 80054a8:	200003bc 	.word	0x200003bc

080054ac <__sfputc_r>:
 80054ac:	6893      	ldr	r3, [r2, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	b410      	push	{r4}
 80054b4:	6093      	str	r3, [r2, #8]
 80054b6:	da08      	bge.n	80054ca <__sfputc_r+0x1e>
 80054b8:	6994      	ldr	r4, [r2, #24]
 80054ba:	42a3      	cmp	r3, r4
 80054bc:	db01      	blt.n	80054c2 <__sfputc_r+0x16>
 80054be:	290a      	cmp	r1, #10
 80054c0:	d103      	bne.n	80054ca <__sfputc_r+0x1e>
 80054c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c6:	f7ff bde8 	b.w	800509a <__swbuf_r>
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	1c58      	adds	r0, r3, #1
 80054ce:	6010      	str	r0, [r2, #0]
 80054d0:	7019      	strb	r1, [r3, #0]
 80054d2:	4608      	mov	r0, r1
 80054d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054d8:	4770      	bx	lr

080054da <__sfputs_r>:
 80054da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	18d5      	adds	r5, r2, r3
 80054e4:	42ac      	cmp	r4, r5
 80054e6:	d101      	bne.n	80054ec <__sfputs_r+0x12>
 80054e8:	2000      	movs	r0, #0
 80054ea:	e007      	b.n	80054fc <__sfputs_r+0x22>
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	463a      	mov	r2, r7
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff ffda 	bl	80054ac <__sfputc_r>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d1f3      	bne.n	80054e4 <__sfputs_r+0xa>
 80054fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005500 <_vfiprintf_r>:
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	460d      	mov	r5, r1
 8005506:	b09d      	sub	sp, #116	; 0x74
 8005508:	4614      	mov	r4, r2
 800550a:	4698      	mov	r8, r3
 800550c:	4606      	mov	r6, r0
 800550e:	b118      	cbz	r0, 8005518 <_vfiprintf_r+0x18>
 8005510:	6a03      	ldr	r3, [r0, #32]
 8005512:	b90b      	cbnz	r3, 8005518 <_vfiprintf_r+0x18>
 8005514:	f7ff fcda 	bl	8004ecc <__sinit>
 8005518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800551a:	07d9      	lsls	r1, r3, #31
 800551c:	d405      	bmi.n	800552a <_vfiprintf_r+0x2a>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	059a      	lsls	r2, r3, #22
 8005522:	d402      	bmi.n	800552a <_vfiprintf_r+0x2a>
 8005524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005526:	f7ff fec6 	bl	80052b6 <__retarget_lock_acquire_recursive>
 800552a:	89ab      	ldrh	r3, [r5, #12]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	d501      	bpl.n	8005534 <_vfiprintf_r+0x34>
 8005530:	692b      	ldr	r3, [r5, #16]
 8005532:	b99b      	cbnz	r3, 800555c <_vfiprintf_r+0x5c>
 8005534:	4629      	mov	r1, r5
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff fdec 	bl	8005114 <__swsetup_r>
 800553c:	b170      	cbz	r0, 800555c <_vfiprintf_r+0x5c>
 800553e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005540:	07dc      	lsls	r4, r3, #31
 8005542:	d504      	bpl.n	800554e <_vfiprintf_r+0x4e>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b01d      	add	sp, #116	; 0x74
 800554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	0598      	lsls	r0, r3, #22
 8005552:	d4f7      	bmi.n	8005544 <_vfiprintf_r+0x44>
 8005554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005556:	f7ff feaf 	bl	80052b8 <__retarget_lock_release_recursive>
 800555a:	e7f3      	b.n	8005544 <_vfiprintf_r+0x44>
 800555c:	2300      	movs	r3, #0
 800555e:	9309      	str	r3, [sp, #36]	; 0x24
 8005560:	2320      	movs	r3, #32
 8005562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005566:	f8cd 800c 	str.w	r8, [sp, #12]
 800556a:	2330      	movs	r3, #48	; 0x30
 800556c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005720 <_vfiprintf_r+0x220>
 8005570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005574:	f04f 0901 	mov.w	r9, #1
 8005578:	4623      	mov	r3, r4
 800557a:	469a      	mov	sl, r3
 800557c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005580:	b10a      	cbz	r2, 8005586 <_vfiprintf_r+0x86>
 8005582:	2a25      	cmp	r2, #37	; 0x25
 8005584:	d1f9      	bne.n	800557a <_vfiprintf_r+0x7a>
 8005586:	ebba 0b04 	subs.w	fp, sl, r4
 800558a:	d00b      	beq.n	80055a4 <_vfiprintf_r+0xa4>
 800558c:	465b      	mov	r3, fp
 800558e:	4622      	mov	r2, r4
 8005590:	4629      	mov	r1, r5
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff ffa1 	bl	80054da <__sfputs_r>
 8005598:	3001      	adds	r0, #1
 800559a:	f000 80a9 	beq.w	80056f0 <_vfiprintf_r+0x1f0>
 800559e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a0:	445a      	add	r2, fp
 80055a2:	9209      	str	r2, [sp, #36]	; 0x24
 80055a4:	f89a 3000 	ldrb.w	r3, [sl]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a1 	beq.w	80056f0 <_vfiprintf_r+0x1f0>
 80055ae:	2300      	movs	r3, #0
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b8:	f10a 0a01 	add.w	sl, sl, #1
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c4:	931a      	str	r3, [sp, #104]	; 0x68
 80055c6:	4654      	mov	r4, sl
 80055c8:	2205      	movs	r2, #5
 80055ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ce:	4854      	ldr	r0, [pc, #336]	; (8005720 <_vfiprintf_r+0x220>)
 80055d0:	f7fa fe26 	bl	8000220 <memchr>
 80055d4:	9a04      	ldr	r2, [sp, #16]
 80055d6:	b9d8      	cbnz	r0, 8005610 <_vfiprintf_r+0x110>
 80055d8:	06d1      	lsls	r1, r2, #27
 80055da:	bf44      	itt	mi
 80055dc:	2320      	movmi	r3, #32
 80055de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e2:	0713      	lsls	r3, r2, #28
 80055e4:	bf44      	itt	mi
 80055e6:	232b      	movmi	r3, #43	; 0x2b
 80055e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ec:	f89a 3000 	ldrb.w	r3, [sl]
 80055f0:	2b2a      	cmp	r3, #42	; 0x2a
 80055f2:	d015      	beq.n	8005620 <_vfiprintf_r+0x120>
 80055f4:	9a07      	ldr	r2, [sp, #28]
 80055f6:	4654      	mov	r4, sl
 80055f8:	2000      	movs	r0, #0
 80055fa:	f04f 0c0a 	mov.w	ip, #10
 80055fe:	4621      	mov	r1, r4
 8005600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005604:	3b30      	subs	r3, #48	; 0x30
 8005606:	2b09      	cmp	r3, #9
 8005608:	d94d      	bls.n	80056a6 <_vfiprintf_r+0x1a6>
 800560a:	b1b0      	cbz	r0, 800563a <_vfiprintf_r+0x13a>
 800560c:	9207      	str	r2, [sp, #28]
 800560e:	e014      	b.n	800563a <_vfiprintf_r+0x13a>
 8005610:	eba0 0308 	sub.w	r3, r0, r8
 8005614:	fa09 f303 	lsl.w	r3, r9, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	46a2      	mov	sl, r4
 800561e:	e7d2      	b.n	80055c6 <_vfiprintf_r+0xc6>
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	1d19      	adds	r1, r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	9103      	str	r1, [sp, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	bfbb      	ittet	lt
 800562c:	425b      	neglt	r3, r3
 800562e:	f042 0202 	orrlt.w	r2, r2, #2
 8005632:	9307      	strge	r3, [sp, #28]
 8005634:	9307      	strlt	r3, [sp, #28]
 8005636:	bfb8      	it	lt
 8005638:	9204      	strlt	r2, [sp, #16]
 800563a:	7823      	ldrb	r3, [r4, #0]
 800563c:	2b2e      	cmp	r3, #46	; 0x2e
 800563e:	d10c      	bne.n	800565a <_vfiprintf_r+0x15a>
 8005640:	7863      	ldrb	r3, [r4, #1]
 8005642:	2b2a      	cmp	r3, #42	; 0x2a
 8005644:	d134      	bne.n	80056b0 <_vfiprintf_r+0x1b0>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	9203      	str	r2, [sp, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfb8      	it	lt
 8005652:	f04f 33ff 	movlt.w	r3, #4294967295
 8005656:	3402      	adds	r4, #2
 8005658:	9305      	str	r3, [sp, #20]
 800565a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005730 <_vfiprintf_r+0x230>
 800565e:	7821      	ldrb	r1, [r4, #0]
 8005660:	2203      	movs	r2, #3
 8005662:	4650      	mov	r0, sl
 8005664:	f7fa fddc 	bl	8000220 <memchr>
 8005668:	b138      	cbz	r0, 800567a <_vfiprintf_r+0x17a>
 800566a:	9b04      	ldr	r3, [sp, #16]
 800566c:	eba0 000a 	sub.w	r0, r0, sl
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	4082      	lsls	r2, r0
 8005674:	4313      	orrs	r3, r2
 8005676:	3401      	adds	r4, #1
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567e:	4829      	ldr	r0, [pc, #164]	; (8005724 <_vfiprintf_r+0x224>)
 8005680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005684:	2206      	movs	r2, #6
 8005686:	f7fa fdcb 	bl	8000220 <memchr>
 800568a:	2800      	cmp	r0, #0
 800568c:	d03f      	beq.n	800570e <_vfiprintf_r+0x20e>
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <_vfiprintf_r+0x228>)
 8005690:	bb1b      	cbnz	r3, 80056da <_vfiprintf_r+0x1da>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	3307      	adds	r3, #7
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	3308      	adds	r3, #8
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	443b      	add	r3, r7
 80056a2:	9309      	str	r3, [sp, #36]	; 0x24
 80056a4:	e768      	b.n	8005578 <_vfiprintf_r+0x78>
 80056a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056aa:	460c      	mov	r4, r1
 80056ac:	2001      	movs	r0, #1
 80056ae:	e7a6      	b.n	80055fe <_vfiprintf_r+0xfe>
 80056b0:	2300      	movs	r3, #0
 80056b2:	3401      	adds	r4, #1
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f04f 0c0a 	mov.w	ip, #10
 80056bc:	4620      	mov	r0, r4
 80056be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c2:	3a30      	subs	r2, #48	; 0x30
 80056c4:	2a09      	cmp	r2, #9
 80056c6:	d903      	bls.n	80056d0 <_vfiprintf_r+0x1d0>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0c6      	beq.n	800565a <_vfiprintf_r+0x15a>
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	e7c4      	b.n	800565a <_vfiprintf_r+0x15a>
 80056d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d4:	4604      	mov	r4, r0
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7f0      	b.n	80056bc <_vfiprintf_r+0x1bc>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <_vfiprintf_r+0x22c>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4630      	mov	r0, r6
 80056e6:	f3af 8000 	nop.w
 80056ea:	4607      	mov	r7, r0
 80056ec:	1c78      	adds	r0, r7, #1
 80056ee:	d1d6      	bne.n	800569e <_vfiprintf_r+0x19e>
 80056f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f2:	07d9      	lsls	r1, r3, #31
 80056f4:	d405      	bmi.n	8005702 <_vfiprintf_r+0x202>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	059a      	lsls	r2, r3, #22
 80056fa:	d402      	bmi.n	8005702 <_vfiprintf_r+0x202>
 80056fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fe:	f7ff fddb 	bl	80052b8 <__retarget_lock_release_recursive>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	065b      	lsls	r3, r3, #25
 8005706:	f53f af1d 	bmi.w	8005544 <_vfiprintf_r+0x44>
 800570a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570c:	e71c      	b.n	8005548 <_vfiprintf_r+0x48>
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <_vfiprintf_r+0x22c>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4630      	mov	r0, r6
 800571a:	f000 f879 	bl	8005810 <_printf_i>
 800571e:	e7e4      	b.n	80056ea <_vfiprintf_r+0x1ea>
 8005720:	08006a6c 	.word	0x08006a6c
 8005724:	08006a76 	.word	0x08006a76
 8005728:	00000000 	.word	0x00000000
 800572c:	080054db 	.word	0x080054db
 8005730:	08006a72 	.word	0x08006a72

08005734 <_printf_common>:
 8005734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	4616      	mov	r6, r2
 800573a:	4699      	mov	r9, r3
 800573c:	688a      	ldr	r2, [r1, #8]
 800573e:	690b      	ldr	r3, [r1, #16]
 8005740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005744:	4293      	cmp	r3, r2
 8005746:	bfb8      	it	lt
 8005748:	4613      	movlt	r3, r2
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005750:	4607      	mov	r7, r0
 8005752:	460c      	mov	r4, r1
 8005754:	b10a      	cbz	r2, 800575a <_printf_common+0x26>
 8005756:	3301      	adds	r3, #1
 8005758:	6033      	str	r3, [r6, #0]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	0699      	lsls	r1, r3, #26
 800575e:	bf42      	ittt	mi
 8005760:	6833      	ldrmi	r3, [r6, #0]
 8005762:	3302      	addmi	r3, #2
 8005764:	6033      	strmi	r3, [r6, #0]
 8005766:	6825      	ldr	r5, [r4, #0]
 8005768:	f015 0506 	ands.w	r5, r5, #6
 800576c:	d106      	bne.n	800577c <_printf_common+0x48>
 800576e:	f104 0a19 	add.w	sl, r4, #25
 8005772:	68e3      	ldr	r3, [r4, #12]
 8005774:	6832      	ldr	r2, [r6, #0]
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	42ab      	cmp	r3, r5
 800577a:	dc26      	bgt.n	80057ca <_printf_common+0x96>
 800577c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005780:	1e13      	subs	r3, r2, #0
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	bf18      	it	ne
 8005786:	2301      	movne	r3, #1
 8005788:	0692      	lsls	r2, r2, #26
 800578a:	d42b      	bmi.n	80057e4 <_printf_common+0xb0>
 800578c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005790:	4649      	mov	r1, r9
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	3001      	adds	r0, #1
 8005798:	d01e      	beq.n	80057d8 <_printf_common+0xa4>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	f003 0306 	and.w	r3, r3, #6
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	bf02      	ittt	eq
 80057a6:	68e5      	ldreq	r5, [r4, #12]
 80057a8:	6833      	ldreq	r3, [r6, #0]
 80057aa:	1aed      	subeq	r5, r5, r3
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	bf0c      	ite	eq
 80057b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b4:	2500      	movne	r5, #0
 80057b6:	4293      	cmp	r3, r2
 80057b8:	bfc4      	itt	gt
 80057ba:	1a9b      	subgt	r3, r3, r2
 80057bc:	18ed      	addgt	r5, r5, r3
 80057be:	2600      	movs	r6, #0
 80057c0:	341a      	adds	r4, #26
 80057c2:	42b5      	cmp	r5, r6
 80057c4:	d11a      	bne.n	80057fc <_printf_common+0xc8>
 80057c6:	2000      	movs	r0, #0
 80057c8:	e008      	b.n	80057dc <_printf_common+0xa8>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4652      	mov	r2, sl
 80057ce:	4649      	mov	r1, r9
 80057d0:	4638      	mov	r0, r7
 80057d2:	47c0      	blx	r8
 80057d4:	3001      	adds	r0, #1
 80057d6:	d103      	bne.n	80057e0 <_printf_common+0xac>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	3501      	adds	r5, #1
 80057e2:	e7c6      	b.n	8005772 <_printf_common+0x3e>
 80057e4:	18e1      	adds	r1, r4, r3
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	2030      	movs	r0, #48	; 0x30
 80057ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ee:	4422      	add	r2, r4
 80057f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f8:	3302      	adds	r3, #2
 80057fa:	e7c7      	b.n	800578c <_printf_common+0x58>
 80057fc:	2301      	movs	r3, #1
 80057fe:	4622      	mov	r2, r4
 8005800:	4649      	mov	r1, r9
 8005802:	4638      	mov	r0, r7
 8005804:	47c0      	blx	r8
 8005806:	3001      	adds	r0, #1
 8005808:	d0e6      	beq.n	80057d8 <_printf_common+0xa4>
 800580a:	3601      	adds	r6, #1
 800580c:	e7d9      	b.n	80057c2 <_printf_common+0x8e>
	...

08005810 <_printf_i>:
 8005810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	7e0f      	ldrb	r7, [r1, #24]
 8005816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005818:	2f78      	cmp	r7, #120	; 0x78
 800581a:	4691      	mov	r9, r2
 800581c:	4680      	mov	r8, r0
 800581e:	460c      	mov	r4, r1
 8005820:	469a      	mov	sl, r3
 8005822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005826:	d807      	bhi.n	8005838 <_printf_i+0x28>
 8005828:	2f62      	cmp	r7, #98	; 0x62
 800582a:	d80a      	bhi.n	8005842 <_printf_i+0x32>
 800582c:	2f00      	cmp	r7, #0
 800582e:	f000 80d4 	beq.w	80059da <_printf_i+0x1ca>
 8005832:	2f58      	cmp	r7, #88	; 0x58
 8005834:	f000 80c0 	beq.w	80059b8 <_printf_i+0x1a8>
 8005838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005840:	e03a      	b.n	80058b8 <_printf_i+0xa8>
 8005842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005846:	2b15      	cmp	r3, #21
 8005848:	d8f6      	bhi.n	8005838 <_printf_i+0x28>
 800584a:	a101      	add	r1, pc, #4	; (adr r1, 8005850 <_printf_i+0x40>)
 800584c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005850:	080058a9 	.word	0x080058a9
 8005854:	080058bd 	.word	0x080058bd
 8005858:	08005839 	.word	0x08005839
 800585c:	08005839 	.word	0x08005839
 8005860:	08005839 	.word	0x08005839
 8005864:	08005839 	.word	0x08005839
 8005868:	080058bd 	.word	0x080058bd
 800586c:	08005839 	.word	0x08005839
 8005870:	08005839 	.word	0x08005839
 8005874:	08005839 	.word	0x08005839
 8005878:	08005839 	.word	0x08005839
 800587c:	080059c1 	.word	0x080059c1
 8005880:	080058e9 	.word	0x080058e9
 8005884:	0800597b 	.word	0x0800597b
 8005888:	08005839 	.word	0x08005839
 800588c:	08005839 	.word	0x08005839
 8005890:	080059e3 	.word	0x080059e3
 8005894:	08005839 	.word	0x08005839
 8005898:	080058e9 	.word	0x080058e9
 800589c:	08005839 	.word	0x08005839
 80058a0:	08005839 	.word	0x08005839
 80058a4:	08005983 	.word	0x08005983
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	602a      	str	r2, [r5, #0]
 80058b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b8:	2301      	movs	r3, #1
 80058ba:	e09f      	b.n	80059fc <_printf_i+0x1ec>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	0607      	lsls	r7, r0, #24
 80058c2:	f103 0104 	add.w	r1, r3, #4
 80058c6:	6029      	str	r1, [r5, #0]
 80058c8:	d501      	bpl.n	80058ce <_printf_i+0xbe>
 80058ca:	681e      	ldr	r6, [r3, #0]
 80058cc:	e003      	b.n	80058d6 <_printf_i+0xc6>
 80058ce:	0646      	lsls	r6, r0, #25
 80058d0:	d5fb      	bpl.n	80058ca <_printf_i+0xba>
 80058d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	da03      	bge.n	80058e2 <_printf_i+0xd2>
 80058da:	232d      	movs	r3, #45	; 0x2d
 80058dc:	4276      	negs	r6, r6
 80058de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e2:	485a      	ldr	r0, [pc, #360]	; (8005a4c <_printf_i+0x23c>)
 80058e4:	230a      	movs	r3, #10
 80058e6:	e012      	b.n	800590e <_printf_i+0xfe>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	1d19      	adds	r1, r3, #4
 80058ee:	6029      	str	r1, [r5, #0]
 80058f0:	0605      	lsls	r5, r0, #24
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0xe8>
 80058f4:	681e      	ldr	r6, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0xee>
 80058f8:	0641      	lsls	r1, r0, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0xe4>
 80058fc:	881e      	ldrh	r6, [r3, #0]
 80058fe:	4853      	ldr	r0, [pc, #332]	; (8005a4c <_printf_i+0x23c>)
 8005900:	2f6f      	cmp	r7, #111	; 0x6f
 8005902:	bf0c      	ite	eq
 8005904:	2308      	moveq	r3, #8
 8005906:	230a      	movne	r3, #10
 8005908:	2100      	movs	r1, #0
 800590a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800590e:	6865      	ldr	r5, [r4, #4]
 8005910:	60a5      	str	r5, [r4, #8]
 8005912:	2d00      	cmp	r5, #0
 8005914:	bfa2      	ittt	ge
 8005916:	6821      	ldrge	r1, [r4, #0]
 8005918:	f021 0104 	bicge.w	r1, r1, #4
 800591c:	6021      	strge	r1, [r4, #0]
 800591e:	b90e      	cbnz	r6, 8005924 <_printf_i+0x114>
 8005920:	2d00      	cmp	r5, #0
 8005922:	d04b      	beq.n	80059bc <_printf_i+0x1ac>
 8005924:	4615      	mov	r5, r2
 8005926:	fbb6 f1f3 	udiv	r1, r6, r3
 800592a:	fb03 6711 	mls	r7, r3, r1, r6
 800592e:	5dc7      	ldrb	r7, [r0, r7]
 8005930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005934:	4637      	mov	r7, r6
 8005936:	42bb      	cmp	r3, r7
 8005938:	460e      	mov	r6, r1
 800593a:	d9f4      	bls.n	8005926 <_printf_i+0x116>
 800593c:	2b08      	cmp	r3, #8
 800593e:	d10b      	bne.n	8005958 <_printf_i+0x148>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	07de      	lsls	r6, r3, #31
 8005944:	d508      	bpl.n	8005958 <_printf_i+0x148>
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	6861      	ldr	r1, [r4, #4]
 800594a:	4299      	cmp	r1, r3
 800594c:	bfde      	ittt	le
 800594e:	2330      	movle	r3, #48	; 0x30
 8005950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005954:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005958:	1b52      	subs	r2, r2, r5
 800595a:	6122      	str	r2, [r4, #16]
 800595c:	f8cd a000 	str.w	sl, [sp]
 8005960:	464b      	mov	r3, r9
 8005962:	aa03      	add	r2, sp, #12
 8005964:	4621      	mov	r1, r4
 8005966:	4640      	mov	r0, r8
 8005968:	f7ff fee4 	bl	8005734 <_printf_common>
 800596c:	3001      	adds	r0, #1
 800596e:	d14a      	bne.n	8005a06 <_printf_i+0x1f6>
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	b004      	add	sp, #16
 8005976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f043 0320 	orr.w	r3, r3, #32
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	4833      	ldr	r0, [pc, #204]	; (8005a50 <_printf_i+0x240>)
 8005984:	2778      	movs	r7, #120	; 0x78
 8005986:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6829      	ldr	r1, [r5, #0]
 800598e:	061f      	lsls	r7, r3, #24
 8005990:	f851 6b04 	ldr.w	r6, [r1], #4
 8005994:	d402      	bmi.n	800599c <_printf_i+0x18c>
 8005996:	065f      	lsls	r7, r3, #25
 8005998:	bf48      	it	mi
 800599a:	b2b6      	uxthmi	r6, r6
 800599c:	07df      	lsls	r7, r3, #31
 800599e:	bf48      	it	mi
 80059a0:	f043 0320 	orrmi.w	r3, r3, #32
 80059a4:	6029      	str	r1, [r5, #0]
 80059a6:	bf48      	it	mi
 80059a8:	6023      	strmi	r3, [r4, #0]
 80059aa:	b91e      	cbnz	r6, 80059b4 <_printf_i+0x1a4>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	f023 0320 	bic.w	r3, r3, #32
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	2310      	movs	r3, #16
 80059b6:	e7a7      	b.n	8005908 <_printf_i+0xf8>
 80059b8:	4824      	ldr	r0, [pc, #144]	; (8005a4c <_printf_i+0x23c>)
 80059ba:	e7e4      	b.n	8005986 <_printf_i+0x176>
 80059bc:	4615      	mov	r5, r2
 80059be:	e7bd      	b.n	800593c <_printf_i+0x12c>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	6826      	ldr	r6, [r4, #0]
 80059c4:	6961      	ldr	r1, [r4, #20]
 80059c6:	1d18      	adds	r0, r3, #4
 80059c8:	6028      	str	r0, [r5, #0]
 80059ca:	0635      	lsls	r5, r6, #24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	d501      	bpl.n	80059d4 <_printf_i+0x1c4>
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	e002      	b.n	80059da <_printf_i+0x1ca>
 80059d4:	0670      	lsls	r0, r6, #25
 80059d6:	d5fb      	bpl.n	80059d0 <_printf_i+0x1c0>
 80059d8:	8019      	strh	r1, [r3, #0]
 80059da:	2300      	movs	r3, #0
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	4615      	mov	r5, r2
 80059e0:	e7bc      	b.n	800595c <_printf_i+0x14c>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	1d1a      	adds	r2, r3, #4
 80059e6:	602a      	str	r2, [r5, #0]
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	6862      	ldr	r2, [r4, #4]
 80059ec:	2100      	movs	r1, #0
 80059ee:	4628      	mov	r0, r5
 80059f0:	f7fa fc16 	bl	8000220 <memchr>
 80059f4:	b108      	cbz	r0, 80059fa <_printf_i+0x1ea>
 80059f6:	1b40      	subs	r0, r0, r5
 80059f8:	6060      	str	r0, [r4, #4]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	2300      	movs	r3, #0
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	e7aa      	b.n	800595c <_printf_i+0x14c>
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	47d0      	blx	sl
 8005a10:	3001      	adds	r0, #1
 8005a12:	d0ad      	beq.n	8005970 <_printf_i+0x160>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	079b      	lsls	r3, r3, #30
 8005a18:	d413      	bmi.n	8005a42 <_printf_i+0x232>
 8005a1a:	68e0      	ldr	r0, [r4, #12]
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	bfb8      	it	lt
 8005a22:	4618      	movlt	r0, r3
 8005a24:	e7a6      	b.n	8005974 <_printf_i+0x164>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4632      	mov	r2, r6
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	47d0      	blx	sl
 8005a30:	3001      	adds	r0, #1
 8005a32:	d09d      	beq.n	8005970 <_printf_i+0x160>
 8005a34:	3501      	adds	r5, #1
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	9903      	ldr	r1, [sp, #12]
 8005a3a:	1a5b      	subs	r3, r3, r1
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	dcf2      	bgt.n	8005a26 <_printf_i+0x216>
 8005a40:	e7eb      	b.n	8005a1a <_printf_i+0x20a>
 8005a42:	2500      	movs	r5, #0
 8005a44:	f104 0619 	add.w	r6, r4, #25
 8005a48:	e7f5      	b.n	8005a36 <_printf_i+0x226>
 8005a4a:	bf00      	nop
 8005a4c:	08006a7d 	.word	0x08006a7d
 8005a50:	08006a8e 	.word	0x08006a8e

08005a54 <__sflush_r>:
 8005a54:	898a      	ldrh	r2, [r1, #12]
 8005a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	0710      	lsls	r0, r2, #28
 8005a5e:	460c      	mov	r4, r1
 8005a60:	d458      	bmi.n	8005b14 <__sflush_r+0xc0>
 8005a62:	684b      	ldr	r3, [r1, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dc05      	bgt.n	8005a74 <__sflush_r+0x20>
 8005a68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dc02      	bgt.n	8005a74 <__sflush_r+0x20>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	d0f9      	beq.n	8005a6e <__sflush_r+0x1a>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a80:	682f      	ldr	r7, [r5, #0]
 8005a82:	6a21      	ldr	r1, [r4, #32]
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	d032      	beq.n	8005aee <__sflush_r+0x9a>
 8005a88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	075a      	lsls	r2, r3, #29
 8005a8e:	d505      	bpl.n	8005a9c <__sflush_r+0x48>
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	1ac0      	subs	r0, r0, r3
 8005a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a96:	b10b      	cbz	r3, 8005a9c <__sflush_r+0x48>
 8005a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a9a:	1ac0      	subs	r0, r0, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aa2:	6a21      	ldr	r1, [r4, #32]
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b0      	blx	r6
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	d106      	bne.n	8005abc <__sflush_r+0x68>
 8005aae:	6829      	ldr	r1, [r5, #0]
 8005ab0:	291d      	cmp	r1, #29
 8005ab2:	d82b      	bhi.n	8005b0c <__sflush_r+0xb8>
 8005ab4:	4a29      	ldr	r2, [pc, #164]	; (8005b5c <__sflush_r+0x108>)
 8005ab6:	410a      	asrs	r2, r1
 8005ab8:	07d6      	lsls	r6, r2, #31
 8005aba:	d427      	bmi.n	8005b0c <__sflush_r+0xb8>
 8005abc:	2200      	movs	r2, #0
 8005abe:	6062      	str	r2, [r4, #4]
 8005ac0:	04d9      	lsls	r1, r3, #19
 8005ac2:	6922      	ldr	r2, [r4, #16]
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	d504      	bpl.n	8005ad2 <__sflush_r+0x7e>
 8005ac8:	1c42      	adds	r2, r0, #1
 8005aca:	d101      	bne.n	8005ad0 <__sflush_r+0x7c>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b903      	cbnz	r3, 8005ad2 <__sflush_r+0x7e>
 8005ad0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ad4:	602f      	str	r7, [r5, #0]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d0c9      	beq.n	8005a6e <__sflush_r+0x1a>
 8005ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	d002      	beq.n	8005ae8 <__sflush_r+0x94>
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7ff fbea 	bl	80052bc <_free_r>
 8005ae8:	2000      	movs	r0, #0
 8005aea:	6360      	str	r0, [r4, #52]	; 0x34
 8005aec:	e7c0      	b.n	8005a70 <__sflush_r+0x1c>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b0      	blx	r6
 8005af4:	1c41      	adds	r1, r0, #1
 8005af6:	d1c8      	bne.n	8005a8a <__sflush_r+0x36>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0c5      	beq.n	8005a8a <__sflush_r+0x36>
 8005afe:	2b1d      	cmp	r3, #29
 8005b00:	d001      	beq.n	8005b06 <__sflush_r+0xb2>
 8005b02:	2b16      	cmp	r3, #22
 8005b04:	d101      	bne.n	8005b0a <__sflush_r+0xb6>
 8005b06:	602f      	str	r7, [r5, #0]
 8005b08:	e7b1      	b.n	8005a6e <__sflush_r+0x1a>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	e7ad      	b.n	8005a70 <__sflush_r+0x1c>
 8005b14:	690f      	ldr	r7, [r1, #16]
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	d0a9      	beq.n	8005a6e <__sflush_r+0x1a>
 8005b1a:	0793      	lsls	r3, r2, #30
 8005b1c:	680e      	ldr	r6, [r1, #0]
 8005b1e:	bf08      	it	eq
 8005b20:	694b      	ldreq	r3, [r1, #20]
 8005b22:	600f      	str	r7, [r1, #0]
 8005b24:	bf18      	it	ne
 8005b26:	2300      	movne	r3, #0
 8005b28:	eba6 0807 	sub.w	r8, r6, r7
 8005b2c:	608b      	str	r3, [r1, #8]
 8005b2e:	f1b8 0f00 	cmp.w	r8, #0
 8005b32:	dd9c      	ble.n	8005a6e <__sflush_r+0x1a>
 8005b34:	6a21      	ldr	r1, [r4, #32]
 8005b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b38:	4643      	mov	r3, r8
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b0      	blx	r6
 8005b40:	2800      	cmp	r0, #0
 8005b42:	dc06      	bgt.n	8005b52 <__sflush_r+0xfe>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	e78e      	b.n	8005a70 <__sflush_r+0x1c>
 8005b52:	4407      	add	r7, r0
 8005b54:	eba8 0800 	sub.w	r8, r8, r0
 8005b58:	e7e9      	b.n	8005b2e <__sflush_r+0xda>
 8005b5a:	bf00      	nop
 8005b5c:	dfbffffe 	.word	0xdfbffffe

08005b60 <_fflush_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	690b      	ldr	r3, [r1, #16]
 8005b64:	4605      	mov	r5, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	b913      	cbnz	r3, 8005b70 <_fflush_r+0x10>
 8005b6a:	2500      	movs	r5, #0
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	b118      	cbz	r0, 8005b7a <_fflush_r+0x1a>
 8005b72:	6a03      	ldr	r3, [r0, #32]
 8005b74:	b90b      	cbnz	r3, 8005b7a <_fflush_r+0x1a>
 8005b76:	f7ff f9a9 	bl	8004ecc <__sinit>
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f3      	beq.n	8005b6a <_fflush_r+0xa>
 8005b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b84:	07d0      	lsls	r0, r2, #31
 8005b86:	d404      	bmi.n	8005b92 <_fflush_r+0x32>
 8005b88:	0599      	lsls	r1, r3, #22
 8005b8a:	d402      	bmi.n	8005b92 <_fflush_r+0x32>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8e:	f7ff fb92 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8005b92:	4628      	mov	r0, r5
 8005b94:	4621      	mov	r1, r4
 8005b96:	f7ff ff5d 	bl	8005a54 <__sflush_r>
 8005b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b9c:	07da      	lsls	r2, r3, #31
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	d4e4      	bmi.n	8005b6c <_fflush_r+0xc>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	059b      	lsls	r3, r3, #22
 8005ba6:	d4e1      	bmi.n	8005b6c <_fflush_r+0xc>
 8005ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005baa:	f7ff fb85 	bl	80052b8 <__retarget_lock_release_recursive>
 8005bae:	e7dd      	b.n	8005b6c <_fflush_r+0xc>

08005bb0 <__swhatbuf_r>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	4615      	mov	r5, r2
 8005bbe:	461e      	mov	r6, r3
 8005bc0:	da0d      	bge.n	8005bde <__swhatbuf_r+0x2e>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bc8:	f04f 0100 	mov.w	r1, #0
 8005bcc:	bf0c      	ite	eq
 8005bce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005bd2:	2340      	movne	r3, #64	; 0x40
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	6031      	str	r1, [r6, #0]
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	b016      	add	sp, #88	; 0x58
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
 8005bde:	466a      	mov	r2, sp
 8005be0:	f000 f848 	bl	8005c74 <_fstat_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	dbec      	blt.n	8005bc2 <__swhatbuf_r+0x12>
 8005be8:	9901      	ldr	r1, [sp, #4]
 8005bea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005bee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005bf2:	4259      	negs	r1, r3
 8005bf4:	4159      	adcs	r1, r3
 8005bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfa:	e7eb      	b.n	8005bd4 <__swhatbuf_r+0x24>

08005bfc <__smakebuf_r>:
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c00:	079d      	lsls	r5, r3, #30
 8005c02:	4606      	mov	r6, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	d507      	bpl.n	8005c18 <__smakebuf_r+0x1c>
 8005c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	2301      	movs	r3, #1
 8005c12:	6163      	str	r3, [r4, #20]
 8005c14:	b002      	add	sp, #8
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	ab01      	add	r3, sp, #4
 8005c1a:	466a      	mov	r2, sp
 8005c1c:	f7ff ffc8 	bl	8005bb0 <__swhatbuf_r>
 8005c20:	9900      	ldr	r1, [sp, #0]
 8005c22:	4605      	mov	r5, r0
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7ff fbb5 	bl	8005394 <_malloc_r>
 8005c2a:	b948      	cbnz	r0, 8005c40 <__smakebuf_r+0x44>
 8005c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d4ef      	bmi.n	8005c14 <__smakebuf_r+0x18>
 8005c34:	f023 0303 	bic.w	r3, r3, #3
 8005c38:	f043 0302 	orr.w	r3, r3, #2
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7e3      	b.n	8005c08 <__smakebuf_r+0xc>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	6020      	str	r0, [r4, #0]
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	6163      	str	r3, [r4, #20]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	6120      	str	r0, [r4, #16]
 8005c52:	b15b      	cbz	r3, 8005c6c <__smakebuf_r+0x70>
 8005c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f81d 	bl	8005c98 <_isatty_r>
 8005c5e:	b128      	cbz	r0, 8005c6c <__smakebuf_r+0x70>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	431d      	orrs	r5, r3
 8005c70:	81a5      	strh	r5, [r4, #12]
 8005c72:	e7cf      	b.n	8005c14 <__smakebuf_r+0x18>

08005c74 <_fstat_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d07      	ldr	r5, [pc, #28]	; (8005c94 <_fstat_r+0x20>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	f7fb fb28 	bl	80012d6 <_fstat>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	d102      	bne.n	8005c90 <_fstat_r+0x1c>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	b103      	cbz	r3, 8005c90 <_fstat_r+0x1c>
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	bf00      	nop
 8005c94:	200003b8 	.word	0x200003b8

08005c98 <_isatty_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d06      	ldr	r5, [pc, #24]	; (8005cb4 <_isatty_r+0x1c>)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fb fb27 	bl	80012f6 <_isatty>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_isatty_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_isatty_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	200003b8 	.word	0x200003b8

08005cb8 <_sbrk_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	; (8005cd4 <_sbrk_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fb fb30 	bl	8001328 <_sbrk>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_sbrk_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_sbrk_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200003b8 	.word	0x200003b8

08005cd8 <sinf>:
 8005cd8:	ee10 3a10 	vmov	r3, s0
 8005cdc:	b507      	push	{r0, r1, r2, lr}
 8005cde:	4a1f      	ldr	r2, [pc, #124]	; (8005d5c <sinf+0x84>)
 8005ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	dc07      	bgt.n	8005cf8 <sinf+0x20>
 8005ce8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005d60 <sinf+0x88>
 8005cec:	2000      	movs	r0, #0
 8005cee:	b003      	add	sp, #12
 8005cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf4:	f000 b894 	b.w	8005e20 <__kernel_sinf>
 8005cf8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005cfc:	db04      	blt.n	8005d08 <sinf+0x30>
 8005cfe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005d02:	b003      	add	sp, #12
 8005d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d08:	4668      	mov	r0, sp
 8005d0a:	f000 f8d1 	bl	8005eb0 <__ieee754_rem_pio2f>
 8005d0e:	f000 0003 	and.w	r0, r0, #3
 8005d12:	2801      	cmp	r0, #1
 8005d14:	d00a      	beq.n	8005d2c <sinf+0x54>
 8005d16:	2802      	cmp	r0, #2
 8005d18:	d00f      	beq.n	8005d3a <sinf+0x62>
 8005d1a:	b9c0      	cbnz	r0, 8005d4e <sinf+0x76>
 8005d1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d20:	ed9d 0a00 	vldr	s0, [sp]
 8005d24:	2001      	movs	r0, #1
 8005d26:	f000 f87b 	bl	8005e20 <__kernel_sinf>
 8005d2a:	e7ea      	b.n	8005d02 <sinf+0x2a>
 8005d2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d30:	ed9d 0a00 	vldr	s0, [sp]
 8005d34:	f000 f816 	bl	8005d64 <__kernel_cosf>
 8005d38:	e7e3      	b.n	8005d02 <sinf+0x2a>
 8005d3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d3e:	ed9d 0a00 	vldr	s0, [sp]
 8005d42:	2001      	movs	r0, #1
 8005d44:	f000 f86c 	bl	8005e20 <__kernel_sinf>
 8005d48:	eeb1 0a40 	vneg.f32	s0, s0
 8005d4c:	e7d9      	b.n	8005d02 <sinf+0x2a>
 8005d4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d52:	ed9d 0a00 	vldr	s0, [sp]
 8005d56:	f000 f805 	bl	8005d64 <__kernel_cosf>
 8005d5a:	e7f5      	b.n	8005d48 <sinf+0x70>
 8005d5c:	3f490fd8 	.word	0x3f490fd8
 8005d60:	00000000 	.word	0x00000000

08005d64 <__kernel_cosf>:
 8005d64:	ee10 3a10 	vmov	r3, s0
 8005d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d74:	da05      	bge.n	8005d82 <__kernel_cosf+0x1e>
 8005d76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d7a:	ee17 2a90 	vmov	r2, s15
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	d03b      	beq.n	8005dfa <__kernel_cosf+0x96>
 8005d82:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005d86:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005e00 <__kernel_cosf+0x9c>
 8005d8a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8005e04 <__kernel_cosf+0xa0>
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <__kernel_cosf+0xa4>)
 8005d90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005d94:	4293      	cmp	r3, r2
 8005d96:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8005e0c <__kernel_cosf+0xa8>
 8005d9a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d9e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8005e10 <__kernel_cosf+0xac>
 8005da2:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005da6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8005e14 <__kernel_cosf+0xb0>
 8005daa:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005dae:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8005e18 <__kernel_cosf+0xb4>
 8005db2:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005db6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8005dba:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005dbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005dc2:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	dc04      	bgt.n	8005dd6 <__kernel_cosf+0x72>
 8005dcc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005dd0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8005dd4:	4770      	bx	lr
 8005dd6:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <__kernel_cosf+0xb8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	bfda      	itte	le
 8005ddc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	ee07 3a10 	vmovle	s14, r3
 8005de4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8005de8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8005df0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005df4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005df8:	4770      	bx	lr
 8005dfa:	eeb0 0a66 	vmov.f32	s0, s13
 8005dfe:	4770      	bx	lr
 8005e00:	ad47d74e 	.word	0xad47d74e
 8005e04:	310f74f6 	.word	0x310f74f6
 8005e08:	3e999999 	.word	0x3e999999
 8005e0c:	b493f27c 	.word	0xb493f27c
 8005e10:	37d00d01 	.word	0x37d00d01
 8005e14:	bab60b61 	.word	0xbab60b61
 8005e18:	3d2aaaab 	.word	0x3d2aaaab
 8005e1c:	3f480000 	.word	0x3f480000

08005e20 <__kernel_sinf>:
 8005e20:	ee10 3a10 	vmov	r3, s0
 8005e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005e2c:	da04      	bge.n	8005e38 <__kernel_sinf+0x18>
 8005e2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e32:	ee17 3a90 	vmov	r3, s15
 8005e36:	b35b      	cbz	r3, 8005e90 <__kernel_sinf+0x70>
 8005e38:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005e3c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005e94 <__kernel_sinf+0x74>
 8005e40:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005e98 <__kernel_sinf+0x78>
 8005e44:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e48:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005e9c <__kernel_sinf+0x7c>
 8005e4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e50:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005ea0 <__kernel_sinf+0x80>
 8005e54:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005e58:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005ea4 <__kernel_sinf+0x84>
 8005e5c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005e60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e64:	b930      	cbnz	r0, 8005e74 <__kernel_sinf+0x54>
 8005e66:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005ea8 <__kernel_sinf+0x88>
 8005e6a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e6e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005e72:	4770      	bx	lr
 8005e74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005e78:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005e7c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005e80:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005e84:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005eac <__kernel_sinf+0x8c>
 8005e88:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005e8c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2f2ec9d3 	.word	0x2f2ec9d3
 8005e98:	b2d72f34 	.word	0xb2d72f34
 8005e9c:	3638ef1b 	.word	0x3638ef1b
 8005ea0:	b9500d01 	.word	0xb9500d01
 8005ea4:	3c088889 	.word	0x3c088889
 8005ea8:	be2aaaab 	.word	0xbe2aaaab
 8005eac:	3e2aaaab 	.word	0x3e2aaaab

08005eb0 <__ieee754_rem_pio2f>:
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	ee10 6a10 	vmov	r6, s0
 8005eb6:	4b86      	ldr	r3, [pc, #536]	; (80060d0 <__ieee754_rem_pio2f+0x220>)
 8005eb8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	dc05      	bgt.n	8005ed0 <__ieee754_rem_pio2f+0x20>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	ed80 0a00 	vstr	s0, [r0]
 8005eca:	6043      	str	r3, [r0, #4]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e020      	b.n	8005f12 <__ieee754_rem_pio2f+0x62>
 8005ed0:	4b80      	ldr	r3, [pc, #512]	; (80060d4 <__ieee754_rem_pio2f+0x224>)
 8005ed2:	429d      	cmp	r5, r3
 8005ed4:	dc38      	bgt.n	8005f48 <__ieee754_rem_pio2f+0x98>
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80060d8 <__ieee754_rem_pio2f+0x228>
 8005edc:	4b7f      	ldr	r3, [pc, #508]	; (80060dc <__ieee754_rem_pio2f+0x22c>)
 8005ede:	f025 050f 	bic.w	r5, r5, #15
 8005ee2:	dd18      	ble.n	8005f16 <__ieee754_rem_pio2f+0x66>
 8005ee4:	429d      	cmp	r5, r3
 8005ee6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005eea:	bf09      	itett	eq
 8005eec:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80060e0 <__ieee754_rem_pio2f+0x230>
 8005ef0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80060e4 <__ieee754_rem_pio2f+0x234>
 8005ef4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005ef8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80060e8 <__ieee754_rem_pio2f+0x238>
 8005efc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005f00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f04:	edc0 6a00 	vstr	s13, [r0]
 8005f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f0c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005f10:	2001      	movs	r0, #1
 8005f12:	b007      	add	sp, #28
 8005f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f16:	429d      	cmp	r5, r3
 8005f18:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005f1c:	bf09      	itett	eq
 8005f1e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80060e0 <__ieee754_rem_pio2f+0x230>
 8005f22:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80060e4 <__ieee754_rem_pio2f+0x234>
 8005f26:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005f2a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80060e8 <__ieee754_rem_pio2f+0x238>
 8005f2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f36:	edc0 6a00 	vstr	s13, [r0]
 8005f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f3e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	e7e4      	b.n	8005f12 <__ieee754_rem_pio2f+0x62>
 8005f48:	4b68      	ldr	r3, [pc, #416]	; (80060ec <__ieee754_rem_pio2f+0x23c>)
 8005f4a:	429d      	cmp	r5, r3
 8005f4c:	dc71      	bgt.n	8006032 <__ieee754_rem_pio2f+0x182>
 8005f4e:	f000 f8db 	bl	8006108 <fabsf>
 8005f52:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80060f0 <__ieee754_rem_pio2f+0x240>
 8005f56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005f5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f66:	ee17 0a90 	vmov	r0, s15
 8005f6a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80060d8 <__ieee754_rem_pio2f+0x228>
 8005f6e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005f72:	281f      	cmp	r0, #31
 8005f74:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80060e4 <__ieee754_rem_pio2f+0x234>
 8005f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7c:	eeb1 6a47 	vneg.f32	s12, s14
 8005f80:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005f84:	ee16 2a90 	vmov	r2, s13
 8005f88:	dc1c      	bgt.n	8005fc4 <__ieee754_rem_pio2f+0x114>
 8005f8a:	495a      	ldr	r1, [pc, #360]	; (80060f4 <__ieee754_rem_pio2f+0x244>)
 8005f8c:	1e47      	subs	r7, r0, #1
 8005f8e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005f92:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005f96:	428b      	cmp	r3, r1
 8005f98:	d014      	beq.n	8005fc4 <__ieee754_rem_pio2f+0x114>
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	ed94 7a00 	vldr	s14, [r4]
 8005fa0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005faa:	ed84 0a01 	vstr	s0, [r4, #4]
 8005fae:	dab0      	bge.n	8005f12 <__ieee754_rem_pio2f+0x62>
 8005fb0:	eeb1 7a47 	vneg.f32	s14, s14
 8005fb4:	eeb1 0a40 	vneg.f32	s0, s0
 8005fb8:	ed84 7a00 	vstr	s14, [r4]
 8005fbc:	ed84 0a01 	vstr	s0, [r4, #4]
 8005fc0:	4240      	negs	r0, r0
 8005fc2:	e7a6      	b.n	8005f12 <__ieee754_rem_pio2f+0x62>
 8005fc4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005fc8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8005fcc:	2908      	cmp	r1, #8
 8005fce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005fd2:	dde2      	ble.n	8005f9a <__ieee754_rem_pio2f+0xea>
 8005fd4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80060e0 <__ieee754_rem_pio2f+0x230>
 8005fd8:	eef0 6a40 	vmov.f32	s13, s0
 8005fdc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005fe0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005fe4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005fe8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060e8 <__ieee754_rem_pio2f+0x238>
 8005fec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005ff0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005ff4:	ee15 2a90 	vmov	r2, s11
 8005ff8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005ffc:	1a5b      	subs	r3, r3, r1
 8005ffe:	2b19      	cmp	r3, #25
 8006000:	dc04      	bgt.n	800600c <__ieee754_rem_pio2f+0x15c>
 8006002:	edc4 5a00 	vstr	s11, [r4]
 8006006:	eeb0 0a66 	vmov.f32	s0, s13
 800600a:	e7c7      	b.n	8005f9c <__ieee754_rem_pio2f+0xec>
 800600c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80060f8 <__ieee754_rem_pio2f+0x248>
 8006010:	eeb0 0a66 	vmov.f32	s0, s13
 8006014:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006018:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800601c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80060fc <__ieee754_rem_pio2f+0x24c>
 8006020:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006024:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006028:	ee30 7a67 	vsub.f32	s14, s0, s15
 800602c:	ed84 7a00 	vstr	s14, [r4]
 8006030:	e7b4      	b.n	8005f9c <__ieee754_rem_pio2f+0xec>
 8006032:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006036:	db06      	blt.n	8006046 <__ieee754_rem_pio2f+0x196>
 8006038:	ee70 7a40 	vsub.f32	s15, s0, s0
 800603c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006040:	edc0 7a00 	vstr	s15, [r0]
 8006044:	e742      	b.n	8005ecc <__ieee754_rem_pio2f+0x1c>
 8006046:	15ea      	asrs	r2, r5, #23
 8006048:	3a86      	subs	r2, #134	; 0x86
 800604a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006056:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006100 <__ieee754_rem_pio2f+0x250>
 800605a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800605e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006062:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006066:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800606a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800606e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006076:	ed8d 7a04 	vstr	s14, [sp, #16]
 800607a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800607e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006086:	edcd 7a05 	vstr	s15, [sp, #20]
 800608a:	d11e      	bne.n	80060ca <__ieee754_rem_pio2f+0x21a>
 800608c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006094:	bf14      	ite	ne
 8006096:	2302      	movne	r3, #2
 8006098:	2301      	moveq	r3, #1
 800609a:	491a      	ldr	r1, [pc, #104]	; (8006104 <__ieee754_rem_pio2f+0x254>)
 800609c:	9101      	str	r1, [sp, #4]
 800609e:	2102      	movs	r1, #2
 80060a0:	9100      	str	r1, [sp, #0]
 80060a2:	a803      	add	r0, sp, #12
 80060a4:	4621      	mov	r1, r4
 80060a6:	f000 f837 	bl	8006118 <__kernel_rem_pio2f>
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	f6bf af31 	bge.w	8005f12 <__ieee754_rem_pio2f+0x62>
 80060b0:	edd4 7a00 	vldr	s15, [r4]
 80060b4:	eef1 7a67 	vneg.f32	s15, s15
 80060b8:	edc4 7a00 	vstr	s15, [r4]
 80060bc:	edd4 7a01 	vldr	s15, [r4, #4]
 80060c0:	eef1 7a67 	vneg.f32	s15, s15
 80060c4:	edc4 7a01 	vstr	s15, [r4, #4]
 80060c8:	e77a      	b.n	8005fc0 <__ieee754_rem_pio2f+0x110>
 80060ca:	2303      	movs	r3, #3
 80060cc:	e7e5      	b.n	800609a <__ieee754_rem_pio2f+0x1ea>
 80060ce:	bf00      	nop
 80060d0:	3f490fd8 	.word	0x3f490fd8
 80060d4:	4016cbe3 	.word	0x4016cbe3
 80060d8:	3fc90f80 	.word	0x3fc90f80
 80060dc:	3fc90fd0 	.word	0x3fc90fd0
 80060e0:	37354400 	.word	0x37354400
 80060e4:	37354443 	.word	0x37354443
 80060e8:	2e85a308 	.word	0x2e85a308
 80060ec:	43490f80 	.word	0x43490f80
 80060f0:	3f22f984 	.word	0x3f22f984
 80060f4:	08006aa0 	.word	0x08006aa0
 80060f8:	2e85a300 	.word	0x2e85a300
 80060fc:	248d3132 	.word	0x248d3132
 8006100:	43800000 	.word	0x43800000
 8006104:	08006b20 	.word	0x08006b20

08006108 <fabsf>:
 8006108:	ee10 3a10 	vmov	r3, s0
 800610c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006110:	ee00 3a10 	vmov	s0, r3
 8006114:	4770      	bx	lr
	...

08006118 <__kernel_rem_pio2f>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b04 	vpush	{d8-d9}
 8006120:	b0d9      	sub	sp, #356	; 0x164
 8006122:	4688      	mov	r8, r1
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	49b8      	ldr	r1, [pc, #736]	; (8006408 <__kernel_rem_pio2f+0x2f0>)
 8006128:	9866      	ldr	r0, [sp, #408]	; 0x198
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8006134:	f101 3bff 	add.w	fp, r1, #4294967295
 8006138:	1d11      	adds	r1, r2, #4
 800613a:	db25      	blt.n	8006188 <__kernel_rem_pio2f+0x70>
 800613c:	1ed0      	subs	r0, r2, #3
 800613e:	bf48      	it	mi
 8006140:	1d10      	addmi	r0, r2, #4
 8006142:	10c0      	asrs	r0, r0, #3
 8006144:	1c45      	adds	r5, r0, #1
 8006146:	00e9      	lsls	r1, r5, #3
 8006148:	eba0 070b 	sub.w	r7, r0, fp
 800614c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8006418 <__kernel_rem_pio2f+0x300>
 8006150:	9103      	str	r1, [sp, #12]
 8006152:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8006156:	eb0a 0c0b 	add.w	ip, sl, fp
 800615a:	ae1c      	add	r6, sp, #112	; 0x70
 800615c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8006160:	2400      	movs	r4, #0
 8006162:	4564      	cmp	r4, ip
 8006164:	dd12      	ble.n	800618c <__kernel_rem_pio2f+0x74>
 8006166:	9901      	ldr	r1, [sp, #4]
 8006168:	ac1c      	add	r4, sp, #112	; 0x70
 800616a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800616e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8006172:	f04f 0c00 	mov.w	ip, #0
 8006176:	45d4      	cmp	ip, sl
 8006178:	dc27      	bgt.n	80061ca <__kernel_rem_pio2f+0xb2>
 800617a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800617e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8006418 <__kernel_rem_pio2f+0x300>
 8006182:	4627      	mov	r7, r4
 8006184:	2600      	movs	r6, #0
 8006186:	e016      	b.n	80061b6 <__kernel_rem_pio2f+0x9e>
 8006188:	2000      	movs	r0, #0
 800618a:	e7db      	b.n	8006144 <__kernel_rem_pio2f+0x2c>
 800618c:	42e7      	cmn	r7, r4
 800618e:	bf5d      	ittte	pl
 8006190:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8006194:	ee07 1a90 	vmovpl	s15, r1
 8006198:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800619c:	eef0 7a47 	vmovmi.f32	s15, s14
 80061a0:	ece6 7a01 	vstmia	r6!, {s15}
 80061a4:	3401      	adds	r4, #1
 80061a6:	e7dc      	b.n	8006162 <__kernel_rem_pio2f+0x4a>
 80061a8:	ecfe 6a01 	vldmia	lr!, {s13}
 80061ac:	ed97 7a00 	vldr	s14, [r7]
 80061b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80061b4:	3601      	adds	r6, #1
 80061b6:	455e      	cmp	r6, fp
 80061b8:	f1a7 0704 	sub.w	r7, r7, #4
 80061bc:	ddf4      	ble.n	80061a8 <__kernel_rem_pio2f+0x90>
 80061be:	ece9 7a01 	vstmia	r9!, {s15}
 80061c2:	f10c 0c01 	add.w	ip, ip, #1
 80061c6:	3404      	adds	r4, #4
 80061c8:	e7d5      	b.n	8006176 <__kernel_rem_pio2f+0x5e>
 80061ca:	a908      	add	r1, sp, #32
 80061cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80061d4:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8006414 <__kernel_rem_pio2f+0x2fc>
 80061d8:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8006410 <__kernel_rem_pio2f+0x2f8>
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	4656      	mov	r6, sl
 80061e2:	00b3      	lsls	r3, r6, #2
 80061e4:	9306      	str	r3, [sp, #24]
 80061e6:	ab58      	add	r3, sp, #352	; 0x160
 80061e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80061ec:	ac08      	add	r4, sp, #32
 80061ee:	ab44      	add	r3, sp, #272	; 0x110
 80061f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80061f4:	46a4      	mov	ip, r4
 80061f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80061fa:	4637      	mov	r7, r6
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f1a0 0004 	sub.w	r0, r0, #4
 8006202:	dc4a      	bgt.n	800629a <__kernel_rem_pio2f+0x182>
 8006204:	4628      	mov	r0, r5
 8006206:	9207      	str	r2, [sp, #28]
 8006208:	f000 f9f8 	bl	80065fc <scalbnf>
 800620c:	eeb0 8a40 	vmov.f32	s16, s0
 8006210:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006214:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006218:	f000 fa56 	bl	80066c8 <floorf>
 800621c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006220:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006224:	2d00      	cmp	r5, #0
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800622c:	ee17 9a90 	vmov	r9, s15
 8006230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006234:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006238:	dd41      	ble.n	80062be <__kernel_rem_pio2f+0x1a6>
 800623a:	f106 3cff 	add.w	ip, r6, #4294967295
 800623e:	ab08      	add	r3, sp, #32
 8006240:	f1c5 0e08 	rsb	lr, r5, #8
 8006244:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8006248:	fa47 f00e 	asr.w	r0, r7, lr
 800624c:	4481      	add	r9, r0
 800624e:	fa00 f00e 	lsl.w	r0, r0, lr
 8006252:	1a3f      	subs	r7, r7, r0
 8006254:	f1c5 0007 	rsb	r0, r5, #7
 8006258:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800625c:	4107      	asrs	r7, r0
 800625e:	2f00      	cmp	r7, #0
 8006260:	dd3c      	ble.n	80062dc <__kernel_rem_pio2f+0x1c4>
 8006262:	f04f 0e00 	mov.w	lr, #0
 8006266:	f109 0901 	add.w	r9, r9, #1
 800626a:	4671      	mov	r1, lr
 800626c:	4576      	cmp	r6, lr
 800626e:	dc67      	bgt.n	8006340 <__kernel_rem_pio2f+0x228>
 8006270:	2d00      	cmp	r5, #0
 8006272:	dd03      	ble.n	800627c <__kernel_rem_pio2f+0x164>
 8006274:	2d01      	cmp	r5, #1
 8006276:	d074      	beq.n	8006362 <__kernel_rem_pio2f+0x24a>
 8006278:	2d02      	cmp	r5, #2
 800627a:	d07b      	beq.n	8006374 <__kernel_rem_pio2f+0x25c>
 800627c:	2f02      	cmp	r7, #2
 800627e:	d12d      	bne.n	80062dc <__kernel_rem_pio2f+0x1c4>
 8006280:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006284:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006288:	b341      	cbz	r1, 80062dc <__kernel_rem_pio2f+0x1c4>
 800628a:	4628      	mov	r0, r5
 800628c:	9207      	str	r2, [sp, #28]
 800628e:	f000 f9b5 	bl	80065fc <scalbnf>
 8006292:	9a07      	ldr	r2, [sp, #28]
 8006294:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006298:	e020      	b.n	80062dc <__kernel_rem_pio2f+0x1c4>
 800629a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800629e:	3f01      	subs	r7, #1
 80062a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80062ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80062b0:	ecac 0a01 	vstmia	ip!, {s0}
 80062b4:	ed90 0a00 	vldr	s0, [r0]
 80062b8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80062bc:	e79e      	b.n	80061fc <__kernel_rem_pio2f+0xe4>
 80062be:	d105      	bne.n	80062cc <__kernel_rem_pio2f+0x1b4>
 80062c0:	1e70      	subs	r0, r6, #1
 80062c2:	ab08      	add	r3, sp, #32
 80062c4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80062c8:	11ff      	asrs	r7, r7, #7
 80062ca:	e7c8      	b.n	800625e <__kernel_rem_pio2f+0x146>
 80062cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80062d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80062d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d8:	da30      	bge.n	800633c <__kernel_rem_pio2f+0x224>
 80062da:	2700      	movs	r7, #0
 80062dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80062e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e4:	f040 809a 	bne.w	800641c <__kernel_rem_pio2f+0x304>
 80062e8:	1e74      	subs	r4, r6, #1
 80062ea:	46a4      	mov	ip, r4
 80062ec:	2100      	movs	r1, #0
 80062ee:	45d4      	cmp	ip, sl
 80062f0:	da47      	bge.n	8006382 <__kernel_rem_pio2f+0x26a>
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d063      	beq.n	80063be <__kernel_rem_pio2f+0x2a6>
 80062f6:	ab08      	add	r3, sp, #32
 80062f8:	3d08      	subs	r5, #8
 80062fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d07f      	beq.n	8006402 <__kernel_rem_pio2f+0x2ea>
 8006302:	4628      	mov	r0, r5
 8006304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006308:	f000 f978 	bl	80065fc <scalbnf>
 800630c:	1c63      	adds	r3, r4, #1
 800630e:	aa44      	add	r2, sp, #272	; 0x110
 8006310:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006414 <__kernel_rem_pio2f+0x2fc>
 8006314:	0099      	lsls	r1, r3, #2
 8006316:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800631a:	4623      	mov	r3, r4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f280 80ad 	bge.w	800647c <__kernel_rem_pio2f+0x364>
 8006322:	4623      	mov	r3, r4
 8006324:	2b00      	cmp	r3, #0
 8006326:	f2c0 80cb 	blt.w	80064c0 <__kernel_rem_pio2f+0x3a8>
 800632a:	aa44      	add	r2, sp, #272	; 0x110
 800632c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006330:	4e36      	ldr	r6, [pc, #216]	; (800640c <__kernel_rem_pio2f+0x2f4>)
 8006332:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006418 <__kernel_rem_pio2f+0x300>
 8006336:	2000      	movs	r0, #0
 8006338:	1ae2      	subs	r2, r4, r3
 800633a:	e0b6      	b.n	80064aa <__kernel_rem_pio2f+0x392>
 800633c:	2702      	movs	r7, #2
 800633e:	e790      	b.n	8006262 <__kernel_rem_pio2f+0x14a>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	b949      	cbnz	r1, 8006358 <__kernel_rem_pio2f+0x240>
 8006344:	b118      	cbz	r0, 800634e <__kernel_rem_pio2f+0x236>
 8006346:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800634a:	6020      	str	r0, [r4, #0]
 800634c:	2001      	movs	r0, #1
 800634e:	f10e 0e01 	add.w	lr, lr, #1
 8006352:	3404      	adds	r4, #4
 8006354:	4601      	mov	r1, r0
 8006356:	e789      	b.n	800626c <__kernel_rem_pio2f+0x154>
 8006358:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800635c:	6020      	str	r0, [r4, #0]
 800635e:	4608      	mov	r0, r1
 8006360:	e7f5      	b.n	800634e <__kernel_rem_pio2f+0x236>
 8006362:	1e74      	subs	r4, r6, #1
 8006364:	ab08      	add	r3, sp, #32
 8006366:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800636a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800636e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006372:	e783      	b.n	800627c <__kernel_rem_pio2f+0x164>
 8006374:	1e74      	subs	r4, r6, #1
 8006376:	ab08      	add	r3, sp, #32
 8006378:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800637c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006380:	e7f5      	b.n	800636e <__kernel_rem_pio2f+0x256>
 8006382:	ab08      	add	r3, sp, #32
 8006384:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006388:	f10c 3cff 	add.w	ip, ip, #4294967295
 800638c:	4301      	orrs	r1, r0
 800638e:	e7ae      	b.n	80062ee <__kernel_rem_pio2f+0x1d6>
 8006390:	3001      	adds	r0, #1
 8006392:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8006396:	2f00      	cmp	r7, #0
 8006398:	d0fa      	beq.n	8006390 <__kernel_rem_pio2f+0x278>
 800639a:	9b06      	ldr	r3, [sp, #24]
 800639c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80063a0:	eb0d 0403 	add.w	r4, sp, r3
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	18f7      	adds	r7, r6, r3
 80063a8:	ab1c      	add	r3, sp, #112	; 0x70
 80063aa:	f106 0c01 	add.w	ip, r6, #1
 80063ae:	3c4c      	subs	r4, #76	; 0x4c
 80063b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063b4:	4430      	add	r0, r6
 80063b6:	4560      	cmp	r0, ip
 80063b8:	da04      	bge.n	80063c4 <__kernel_rem_pio2f+0x2ac>
 80063ba:	4606      	mov	r6, r0
 80063bc:	e711      	b.n	80061e2 <__kernel_rem_pio2f+0xca>
 80063be:	9c05      	ldr	r4, [sp, #20]
 80063c0:	2001      	movs	r0, #1
 80063c2:	e7e6      	b.n	8006392 <__kernel_rem_pio2f+0x27a>
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80063ca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80063ce:	9306      	str	r3, [sp, #24]
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d8:	2600      	movs	r6, #0
 80063da:	ece7 7a01 	vstmia	r7!, {s15}
 80063de:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006418 <__kernel_rem_pio2f+0x300>
 80063e2:	46b9      	mov	r9, r7
 80063e4:	455e      	cmp	r6, fp
 80063e6:	dd04      	ble.n	80063f2 <__kernel_rem_pio2f+0x2da>
 80063e8:	ece4 7a01 	vstmia	r4!, {s15}
 80063ec:	f10c 0c01 	add.w	ip, ip, #1
 80063f0:	e7e1      	b.n	80063b6 <__kernel_rem_pio2f+0x29e>
 80063f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80063f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80063fa:	3601      	adds	r6, #1
 80063fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006400:	e7f0      	b.n	80063e4 <__kernel_rem_pio2f+0x2cc>
 8006402:	3c01      	subs	r4, #1
 8006404:	e777      	b.n	80062f6 <__kernel_rem_pio2f+0x1de>
 8006406:	bf00      	nop
 8006408:	08006e64 	.word	0x08006e64
 800640c:	08006e38 	.word	0x08006e38
 8006410:	43800000 	.word	0x43800000
 8006414:	3b800000 	.word	0x3b800000
 8006418:	00000000 	.word	0x00000000
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	eeb0 0a48 	vmov.f32	s0, s16
 8006422:	1a98      	subs	r0, r3, r2
 8006424:	f000 f8ea 	bl	80065fc <scalbnf>
 8006428:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8006410 <__kernel_rem_pio2f+0x2f8>
 800642c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006434:	db19      	blt.n	800646a <__kernel_rem_pio2f+0x352>
 8006436:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006414 <__kernel_rem_pio2f+0x2fc>
 800643a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800643e:	aa08      	add	r2, sp, #32
 8006440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006444:	1c74      	adds	r4, r6, #1
 8006446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644a:	3508      	adds	r5, #8
 800644c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006454:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006458:	ee10 3a10 	vmov	r3, s0
 800645c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006460:	ee17 3a90 	vmov	r3, s15
 8006464:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006468:	e74b      	b.n	8006302 <__kernel_rem_pio2f+0x1ea>
 800646a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800646e:	aa08      	add	r2, sp, #32
 8006470:	ee10 3a10 	vmov	r3, s0
 8006474:	4634      	mov	r4, r6
 8006476:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800647a:	e742      	b.n	8006302 <__kernel_rem_pio2f+0x1ea>
 800647c:	a808      	add	r0, sp, #32
 800647e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006482:	9001      	str	r0, [sp, #4]
 8006484:	ee07 0a90 	vmov	s15, r0
 8006488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800648c:	3b01      	subs	r3, #1
 800648e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006492:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006496:	ed62 7a01 	vstmdb	r2!, {s15}
 800649a:	e73f      	b.n	800631c <__kernel_rem_pio2f+0x204>
 800649c:	ecf6 6a01 	vldmia	r6!, {s13}
 80064a0:	ecb5 7a01 	vldmia	r5!, {s14}
 80064a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80064a8:	3001      	adds	r0, #1
 80064aa:	4550      	cmp	r0, sl
 80064ac:	dc01      	bgt.n	80064b2 <__kernel_rem_pio2f+0x39a>
 80064ae:	4290      	cmp	r0, r2
 80064b0:	ddf4      	ble.n	800649c <__kernel_rem_pio2f+0x384>
 80064b2:	a858      	add	r0, sp, #352	; 0x160
 80064b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80064b8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80064bc:	3b01      	subs	r3, #1
 80064be:	e731      	b.n	8006324 <__kernel_rem_pio2f+0x20c>
 80064c0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	dc09      	bgt.n	80064da <__kernel_rem_pio2f+0x3c2>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc2b      	bgt.n	8006522 <__kernel_rem_pio2f+0x40a>
 80064ca:	d044      	beq.n	8006556 <__kernel_rem_pio2f+0x43e>
 80064cc:	f009 0007 	and.w	r0, r9, #7
 80064d0:	b059      	add	sp, #356	; 0x164
 80064d2:	ecbd 8b04 	vpop	{d8-d9}
 80064d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d1f5      	bne.n	80064cc <__kernel_rem_pio2f+0x3b4>
 80064e0:	aa30      	add	r2, sp, #192	; 0xc0
 80064e2:	1f0b      	subs	r3, r1, #4
 80064e4:	4413      	add	r3, r2
 80064e6:	461a      	mov	r2, r3
 80064e8:	4620      	mov	r0, r4
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f1a2 0204 	sub.w	r2, r2, #4
 80064f0:	dc52      	bgt.n	8006598 <__kernel_rem_pio2f+0x480>
 80064f2:	4622      	mov	r2, r4
 80064f4:	2a01      	cmp	r2, #1
 80064f6:	f1a3 0304 	sub.w	r3, r3, #4
 80064fa:	dc5d      	bgt.n	80065b8 <__kernel_rem_pio2f+0x4a0>
 80064fc:	ab30      	add	r3, sp, #192	; 0xc0
 80064fe:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8006418 <__kernel_rem_pio2f+0x300>
 8006502:	440b      	add	r3, r1
 8006504:	2c01      	cmp	r4, #1
 8006506:	dc67      	bgt.n	80065d8 <__kernel_rem_pio2f+0x4c0>
 8006508:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800650c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8006510:	2f00      	cmp	r7, #0
 8006512:	d167      	bne.n	80065e4 <__kernel_rem_pio2f+0x4cc>
 8006514:	edc8 6a00 	vstr	s13, [r8]
 8006518:	ed88 7a01 	vstr	s14, [r8, #4]
 800651c:	edc8 7a02 	vstr	s15, [r8, #8]
 8006520:	e7d4      	b.n	80064cc <__kernel_rem_pio2f+0x3b4>
 8006522:	ab30      	add	r3, sp, #192	; 0xc0
 8006524:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8006418 <__kernel_rem_pio2f+0x300>
 8006528:	440b      	add	r3, r1
 800652a:	4622      	mov	r2, r4
 800652c:	2a00      	cmp	r2, #0
 800652e:	da24      	bge.n	800657a <__kernel_rem_pio2f+0x462>
 8006530:	b34f      	cbz	r7, 8006586 <__kernel_rem_pio2f+0x46e>
 8006532:	eef1 7a47 	vneg.f32	s15, s14
 8006536:	edc8 7a00 	vstr	s15, [r8]
 800653a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800653e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006542:	aa31      	add	r2, sp, #196	; 0xc4
 8006544:	2301      	movs	r3, #1
 8006546:	429c      	cmp	r4, r3
 8006548:	da20      	bge.n	800658c <__kernel_rem_pio2f+0x474>
 800654a:	b10f      	cbz	r7, 8006550 <__kernel_rem_pio2f+0x438>
 800654c:	eef1 7a67 	vneg.f32	s15, s15
 8006550:	edc8 7a01 	vstr	s15, [r8, #4]
 8006554:	e7ba      	b.n	80064cc <__kernel_rem_pio2f+0x3b4>
 8006556:	ab30      	add	r3, sp, #192	; 0xc0
 8006558:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8006418 <__kernel_rem_pio2f+0x300>
 800655c:	440b      	add	r3, r1
 800655e:	2c00      	cmp	r4, #0
 8006560:	da05      	bge.n	800656e <__kernel_rem_pio2f+0x456>
 8006562:	b10f      	cbz	r7, 8006568 <__kernel_rem_pio2f+0x450>
 8006564:	eef1 7a67 	vneg.f32	s15, s15
 8006568:	edc8 7a00 	vstr	s15, [r8]
 800656c:	e7ae      	b.n	80064cc <__kernel_rem_pio2f+0x3b4>
 800656e:	ed33 7a01 	vldmdb	r3!, {s14}
 8006572:	3c01      	subs	r4, #1
 8006574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006578:	e7f1      	b.n	800655e <__kernel_rem_pio2f+0x446>
 800657a:	ed73 7a01 	vldmdb	r3!, {s15}
 800657e:	3a01      	subs	r2, #1
 8006580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006584:	e7d2      	b.n	800652c <__kernel_rem_pio2f+0x414>
 8006586:	eef0 7a47 	vmov.f32	s15, s14
 800658a:	e7d4      	b.n	8006536 <__kernel_rem_pio2f+0x41e>
 800658c:	ecb2 7a01 	vldmia	r2!, {s14}
 8006590:	3301      	adds	r3, #1
 8006592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006596:	e7d6      	b.n	8006546 <__kernel_rem_pio2f+0x42e>
 8006598:	edd2 7a00 	vldr	s15, [r2]
 800659c:	edd2 6a01 	vldr	s13, [r2, #4]
 80065a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80065a4:	3801      	subs	r0, #1
 80065a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065aa:	ed82 7a00 	vstr	s14, [r2]
 80065ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b2:	edc2 7a01 	vstr	s15, [r2, #4]
 80065b6:	e798      	b.n	80064ea <__kernel_rem_pio2f+0x3d2>
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80065c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80065c4:	3a01      	subs	r2, #1
 80065c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065ca:	ed83 7a00 	vstr	s14, [r3]
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80065d6:	e78d      	b.n	80064f4 <__kernel_rem_pio2f+0x3dc>
 80065d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80065dc:	3c01      	subs	r4, #1
 80065de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065e2:	e78f      	b.n	8006504 <__kernel_rem_pio2f+0x3ec>
 80065e4:	eef1 6a66 	vneg.f32	s13, s13
 80065e8:	eeb1 7a47 	vneg.f32	s14, s14
 80065ec:	edc8 6a00 	vstr	s13, [r8]
 80065f0:	ed88 7a01 	vstr	s14, [r8, #4]
 80065f4:	eef1 7a67 	vneg.f32	s15, s15
 80065f8:	e790      	b.n	800651c <__kernel_rem_pio2f+0x404>
 80065fa:	bf00      	nop

080065fc <scalbnf>:
 80065fc:	ee10 3a10 	vmov	r3, s0
 8006600:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006604:	d02b      	beq.n	800665e <scalbnf+0x62>
 8006606:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800660a:	d302      	bcc.n	8006612 <scalbnf+0x16>
 800660c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006610:	4770      	bx	lr
 8006612:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006616:	d123      	bne.n	8006660 <scalbnf+0x64>
 8006618:	4b24      	ldr	r3, [pc, #144]	; (80066ac <scalbnf+0xb0>)
 800661a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80066b0 <scalbnf+0xb4>
 800661e:	4298      	cmp	r0, r3
 8006620:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006624:	db17      	blt.n	8006656 <scalbnf+0x5a>
 8006626:	ee10 3a10 	vmov	r3, s0
 800662a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800662e:	3a19      	subs	r2, #25
 8006630:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006634:	4288      	cmp	r0, r1
 8006636:	dd15      	ble.n	8006664 <scalbnf+0x68>
 8006638:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80066b4 <scalbnf+0xb8>
 800663c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80066b8 <scalbnf+0xbc>
 8006640:	ee10 3a10 	vmov	r3, s0
 8006644:	eeb0 7a67 	vmov.f32	s14, s15
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfb8      	it	lt
 800664c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006650:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006654:	4770      	bx	lr
 8006656:	eddf 7a19 	vldr	s15, [pc, #100]	; 80066bc <scalbnf+0xc0>
 800665a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800665e:	4770      	bx	lr
 8006660:	0dd2      	lsrs	r2, r2, #23
 8006662:	e7e5      	b.n	8006630 <scalbnf+0x34>
 8006664:	4410      	add	r0, r2
 8006666:	28fe      	cmp	r0, #254	; 0xfe
 8006668:	dce6      	bgt.n	8006638 <scalbnf+0x3c>
 800666a:	2800      	cmp	r0, #0
 800666c:	dd06      	ble.n	800667c <scalbnf+0x80>
 800666e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006672:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006676:	ee00 3a10 	vmov	s0, r3
 800667a:	4770      	bx	lr
 800667c:	f110 0f16 	cmn.w	r0, #22
 8006680:	da09      	bge.n	8006696 <scalbnf+0x9a>
 8006682:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80066bc <scalbnf+0xc0>
 8006686:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80066c0 <scalbnf+0xc4>
 800668a:	ee10 3a10 	vmov	r3, s0
 800668e:	eeb0 7a67 	vmov.f32	s14, s15
 8006692:	2b00      	cmp	r3, #0
 8006694:	e7d9      	b.n	800664a <scalbnf+0x4e>
 8006696:	3019      	adds	r0, #25
 8006698:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800669c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80066a0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80066c4 <scalbnf+0xc8>
 80066a4:	ee07 3a90 	vmov	s15, r3
 80066a8:	e7d7      	b.n	800665a <scalbnf+0x5e>
 80066aa:	bf00      	nop
 80066ac:	ffff3cb0 	.word	0xffff3cb0
 80066b0:	4c000000 	.word	0x4c000000
 80066b4:	7149f2ca 	.word	0x7149f2ca
 80066b8:	f149f2ca 	.word	0xf149f2ca
 80066bc:	0da24260 	.word	0x0da24260
 80066c0:	8da24260 	.word	0x8da24260
 80066c4:	33000000 	.word	0x33000000

080066c8 <floorf>:
 80066c8:	ee10 3a10 	vmov	r3, s0
 80066cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80066d0:	3a7f      	subs	r2, #127	; 0x7f
 80066d2:	2a16      	cmp	r2, #22
 80066d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066d8:	dc2a      	bgt.n	8006730 <floorf+0x68>
 80066da:	2a00      	cmp	r2, #0
 80066dc:	da11      	bge.n	8006702 <floorf+0x3a>
 80066de:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006740 <floorf+0x78>
 80066e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80066e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	dd05      	ble.n	80066fc <floorf+0x34>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da23      	bge.n	800673c <floorf+0x74>
 80066f4:	4a13      	ldr	r2, [pc, #76]	; (8006744 <floorf+0x7c>)
 80066f6:	2900      	cmp	r1, #0
 80066f8:	bf18      	it	ne
 80066fa:	4613      	movne	r3, r2
 80066fc:	ee00 3a10 	vmov	s0, r3
 8006700:	4770      	bx	lr
 8006702:	4911      	ldr	r1, [pc, #68]	; (8006748 <floorf+0x80>)
 8006704:	4111      	asrs	r1, r2
 8006706:	420b      	tst	r3, r1
 8006708:	d0fa      	beq.n	8006700 <floorf+0x38>
 800670a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006740 <floorf+0x78>
 800670e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006712:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	ddef      	ble.n	80066fc <floorf+0x34>
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfbe      	ittt	lt
 8006720:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006724:	fa40 f202 	asrlt.w	r2, r0, r2
 8006728:	189b      	addlt	r3, r3, r2
 800672a:	ea23 0301 	bic.w	r3, r3, r1
 800672e:	e7e5      	b.n	80066fc <floorf+0x34>
 8006730:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006734:	d3e4      	bcc.n	8006700 <floorf+0x38>
 8006736:	ee30 0a00 	vadd.f32	s0, s0, s0
 800673a:	4770      	bx	lr
 800673c:	2300      	movs	r3, #0
 800673e:	e7dd      	b.n	80066fc <floorf+0x34>
 8006740:	7149f2ca 	.word	0x7149f2ca
 8006744:	bf800000 	.word	0xbf800000
 8006748:	007fffff 	.word	0x007fffff

0800674c <_init>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr

08006758 <_fini>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr
