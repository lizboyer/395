
firmware_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006538  08006538  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006540  08006540  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200000b8  08006600  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006600  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ef5  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d4b  00000000  00000000  00037020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff1  00000000  00000000  0003b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020584  00000000  00000000  0003c1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018843  00000000  00000000  0005c745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce847  00000000  00000000  00074f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb0  00000000  00000000  001437d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00149680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080061b8 	.word	0x080061b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000bc 	.word	0x200000bc
 800021c:	080061b8 	.word	0x080061b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <acc_init>:
 * 		- HAL Status
 * side effects:
 * 		- configure the accelerometer to 100Hz polling, and turn off gyro
 **/
HAL_StatusTypeDef acc_init (volatile accelerometer_t* acc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	72fb      	strb	r3, [r7, #11]

	// configure the accelerometer to 104Hz
	status = accelerometer_write(acc, REG_CTRL1_XL, ACC_104HZ_8G);
 80005c8:	224c      	movs	r2, #76	; 0x4c
 80005ca:	2110      	movs	r1, #16
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f965 	bl	800089c <accelerometer_write>
 80005d2:	4603      	mov	r3, r0
 80005d4:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK) return status;
 80005d6:	7afb      	ldrb	r3, [r7, #11]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <acc_init+0x24>
 80005dc:	7afb      	ldrb	r3, [r7, #11]
 80005de:	e065      	b.n	80006ac <acc_init+0xf0>

	// turn the gyroscope off
	status = accelerometer_write(acc, REG_CTRL2_G, GYRO_OFF);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2111      	movs	r1, #17
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f959 	bl	800089c <accelerometer_write>
 80005ea:	4603      	mov	r3, r0
 80005ec:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) return status;
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <acc_init+0x3c>
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	e059      	b.n	80006ac <acc_init+0xf0>

	// enable interrupts on new data on accelerometer INT2
    status = accelerometer_write(acc, REG_INT2_CTRL, DATA_RDY);
 80005f8:	2201      	movs	r2, #1
 80005fa:	210e      	movs	r1, #14
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f94d 	bl	800089c <accelerometer_write>
 8000602:	4603      	mov	r3, r0
 8000604:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <acc_init+0x54>
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	e04d      	b.n	80006ac <acc_init+0xf0>

    // read the axes to get interrupts to kick off
    status = read_axis(acc, ALL_AXIS);
 8000610:	2103      	movs	r1, #3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f850 	bl	80006b8 <read_axis>
 8000618:	4603      	mov	r3, r0
 800061a:	72fb      	strb	r3, [r7, #11]

    // enable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x80);
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	210d      	movs	r1, #13
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f93b 	bl	800089c <accelerometer_write>
 8000626:	4603      	mov	r3, r0
 8000628:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <acc_init+0x78>
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	e03b      	b.n	80006ac <acc_init+0xf0>

    // enable MLC
    status = accelerometer_write(acc, MLC_EN, 0x10);
 8000634:	2210      	movs	r2, #16
 8000636:	2105      	movs	r1, #5
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f92f 	bl	800089c <accelerometer_write>
 800063e:	4603      	mov	r3, r0
 8000640:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <acc_init+0x90>
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	e02f      	b.n	80006ac <acc_init+0xf0>

    // MLC route to INT1
    status = accelerometer_write(acc, MLC_INT1, 0x01);
 800064c:	2201      	movs	r2, #1
 800064e:	210d      	movs	r1, #13
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f923 	bl	800089c <accelerometer_write>
 8000656:	4603      	mov	r3, r0
 8000658:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <acc_init+0xa8>
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	e023      	b.n	80006ac <acc_init+0xf0>

    for (int i = 0; i < (sizeof(mlc_configuration) /
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e00f      	b.n	800068a <acc_init+0xce>
                      sizeof(ucf_line_t) ); i++ ) {
      accelerometer_write(acc, mlc_configuration[i].address, (uint8_t)mlc_configuration[i].data);
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <acc_init+0xf8>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <acc_init+0xf8>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	461a      	mov	r2, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f90c 	bl	800089c <accelerometer_write>
                      sizeof(ucf_line_t) ); i++ ) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < (sizeof(mlc_configuration) /
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8000690:	d9eb      	bls.n	800066a <acc_init+0xae>
    }

    // disable cfg reg
    status = accelerometer_write(acc, MLC_INT1, 0x00);
 8000692:	2200      	movs	r2, #0
 8000694:	210d      	movs	r1, #13
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f900 	bl	800089c <accelerometer_write>
 800069c:	4603      	mov	r3, r0
 800069e:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) return status;
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <acc_init+0xee>
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	e000      	b.n	80006ac <acc_init+0xf0>

    return status;
 80006aa:	7afb      	ldrb	r3, [r7, #11]

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08006288 	.word	0x08006288

080006b8 <read_axis>:
 * 		- HAL Status
 * 	side effects:
 * 		- updates the acceleration values inside the accelerometer struct
 **/
HAL_StatusTypeDef read_axis(volatile accelerometer_t* acc, axis_t axis)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af04      	add	r7, sp, #16
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop

	__disable_irq();

    static uint8_t read_buffer[] = { 0 };

    HAL_StatusTypeDef status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

    switch(axis){
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	f200 80d8 	bhi.w	8000884 <read_axis+0x1cc>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <read_axis+0x24>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	0800076f 	.word	0x0800076f
 80006e4:	080007ed 	.word	0x080007ed
 80006e8:	080006ed 	.word	0x080006ed
	  case ALL_AXIS:
	  case X_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b299      	uxth	r1, r3
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	4b65      	ldr	r3, [pc, #404]	; (8000894 <read_axis+0x1dc>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	2229      	movs	r2, #41	; 0x29
 8000706:	4864      	ldr	r0, [pc, #400]	; (8000898 <read_axis+0x1e0>)
 8000708:	f001 fde2 	bl	80022d0 <HAL_I2C_Mem_Read>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 80a7 	bne.w	8000866 <read_axis+0x1ae>
		  acc->x_xlr = *read_buffer << 8;
 8000718:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <read_axis+0x1dc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b21a      	sxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	805a      	strh	r2, [r3, #2]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	b299      	uxth	r1, r3
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2301      	movs	r3, #1
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b57      	ldr	r3, [pc, #348]	; (8000894 <read_axis+0x1dc>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2228      	movs	r2, #40	; 0x28
 800073e:	4856      	ldr	r0, [pc, #344]	; (8000898 <read_axis+0x1e0>)
 8000740:	f001 fdc6 	bl	80022d0 <HAL_I2C_Mem_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 808d 	bne.w	800086a <read_axis+0x1b2>
		  acc->x_xlr = acc->x_xlr + *read_buffer;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	885b      	ldrh	r3, [r3, #2]
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <read_axis+0x1dc>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	b21a      	sxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	805a      	strh	r2, [r3, #2]
		  if(axis != ALL_AXIS) break;
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d17f      	bne.n	800086e <read_axis+0x1b6>
	  case Y_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b299      	uxth	r1, r3
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <read_axis+0x1dc>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	222b      	movs	r2, #43	; 0x2b
 8000788:	4843      	ldr	r0, [pc, #268]	; (8000898 <read_axis+0x1e0>)
 800078a:	f001 fda1 	bl	80022d0 <HAL_I2C_Mem_Read>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d16c      	bne.n	8000872 <read_axis+0x1ba>
		  acc->y_xlr = *read_buffer << 8;
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <read_axis+0x1dc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	b21a      	sxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	809a      	strh	r2, [r3, #4]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTY_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b299      	uxth	r1, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	2301      	movs	r3, #1
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <read_axis+0x1dc>)
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	222a      	movs	r2, #42	; 0x2a
 80007be:	4836      	ldr	r0, [pc, #216]	; (8000898 <read_axis+0x1e0>)
 80007c0:	f001 fd86 	bl	80022d0 <HAL_I2C_Mem_Read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d153      	bne.n	8000876 <read_axis+0x1be>
		  acc->y_xlr = acc->y_xlr + *read_buffer;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	889b      	ldrh	r3, [r3, #4]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <read_axis+0x1dc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	809a      	strh	r2, [r3, #4]
		  if(axis != ALL_AXIS) break;
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d146      	bne.n	800087a <read_axis+0x1c2>
	  case Z_AXIS:
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_H_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	b299      	uxth	r1, r3
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <read_axis+0x1dc>)
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	222d      	movs	r2, #45	; 0x2d
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <read_axis+0x1e0>)
 8000808:	f001 fd62 	bl	80022d0 <HAL_I2C_Mem_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d133      	bne.n	800087e <read_axis+0x1c6>
		  acc->z_xlr = *read_buffer << 8;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <read_axis+0x1dc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	b21a      	sxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	80da      	strh	r2, [r3, #6]
		  status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, OUTZ_L_A, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b299      	uxth	r1, r3
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <read_axis+0x1dc>)
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	222c      	movs	r2, #44	; 0x2c
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <read_axis+0x1e0>)
 800083e:	f001 fd47 	bl	80022d0 <HAL_I2C_Mem_Read>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK) break;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11a      	bne.n	8000882 <read_axis+0x1ca>
		  acc->z_xlr = acc->z_xlr + *read_buffer;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	88db      	ldrh	r3, [r3, #6]
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <read_axis+0x1dc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4413      	add	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	80da      	strh	r2, [r3, #6]
		  break;
 8000864:	e00e      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000866:	bf00      	nop
 8000868:	e00c      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800086a:	bf00      	nop
 800086c:	e00a      	b.n	8000884 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 800086e:	bf00      	nop
 8000870:	e008      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000872:	bf00      	nop
 8000874:	e006      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000876:	bf00      	nop
 8000878:	e004      	b.n	8000884 <read_axis+0x1cc>
		  if(axis != ALL_AXIS) break;
 800087a:	bf00      	nop
 800087c:	e002      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 800087e:	bf00      	nop
 8000880:	e000      	b.n	8000884 <read_axis+0x1cc>
		  if(status != HAL_OK) break;
 8000882:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000884:	b662      	cpsie	i
}
 8000886:	bf00      	nop
	}

    __enable_irq();

    return status;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000d4 	.word	0x200000d4
 8000898:	200000ec 	.word	0x200000ec

0800089c <accelerometer_write>:
 * 		- HAL Status
 * 	side effects:
 * 		- performs and I2C write to the passed in accelerometer
 **/
HAL_StatusTypeDef accelerometer_write(volatile accelerometer_t* acc, uint8_t reg, uint8_t data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
 80008a8:	4613      	mov	r3, r2
 80008aa:	70bb      	strb	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
	__disable_irq();
    uint8_t write_buffer[] = { 0 };
 80008b0:	2300      	movs	r3, #0
 80008b2:	733b      	strb	r3, [r7, #12]
	*write_buffer = data;
 80008b4:	78bb      	ldrb	r3, [r7, #2]
 80008b6:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, acc->slave_w_addr, reg, I2C_MEMADD_SIZE_8BIT, write_buffer, sizeof(write_buffer), HAL_MAX_DELAY);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	b299      	uxth	r1, r3
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <accelerometer_write+0x54>)
 80008d8:	f001 fbe6 	bl	80020a8 <HAL_I2C_Mem_Write>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80008e0:	b662      	cpsie	i
}
 80008e2:	bf00      	nop
	__enable_irq();
	return status;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000ec 	.word	0x200000ec

080008f4 <accelerometer_read>:
HAL_StatusTypeDef accelerometer_read(volatile accelerometer_t* acc, uint8_t reg, uint8_t* data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	460b      	mov	r3, r1
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	72fb      	strb	r3, [r7, #11]
  __ASM volatile ("cpsid i" : : : "memory");
 8000902:	b672      	cpsid	i
}
 8000904:	bf00      	nop
	__disable_irq();
    uint8_t read_buffer[] = { 1 };
 8000906:	2301      	movs	r3, #1
 8000908:	753b      	strb	r3, [r7, #20]
//	*read_buffer = data;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, acc->slave_r_addr, reg, I2C_MEMADD_SIZE_8BIT, read_buffer, sizeof(read_buffer), HAL_MAX_DELAY);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b299      	uxth	r1, r3
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	b29a      	uxth	r2, r3
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <accelerometer_read+0x54>)
 800092a:	f001 fcd1 	bl	80022d0 <HAL_I2C_Mem_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
	*data = *read_buffer;
 8000932:	7d3a      	ldrb	r2, [r7, #20]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000938:	b662      	cpsie	i
}
 800093a:	bf00      	nop
	__enable_irq();
	return status;
 800093c:	7dfb      	ldrb	r3, [r7, #23]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000ec 	.word	0x200000ec

0800094c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static volatile HAL_StatusTypeDef status;

int _write(int fd, char* ptr, int len) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <_write+0x28>)
 8000964:	f003 fe7c 	bl	8004660 <HAL_UART_Transmit>
  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000138 	.word	0x20000138

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 fe14 	bl	80015aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f92d 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 fb11 	bl	8000fac <MX_GPIO_Init>
  MX_DAC1_Init();
 800098a:	f000 f975 	bl	8000c78 <MX_DAC1_Init>
  MX_I2C1_Init();
 800098e:	f000 f9ad 	bl	8000cec <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000992:	f000 f9eb 	bl	8000d6c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000996:	f000 fa33 	bl	8000e00 <MX_TIM2_Init>
  MX_TIM4_Init();
 800099a:	f000 fa7f 	bl	8000e9c <MX_TIM4_Init>
  MX_TIM7_Init();
 800099e:	f000 facd 	bl	8000f3c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80009a2:	487d      	ldr	r0, [pc, #500]	; (8000b98 <main+0x220>)
 80009a4:	f003 f90c 	bl	8003bc0 <HAL_TIM_Base_Start_IT>

  uint8_t status_mlc1;
  uint16_t timer_val;
  acc_init(&xl_l);
 80009a8:	487c      	ldr	r0, [pc, #496]	; (8000b9c <main+0x224>)
 80009aa:	f7ff fe07 	bl	80005bc <acc_init>
  acc_init(&xl_r);
 80009ae:	487c      	ldr	r0, [pc, #496]	; (8000ba0 <main+0x228>)
 80009b0:	f7ff fe04 	bl	80005bc <acc_init>

  status = accelerometer_read(&xl_r, WHO_AM_I, &status_mlc1);
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	461a      	mov	r2, r3
 80009b8:	210f      	movs	r1, #15
 80009ba:	4879      	ldr	r0, [pc, #484]	; (8000ba0 <main+0x228>)
 80009bc:	f7ff ff9a 	bl	80008f4 <accelerometer_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b77      	ldr	r3, [pc, #476]	; (8000ba4 <main+0x22c>)
 80009c6:	701a      	strb	r2, [r3, #0]
  printf("ID: %d\r\n",status_mlc1);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4876      	ldr	r0, [pc, #472]	; (8000ba8 <main+0x230>)
 80009ce:	f004 fd23 	bl	8005418 <iprintf>

  if (status != HAL_OK) printf("init error\r\n");
 80009d2:	4b74      	ldr	r3, [pc, #464]	; (8000ba4 <main+0x22c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <main+0x6a>
 80009dc:	4873      	ldr	r0, [pc, #460]	; (8000bac <main+0x234>)
 80009de:	f004 fd81 	bl	80054e4 <puts>

  allow_hit_r = 1;
 80009e2:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <main+0x238>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  allow_hit_l = 1;
 80009e8:	4b72      	ldr	r3, [pc, #456]	; (8000bb4 <main+0x23c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = read_axis(&xl_r, ALL_AXIS);
 80009ee:	2103      	movs	r1, #3
 80009f0:	486b      	ldr	r0, [pc, #428]	; (8000ba0 <main+0x228>)
 80009f2:	f7ff fe61 	bl	80006b8 <read_axis>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b6a      	ldr	r3, [pc, #424]	; (8000ba4 <main+0x22c>)
 80009fc:	701a      	strb	r2, [r3, #0]
	  status = read_axis(&xl_l, ALL_AXIS);
 80009fe:	2103      	movs	r1, #3
 8000a00:	4866      	ldr	r0, [pc, #408]	; (8000b9c <main+0x224>)
 8000a02:	f7ff fe59 	bl	80006b8 <read_axis>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <main+0x22c>)
 8000a0c:	701a      	strb	r2, [r3, #0]


	if(xl_r.z_xlr < -0x2000 && allow_hit_r) // hit on right
 8000a0e:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <main+0x228>)
 8000a10:	88db      	ldrh	r3, [r3, #6]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000a18:	da5a      	bge.n	8000ad0 <main+0x158>
 8000a1a:	4b65      	ldr	r3, [pc, #404]	; (8000bb0 <main+0x238>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d056      	beq.n	8000ad0 <main+0x158>
	{
		if(xl_r.x_xlr < -0x100) // right
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <main+0x228>)
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8000a2c:	da25      	bge.n	8000a7a <main+0x102>
		{
			if(xl_r.y_xlr < -0x1000) // right-up
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <main+0x228>)
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000a38:	da0c      	bge.n	8000a54 <main+0xdc>
			{
				printf("right-up\n\r");
 8000a3a:	485f      	ldr	r0, [pc, #380]	; (8000bb8 <main+0x240>)
 8000a3c:	f004 fcec 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim4);
 8000a40:	485e      	ldr	r0, [pc, #376]	; (8000bbc <main+0x244>)
 8000a42:	f003 f8bd 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <main+0x22c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
				allow_hit_r = 0;
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <main+0x238>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
			}
			if(xl_r.y_xlr > 0x4800) // right-down
 8000a54:	4b52      	ldr	r3, [pc, #328]	; (8000ba0 <main+0x228>)
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 8000a5e:	dd0c      	ble.n	8000a7a <main+0x102>
			{
				printf("right-down\n\r");
 8000a60:	4857      	ldr	r0, [pc, #348]	; (8000bc0 <main+0x248>)
 8000a62:	f004 fcd9 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim4);
 8000a66:	4855      	ldr	r0, [pc, #340]	; (8000bbc <main+0x244>)
 8000a68:	f003 f8aa 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <main+0x22c>)
 8000a72:	701a      	strb	r2, [r3, #0]
				allow_hit_r = 0;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <main+0x238>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
			}
		}

		if(xl_r.x_xlr > 0x00) // left
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <main+0x228>)
 8000a7c:	885b      	ldrh	r3, [r3, #2]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd25      	ble.n	8000ad0 <main+0x158>
		{
			if(xl_r.y_xlr < -0x1000) // left-up
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <main+0x228>)
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000a8e:	da0c      	bge.n	8000aaa <main+0x132>
			{
				printf("left-up\n\r");
 8000a90:	484c      	ldr	r0, [pc, #304]	; (8000bc4 <main+0x24c>)
 8000a92:	f004 fcc1 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim4);
 8000a96:	4849      	ldr	r0, [pc, #292]	; (8000bbc <main+0x244>)
 8000a98:	f003 f892 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <main+0x22c>)
 8000aa2:	701a      	strb	r2, [r3, #0]
				allow_hit_r = 0;
 8000aa4:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <main+0x238>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
			}
			if(xl_r.y_xlr > 0x6000) // left-down
 8000aaa:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <main+0x228>)
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000ab4:	dd0c      	ble.n	8000ad0 <main+0x158>
			{
				printf("left-down\n\r");
 8000ab6:	4844      	ldr	r0, [pc, #272]	; (8000bc8 <main+0x250>)
 8000ab8:	f004 fcae 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim4);
 8000abc:	483f      	ldr	r0, [pc, #252]	; (8000bbc <main+0x244>)
 8000abe:	f003 f87f 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <main+0x22c>)
 8000ac8:	701a      	strb	r2, [r3, #0]
				allow_hit_r = 0;
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <main+0x238>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(xl_l.z_xlr < -0x2000 && allow_hit_l) // hit on right
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <main+0x224>)
 8000ad2:	88db      	ldrh	r3, [r3, #6]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000ada:	da88      	bge.n	80009ee <main+0x76>
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <main+0x23c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d084      	beq.n	80009ee <main+0x76>
	{
		if(xl_l.x_xlr < -0x100) // right
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <main+0x224>)
 8000ae6:	885b      	ldrh	r3, [r3, #2]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8000aee:	da25      	bge.n	8000b3c <main+0x1c4>
		{
			if(xl_l.y_xlr < -0x1000) // right-up
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <main+0x224>)
 8000af2:	889b      	ldrh	r3, [r3, #4]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000afa:	da0c      	bge.n	8000b16 <main+0x19e>
			{
				printf("left right-up\n\r");
 8000afc:	4833      	ldr	r0, [pc, #204]	; (8000bcc <main+0x254>)
 8000afe:	f004 fc8b 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim7);
 8000b02:	4833      	ldr	r0, [pc, #204]	; (8000bd0 <main+0x258>)
 8000b04:	f003 f85c 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <main+0x22c>)
 8000b0e:	701a      	strb	r2, [r3, #0]
				allow_hit_l = 0;
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <main+0x23c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			}
			if(xl_l.y_xlr > 0x4800) // right-down
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <main+0x224>)
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 8000b20:	dd0c      	ble.n	8000b3c <main+0x1c4>
			{
				printf("left right-down\n\r");
 8000b22:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <main+0x25c>)
 8000b24:	f004 fc78 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim7);
 8000b28:	4829      	ldr	r0, [pc, #164]	; (8000bd0 <main+0x258>)
 8000b2a:	f003 f849 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <main+0x22c>)
 8000b34:	701a      	strb	r2, [r3, #0]
				allow_hit_l = 0;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <main+0x23c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
			}
		}

		if(xl_l.x_xlr > 0x00) // left
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0x224>)
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f77f af53 	ble.w	80009ee <main+0x76>
		{
			if(xl_l.y_xlr < -0x1000) // left-up
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <main+0x224>)
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000b52:	da0c      	bge.n	8000b6e <main+0x1f6>
			{
				printf("left left-up\n\r");
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <main+0x260>)
 8000b56:	f004 fc5f 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim7);
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <main+0x258>)
 8000b5c:	f003 f830 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <main+0x22c>)
 8000b66:	701a      	strb	r2, [r3, #0]
				allow_hit_l = 0;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x23c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
			}
			if(xl_l.y_xlr > 0x6000) // left-down
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <main+0x224>)
 8000b70:	889b      	ldrh	r3, [r3, #4]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000b78:	f77f af39 	ble.w	80009ee <main+0x76>
			{
				printf("left left-down\n\r");
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <main+0x264>)
 8000b7e:	f004 fc4b 	bl	8005418 <iprintf>
				status = HAL_TIM_Base_Start_IT(&htim7);
 8000b82:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <main+0x258>)
 8000b84:	f003 f81c 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <main+0x22c>)
 8000b8e:	701a      	strb	r2, [r3, #0]
				allow_hit_l = 0;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <main+0x23c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
	  status = read_axis(&xl_r, ALL_AXIS);
 8000b96:	e72a      	b.n	80009ee <main+0x76>
 8000b98:	200001c8 	.word	0x200001c8
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200002ac 	.word	0x200002ac
 8000ba8:	080061d0 	.word	0x080061d0
 8000bac:	080061dc 	.word	0x080061dc
 8000bb0:	200002b0 	.word	0x200002b0
 8000bb4:	200002b4 	.word	0x200002b4
 8000bb8:	080061e8 	.word	0x080061e8
 8000bbc:	20000214 	.word	0x20000214
 8000bc0:	080061f4 	.word	0x080061f4
 8000bc4:	08006204 	.word	0x08006204
 8000bc8:	08006210 	.word	0x08006210
 8000bcc:	0800621c 	.word	0x0800621c
 8000bd0:	20000260 	.word	0x20000260
 8000bd4:	0800622c 	.word	0x0800622c
 8000bd8:	08006240 	.word	0x08006240
 8000bdc:	08006250 	.word	0x08006250

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2238      	movs	r2, #56	; 0x38
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fd58 	bl	80056a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c06:	f001 ffbb 	bl	8002b80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2340      	movs	r3, #64	; 0x40
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f845 	bl	8002cc8 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c44:	f000 fa26 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fb49 	bl	80032f8 <HAL_RCC_ClockConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c6c:	f000 fa12 	bl	8001094 <Error_Handler>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3750      	adds	r7, #80	; 0x50
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2230      	movs	r2, #48	; 0x30
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 fd0d 	bl	80056a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_DAC1_Init+0x6c>)
 8000c8c:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <MX_DAC1_Init+0x70>)
 8000c8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_DAC1_Init+0x6c>)
 8000c92:	f000 fe2c 	bl	80018ee <HAL_DAC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c9c:	f000 f9fa 	bl	8001094 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_DAC1_Init+0x6c>)
 8000ccc:	f000 fe32 	bl	8001934 <HAL_DAC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000cd6:	f000 f9dd 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000d8 	.word	0x200000d8
 8000ce8:	50000800 	.word	0x50000800

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_I2C1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_I2C1_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d28:	f001 f92e 	bl	8001f88 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f9af 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d3a:	f001 fe89 	bl	8002a50 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 f9a6 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d4c:	f001 fecb 	bl	8002ae6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f99d 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000ec 	.word	0x200000ec
 8000d64:	40005400 	.word	0x40005400
 8000d68:	10707dbc 	.word	0x10707dbc

08000d6c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d72:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <MX_LPUART1_UART_Init+0x90>)
 8000d74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d78:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000d7c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000db0:	f003 fc06 	bl	80045c0 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f96b 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000dc2:	f004 f99d 	bl	8005100 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000dcc:	f000 f962 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000dd4:	f004 f9d2 	bl	800517c <HAL_UARTEx_SetRxFifoThreshold>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000dde:	f000 f959 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_LPUART1_UART_Init+0x8c>)
 8000de4:	f004 f953 	bl	800508e <HAL_UARTEx_DisableFifoMode>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000dee:	f000 f951 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000138 	.word	0x20000138
 8000dfc:	40008000 	.word	0x40008000

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e28:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e48:	f002 fe62 	bl	8003b10 <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e52:	f000 f91f 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e64:	f003 f896 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e6e:	f000 f911 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_TIM2_Init+0x98>)
 8000e80:	f003 fad6 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 f903 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001c8 	.word	0x200001c8

08000e9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_TIM4_Init+0x9c>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ed0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000ee4:	f002 fe14 	bl	8003b10 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000eee:	f000 f8d1 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000f00:	f003 f848 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000f0a:	f000 f8c3 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM4_Init+0x98>)
 8000f1c:	f003 fa88 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000f26:	f000 f8b5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000214 	.word	0x20000214
 8000f38:	40000800 	.word	0x40000800

08000f3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <MX_TIM7_Init+0x6c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f58:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f70:	f002 fdce 	bl	8003b10 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f7a:	f000 f88b 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM7_Init+0x68>)
 8000f8c:	f003 fa50 	bl	8004430 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f96:	f000 f87d 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000260 	.word	0x20000260
 8000fa8:	40001400 	.word	0x40001400

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_GPIO_Init+0x68>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_GPIO_Init+0x6c>)
 8001006:	f000 fe3d 	bl	8001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400

0800101c <HAL_TIM_PeriodElapsedCallback>:
  * @brief Timer Callback function
  * @param htim - the timer that triggered the callback
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  uint8_t msg[25] = "test\n";
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	6018      	str	r0, [r3, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	8019      	strh	r1, [r3, #0]
 8001034:	f107 0312 	add.w	r3, r7, #18
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	f8c3 200f 	str.w	r2, [r3, #15]

  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d102      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//	  printf("hit 4 \r\n");
	  allow_hit_l = 1;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  }
  if (htim == &htim4)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d102      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x46>
  {
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//	  printf("hit 4 \r\n");
	  allow_hit_r = 1;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  }
  if (htim == &htim2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d102      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x54>
  {
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  printf("hit 2 \r\n");
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800106c:	f004 fa3a 	bl	80054e4 <puts>
//  {
//	  status = read_axis(&xl_r, ALL_AXIS);
//	  sprintf(msg, "%d,%d,%d", xl_r.x_xlr, xl_r.y_xlr, xl_r.z_xlr);
//	  HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg), 10);
//  }
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800626c 	.word	0x0800626c
 800107c:	20000260 	.word	0x20000260
 8001080:	200002b4 	.word	0x200002b4
 8001084:	20000214 	.word	0x20000214
 8001088:	200002b0 	.word	0x200002b0
 800108c:	200001c8 	.word	0x200001c8
 8001090:	08006264 	.word	0x08006264

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_MspInit+0x44>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6613      	str	r3, [r2, #96]	; 0x60
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x44>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x44>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x44>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_DAC_MspInit+0x74>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d124      	bne.n	8001154 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_DAC_MspInit+0x78>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_DAC_MspInit+0x78>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_DAC_MspInit+0x78>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_DAC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113a:	2310      	movs	r3, #16
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fd98 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50000800 	.word	0x50000800
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b09c      	sub	sp, #112	; 0x70
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	2244      	movs	r2, #68	; 0x44
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fa8d 	bl	80056a4 <memset>
  if(hi2c->Instance==I2C1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <HAL_I2C_MspInit+0xe0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d153      	bne.n	800123c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001194:	2340      	movs	r3, #64	; 0x40
 8001196:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fac5 	bl	8003730 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011ac:	f7ff ff72 	bl	8001094 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f2:	2304      	movs	r3, #4
 80011f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fd40 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001208:	2312      	movs	r3, #18
 800120a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001214:	2304      	movs	r3, #4
 8001216:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800121c:	4619      	mov	r1, r3
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <HAL_I2C_MspInit+0xe8>)
 8001220:	f000 fd30 	bl	8001c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 800122a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122e:	6593      	str	r3, [r2, #88]	; 0x58
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_I2C_MspInit+0xe4>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3770      	adds	r7, #112	; 0x70
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40005400 	.word	0x40005400
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09a      	sub	sp, #104	; 0x68
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2244      	movs	r2, #68	; 0x44
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fa17 	bl	80056a4 <memset>
  if(huart->Instance==LPUART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_UART_MspInit+0xa8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d136      	bne.n	80012ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001280:	2320      	movs	r3, #32
 8001282:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fa4f 	bl	8003730 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f7ff fefc 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0xac>)
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0xac>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012cc:	230c      	movs	r3, #12
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80012dc:	230c      	movs	r3, #12
 80012de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 fccb 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3768      	adds	r7, #104	; 0x68
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40008000 	.word	0x40008000
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800132a:	e032      	b.n	8001392 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d114      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6593      	str	r3, [r2, #88]	; 0x58
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201e      	movs	r0, #30
 8001354:	f000 fa97 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001358:	201e      	movs	r0, #30
 800135a:	f000 faae 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 800135e:	e018      	b.n	8001392 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_TIM_Base_MspInit+0xa4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d113      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_Base_MspInit+0x9c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2037      	movs	r0, #55	; 0x37
 8001388:	f000 fa7d 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800138c:	2037      	movs	r0, #55	; 0x37
 800138e:	f000 fa94 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40000800 	.word	0x40000800
 80013a4:	40001400 	.word	0x40001400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f92c 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM4_IRQHandler+0x10>)
 8001402:	f002 fc47 	bl	8003c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000214 	.word	0x20000214

08001410 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM7_IRQHandler+0x10>)
 8001416:	f002 fc3d 	bl	8003c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000260 	.word	0x20000260

08001424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00a      	b.n	800144c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001436:	f3af 8000 	nop.w
 800143a:	4601      	mov	r1, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <_read+0x12>
  }

  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:
  }
  return len;
}

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f004 f922 	bl	8005740 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20008000 	.word	0x20008000
 8001528:	00000400 	.word	0x00000400
 800152c:	200002b8 	.word	0x200002b8
 8001530:	20000410 	.word	0x20000410

08001534 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800155a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <LoopForever+0x6>)
  ldr r1, =_edata
 800155e:	490e      	ldr	r1, [pc, #56]	; (8001598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <LoopForever+0xe>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001574:	4c0b      	ldr	r4, [pc, #44]	; (80015a4 <LoopForever+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001582:	f7ff ffd7 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001586:	f004 f8e1 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158a:	f7ff f9f5 	bl	8000978 <main>

0800158e <LoopForever>:

LoopForever:
    b LoopForever
 800158e:	e7fe      	b.n	800158e <LoopForever>
  ldr   r0, =_estack
 8001590:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800159c:	08006548 	.word	0x08006548
  ldr r2, =_sbss
 80015a0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80015a4:	2000040c 	.word	0x2000040c

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>

080015aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f95b 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f80e 	bl	80015dc <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e001      	b.n	80015d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015cc:	f7ff fd68 	bl	80010a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d0:	79fb      	ldrb	r3, [r7, #7]

}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_InitTick+0x68>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d022      	beq.n	8001636 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_InitTick+0x6c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_InitTick+0x68>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f966 	bl	80018d6 <HAL_SYSTICK_Config>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10f      	bne.n	8001630 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	d809      	bhi.n	800162a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001616:	2200      	movs	r2, #0
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	f04f 30ff 	mov.w	r0, #4294967295
 800161e:	f000 f932 	bl	8001886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_InitTick+0x70>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e007      	b.n	800163a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e004      	b.n	800163a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e001      	b.n	800163a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000058 	.word	0x20000058
 8001648:	20000050 	.word	0x20000050
 800164c:	20000054 	.word	0x20000054

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x1c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x20>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x1c>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	200002bc 	.word	0x200002bc
 8001670:	20000058 	.word	0x20000058

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200002bc 	.word	0x200002bc

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d004      	beq.n	80016b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_Delay+0x40>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b0:	bf00      	nop
 80016b2:	f7ff ffdf 	bl	8001674 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8f7      	bhi.n	80016b2 <HAL_Delay+0x26>
  {
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000058 	.word	0x20000058

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff40 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff33 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa4 	bl	800182c <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e014      	b.n	800192a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fbe9 	bl	80010e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_DAC_ConfigChannel+0x18>
 8001948:	2302      	movs	r3, #2
 800194a:	e192      	b.n	8001c72 <HAL_DAC_ConfigChannel+0x33e>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d174      	bne.n	8001a4a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001960:	f7ff fe88 	bl	8001674 <HAL_GetTick>
 8001964:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d134      	bne.n	80019d6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800196c:	e011      	b.n	8001992 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800196e:	f7ff fe81 	bl	8001674 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d90a      	bls.n	8001992 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f043 0208 	orr.w	r2, r3, #8
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2203      	movs	r2, #3
 800198c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e16f      	b.n	8001c72 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e6      	bne.n	800196e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fe73 	bl	800168c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
 80019b0:	e01e      	b.n	80019f0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019b2:	f7ff fe5f 	bl	8001674 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d90a      	bls.n	80019d6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f043 0208 	orr.w	r2, r3, #8
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2203      	movs	r2, #3
 80019d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e14d      	b.n	8001c72 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	2b00      	cmp	r3, #0
 80019de:	dbe8      	blt.n	80019b2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fe53 	bl	800168c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	ea02 0103 	and.w	r1, r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	21ff      	movs	r1, #255	; 0xff
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	ea02 0103 	and.w	r1, r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11d      	bne.n	8001a8e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	221f      	movs	r2, #31
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4313      	orrs	r3, r2
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	e00f      	b.n	8001ad8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d102      	bne.n	8001ac6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	e008      	b.n	8001ad8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	e001      	b.n	8001ad8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	6a3a      	ldr	r2, [r7, #32]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	4013      	ands	r3, r2
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	791b      	ldrb	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_DAC_ConfigChannel+0x1d8>
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	e000      	b.n	8001b0e <HAL_DAC_ConfigChannel+0x1da>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	4013      	ands	r3, r2
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_DAC_ConfigChannel+0x204>
 8001b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b36:	e000      	b.n	8001b3a <HAL_DAC_ConfigChannel+0x206>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d114      	bne.n	8001b7a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b50:	f001 fd70 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8001b54:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_DAC_ConfigChannel+0x348>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d904      	bls.n	8001b68 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00f      	b.n	8001b88 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4a45      	ldr	r2, [pc, #276]	; (8001c80 <HAL_DAC_ConfigChannel+0x34c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d90a      	bls.n	8001b86 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e006      	b.n	8001b88 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	4313      	orrs	r3, r2
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
 8001b84:	e000      	b.n	8001b88 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001b86:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	4313      	orrs	r3, r2
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	4013      	ands	r3, r2
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	22c0      	movs	r2, #192	; 0xc0
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43da      	mvns	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	400a      	ands	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	ea02 0103 	and.w	r1, r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	09896800 	.word	0x09896800
 8001c80:	04c4b400 	.word	0x04c4b400

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c92:	e15a      	b.n	8001f4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 814c 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a6 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x1f8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x1f4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a49      	ldr	r2, [pc, #292]	; (8001f7c <HAL_GPIO_Init+0x2f8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e4>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e68:	2306      	movs	r3, #6
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4937      	ldr	r1, [pc, #220]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec0:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae9d 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e081      	b.n	800209e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff f8d8 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e006      	b.n	8002010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800200e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d104      	bne.n	8002022 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69d9      	ldr	r1, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f040 80f9 	bne.w	80022c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_I2C_Mem_Write+0x34>
 80020d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0ed      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_I2C_Mem_Write+0x4e>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0e6      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020fe:	f7ff fab9 	bl	8001674 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2319      	movs	r3, #25
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fac3 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d1      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2221      	movs	r2, #33	; 0x21
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002148:	88f8      	ldrh	r0, [r7, #6]
 800214a:	893a      	ldrh	r2, [r7, #8]
 800214c:	8979      	ldrh	r1, [r7, #10]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	4603      	mov	r3, r0
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f9d3 	bl	8002504 <I2C_RequestMemoryWrite>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0a9      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d90e      	bls.n	8002198 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	b2da      	uxtb	r2, r3
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	2300      	movs	r3, #0
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fc2b 	bl	80029ec <I2C_TransferConfig>
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	8979      	ldrh	r1, [r7, #10]
 80021aa:	2300      	movs	r3, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fc1a 	bl	80029ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 faad 	bl	800271c <I2C_WaitOnTXISFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e07b      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d034      	beq.n	8002270 <HAL_I2C_Mem_Write+0x1c8>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	d130      	bne.n	8002270 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa3f 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e04d      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d90e      	bls.n	8002250 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	b2da      	uxtb	r2, r3
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	2300      	movs	r3, #0
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fbcf 	bl	80029ec <I2C_TransferConfig>
 800224e:	e00f      	b.n	8002270 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	b2da      	uxtb	r2, r3
 8002260:	8979      	ldrh	r1, [r7, #10]
 8002262:	2300      	movs	r3, #0
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fbbe 	bl	80029ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d19e      	bne.n	80021b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa8c 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e01a      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2220      	movs	r2, #32
 8002294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_I2C_Mem_Write+0x224>)
 80022a2:	400b      	ands	r3, r1
 80022a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fe00e800 	.word	0xfe00e800

080022d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	817b      	strh	r3, [r7, #10]
 80022e2:	460b      	mov	r3, r1
 80022e4:	813b      	strh	r3, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 80fd 	bne.w	80024f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_I2C_Mem_Read+0x34>
 80022fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0f1      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_I2C_Mem_Read+0x4e>
 800231a:	2302      	movs	r3, #2
 800231c:	e0ea      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002326:	f7ff f9a5 	bl	8001674 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2319      	movs	r3, #25
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f9af 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0d5      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2222      	movs	r2, #34	; 0x22
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002370:	88f8      	ldrh	r0, [r7, #6]
 8002372:	893a      	ldrh	r2, [r7, #8]
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4603      	mov	r3, r0
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f913 	bl	80025ac <I2C_RequestMemoryRead>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ad      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d90e      	bls.n	80023c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22ff      	movs	r2, #255	; 0xff
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	8979      	ldrh	r1, [r7, #10]
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_I2C_Mem_Read+0x22c>)
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fb17 	bl	80029ec <I2C_TransferConfig>
 80023be:	e00f      	b.n	80023e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_I2C_Mem_Read+0x22c>)
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fb06 	bl	80029ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	2200      	movs	r2, #0
 80023e8:	2104      	movs	r1, #4
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f956 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07c      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d034      	beq.n	80024a0 <HAL_I2C_Mem_Read+0x1d0>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d130      	bne.n	80024a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	2200      	movs	r2, #0
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f927 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e04d      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d90e      	bls.n	8002480 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fab7 	bl	80029ec <I2C_TransferConfig>
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	b2da      	uxtb	r2, r3
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	2300      	movs	r3, #0
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 faa6 	bl	80029ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d19a      	bne.n	80023e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f974 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e01a      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_I2C_Mem_Read+0x230>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	80002400 	.word	0x80002400
 8002500:	fe00e800 	.word	0xfe00e800

08002504 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	8979      	ldrh	r1, [r7, #10]
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <I2C_RequestMemoryWrite+0xa4>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fa5d 	bl	80029ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8f0 	bl	800271c <I2C_WaitOnTXISFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02c      	b.n	80025a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800254c:	893b      	ldrh	r3, [r7, #8]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
 8002556:	e015      	b.n	8002584 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8d6 	bl	800271c <I2C_WaitOnTXISFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e012      	b.n	80025a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257a:	893b      	ldrh	r3, [r7, #8]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2200      	movs	r2, #0
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f884 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	80002000 	.word	0x80002000

080025ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	8979      	ldrh	r1, [r7, #10]
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <I2C_RequestMemoryRead+0xa4>)
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2300      	movs	r3, #0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fa0a 	bl	80029ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f89d 	bl	800271c <I2C_WaitOnTXISFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e02c      	b.n	8002646 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
 80025fc:	e015      	b.n	800262a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29b      	uxth	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f883 	bl	800271c <I2C_WaitOnTXISFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e012      	b.n	8002646 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002620:	893b      	ldrh	r3, [r7, #8]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2200      	movs	r2, #0
 8002632:	2140      	movs	r1, #64	; 0x40
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f831 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	80002000 	.word	0x80002000

08002654 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d103      	bne.n	8002672 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d007      	beq.n	8002690 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	619a      	str	r2, [r3, #24]
  }
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	e022      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d01e      	beq.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7fe ffdd 	bl	8001674 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e00f      	b.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4013      	ands	r3, r2
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	429a      	cmp	r2, r3
 8002710:	d0cd      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002728:	e02c      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f870 	bl	8002814 <I2C_IsErrorOccurred>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02a      	b.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d01e      	beq.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7fe ff95 	bl	8001674 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d113      	bne.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d1cb      	bne.n	800272a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a8:	e028      	b.n	80027fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f830 	bl	8002814 <I2C_IsErrorOccurred>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e026      	b.n	800280c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7fe ff59 	bl	8001674 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d113      	bne.n	80027fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b20      	cmp	r3, #32
 8002808:	d1cf      	bne.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d075      	beq.n	800292c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002848:	e056      	b.n	80028f8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d052      	beq.n	80028f8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7fe ff0f 	bl	8001674 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <I2C_IsErrorOccurred+0x54>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d147      	bne.n	80028f8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800287a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288a:	d12e      	bne.n	80028ea <I2C_IsErrorOccurred+0xd6>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002892:	d02a      	beq.n	80028ea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b20      	cmp	r3, #32
 8002898:	d027      	beq.n	80028ea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028aa:	f7fe fee3 	bl	8001674 <HAL_GetTick>
 80028ae:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b0:	e01b      	b.n	80028ea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028b2:	f7fe fedf 	bl	8001674 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b19      	cmp	r3, #25
 80028be:	d914      	bls.n	80028ea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d1dc      	bne.n	80028b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d003      	beq.n	800290e <I2C_IsErrorOccurred+0xfa>
 8002906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290a:	2b00      	cmp	r3, #0
 800290c:	d09d      	beq.n	800284a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800290e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2220      	movs	r2, #32
 800291c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800299a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff fe56 	bl	8002654 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <I2C_IsErrorOccurred+0x1d4>)
 80029b4:	400b      	ands	r3, r1
 80029b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	fe00e800 	.word	0xfe00e800

080029ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	4613      	mov	r3, r2
 80029fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a04:	7a7b      	ldrb	r3, [r7, #9]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <I2C_TransferConfig+0x60>)
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	ea02 0103 	and.w	r1, r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	03ff63ff 	.word	0x03ff63ff

08002a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d138      	bne.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e032      	b.n	8002ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	; 0x24
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d139      	bne.n	8002b70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e033      	b.n	8002b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2224      	movs	r2, #36	; 0x24
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d141      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d131      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba2:	4a46      	ldr	r2, [pc, #280]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bb4:	4a41      	ldr	r2, [pc, #260]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2232      	movs	r2, #50	; 0x32
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a3f      	ldr	r2, [pc, #252]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	0c9b      	lsrs	r3, r3, #18
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd2:	e002      	b.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d102      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f2      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d158      	bne.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e057      	b.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c06:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c10:	e04d      	b.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c18:	d141      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1a:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d131      	bne.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c38:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2232      	movs	r2, #50	; 0x32
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	0c9b      	lsrs	r3, r3, #18
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5e:	e002      	b.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d102      	bne.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f2      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d112      	bne.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e011      	b.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c9c:	e007      	b.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	20000050 	.word	0x20000050
 8002cc4:	431bde83 	.word	0x431bde83

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e306      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d075      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce6:	4b97      	ldr	r3, [pc, #604]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf0:	4b94      	ldr	r3, [pc, #592]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3e>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_OscConfig+0x44>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d10b      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	4b8d      	ldr	r3, [pc, #564]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05b      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d157      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e2e1      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x74>
 8002d2e:	4b85      	ldr	r3, [pc, #532]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a84      	ldr	r2, [pc, #528]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b7f      	ldr	r3, [pc, #508]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7b      	ldr	r2, [pc, #492]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d60:	4b78      	ldr	r3, [pc, #480]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fc78 	bl	8001674 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fc74 	bl	8001674 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e2a6      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xc0>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fc64 	bl	8001674 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fc60 	bl	8001674 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e292      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	4b60      	ldr	r3, [pc, #384]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0xe8>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d075      	beq.n	8002eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0x136>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_OscConfig+0x13c>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11f      	bne.n	8002e44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x154>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e265      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4946      	ldr	r1, [pc, #280]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_RCC_OscConfig+0x280>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fbd1 	bl	80015dc <HAL_InitTick>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d043      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e251      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d023      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fc0c 	bl	8001674 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fc08 	bl	8001674 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e23a      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	492d      	ldr	r1, [pc, #180]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 8002e92:	e01a      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fbe8 	bl	8001674 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fbe4 	bl	8001674 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e216      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1e0>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d041      	beq.n	8002f5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe fbc1 	bl	8001674 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fbbd 	bl	8001674 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1ef      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ef      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x22e>
 8002f16:	e020      	b.n	8002f5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe fba4 	bl	8001674 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2e:	e00d      	b.n	8002f4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fba0 	bl	8001674 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d906      	bls.n	8002f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1d2      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ea      	bne.n	8002f30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a6 	beq.w	80030b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6c:	4b84      	ldr	r3, [pc, #528]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2b4>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x2b6>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	4a7e      	ldr	r2, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9e:	4b79      	ldr	r3, [pc, #484]	; (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002faa:	4b76      	ldr	r3, [pc, #472]	; (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a75      	ldr	r2, [pc, #468]	; (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fb5d 	bl	8001674 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fb59 	bl	8001674 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e18b      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd0:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <HAL_RCC_OscConfig+0x4bc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x32e>
 8002fe4:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff4:	e024      	b.n	8003040 <HAL_RCC_OscConfig+0x378>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d110      	bne.n	8003020 <HAL_RCC_OscConfig+0x358>
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x378>
 8003020:	4b57      	ldr	r3, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a56      	ldr	r2, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fb14 	bl	8001674 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fb10 	bl	8001674 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e140      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ed      	beq.n	8003050 <HAL_RCC_OscConfig+0x388>
 8003074:	e015      	b.n	80030a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fe fafd 	bl	8001674 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe faf9 	bl	8001674 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e129      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ed      	bne.n	800307e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d03c      	beq.n	800313a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01c      	beq.n	8003102 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe facc 	bl	8001674 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e0:	f7fe fac8 	bl	8001674 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0fa      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <HAL_RCC_OscConfig+0x418>
 8003100:	e01b      	b.n	800313a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe faaf 	bl	8001674 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800311a:	f7fe faab 	bl	8001674 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0dd      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ef      	bne.n	800311a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80d1 	beq.w	80032e6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f000 808b 	beq.w	8003268 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d15e      	bne.n	8003218 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe fa85 	bl	8001674 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	e00c      	b.n	8003188 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fa81 	bl	8001674 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d905      	bls.n	8003188 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0b3      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ec      	bne.n	800316e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x62c>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a11      	ldr	r1, [r2, #32]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ae:	0212      	lsls	r2, r2, #8
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031b6:	0852      	lsrs	r2, r2, #1
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0552      	lsls	r2, r2, #21
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	0652      	lsls	r2, r2, #25
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031ce:	06d2      	lsls	r2, r2, #27
 80031d0:	430a      	orrs	r2, r1
 80031d2:	4947      	ldr	r1, [pc, #284]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fa40 	bl	8001674 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fa3c 	bl	8001674 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e06e      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x530>
 8003216:	e066      	b.n	80032e6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800321e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a2e      	ldr	r2, [pc, #184]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 8003236:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fa18 	bl	8001674 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fa14 	bl	8001674 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e046      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x580>
 8003266:	e03e      	b.n	80032e6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e039      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCC_OscConfig+0x628>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	429a      	cmp	r2, r3
 8003286:	d12c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d123      	bne.n	80032e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d113      	bne.n	80032e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000
 80032f4:	019f800c 	.word	0x019f800c

080032f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e11e      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b91      	ldr	r3, [pc, #580]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d910      	bls.n	8003340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 020f 	bic.w	r2, r3, #15
 8003326:	498c      	ldr	r1, [pc, #560]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b8a      	ldr	r3, [pc, #552]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e106      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d073      	beq.n	8003434 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d129      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0f4      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003364:	f000 f99e 	bl	80036a4 <RCC_GetSysClockFreqFromPLLSource>
 8003368:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4a7c      	ldr	r2, [pc, #496]	; (8003560 <HAL_RCC_ClockConfig+0x268>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d93f      	bls.n	80033f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003372:	4b7a      	ldr	r3, [pc, #488]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003386:	2b00      	cmp	r3, #0
 8003388:	d033      	beq.n	80033f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800338e:	2b00      	cmp	r3, #0
 8003390:	d12f      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003392:	4b72      	ldr	r3, [pc, #456]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	4a70      	ldr	r2, [pc, #448]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e024      	b.n	80033f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0c6      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0be      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033d0:	f000 f8ce 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4a61      	ldr	r2, [pc, #388]	; (8003560 <HAL_RCC_ClockConfig+0x268>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d909      	bls.n	80033f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4957      	ldr	r1, [pc, #348]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fe f936 	bl	8001674 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe f932 	bl	8001674 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e095      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b4e      	ldr	r3, [pc, #312]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d023      	beq.n	8003488 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003456:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 800346e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4936      	ldr	r1, [pc, #216]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
 8003486:	e008      	b.n	800349a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d105      	bne.n	800349a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4a32      	ldr	r2, [pc, #200]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003498:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d21d      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 020f 	bic.w	r2, r3, #15
 80034b0:	4929      	ldr	r1, [pc, #164]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b8:	f7fe f8dc 	bl	8001674 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe f8d8 	bl	8001674 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e03b      	b.n	800354e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1ed      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4917      	ldr	r1, [pc, #92]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490f      	ldr	r1, [pc, #60]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003522:	f000 f825 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_ClockConfig+0x264>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490c      	ldr	r1, [pc, #48]	; (8003564 <HAL_RCC_ClockConfig+0x26c>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x270>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f848 	bl	80015dc <HAL_InitTick>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	04c4b400 	.word	0x04c4b400
 8003564:	080064c4 	.word	0x080064c4
 8003568:	20000050 	.word	0x20000050
 800356c:	20000054 	.word	0x20000054

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b04      	cmp	r3, #4
 8003580:	d102      	bne.n	8003588 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003582:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e047      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d102      	bne.n	800359a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003594:	4b26      	ldr	r3, [pc, #152]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e03e      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d136      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3301      	adds	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c4:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ce:	68d2      	ldr	r2, [r2, #12]
 80035d0:	0a12      	lsrs	r2, r2, #8
 80035d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
      break;
 80035dc:	e00c      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	0a12      	lsrs	r2, r2, #8
 80035ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
      break;
 80035f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0e5b      	lsrs	r3, r3, #25
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e001      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003618:	693b      	ldr	r3, [r7, #16]
}
 800361a:	4618      	mov	r0, r3
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000050 	.word	0x20000050

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4904      	ldr	r1, [pc, #16]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	080064d4 	.word	0x080064d4

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800367c:	f7ff ffda 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0adb      	lsrs	r3, r3, #11
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	080064d4 	.word	0x080064d4

080036a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d10c      	bne.n	80036e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c8:	4a17      	ldr	r2, [pc, #92]	; (8003728 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d2:	68d2      	ldr	r2, [r2, #12]
 80036d4:	0a12      	lsrs	r2, r2, #8
 80036d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
    break;
 80036e0:	e00c      	b.n	80036fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	0a12      	lsrs	r2, r2, #8
 80036f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    break;
 80036fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0e5b      	lsrs	r3, r3, #25
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003716:	687b      	ldr	r3, [r7, #4]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000
 8003728:	007a1200 	.word	0x007a1200
 800372c:	00f42400 	.word	0x00f42400

08003730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003738:	2300      	movs	r3, #0
 800373a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800373c:	2300      	movs	r3, #0
 800373e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8098 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10d      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6593      	str	r3, [r2, #88]	; 0x58
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377a:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a39      	ldr	r2, [pc, #228]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003786:	f7fd ff75 	bl	8001674 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378c:	e009      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fd ff71 	bl	8001674 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	74fb      	strb	r3, [r7, #19]
        break;
 80037a0:	e005      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a2:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ef      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d159      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d019      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fd ff31 	bl	8001674 <HAL_GetTick>
 8003812:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003814:	e00b      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fd ff2d 	bl	8001674 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d902      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	74fb      	strb	r3, [r7, #19]
            break;
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ec      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	74bb      	strb	r3, [r7, #18]
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7c7b      	ldrb	r3, [r7, #17]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4ba6      	ldr	r3, [pc, #664]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	4aa5      	ldr	r2, [pc, #660]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4ba0      	ldr	r3, [pc, #640]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f023 0203 	bic.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	499c      	ldr	r1, [pc, #624]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ac:	4b97      	ldr	r3, [pc, #604]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 020c 	bic.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4994      	ldr	r1, [pc, #592]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	498b      	ldr	r1, [pc, #556]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f0:	4b86      	ldr	r3, [pc, #536]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	4983      	ldr	r1, [pc, #524]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003912:	4b7e      	ldr	r3, [pc, #504]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	497a      	ldr	r1, [pc, #488]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003934:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4972      	ldr	r1, [pc, #456]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4969      	ldr	r1, [pc, #420]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003978:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4961      	ldr	r1, [pc, #388]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800399a:	4b5c      	ldr	r3, [pc, #368]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	4958      	ldr	r1, [pc, #352]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039bc:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	4950      	ldr	r1, [pc, #320]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	4942      	ldr	r1, [pc, #264]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a14:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4934      	ldr	r1, [pc, #208]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	4926      	ldr	r1, [pc, #152]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a82:	d105      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	4918      	ldr	r1, [pc, #96]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fbe2 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fb42 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04a      	b.n	8003c6e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x6c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x6c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x6c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x6c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x6c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d115      	bne.n	8003c58 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d015      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xaa>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d011      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e008      	b.n	8003c6a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40013400 	.word	0x40013400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	00010007 	.word	0x00010007

08003c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0202 	mvn.w	r2, #2
 8003cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa60 	bl	800419c <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa52 	bl	8004188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa63 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0204 	mvn.w	r2, #4
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa36 	bl	800419c <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa28 	bl	8004188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa39 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0208 	mvn.w	r2, #8
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa0c 	bl	800419c <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9fe 	bl	8004188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa0f 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0210 	mvn.w	r2, #16
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9e2 	bl	800419c <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9d4 	bl	8004188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f9e5 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0201 	mvn.w	r2, #1
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd f902 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b80      	cmp	r3, #128	; 0x80
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fb82 	bl	8004548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b80      	cmp	r3, #128	; 0x80
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fb75 	bl	800455c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d10e      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f993 	bl	80041c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d10e      	bne.n	8003eca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0220 	mvn.w	r2, #32
 8003ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fb35 	bl	8004534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed8:	d10f      	bne.n	8003efa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee8:	d107      	bne.n	8003efa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fb3b 	bl	8004570 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f08:	d10f      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fb2d 	bl	8004584 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f38:	d10f      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb1f 	bl	8004598 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f68:	d10f      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb11 	bl	80045ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0de      	b.n	800416e <HAL_TIM_ConfigClockSource+0x1da>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a63      	ldr	r2, [pc, #396]	; (8004178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f000 80a9 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ff0:	4a61      	ldr	r2, [pc, #388]	; (8004178 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f200 80ae 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ff8:	4a60      	ldr	r2, [pc, #384]	; (800417c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f000 80a1 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004000:	4a5e      	ldr	r2, [pc, #376]	; (800417c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	f200 80a6 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004008:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	f000 8099 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004010:	4a5b      	ldr	r2, [pc, #364]	; (8004180 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	f200 809e 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004018:	4a5a      	ldr	r2, [pc, #360]	; (8004184 <HAL_TIM_ConfigClockSource+0x1f0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	f000 8091 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f200 8096 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004028:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800402c:	f000 8089 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004030:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004034:	f200 808e 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d03e      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0x128>
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	f200 8087 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	f000 8086 	beq.w	800415a <HAL_TIM_ConfigClockSource+0x1c6>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d87f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004054:	2b70      	cmp	r3, #112	; 0x70
 8004056:	d01a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xfa>
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d87b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d050      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d877      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d03c      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x14e>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d873      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d058      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x18e>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d86f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d064      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d86b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d060      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d867      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05c      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 8004088:	2b10      	cmp	r3, #16
 800408a:	d05a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x1ae>
 800408c:	e062      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 f9a7 	bl	80043f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	609a      	str	r2, [r3, #8]
      break;
 80040ba:	e04f      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f000 f990 	bl	80043f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040de:	609a      	str	r2, [r3, #8]
      break;
 80040e0:	e03c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f902 	bl	80042f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2150      	movs	r1, #80	; 0x50
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f95b 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8004100:	e02c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 f921 	bl	8004356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2160      	movs	r1, #96	; 0x60
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f94b 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8004120:	e01c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	f000 f8e2 	bl	80042f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f93b 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8004140:	e00c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 f932 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8004152:	e003      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e000      	b.n	800415c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800415a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	00100070 	.word	0x00100070
 800417c:	00100040 	.word	0x00100040
 8004180:	00100030 	.word	0x00100030
 8004184:	00100020 	.word	0x00100020

08004188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <TIM_Base_SetConfig+0x104>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00f      	beq.n	8004210 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d00b      	beq.n	8004210 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a39      	ldr	r2, [pc, #228]	; (80042e0 <TIM_Base_SetConfig+0x108>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_Base_SetConfig+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <TIM_Base_SetConfig+0x10c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_Base_SetConfig+0x38>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a37      	ldr	r2, [pc, #220]	; (80042e8 <TIM_Base_SetConfig+0x110>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d108      	bne.n	8004222 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <TIM_Base_SetConfig+0x104>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01b      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d017      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <TIM_Base_SetConfig+0x108>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0x10c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00f      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_Base_SetConfig+0x110>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_Base_SetConfig+0x114>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <TIM_Base_SetConfig+0x104>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0xe8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <TIM_Base_SetConfig+0x110>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0xe8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0xe8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0f      	ldr	r2, [pc, #60]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0xe8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d103      	bne.n	80042c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	615a      	str	r2, [r3, #20]
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 030a 	bic.w	r3, r3, #10
 8004334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0210 	bic.w	r2, r3, #16
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	031b      	lsls	r3, r3, #12
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f043 0307 	orr.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	431a      	orrs	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e065      	b.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d013      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40013400 	.word	0x40013400
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e042      	b.n	8004658 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fc fe33 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2224      	movs	r2, #36	; 0x24
 80045ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8c2 	bl	800478c <UART_SetConfig>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e022      	b.n	8004658 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb82 	bl	8004d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fc09 	bl	8004e68 <UART_CheckIdleState>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 8083 	bne.w	8004782 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_UART_Transmit+0x28>
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e07b      	b.n	8004784 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_UART_Transmit+0x3a>
 8004696:	2302      	movs	r3, #2
 8004698:	e074      	b.n	8004784 <HAL_UART_Transmit+0x124>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2221      	movs	r2, #33	; 0x21
 80046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046b2:	f7fc ffdf 	bl	8001674 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	d108      	bne.n	80046e4 <HAL_UART_Transmit+0x84>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e003      	b.n	80046ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80046f4:	e02c      	b.n	8004750 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2180      	movs	r1, #128	; 0x80
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fbfc 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e039      	b.n	8004784 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	3302      	adds	r3, #2
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e007      	b.n	800473e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	781a      	ldrb	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	3301      	adds	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1cc      	bne.n	80046f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	2140      	movs	r1, #64	; 0x40
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fbc9 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e006      	b.n	8004784 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b08c      	sub	sp, #48	; 0x30
 8004792:	af00      	add	r7, sp, #0
 8004794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4bab      	ldr	r3, [pc, #684]	; (8004a68 <UART_SetConfig+0x2dc>)
 80047bc:	4013      	ands	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4aa0      	ldr	r2, [pc, #640]	; (8004a6c <UART_SetConfig+0x2e0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f4:	4313      	orrs	r3, r2
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004802:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480c:	430b      	orrs	r3, r1
 800480e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f023 010f 	bic.w	r1, r3, #15
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a91      	ldr	r2, [pc, #580]	; (8004a70 <UART_SetConfig+0x2e4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <UART_SetConfig+0xf0>
 8004830:	4b90      	ldr	r3, [pc, #576]	; (8004a74 <UART_SetConfig+0x2e8>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b03      	cmp	r3, #3
 800483c:	d81a      	bhi.n	8004874 <UART_SetConfig+0xe8>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0xb8>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	08004865 	.word	0x08004865
 800484c:	0800485d 	.word	0x0800485d
 8004850:	0800486d 	.word	0x0800486d
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e0d6      	b.n	8004a0a <UART_SetConfig+0x27e>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e0d2      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486a:	e0ce      	b.n	8004a0a <UART_SetConfig+0x27e>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004872:	e0ca      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e0c6      	b.n	8004a0a <UART_SetConfig+0x27e>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7d      	ldr	r2, [pc, #500]	; (8004a78 <UART_SetConfig+0x2ec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d138      	bne.n	80048f8 <UART_SetConfig+0x16c>
 8004886:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <UART_SetConfig+0x2e8>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d82d      	bhi.n	80048f0 <UART_SetConfig+0x164>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x110>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080048f1 	.word	0x080048f1
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	080048f1 	.word	0x080048f1
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e098      	b.n	8004a0a <UART_SetConfig+0x27e>
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048de:	e094      	b.n	8004a0a <UART_SetConfig+0x27e>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e6:	e090      	b.n	8004a0a <UART_SetConfig+0x27e>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e08c      	b.n	8004a0a <UART_SetConfig+0x27e>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e088      	b.n	8004a0a <UART_SetConfig+0x27e>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5f      	ldr	r2, [pc, #380]	; (8004a7c <UART_SetConfig+0x2f0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d125      	bne.n	800494e <UART_SetConfig+0x1c2>
 8004902:	4b5c      	ldr	r3, [pc, #368]	; (8004a74 <UART_SetConfig+0x2e8>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d016      	beq.n	800493e <UART_SetConfig+0x1b2>
 8004910:	2b30      	cmp	r3, #48	; 0x30
 8004912:	d818      	bhi.n	8004946 <UART_SetConfig+0x1ba>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d00a      	beq.n	800492e <UART_SetConfig+0x1a2>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d814      	bhi.n	8004946 <UART_SetConfig+0x1ba>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <UART_SetConfig+0x19a>
 8004920:	2b10      	cmp	r3, #16
 8004922:	d008      	beq.n	8004936 <UART_SetConfig+0x1aa>
 8004924:	e00f      	b.n	8004946 <UART_SetConfig+0x1ba>
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492c:	e06d      	b.n	8004a0a <UART_SetConfig+0x27e>
 800492e:	2302      	movs	r3, #2
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004934:	e069      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004936:	2304      	movs	r3, #4
 8004938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493c:	e065      	b.n	8004a0a <UART_SetConfig+0x27e>
 800493e:	2308      	movs	r3, #8
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004944:	e061      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004946:	2310      	movs	r3, #16
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494c:	e05d      	b.n	8004a0a <UART_SetConfig+0x27e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <UART_SetConfig+0x2f4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d125      	bne.n	80049a4 <UART_SetConfig+0x218>
 8004958:	4b46      	ldr	r3, [pc, #280]	; (8004a74 <UART_SetConfig+0x2e8>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004962:	2bc0      	cmp	r3, #192	; 0xc0
 8004964:	d016      	beq.n	8004994 <UART_SetConfig+0x208>
 8004966:	2bc0      	cmp	r3, #192	; 0xc0
 8004968:	d818      	bhi.n	800499c <UART_SetConfig+0x210>
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d00a      	beq.n	8004984 <UART_SetConfig+0x1f8>
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d814      	bhi.n	800499c <UART_SetConfig+0x210>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x1f0>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d008      	beq.n	800498c <UART_SetConfig+0x200>
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x210>
 800497c:	2300      	movs	r3, #0
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004982:	e042      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004984:	2302      	movs	r3, #2
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e03e      	b.n	8004a0a <UART_SetConfig+0x27e>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004992:	e03a      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e036      	b.n	8004a0a <UART_SetConfig+0x27e>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e032      	b.n	8004a0a <UART_SetConfig+0x27e>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <UART_SetConfig+0x2e0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d12a      	bne.n	8004a04 <UART_SetConfig+0x278>
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <UART_SetConfig+0x2e8>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049bc:	d01a      	beq.n	80049f4 <UART_SetConfig+0x268>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c2:	d81b      	bhi.n	80049fc <UART_SetConfig+0x270>
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c8:	d00c      	beq.n	80049e4 <UART_SetConfig+0x258>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d815      	bhi.n	80049fc <UART_SetConfig+0x270>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x250>
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x260>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x270>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e012      	b.n	8004a0a <UART_SetConfig+0x27e>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e00e      	b.n	8004a0a <UART_SetConfig+0x27e>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f2:	e00a      	b.n	8004a0a <UART_SetConfig+0x27e>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e006      	b.n	8004a0a <UART_SetConfig+0x27e>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e002      	b.n	8004a0a <UART_SetConfig+0x27e>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <UART_SetConfig+0x2e0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f040 80a8 	bne.w	8004b66 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d834      	bhi.n	8004a88 <UART_SetConfig+0x2fc>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x298>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a57 	.word	0x08004a57
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a89 	.word	0x08004a89
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe fe00 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a4e:	e021      	b.n	8004a94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <UART_SetConfig+0x2f8>)
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a54:	e01e      	b.n	8004a94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fe fd8b 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a5c:	e01a      	b.n	8004a94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a64:	e016      	b.n	8004a94 <UART_SetConfig+0x308>
 8004a66:	bf00      	nop
 8004a68:	cfff69f3 	.word	0xcfff69f3
 8004a6c:	40008000 	.word	0x40008000
 8004a70:	40013800 	.word	0x40013800
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40004400 	.word	0x40004400
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	40004c00 	.word	0x40004c00
 8004a84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 812a 	beq.w	8004cf0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	4a9e      	ldr	r2, [pc, #632]	; (8004d1c <UART_SetConfig+0x590>)
 8004aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d305      	bcc.n	8004acc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d903      	bls.n	8004ad4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ad2:	e10d      	b.n	8004cf0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	60fa      	str	r2, [r7, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4a8e      	ldr	r2, [pc, #568]	; (8004d1c <UART_SetConfig+0x590>)
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2200      	movs	r2, #0
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af6:	f7fb fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	020b      	lsls	r3, r1, #8
 8004b0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b10:	0202      	lsls	r2, r0, #8
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	6849      	ldr	r1, [r1, #4]
 8004b16:	0849      	lsrs	r1, r1, #1
 8004b18:	2000      	movs	r0, #0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	eb12 0804 	adds.w	r8, r2, r4
 8004b22:	eb43 0905 	adc.w	r9, r3, r5
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	469a      	mov	sl, r3
 8004b2e:	4693      	mov	fp, r2
 8004b30:	4652      	mov	r2, sl
 8004b32:	465b      	mov	r3, fp
 8004b34:	4640      	mov	r0, r8
 8004b36:	4649      	mov	r1, r9
 8004b38:	f7fb fbc2 	bl	80002c0 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4a:	d308      	bcc.n	8004b5e <UART_SetConfig+0x3d2>
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b52:	d204      	bcs.n	8004b5e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	60da      	str	r2, [r3, #12]
 8004b5c:	e0c8      	b.n	8004cf0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b64:	e0c4      	b.n	8004cf0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6e:	d167      	bne.n	8004c40 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d828      	bhi.n	8004bca <UART_SetConfig+0x43e>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x3f4>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fe fd52 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e014      	b.n	8004bd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fe fd64 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb2:	e010      	b.n	8004bd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <UART_SetConfig+0x594>)
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fe fcd9 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8089 	beq.w	8004cf0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	4a4e      	ldr	r2, [pc, #312]	; (8004d1c <UART_SetConfig+0x590>)
 8004be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf0:	005a      	lsls	r2, r3, #1
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d916      	bls.n	8004c38 <UART_SetConfig+0x4ac>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d212      	bcs.n	8004c38 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f023 030f 	bic.w	r3, r3, #15
 8004c1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	8bfb      	ldrh	r3, [r7, #30]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	8bfa      	ldrh	r2, [r7, #30]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	e05b      	b.n	8004cf0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c3e:	e057      	b.n	8004cf0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d828      	bhi.n	8004c9a <UART_SetConfig+0x50e>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x4c4>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c9b 	.word	0x08004c9b
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004c9b 	.word	0x08004c9b
 8004c6c:	08004c9b 	.word	0x08004c9b
 8004c70:	08004c93 	.word	0x08004c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7fe fcea 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7a:	e014      	b.n	8004ca6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fe fcfc 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c82:	e010      	b.n	8004ca6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c84:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <UART_SetConfig+0x594>)
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c88:	e00d      	b.n	8004ca6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8a:	f7fe fc71 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c90:	e009      	b.n	8004ca6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c98:	e005      	b.n	8004ca6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ca4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d021      	beq.n	8004cf0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <UART_SetConfig+0x590>)
 8004cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d909      	bls.n	8004cea <UART_SetConfig+0x55e>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d205      	bcs.n	8004cea <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	e002      	b.n	8004cf0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d0c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1a:	bf00      	nop
 8004d1c:	080064dc 	.word	0x080064dc
 8004d20:	00f42400 	.word	0x00f42400

08004d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e22:	d10a      	bne.n	8004e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e78:	f7fc fbfc 	bl	8001674 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d10e      	bne.n	8004eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f82f 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e025      	b.n	8004ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d10e      	bne.n	8004ed6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f819 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e00f      	b.n	8004ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b09c      	sub	sp, #112	; 0x70
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0e:	e0a9      	b.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	f000 80a5 	beq.w	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fc fbab 	bl	8001674 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d140      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f44:	667b      	str	r3, [r7, #100]	; 0x64
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e069      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d051      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d149      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	613b      	str	r3, [r7, #16]
   return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	66bb      	str	r3, [r7, #104]	; 0x68
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800502c:	623a      	str	r2, [r7, #32]
 800502e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	61bb      	str	r3, [r7, #24]
   return(result);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e010      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	429a      	cmp	r2, r3
 8005080:	f43f af46 	beq.w	8004f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3770      	adds	r7, #112	; 0x70
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e027      	b.n	80050f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	; 0x24
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e02d      	b.n	8005174 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	; 0x24
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f84f 	bl	80051f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e02d      	b.n	80051f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f811 	bl	80051f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005204:	2b00      	cmp	r3, #0
 8005206:	d108      	bne.n	800521a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005218:	e031      	b.n	800527e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800521a:	2308      	movs	r3, #8
 800521c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800521e:	2308      	movs	r3, #8
 8005220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	0e5b      	lsrs	r3, r3, #25
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	0f5b      	lsrs	r3, r3, #29
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	7b3a      	ldrb	r2, [r7, #12]
 8005246:	4911      	ldr	r1, [pc, #68]	; (800528c <UARTEx_SetNbDataToProcess+0x94>)
 8005248:	5c8a      	ldrb	r2, [r1, r2]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800524e:	7b3a      	ldrb	r2, [r7, #12]
 8005250:	490f      	ldr	r1, [pc, #60]	; (8005290 <UARTEx_SetNbDataToProcess+0x98>)
 8005252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005254:	fb93 f3f2 	sdiv	r3, r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	7b7a      	ldrb	r2, [r7, #13]
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <UARTEx_SetNbDataToProcess+0x94>)
 8005266:	5c8a      	ldrb	r2, [r1, r2]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800526c:	7b7a      	ldrb	r2, [r7, #13]
 800526e:	4908      	ldr	r1, [pc, #32]	; (8005290 <UARTEx_SetNbDataToProcess+0x98>)
 8005270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005272:	fb93 f3f2 	sdiv	r3, r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	080064f4 	.word	0x080064f4
 8005290:	080064fc 	.word	0x080064fc

08005294 <std>:
 8005294:	2300      	movs	r3, #0
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	e9c0 3300 	strd	r3, r3, [r0]
 800529e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a2:	6083      	str	r3, [r0, #8]
 80052a4:	8181      	strh	r1, [r0, #12]
 80052a6:	6643      	str	r3, [r0, #100]	; 0x64
 80052a8:	81c2      	strh	r2, [r0, #14]
 80052aa:	6183      	str	r3, [r0, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2208      	movs	r2, #8
 80052b0:	305c      	adds	r0, #92	; 0x5c
 80052b2:	f000 f9f7 	bl	80056a4 <memset>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <std+0x58>)
 80052b8:	6263      	str	r3, [r4, #36]	; 0x24
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <std+0x5c>)
 80052bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <std+0x60>)
 80052c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <std+0x64>)
 80052c4:	6323      	str	r3, [r4, #48]	; 0x30
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <std+0x68>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d006      	beq.n	80052dc <std+0x48>
 80052ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052d2:	4294      	cmp	r4, r2
 80052d4:	d002      	beq.n	80052dc <std+0x48>
 80052d6:	33d0      	adds	r3, #208	; 0xd0
 80052d8:	429c      	cmp	r4, r3
 80052da:	d105      	bne.n	80052e8 <std+0x54>
 80052dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f000 ba56 	b.w	8005794 <__retarget_lock_init_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	080054f5 	.word	0x080054f5
 80052f0:	08005517 	.word	0x08005517
 80052f4:	0800554f 	.word	0x0800554f
 80052f8:	08005573 	.word	0x08005573
 80052fc:	200002c0 	.word	0x200002c0

08005300 <stdio_exit_handler>:
 8005300:	4a02      	ldr	r2, [pc, #8]	; (800530c <stdio_exit_handler+0xc>)
 8005302:	4903      	ldr	r1, [pc, #12]	; (8005310 <stdio_exit_handler+0x10>)
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <stdio_exit_handler+0x14>)
 8005306:	f000 b869 	b.w	80053dc <_fwalk_sglue>
 800530a:	bf00      	nop
 800530c:	2000005c 	.word	0x2000005c
 8005310:	08006041 	.word	0x08006041
 8005314:	20000068 	.word	0x20000068

08005318 <cleanup_stdio>:
 8005318:	6841      	ldr	r1, [r0, #4]
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <cleanup_stdio+0x34>)
 800531c:	4299      	cmp	r1, r3
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d001      	beq.n	8005328 <cleanup_stdio+0x10>
 8005324:	f000 fe8c 	bl	8006040 <_fflush_r>
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <cleanup_stdio+0x38>)
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <cleanup_stdio+0x1e>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 fe85 	bl	8006040 <_fflush_r>
 8005336:	68e1      	ldr	r1, [r4, #12]
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <cleanup_stdio+0x3c>)
 800533a:	4299      	cmp	r1, r3
 800533c:	d004      	beq.n	8005348 <cleanup_stdio+0x30>
 800533e:	4620      	mov	r0, r4
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f000 be7c 	b.w	8006040 <_fflush_r>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	200002c0 	.word	0x200002c0
 8005350:	20000328 	.word	0x20000328
 8005354:	20000390 	.word	0x20000390

08005358 <global_stdio_init.part.0>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <global_stdio_init.part.0+0x30>)
 800535c:	4c0b      	ldr	r4, [pc, #44]	; (800538c <global_stdio_init.part.0+0x34>)
 800535e:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <global_stdio_init.part.0+0x38>)
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2104      	movs	r1, #4
 8005368:	f7ff ff94 	bl	8005294 <std>
 800536c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005370:	2201      	movs	r2, #1
 8005372:	2109      	movs	r1, #9
 8005374:	f7ff ff8e 	bl	8005294 <std>
 8005378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800537c:	2202      	movs	r2, #2
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff bf86 	b.w	8005294 <std>
 8005388:	200003f8 	.word	0x200003f8
 800538c:	200002c0 	.word	0x200002c0
 8005390:	08005301 	.word	0x08005301

08005394 <__sfp_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__sfp_lock_acquire+0x8>)
 8005396:	f000 b9fe 	b.w	8005796 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	20000401 	.word	0x20000401

080053a0 <__sfp_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__sfp_lock_release+0x8>)
 80053a2:	f000 b9f9 	b.w	8005798 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	20000401 	.word	0x20000401

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sfp_lock_acquire>
 80053b4:	6a23      	ldr	r3, [r4, #32]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sfp_lock_release>
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__sinit+0x28>)
 80053c2:	6223      	str	r3, [r4, #32]
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__sinit+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <__sinit+0xc>
 80053cc:	f7ff ffc4 	bl	8005358 <global_stdio_init.part.0>
 80053d0:	e7f2      	b.n	80053b8 <__sinit+0xc>
 80053d2:	bf00      	nop
 80053d4:	08005319 	.word	0x08005319
 80053d8:	200003f8 	.word	0x200003f8

080053dc <_fwalk_sglue>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4607      	mov	r7, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	2600      	movs	r6, #0
 80053e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ec:	f1b9 0901 	subs.w	r9, r9, #1
 80053f0:	d505      	bpl.n	80053fe <_fwalk_sglue+0x22>
 80053f2:	6824      	ldr	r4, [r4, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d1f7      	bne.n	80053e8 <_fwalk_sglue+0xc>
 80053f8:	4630      	mov	r0, r6
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d907      	bls.n	8005414 <_fwalk_sglue+0x38>
 8005404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	d003      	beq.n	8005414 <_fwalk_sglue+0x38>
 800540c:	4629      	mov	r1, r5
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	4306      	orrs	r6, r0
 8005414:	3568      	adds	r5, #104	; 0x68
 8005416:	e7e9      	b.n	80053ec <_fwalk_sglue+0x10>

08005418 <iprintf>:
 8005418:	b40f      	push	{r0, r1, r2, r3}
 800541a:	b507      	push	{r0, r1, r2, lr}
 800541c:	4906      	ldr	r1, [pc, #24]	; (8005438 <iprintf+0x20>)
 800541e:	ab04      	add	r3, sp, #16
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	f853 2b04 	ldr.w	r2, [r3], #4
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f000 fad9 	bl	80059e0 <_vfiprintf_r>
 800542e:	b003      	add	sp, #12
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr
 8005438:	200000b4 	.word	0x200000b4

0800543c <_puts_r>:
 800543c:	6a03      	ldr	r3, [r0, #32]
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	6884      	ldr	r4, [r0, #8]
 8005442:	4605      	mov	r5, r0
 8005444:	460e      	mov	r6, r1
 8005446:	b90b      	cbnz	r3, 800544c <_puts_r+0x10>
 8005448:	f7ff ffb0 	bl	80053ac <__sinit>
 800544c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d405      	bmi.n	800545e <_puts_r+0x22>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	0598      	lsls	r0, r3, #22
 8005456:	d402      	bmi.n	800545e <_puts_r+0x22>
 8005458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545a:	f000 f99c 	bl	8005796 <__retarget_lock_acquire_recursive>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	0719      	lsls	r1, r3, #28
 8005462:	d513      	bpl.n	800548c <_puts_r+0x50>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	b18b      	cbz	r3, 800548c <_puts_r+0x50>
 8005468:	3e01      	subs	r6, #1
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005470:	3b01      	subs	r3, #1
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	b9e9      	cbnz	r1, 80054b2 <_puts_r+0x76>
 8005476:	2b00      	cmp	r3, #0
 8005478:	da2e      	bge.n	80054d8 <_puts_r+0x9c>
 800547a:	4622      	mov	r2, r4
 800547c:	210a      	movs	r1, #10
 800547e:	4628      	mov	r0, r5
 8005480:	f000 f87b 	bl	800557a <__swbuf_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d007      	beq.n	8005498 <_puts_r+0x5c>
 8005488:	250a      	movs	r5, #10
 800548a:	e007      	b.n	800549c <_puts_r+0x60>
 800548c:	4621      	mov	r1, r4
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f8b0 	bl	80055f4 <__swsetup_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	d0e7      	beq.n	8005468 <_puts_r+0x2c>
 8005498:	f04f 35ff 	mov.w	r5, #4294967295
 800549c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800549e:	07da      	lsls	r2, r3, #31
 80054a0:	d405      	bmi.n	80054ae <_puts_r+0x72>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	059b      	lsls	r3, r3, #22
 80054a6:	d402      	bmi.n	80054ae <_puts_r+0x72>
 80054a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054aa:	f000 f975 	bl	8005798 <__retarget_lock_release_recursive>
 80054ae:	4628      	mov	r0, r5
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da04      	bge.n	80054c0 <_puts_r+0x84>
 80054b6:	69a2      	ldr	r2, [r4, #24]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	dc06      	bgt.n	80054ca <_puts_r+0x8e>
 80054bc:	290a      	cmp	r1, #10
 80054be:	d004      	beq.n	80054ca <_puts_r+0x8e>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	7019      	strb	r1, [r3, #0]
 80054c8:	e7cf      	b.n	800546a <_puts_r+0x2e>
 80054ca:	4622      	mov	r2, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 f854 	bl	800557a <__swbuf_r>
 80054d2:	3001      	adds	r0, #1
 80054d4:	d1c9      	bne.n	800546a <_puts_r+0x2e>
 80054d6:	e7df      	b.n	8005498 <_puts_r+0x5c>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	250a      	movs	r5, #10
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	701d      	strb	r5, [r3, #0]
 80054e2:	e7db      	b.n	800549c <_puts_r+0x60>

080054e4 <puts>:
 80054e4:	4b02      	ldr	r3, [pc, #8]	; (80054f0 <puts+0xc>)
 80054e6:	4601      	mov	r1, r0
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	f7ff bfa7 	b.w	800543c <_puts_r>
 80054ee:	bf00      	nop
 80054f0:	200000b4 	.word	0x200000b4

080054f4 <__sread>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	f000 f8fc 	bl	80056f8 <_read_r>
 8005500:	2800      	cmp	r0, #0
 8005502:	bfab      	itete	ge
 8005504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005506:	89a3      	ldrhlt	r3, [r4, #12]
 8005508:	181b      	addge	r3, r3, r0
 800550a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800550e:	bfac      	ite	ge
 8005510:	6563      	strge	r3, [r4, #84]	; 0x54
 8005512:	81a3      	strhlt	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__swrite>:
 8005516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	461f      	mov	r7, r3
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	05db      	lsls	r3, r3, #23
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4616      	mov	r6, r2
 8005526:	d505      	bpl.n	8005534 <__swrite+0x1e>
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	2302      	movs	r3, #2
 800552e:	2200      	movs	r2, #0
 8005530:	f000 f8d0 	bl	80056d4 <_lseek_r>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	4632      	mov	r2, r6
 8005542:	463b      	mov	r3, r7
 8005544:	4628      	mov	r0, r5
 8005546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	f000 b8e7 	b.w	800571c <_write_r>

0800554e <__sseek>:
 800554e:	b510      	push	{r4, lr}
 8005550:	460c      	mov	r4, r1
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 f8bd 	bl	80056d4 <_lseek_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	bf15      	itete	ne
 8005560:	6560      	strne	r0, [r4, #84]	; 0x54
 8005562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800556a:	81a3      	strheq	r3, [r4, #12]
 800556c:	bf18      	it	ne
 800556e:	81a3      	strhne	r3, [r4, #12]
 8005570:	bd10      	pop	{r4, pc}

08005572 <__sclose>:
 8005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005576:	f000 b89d 	b.w	80056b4 <_close_r>

0800557a <__swbuf_r>:
 800557a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557c:	460e      	mov	r6, r1
 800557e:	4614      	mov	r4, r2
 8005580:	4605      	mov	r5, r0
 8005582:	b118      	cbz	r0, 800558c <__swbuf_r+0x12>
 8005584:	6a03      	ldr	r3, [r0, #32]
 8005586:	b90b      	cbnz	r3, 800558c <__swbuf_r+0x12>
 8005588:	f7ff ff10 	bl	80053ac <__sinit>
 800558c:	69a3      	ldr	r3, [r4, #24]
 800558e:	60a3      	str	r3, [r4, #8]
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	071a      	lsls	r2, r3, #28
 8005594:	d525      	bpl.n	80055e2 <__swbuf_r+0x68>
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	b31b      	cbz	r3, 80055e2 <__swbuf_r+0x68>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	1a98      	subs	r0, r3, r2
 80055a0:	6963      	ldr	r3, [r4, #20]
 80055a2:	b2f6      	uxtb	r6, r6
 80055a4:	4283      	cmp	r3, r0
 80055a6:	4637      	mov	r7, r6
 80055a8:	dc04      	bgt.n	80055b4 <__swbuf_r+0x3a>
 80055aa:	4621      	mov	r1, r4
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 fd47 	bl	8006040 <_fflush_r>
 80055b2:	b9e0      	cbnz	r0, 80055ee <__swbuf_r+0x74>
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	701e      	strb	r6, [r3, #0]
 80055c2:	6962      	ldr	r2, [r4, #20]
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d004      	beq.n	80055d4 <__swbuf_r+0x5a>
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	07db      	lsls	r3, r3, #31
 80055ce:	d506      	bpl.n	80055de <__swbuf_r+0x64>
 80055d0:	2e0a      	cmp	r6, #10
 80055d2:	d104      	bne.n	80055de <__swbuf_r+0x64>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fd32 	bl	8006040 <_fflush_r>
 80055dc:	b938      	cbnz	r0, 80055ee <__swbuf_r+0x74>
 80055de:	4638      	mov	r0, r7
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f805 	bl	80055f4 <__swsetup_r>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0d5      	beq.n	800559a <__swbuf_r+0x20>
 80055ee:	f04f 37ff 	mov.w	r7, #4294967295
 80055f2:	e7f4      	b.n	80055de <__swbuf_r+0x64>

080055f4 <__swsetup_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <__swsetup_r+0xac>)
 80055f8:	4605      	mov	r5, r0
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	460c      	mov	r4, r1
 80055fe:	b118      	cbz	r0, 8005608 <__swsetup_r+0x14>
 8005600:	6a03      	ldr	r3, [r0, #32]
 8005602:	b90b      	cbnz	r3, 8005608 <__swsetup_r+0x14>
 8005604:	f7ff fed2 	bl	80053ac <__sinit>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800560e:	0718      	lsls	r0, r3, #28
 8005610:	d422      	bmi.n	8005658 <__swsetup_r+0x64>
 8005612:	06d9      	lsls	r1, r3, #27
 8005614:	d407      	bmi.n	8005626 <__swsetup_r+0x32>
 8005616:	2309      	movs	r3, #9
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e034      	b.n	8005690 <__swsetup_r+0x9c>
 8005626:	0758      	lsls	r0, r3, #29
 8005628:	d512      	bpl.n	8005650 <__swsetup_r+0x5c>
 800562a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800562c:	b141      	cbz	r1, 8005640 <__swsetup_r+0x4c>
 800562e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005632:	4299      	cmp	r1, r3
 8005634:	d002      	beq.n	800563c <__swsetup_r+0x48>
 8005636:	4628      	mov	r0, r5
 8005638:	f000 f8b0 	bl	800579c <_free_r>
 800563c:	2300      	movs	r3, #0
 800563e:	6363      	str	r3, [r4, #52]	; 0x34
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	2300      	movs	r3, #0
 800564a:	6063      	str	r3, [r4, #4]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f043 0308 	orr.w	r3, r3, #8
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	b94b      	cbnz	r3, 8005670 <__swsetup_r+0x7c>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005666:	d003      	beq.n	8005670 <__swsetup_r+0x7c>
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 fd36 	bl	80060dc <__smakebuf_r>
 8005670:	89a0      	ldrh	r0, [r4, #12]
 8005672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005676:	f010 0301 	ands.w	r3, r0, #1
 800567a:	d00a      	beq.n	8005692 <__swsetup_r+0x9e>
 800567c:	2300      	movs	r3, #0
 800567e:	60a3      	str	r3, [r4, #8]
 8005680:	6963      	ldr	r3, [r4, #20]
 8005682:	425b      	negs	r3, r3
 8005684:	61a3      	str	r3, [r4, #24]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	b943      	cbnz	r3, 800569c <__swsetup_r+0xa8>
 800568a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800568e:	d1c4      	bne.n	800561a <__swsetup_r+0x26>
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	0781      	lsls	r1, r0, #30
 8005694:	bf58      	it	pl
 8005696:	6963      	ldrpl	r3, [r4, #20]
 8005698:	60a3      	str	r3, [r4, #8]
 800569a:	e7f4      	b.n	8005686 <__swsetup_r+0x92>
 800569c:	2000      	movs	r0, #0
 800569e:	e7f7      	b.n	8005690 <__swsetup_r+0x9c>
 80056a0:	200000b4 	.word	0x200000b4

080056a4 <memset>:
 80056a4:	4402      	add	r2, r0
 80056a6:	4603      	mov	r3, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	f803 1b01 	strb.w	r1, [r3], #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <_close_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d06      	ldr	r5, [pc, #24]	; (80056d0 <_close_r+0x1c>)
 80056b8:	2300      	movs	r3, #0
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	602b      	str	r3, [r5, #0]
 80056c0:	f7fb fecd 	bl	800145e <_close>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_close_r+0x1a>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_close_r+0x1a>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200003fc 	.word	0x200003fc

080056d4 <_lseek_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_lseek_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb fee2 	bl	80014ac <_lseek>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_lseek_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_lseek_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	200003fc 	.word	0x200003fc

080056f8 <_read_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_read_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fb fe8c 	bl	8001424 <_read>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_read_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_read_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	200003fc 	.word	0x200003fc

0800571c <_write_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d07      	ldr	r5, [pc, #28]	; (800573c <_write_r+0x20>)
 8005720:	4604      	mov	r4, r0
 8005722:	4608      	mov	r0, r1
 8005724:	4611      	mov	r1, r2
 8005726:	2200      	movs	r2, #0
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f7fb f90e 	bl	800094c <_write>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_write_r+0x1e>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_write_r+0x1e>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	200003fc 	.word	0x200003fc

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200000b4 	.word	0x200000b4

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f000 fd2a 	bl	80061b8 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	08006540 	.word	0x08006540
 8005788:	08006540 	.word	0x08006540
 800578c:	08006540 	.word	0x08006540
 8005790:	08006544 	.word	0x08006544

08005794 <__retarget_lock_init_recursive>:
 8005794:	4770      	bx	lr

08005796 <__retarget_lock_acquire_recursive>:
 8005796:	4770      	bx	lr

08005798 <__retarget_lock_release_recursive>:
 8005798:	4770      	bx	lr
	...

0800579c <_free_r>:
 800579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579e:	2900      	cmp	r1, #0
 80057a0:	d044      	beq.n	800582c <_free_r+0x90>
 80057a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a6:	9001      	str	r0, [sp, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f1a1 0404 	sub.w	r4, r1, #4
 80057ae:	bfb8      	it	lt
 80057b0:	18e4      	addlt	r4, r4, r3
 80057b2:	f000 f8df 	bl	8005974 <__malloc_lock>
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <_free_r+0x94>)
 80057b8:	9801      	ldr	r0, [sp, #4]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	b933      	cbnz	r3, 80057cc <_free_r+0x30>
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6014      	str	r4, [r2, #0]
 80057c2:	b003      	add	sp, #12
 80057c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c8:	f000 b8da 	b.w	8005980 <__malloc_unlock>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x46>
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	1961      	adds	r1, r4, r5
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf01      	itttt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	1949      	addeq	r1, r1, r5
 80057de:	6021      	streq	r1, [r4, #0]
 80057e0:	e7ed      	b.n	80057be <_free_r+0x22>
 80057e2:	461a      	mov	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b10b      	cbz	r3, 80057ec <_free_r+0x50>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x46>
 80057ec:	6811      	ldr	r1, [r2, #0]
 80057ee:	1855      	adds	r5, r2, r1
 80057f0:	42a5      	cmp	r5, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x70>
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	4421      	add	r1, r4
 80057f8:	1854      	adds	r4, r2, r1
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	d1e0      	bne.n	80057c2 <_free_r+0x26>
 8005800:	681c      	ldr	r4, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	6053      	str	r3, [r2, #4]
 8005806:	440c      	add	r4, r1
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	e7da      	b.n	80057c2 <_free_r+0x26>
 800580c:	d902      	bls.n	8005814 <_free_r+0x78>
 800580e:	230c      	movs	r3, #12
 8005810:	6003      	str	r3, [r0, #0]
 8005812:	e7d6      	b.n	80057c2 <_free_r+0x26>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	1961      	adds	r1, r4, r5
 8005818:	428b      	cmp	r3, r1
 800581a:	bf04      	itt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	bf04      	itt	eq
 8005824:	1949      	addeq	r1, r1, r5
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	6054      	str	r4, [r2, #4]
 800582a:	e7ca      	b.n	80057c2 <_free_r+0x26>
 800582c:	b003      	add	sp, #12
 800582e:	bd30      	pop	{r4, r5, pc}
 8005830:	20000404 	.word	0x20000404

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0e      	ldr	r6, [pc, #56]	; (8005870 <sbrk_aligned+0x3c>)
 8005838:	460c      	mov	r4, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	b911      	cbnz	r1, 8005846 <sbrk_aligned+0x12>
 8005840:	f000 fcaa 	bl	8006198 <_sbrk_r>
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fca5 	bl	8006198 <_sbrk_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d00a      	beq.n	8005868 <sbrk_aligned+0x34>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d007      	beq.n	800586c <sbrk_aligned+0x38>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fc9a 	bl	8006198 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d101      	bne.n	800586c <sbrk_aligned+0x38>
 8005868:	f04f 34ff 	mov.w	r4, #4294967295
 800586c:	4620      	mov	r0, r4
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	20000408 	.word	0x20000408

08005874 <_malloc_r>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	1ccd      	adds	r5, r1, #3
 800587a:	f025 0503 	bic.w	r5, r5, #3
 800587e:	3508      	adds	r5, #8
 8005880:	2d0c      	cmp	r5, #12
 8005882:	bf38      	it	cc
 8005884:	250c      	movcc	r5, #12
 8005886:	2d00      	cmp	r5, #0
 8005888:	4607      	mov	r7, r0
 800588a:	db01      	blt.n	8005890 <_malloc_r+0x1c>
 800588c:	42a9      	cmp	r1, r5
 800588e:	d905      	bls.n	800589c <_malloc_r+0x28>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	2600      	movs	r6, #0
 8005896:	4630      	mov	r0, r6
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005970 <_malloc_r+0xfc>
 80058a0:	f000 f868 	bl	8005974 <__malloc_lock>
 80058a4:	f8d8 3000 	ldr.w	r3, [r8]
 80058a8:	461c      	mov	r4, r3
 80058aa:	bb5c      	cbnz	r4, 8005904 <_malloc_r+0x90>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ffc0 	bl	8005834 <sbrk_aligned>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	4604      	mov	r4, r0
 80058b8:	d155      	bne.n	8005966 <_malloc_r+0xf2>
 80058ba:	f8d8 4000 	ldr.w	r4, [r8]
 80058be:	4626      	mov	r6, r4
 80058c0:	2e00      	cmp	r6, #0
 80058c2:	d145      	bne.n	8005950 <_malloc_r+0xdc>
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d048      	beq.n	800595a <_malloc_r+0xe6>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	4631      	mov	r1, r6
 80058cc:	4638      	mov	r0, r7
 80058ce:	eb04 0903 	add.w	r9, r4, r3
 80058d2:	f000 fc61 	bl	8006198 <_sbrk_r>
 80058d6:	4581      	cmp	r9, r0
 80058d8:	d13f      	bne.n	800595a <_malloc_r+0xe6>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	1a6d      	subs	r5, r5, r1
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ffa7 	bl	8005834 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d037      	beq.n	800595a <_malloc_r+0xe6>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	f8d8 3000 	ldr.w	r3, [r8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <_malloc_r+0xf6>
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	42a2      	cmp	r2, r4
 80058fc:	d12b      	bne.n	8005956 <_malloc_r+0xe2>
 80058fe:	2200      	movs	r2, #0
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	e00f      	b.n	8005924 <_malloc_r+0xb0>
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	1b52      	subs	r2, r2, r5
 8005908:	d41f      	bmi.n	800594a <_malloc_r+0xd6>
 800590a:	2a0b      	cmp	r2, #11
 800590c:	d917      	bls.n	800593e <_malloc_r+0xca>
 800590e:	1961      	adds	r1, r4, r5
 8005910:	42a3      	cmp	r3, r4
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	bf18      	it	ne
 8005916:	6059      	strne	r1, [r3, #4]
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	bf08      	it	eq
 800591c:	f8c8 1000 	streq.w	r1, [r8]
 8005920:	5162      	str	r2, [r4, r5]
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	4638      	mov	r0, r7
 8005926:	f104 060b 	add.w	r6, r4, #11
 800592a:	f000 f829 	bl	8005980 <__malloc_unlock>
 800592e:	f026 0607 	bic.w	r6, r6, #7
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	1af2      	subs	r2, r6, r3
 8005936:	d0ae      	beq.n	8005896 <_malloc_r+0x22>
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	50a3      	str	r3, [r4, r2]
 800593c:	e7ab      	b.n	8005896 <_malloc_r+0x22>
 800593e:	42a3      	cmp	r3, r4
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	d1dd      	bne.n	8005900 <_malloc_r+0x8c>
 8005944:	f8c8 2000 	str.w	r2, [r8]
 8005948:	e7ec      	b.n	8005924 <_malloc_r+0xb0>
 800594a:	4623      	mov	r3, r4
 800594c:	6864      	ldr	r4, [r4, #4]
 800594e:	e7ac      	b.n	80058aa <_malloc_r+0x36>
 8005950:	4634      	mov	r4, r6
 8005952:	6876      	ldr	r6, [r6, #4]
 8005954:	e7b4      	b.n	80058c0 <_malloc_r+0x4c>
 8005956:	4613      	mov	r3, r2
 8005958:	e7cc      	b.n	80058f4 <_malloc_r+0x80>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 f80e 	bl	8005980 <__malloc_unlock>
 8005964:	e797      	b.n	8005896 <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7dc      	b.n	8005924 <_malloc_r+0xb0>
 800596a:	605b      	str	r3, [r3, #4]
 800596c:	deff      	udf	#255	; 0xff
 800596e:	bf00      	nop
 8005970:	20000404 	.word	0x20000404

08005974 <__malloc_lock>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__malloc_lock+0x8>)
 8005976:	f7ff bf0e 	b.w	8005796 <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	20000400 	.word	0x20000400

08005980 <__malloc_unlock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_unlock+0x8>)
 8005982:	f7ff bf09 	b.w	8005798 <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	20000400 	.word	0x20000400

0800598c <__sfputc_r>:
 800598c:	6893      	ldr	r3, [r2, #8]
 800598e:	3b01      	subs	r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	b410      	push	{r4}
 8005994:	6093      	str	r3, [r2, #8]
 8005996:	da08      	bge.n	80059aa <__sfputc_r+0x1e>
 8005998:	6994      	ldr	r4, [r2, #24]
 800599a:	42a3      	cmp	r3, r4
 800599c:	db01      	blt.n	80059a2 <__sfputc_r+0x16>
 800599e:	290a      	cmp	r1, #10
 80059a0:	d103      	bne.n	80059aa <__sfputc_r+0x1e>
 80059a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a6:	f7ff bde8 	b.w	800557a <__swbuf_r>
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	1c58      	adds	r0, r3, #1
 80059ae:	6010      	str	r0, [r2, #0]
 80059b0:	7019      	strb	r1, [r3, #0]
 80059b2:	4608      	mov	r0, r1
 80059b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <__sfputs_r>:
 80059ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	18d5      	adds	r5, r2, r3
 80059c4:	42ac      	cmp	r4, r5
 80059c6:	d101      	bne.n	80059cc <__sfputs_r+0x12>
 80059c8:	2000      	movs	r0, #0
 80059ca:	e007      	b.n	80059dc <__sfputs_r+0x22>
 80059cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d0:	463a      	mov	r2, r7
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff ffda 	bl	800598c <__sfputc_r>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d1f3      	bne.n	80059c4 <__sfputs_r+0xa>
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059e0 <_vfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	460d      	mov	r5, r1
 80059e6:	b09d      	sub	sp, #116	; 0x74
 80059e8:	4614      	mov	r4, r2
 80059ea:	4698      	mov	r8, r3
 80059ec:	4606      	mov	r6, r0
 80059ee:	b118      	cbz	r0, 80059f8 <_vfiprintf_r+0x18>
 80059f0:	6a03      	ldr	r3, [r0, #32]
 80059f2:	b90b      	cbnz	r3, 80059f8 <_vfiprintf_r+0x18>
 80059f4:	f7ff fcda 	bl	80053ac <__sinit>
 80059f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059fa:	07d9      	lsls	r1, r3, #31
 80059fc:	d405      	bmi.n	8005a0a <_vfiprintf_r+0x2a>
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	059a      	lsls	r2, r3, #22
 8005a02:	d402      	bmi.n	8005a0a <_vfiprintf_r+0x2a>
 8005a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a06:	f7ff fec6 	bl	8005796 <__retarget_lock_acquire_recursive>
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	071b      	lsls	r3, r3, #28
 8005a0e:	d501      	bpl.n	8005a14 <_vfiprintf_r+0x34>
 8005a10:	692b      	ldr	r3, [r5, #16]
 8005a12:	b99b      	cbnz	r3, 8005a3c <_vfiprintf_r+0x5c>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff fdec 	bl	80055f4 <__swsetup_r>
 8005a1c:	b170      	cbz	r0, 8005a3c <_vfiprintf_r+0x5c>
 8005a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a20:	07dc      	lsls	r4, r3, #31
 8005a22:	d504      	bpl.n	8005a2e <_vfiprintf_r+0x4e>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	b01d      	add	sp, #116	; 0x74
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	0598      	lsls	r0, r3, #22
 8005a32:	d4f7      	bmi.n	8005a24 <_vfiprintf_r+0x44>
 8005a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a36:	f7ff feaf 	bl	8005798 <__retarget_lock_release_recursive>
 8005a3a:	e7f3      	b.n	8005a24 <_vfiprintf_r+0x44>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a40:	2320      	movs	r3, #32
 8005a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a4a:	2330      	movs	r3, #48	; 0x30
 8005a4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c00 <_vfiprintf_r+0x220>
 8005a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a54:	f04f 0901 	mov.w	r9, #1
 8005a58:	4623      	mov	r3, r4
 8005a5a:	469a      	mov	sl, r3
 8005a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a60:	b10a      	cbz	r2, 8005a66 <_vfiprintf_r+0x86>
 8005a62:	2a25      	cmp	r2, #37	; 0x25
 8005a64:	d1f9      	bne.n	8005a5a <_vfiprintf_r+0x7a>
 8005a66:	ebba 0b04 	subs.w	fp, sl, r4
 8005a6a:	d00b      	beq.n	8005a84 <_vfiprintf_r+0xa4>
 8005a6c:	465b      	mov	r3, fp
 8005a6e:	4622      	mov	r2, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffa1 	bl	80059ba <__sfputs_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f000 80a9 	beq.w	8005bd0 <_vfiprintf_r+0x1f0>
 8005a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a80:	445a      	add	r2, fp
 8005a82:	9209      	str	r2, [sp, #36]	; 0x24
 8005a84:	f89a 3000 	ldrb.w	r3, [sl]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80a1 	beq.w	8005bd0 <_vfiprintf_r+0x1f0>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a98:	f10a 0a01 	add.w	sl, sl, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8005aa6:	4654      	mov	r4, sl
 8005aa8:	2205      	movs	r2, #5
 8005aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aae:	4854      	ldr	r0, [pc, #336]	; (8005c00 <_vfiprintf_r+0x220>)
 8005ab0:	f7fa fbb6 	bl	8000220 <memchr>
 8005ab4:	9a04      	ldr	r2, [sp, #16]
 8005ab6:	b9d8      	cbnz	r0, 8005af0 <_vfiprintf_r+0x110>
 8005ab8:	06d1      	lsls	r1, r2, #27
 8005aba:	bf44      	itt	mi
 8005abc:	2320      	movmi	r3, #32
 8005abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac2:	0713      	lsls	r3, r2, #28
 8005ac4:	bf44      	itt	mi
 8005ac6:	232b      	movmi	r3, #43	; 0x2b
 8005ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005acc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad2:	d015      	beq.n	8005b00 <_vfiprintf_r+0x120>
 8005ad4:	9a07      	ldr	r2, [sp, #28]
 8005ad6:	4654      	mov	r4, sl
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f04f 0c0a 	mov.w	ip, #10
 8005ade:	4621      	mov	r1, r4
 8005ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ae4:	3b30      	subs	r3, #48	; 0x30
 8005ae6:	2b09      	cmp	r3, #9
 8005ae8:	d94d      	bls.n	8005b86 <_vfiprintf_r+0x1a6>
 8005aea:	b1b0      	cbz	r0, 8005b1a <_vfiprintf_r+0x13a>
 8005aec:	9207      	str	r2, [sp, #28]
 8005aee:	e014      	b.n	8005b1a <_vfiprintf_r+0x13a>
 8005af0:	eba0 0308 	sub.w	r3, r0, r8
 8005af4:	fa09 f303 	lsl.w	r3, r9, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	46a2      	mov	sl, r4
 8005afe:	e7d2      	b.n	8005aa6 <_vfiprintf_r+0xc6>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d19      	adds	r1, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9103      	str	r1, [sp, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbb      	ittet	lt
 8005b0c:	425b      	neglt	r3, r3
 8005b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b12:	9307      	strge	r3, [sp, #28]
 8005b14:	9307      	strlt	r3, [sp, #28]
 8005b16:	bfb8      	it	lt
 8005b18:	9204      	strlt	r2, [sp, #16]
 8005b1a:	7823      	ldrb	r3, [r4, #0]
 8005b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b1e:	d10c      	bne.n	8005b3a <_vfiprintf_r+0x15a>
 8005b20:	7863      	ldrb	r3, [r4, #1]
 8005b22:	2b2a      	cmp	r3, #42	; 0x2a
 8005b24:	d134      	bne.n	8005b90 <_vfiprintf_r+0x1b0>
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	9203      	str	r2, [sp, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfb8      	it	lt
 8005b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b36:	3402      	adds	r4, #2
 8005b38:	9305      	str	r3, [sp, #20]
 8005b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c10 <_vfiprintf_r+0x230>
 8005b3e:	7821      	ldrb	r1, [r4, #0]
 8005b40:	2203      	movs	r2, #3
 8005b42:	4650      	mov	r0, sl
 8005b44:	f7fa fb6c 	bl	8000220 <memchr>
 8005b48:	b138      	cbz	r0, 8005b5a <_vfiprintf_r+0x17a>
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	eba0 000a 	sub.w	r0, r0, sl
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	4082      	lsls	r2, r0
 8005b54:	4313      	orrs	r3, r2
 8005b56:	3401      	adds	r4, #1
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5e:	4829      	ldr	r0, [pc, #164]	; (8005c04 <_vfiprintf_r+0x224>)
 8005b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b64:	2206      	movs	r2, #6
 8005b66:	f7fa fb5b 	bl	8000220 <memchr>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d03f      	beq.n	8005bee <_vfiprintf_r+0x20e>
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <_vfiprintf_r+0x228>)
 8005b70:	bb1b      	cbnz	r3, 8005bba <_vfiprintf_r+0x1da>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	3307      	adds	r3, #7
 8005b76:	f023 0307 	bic.w	r3, r3, #7
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	9303      	str	r3, [sp, #12]
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	443b      	add	r3, r7
 8005b82:	9309      	str	r3, [sp, #36]	; 0x24
 8005b84:	e768      	b.n	8005a58 <_vfiprintf_r+0x78>
 8005b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e7a6      	b.n	8005ade <_vfiprintf_r+0xfe>
 8005b90:	2300      	movs	r3, #0
 8005b92:	3401      	adds	r4, #1
 8005b94:	9305      	str	r3, [sp, #20]
 8005b96:	4619      	mov	r1, r3
 8005b98:	f04f 0c0a 	mov.w	ip, #10
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ba2:	3a30      	subs	r2, #48	; 0x30
 8005ba4:	2a09      	cmp	r2, #9
 8005ba6:	d903      	bls.n	8005bb0 <_vfiprintf_r+0x1d0>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0c6      	beq.n	8005b3a <_vfiprintf_r+0x15a>
 8005bac:	9105      	str	r1, [sp, #20]
 8005bae:	e7c4      	b.n	8005b3a <_vfiprintf_r+0x15a>
 8005bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e7f0      	b.n	8005b9c <_vfiprintf_r+0x1bc>
 8005bba:	ab03      	add	r3, sp, #12
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	462a      	mov	r2, r5
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <_vfiprintf_r+0x22c>)
 8005bc2:	a904      	add	r1, sp, #16
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f3af 8000 	nop.w
 8005bca:	4607      	mov	r7, r0
 8005bcc:	1c78      	adds	r0, r7, #1
 8005bce:	d1d6      	bne.n	8005b7e <_vfiprintf_r+0x19e>
 8005bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd2:	07d9      	lsls	r1, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_vfiprintf_r+0x202>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	059a      	lsls	r2, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_vfiprintf_r+0x202>
 8005bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bde:	f7ff fddb 	bl	8005798 <__retarget_lock_release_recursive>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	065b      	lsls	r3, r3, #25
 8005be6:	f53f af1d 	bmi.w	8005a24 <_vfiprintf_r+0x44>
 8005bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bec:	e71c      	b.n	8005a28 <_vfiprintf_r+0x48>
 8005bee:	ab03      	add	r3, sp, #12
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <_vfiprintf_r+0x22c>)
 8005bf6:	a904      	add	r1, sp, #16
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 f879 	bl	8005cf0 <_printf_i>
 8005bfe:	e7e4      	b.n	8005bca <_vfiprintf_r+0x1ea>
 8005c00:	08006504 	.word	0x08006504
 8005c04:	0800650e 	.word	0x0800650e
 8005c08:	00000000 	.word	0x00000000
 8005c0c:	080059bb 	.word	0x080059bb
 8005c10:	0800650a 	.word	0x0800650a

08005c14 <_printf_common>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4616      	mov	r6, r2
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	688a      	ldr	r2, [r1, #8]
 8005c1e:	690b      	ldr	r3, [r1, #16]
 8005c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bfb8      	it	lt
 8005c28:	4613      	movlt	r3, r2
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c30:	4607      	mov	r7, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b10a      	cbz	r2, 8005c3a <_printf_common+0x26>
 8005c36:	3301      	adds	r3, #1
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0699      	lsls	r1, r3, #26
 8005c3e:	bf42      	ittt	mi
 8005c40:	6833      	ldrmi	r3, [r6, #0]
 8005c42:	3302      	addmi	r3, #2
 8005c44:	6033      	strmi	r3, [r6, #0]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	f015 0506 	ands.w	r5, r5, #6
 8005c4c:	d106      	bne.n	8005c5c <_printf_common+0x48>
 8005c4e:	f104 0a19 	add.w	sl, r4, #25
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	6832      	ldr	r2, [r6, #0]
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dc26      	bgt.n	8005caa <_printf_common+0x96>
 8005c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c60:	1e13      	subs	r3, r2, #0
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	bf18      	it	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	0692      	lsls	r2, r2, #26
 8005c6a:	d42b      	bmi.n	8005cc4 <_printf_common+0xb0>
 8005c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c70:	4649      	mov	r1, r9
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	3001      	adds	r0, #1
 8005c78:	d01e      	beq.n	8005cb8 <_printf_common+0xa4>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	f003 0306 	and.w	r3, r3, #6
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf02      	ittt	eq
 8005c86:	68e5      	ldreq	r5, [r4, #12]
 8005c88:	6833      	ldreq	r3, [r6, #0]
 8005c8a:	1aed      	subeq	r5, r5, r3
 8005c8c:	68a3      	ldr	r3, [r4, #8]
 8005c8e:	bf0c      	ite	eq
 8005c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c94:	2500      	movne	r5, #0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bfc4      	itt	gt
 8005c9a:	1a9b      	subgt	r3, r3, r2
 8005c9c:	18ed      	addgt	r5, r5, r3
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	341a      	adds	r4, #26
 8005ca2:	42b5      	cmp	r5, r6
 8005ca4:	d11a      	bne.n	8005cdc <_printf_common+0xc8>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e008      	b.n	8005cbc <_printf_common+0xa8>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	47c0      	blx	r8
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d103      	bne.n	8005cc0 <_printf_common+0xac>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7c6      	b.n	8005c52 <_printf_common+0x3e>
 8005cc4:	18e1      	adds	r1, r4, r3
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	2030      	movs	r0, #48	; 0x30
 8005cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cce:	4422      	add	r2, r4
 8005cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd8:	3302      	adds	r3, #2
 8005cda:	e7c7      	b.n	8005c6c <_printf_common+0x58>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xa4>
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7d9      	b.n	8005ca2 <_printf_common+0x8e>
	...

08005cf0 <_printf_i>:
 8005cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	7e0f      	ldrb	r7, [r1, #24]
 8005cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf8:	2f78      	cmp	r7, #120	; 0x78
 8005cfa:	4691      	mov	r9, r2
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	469a      	mov	sl, r3
 8005d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d06:	d807      	bhi.n	8005d18 <_printf_i+0x28>
 8005d08:	2f62      	cmp	r7, #98	; 0x62
 8005d0a:	d80a      	bhi.n	8005d22 <_printf_i+0x32>
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	f000 80d4 	beq.w	8005eba <_printf_i+0x1ca>
 8005d12:	2f58      	cmp	r7, #88	; 0x58
 8005d14:	f000 80c0 	beq.w	8005e98 <_printf_i+0x1a8>
 8005d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d20:	e03a      	b.n	8005d98 <_printf_i+0xa8>
 8005d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d26:	2b15      	cmp	r3, #21
 8005d28:	d8f6      	bhi.n	8005d18 <_printf_i+0x28>
 8005d2a:	a101      	add	r1, pc, #4	; (adr r1, 8005d30 <_printf_i+0x40>)
 8005d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d19 	.word	0x08005d19
 8005d3c:	08005d19 	.word	0x08005d19
 8005d40:	08005d19 	.word	0x08005d19
 8005d44:	08005d19 	.word	0x08005d19
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d19 	.word	0x08005d19
 8005d50:	08005d19 	.word	0x08005d19
 8005d54:	08005d19 	.word	0x08005d19
 8005d58:	08005d19 	.word	0x08005d19
 8005d5c:	08005ea1 	.word	0x08005ea1
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005e5b 	.word	0x08005e5b
 8005d68:	08005d19 	.word	0x08005d19
 8005d6c:	08005d19 	.word	0x08005d19
 8005d70:	08005ec3 	.word	0x08005ec3
 8005d74:	08005d19 	.word	0x08005d19
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005d19 	.word	0x08005d19
 8005d80:	08005d19 	.word	0x08005d19
 8005d84:	08005e63 	.word	0x08005e63
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	602a      	str	r2, [r5, #0]
 8005d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e09f      	b.n	8005edc <_printf_i+0x1ec>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	0607      	lsls	r7, r0, #24
 8005da2:	f103 0104 	add.w	r1, r3, #4
 8005da6:	6029      	str	r1, [r5, #0]
 8005da8:	d501      	bpl.n	8005dae <_printf_i+0xbe>
 8005daa:	681e      	ldr	r6, [r3, #0]
 8005dac:	e003      	b.n	8005db6 <_printf_i+0xc6>
 8005dae:	0646      	lsls	r6, r0, #25
 8005db0:	d5fb      	bpl.n	8005daa <_printf_i+0xba>
 8005db2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	da03      	bge.n	8005dc2 <_printf_i+0xd2>
 8005dba:	232d      	movs	r3, #45	; 0x2d
 8005dbc:	4276      	negs	r6, r6
 8005dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc2:	485a      	ldr	r0, [pc, #360]	; (8005f2c <_printf_i+0x23c>)
 8005dc4:	230a      	movs	r3, #10
 8005dc6:	e012      	b.n	8005dee <_printf_i+0xfe>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	0605      	lsls	r5, r0, #24
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0xe8>
 8005dd4:	681e      	ldr	r6, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0xee>
 8005dd8:	0641      	lsls	r1, r0, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0xe4>
 8005ddc:	881e      	ldrh	r6, [r3, #0]
 8005dde:	4853      	ldr	r0, [pc, #332]	; (8005f2c <_printf_i+0x23c>)
 8005de0:	2f6f      	cmp	r7, #111	; 0x6f
 8005de2:	bf0c      	ite	eq
 8005de4:	2308      	moveq	r3, #8
 8005de6:	230a      	movne	r3, #10
 8005de8:	2100      	movs	r1, #0
 8005dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dee:	6865      	ldr	r5, [r4, #4]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	bfa2      	ittt	ge
 8005df6:	6821      	ldrge	r1, [r4, #0]
 8005df8:	f021 0104 	bicge.w	r1, r1, #4
 8005dfc:	6021      	strge	r1, [r4, #0]
 8005dfe:	b90e      	cbnz	r6, 8005e04 <_printf_i+0x114>
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	d04b      	beq.n	8005e9c <_printf_i+0x1ac>
 8005e04:	4615      	mov	r5, r2
 8005e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e0e:	5dc7      	ldrb	r7, [r0, r7]
 8005e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e14:	4637      	mov	r7, r6
 8005e16:	42bb      	cmp	r3, r7
 8005e18:	460e      	mov	r6, r1
 8005e1a:	d9f4      	bls.n	8005e06 <_printf_i+0x116>
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d10b      	bne.n	8005e38 <_printf_i+0x148>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	07de      	lsls	r6, r3, #31
 8005e24:	d508      	bpl.n	8005e38 <_printf_i+0x148>
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	4299      	cmp	r1, r3
 8005e2c:	bfde      	ittt	le
 8005e2e:	2330      	movle	r3, #48	; 0x30
 8005e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e38:	1b52      	subs	r2, r2, r5
 8005e3a:	6122      	str	r2, [r4, #16]
 8005e3c:	f8cd a000 	str.w	sl, [sp]
 8005e40:	464b      	mov	r3, r9
 8005e42:	aa03      	add	r2, sp, #12
 8005e44:	4621      	mov	r1, r4
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7ff fee4 	bl	8005c14 <_printf_common>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d14a      	bne.n	8005ee6 <_printf_i+0x1f6>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	b004      	add	sp, #16
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f043 0320 	orr.w	r3, r3, #32
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	4833      	ldr	r0, [pc, #204]	; (8005f30 <_printf_i+0x240>)
 8005e64:	2778      	movs	r7, #120	; 0x78
 8005e66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	6829      	ldr	r1, [r5, #0]
 8005e6e:	061f      	lsls	r7, r3, #24
 8005e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e74:	d402      	bmi.n	8005e7c <_printf_i+0x18c>
 8005e76:	065f      	lsls	r7, r3, #25
 8005e78:	bf48      	it	mi
 8005e7a:	b2b6      	uxthmi	r6, r6
 8005e7c:	07df      	lsls	r7, r3, #31
 8005e7e:	bf48      	it	mi
 8005e80:	f043 0320 	orrmi.w	r3, r3, #32
 8005e84:	6029      	str	r1, [r5, #0]
 8005e86:	bf48      	it	mi
 8005e88:	6023      	strmi	r3, [r4, #0]
 8005e8a:	b91e      	cbnz	r6, 8005e94 <_printf_i+0x1a4>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	2310      	movs	r3, #16
 8005e96:	e7a7      	b.n	8005de8 <_printf_i+0xf8>
 8005e98:	4824      	ldr	r0, [pc, #144]	; (8005f2c <_printf_i+0x23c>)
 8005e9a:	e7e4      	b.n	8005e66 <_printf_i+0x176>
 8005e9c:	4615      	mov	r5, r2
 8005e9e:	e7bd      	b.n	8005e1c <_printf_i+0x12c>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	6826      	ldr	r6, [r4, #0]
 8005ea4:	6961      	ldr	r1, [r4, #20]
 8005ea6:	1d18      	adds	r0, r3, #4
 8005ea8:	6028      	str	r0, [r5, #0]
 8005eaa:	0635      	lsls	r5, r6, #24
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	d501      	bpl.n	8005eb4 <_printf_i+0x1c4>
 8005eb0:	6019      	str	r1, [r3, #0]
 8005eb2:	e002      	b.n	8005eba <_printf_i+0x1ca>
 8005eb4:	0670      	lsls	r0, r6, #25
 8005eb6:	d5fb      	bpl.n	8005eb0 <_printf_i+0x1c0>
 8005eb8:	8019      	strh	r1, [r3, #0]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	4615      	mov	r5, r2
 8005ec0:	e7bc      	b.n	8005e3c <_printf_i+0x14c>
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	602a      	str	r2, [r5, #0]
 8005ec8:	681d      	ldr	r5, [r3, #0]
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f7fa f9a6 	bl	8000220 <memchr>
 8005ed4:	b108      	cbz	r0, 8005eda <_printf_i+0x1ea>
 8005ed6:	1b40      	subs	r0, r0, r5
 8005ed8:	6060      	str	r0, [r4, #4]
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	6123      	str	r3, [r4, #16]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee4:	e7aa      	b.n	8005e3c <_printf_i+0x14c>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	462a      	mov	r2, r5
 8005eea:	4649      	mov	r1, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	47d0      	blx	sl
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d0ad      	beq.n	8005e50 <_printf_i+0x160>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	d413      	bmi.n	8005f22 <_printf_i+0x232>
 8005efa:	68e0      	ldr	r0, [r4, #12]
 8005efc:	9b03      	ldr	r3, [sp, #12]
 8005efe:	4298      	cmp	r0, r3
 8005f00:	bfb8      	it	lt
 8005f02:	4618      	movlt	r0, r3
 8005f04:	e7a6      	b.n	8005e54 <_printf_i+0x164>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4632      	mov	r2, r6
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	47d0      	blx	sl
 8005f10:	3001      	adds	r0, #1
 8005f12:	d09d      	beq.n	8005e50 <_printf_i+0x160>
 8005f14:	3501      	adds	r5, #1
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	9903      	ldr	r1, [sp, #12]
 8005f1a:	1a5b      	subs	r3, r3, r1
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dcf2      	bgt.n	8005f06 <_printf_i+0x216>
 8005f20:	e7eb      	b.n	8005efa <_printf_i+0x20a>
 8005f22:	2500      	movs	r5, #0
 8005f24:	f104 0619 	add.w	r6, r4, #25
 8005f28:	e7f5      	b.n	8005f16 <_printf_i+0x226>
 8005f2a:	bf00      	nop
 8005f2c:	08006515 	.word	0x08006515
 8005f30:	08006526 	.word	0x08006526

08005f34 <__sflush_r>:
 8005f34:	898a      	ldrh	r2, [r1, #12]
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	0710      	lsls	r0, r2, #28
 8005f3e:	460c      	mov	r4, r1
 8005f40:	d458      	bmi.n	8005ff4 <__sflush_r+0xc0>
 8005f42:	684b      	ldr	r3, [r1, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dc05      	bgt.n	8005f54 <__sflush_r+0x20>
 8005f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dc02      	bgt.n	8005f54 <__sflush_r+0x20>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	d0f9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f60:	682f      	ldr	r7, [r5, #0]
 8005f62:	6a21      	ldr	r1, [r4, #32]
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	d032      	beq.n	8005fce <__sflush_r+0x9a>
 8005f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	075a      	lsls	r2, r3, #29
 8005f6e:	d505      	bpl.n	8005f7c <__sflush_r+0x48>
 8005f70:	6863      	ldr	r3, [r4, #4]
 8005f72:	1ac0      	subs	r0, r0, r3
 8005f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f76:	b10b      	cbz	r3, 8005f7c <__sflush_r+0x48>
 8005f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f7a:	1ac0      	subs	r0, r0, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f82:	6a21      	ldr	r1, [r4, #32]
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b0      	blx	r6
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	d106      	bne.n	8005f9c <__sflush_r+0x68>
 8005f8e:	6829      	ldr	r1, [r5, #0]
 8005f90:	291d      	cmp	r1, #29
 8005f92:	d82b      	bhi.n	8005fec <__sflush_r+0xb8>
 8005f94:	4a29      	ldr	r2, [pc, #164]	; (800603c <__sflush_r+0x108>)
 8005f96:	410a      	asrs	r2, r1
 8005f98:	07d6      	lsls	r6, r2, #31
 8005f9a:	d427      	bmi.n	8005fec <__sflush_r+0xb8>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	6062      	str	r2, [r4, #4]
 8005fa0:	04d9      	lsls	r1, r3, #19
 8005fa2:	6922      	ldr	r2, [r4, #16]
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	d504      	bpl.n	8005fb2 <__sflush_r+0x7e>
 8005fa8:	1c42      	adds	r2, r0, #1
 8005faa:	d101      	bne.n	8005fb0 <__sflush_r+0x7c>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b903      	cbnz	r3, 8005fb2 <__sflush_r+0x7e>
 8005fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8005fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb4:	602f      	str	r7, [r5, #0]
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d0c9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	d002      	beq.n	8005fc8 <__sflush_r+0x94>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7ff fbea 	bl	800579c <_free_r>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	6360      	str	r0, [r4, #52]	; 0x34
 8005fcc:	e7c0      	b.n	8005f50 <__sflush_r+0x1c>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b0      	blx	r6
 8005fd4:	1c41      	adds	r1, r0, #1
 8005fd6:	d1c8      	bne.n	8005f6a <__sflush_r+0x36>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c5      	beq.n	8005f6a <__sflush_r+0x36>
 8005fde:	2b1d      	cmp	r3, #29
 8005fe0:	d001      	beq.n	8005fe6 <__sflush_r+0xb2>
 8005fe2:	2b16      	cmp	r3, #22
 8005fe4:	d101      	bne.n	8005fea <__sflush_r+0xb6>
 8005fe6:	602f      	str	r7, [r5, #0]
 8005fe8:	e7b1      	b.n	8005f4e <__sflush_r+0x1a>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	e7ad      	b.n	8005f50 <__sflush_r+0x1c>
 8005ff4:	690f      	ldr	r7, [r1, #16]
 8005ff6:	2f00      	cmp	r7, #0
 8005ff8:	d0a9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005ffa:	0793      	lsls	r3, r2, #30
 8005ffc:	680e      	ldr	r6, [r1, #0]
 8005ffe:	bf08      	it	eq
 8006000:	694b      	ldreq	r3, [r1, #20]
 8006002:	600f      	str	r7, [r1, #0]
 8006004:	bf18      	it	ne
 8006006:	2300      	movne	r3, #0
 8006008:	eba6 0807 	sub.w	r8, r6, r7
 800600c:	608b      	str	r3, [r1, #8]
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	dd9c      	ble.n	8005f4e <__sflush_r+0x1a>
 8006014:	6a21      	ldr	r1, [r4, #32]
 8006016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006018:	4643      	mov	r3, r8
 800601a:	463a      	mov	r2, r7
 800601c:	4628      	mov	r0, r5
 800601e:	47b0      	blx	r6
 8006020:	2800      	cmp	r0, #0
 8006022:	dc06      	bgt.n	8006032 <__sflush_r+0xfe>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	e78e      	b.n	8005f50 <__sflush_r+0x1c>
 8006032:	4407      	add	r7, r0
 8006034:	eba8 0800 	sub.w	r8, r8, r0
 8006038:	e7e9      	b.n	800600e <__sflush_r+0xda>
 800603a:	bf00      	nop
 800603c:	dfbffffe 	.word	0xdfbffffe

08006040 <_fflush_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b913      	cbnz	r3, 8006050 <_fflush_r+0x10>
 800604a:	2500      	movs	r5, #0
 800604c:	4628      	mov	r0, r5
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	b118      	cbz	r0, 800605a <_fflush_r+0x1a>
 8006052:	6a03      	ldr	r3, [r0, #32]
 8006054:	b90b      	cbnz	r3, 800605a <_fflush_r+0x1a>
 8006056:	f7ff f9a9 	bl	80053ac <__sinit>
 800605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f3      	beq.n	800604a <_fflush_r+0xa>
 8006062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006064:	07d0      	lsls	r0, r2, #31
 8006066:	d404      	bmi.n	8006072 <_fflush_r+0x32>
 8006068:	0599      	lsls	r1, r3, #22
 800606a:	d402      	bmi.n	8006072 <_fflush_r+0x32>
 800606c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606e:	f7ff fb92 	bl	8005796 <__retarget_lock_acquire_recursive>
 8006072:	4628      	mov	r0, r5
 8006074:	4621      	mov	r1, r4
 8006076:	f7ff ff5d 	bl	8005f34 <__sflush_r>
 800607a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800607c:	07da      	lsls	r2, r3, #31
 800607e:	4605      	mov	r5, r0
 8006080:	d4e4      	bmi.n	800604c <_fflush_r+0xc>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	059b      	lsls	r3, r3, #22
 8006086:	d4e1      	bmi.n	800604c <_fflush_r+0xc>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f7ff fb85 	bl	8005798 <__retarget_lock_release_recursive>
 800608e:	e7dd      	b.n	800604c <_fflush_r+0xc>

08006090 <__swhatbuf_r>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	460c      	mov	r4, r1
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	2900      	cmp	r1, #0
 800609a:	b096      	sub	sp, #88	; 0x58
 800609c:	4615      	mov	r5, r2
 800609e:	461e      	mov	r6, r3
 80060a0:	da0d      	bge.n	80060be <__swhatbuf_r+0x2e>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	bf0c      	ite	eq
 80060ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060b2:	2340      	movne	r3, #64	; 0x40
 80060b4:	2000      	movs	r0, #0
 80060b6:	6031      	str	r1, [r6, #0]
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	b016      	add	sp, #88	; 0x58
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	466a      	mov	r2, sp
 80060c0:	f000 f848 	bl	8006154 <_fstat_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	dbec      	blt.n	80060a2 <__swhatbuf_r+0x12>
 80060c8:	9901      	ldr	r1, [sp, #4]
 80060ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80060ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060d2:	4259      	negs	r1, r3
 80060d4:	4159      	adcs	r1, r3
 80060d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060da:	e7eb      	b.n	80060b4 <__swhatbuf_r+0x24>

080060dc <__smakebuf_r>:
 80060dc:	898b      	ldrh	r3, [r1, #12]
 80060de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060e0:	079d      	lsls	r5, r3, #30
 80060e2:	4606      	mov	r6, r0
 80060e4:	460c      	mov	r4, r1
 80060e6:	d507      	bpl.n	80060f8 <__smakebuf_r+0x1c>
 80060e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	2301      	movs	r3, #1
 80060f2:	6163      	str	r3, [r4, #20]
 80060f4:	b002      	add	sp, #8
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	ab01      	add	r3, sp, #4
 80060fa:	466a      	mov	r2, sp
 80060fc:	f7ff ffc8 	bl	8006090 <__swhatbuf_r>
 8006100:	9900      	ldr	r1, [sp, #0]
 8006102:	4605      	mov	r5, r0
 8006104:	4630      	mov	r0, r6
 8006106:	f7ff fbb5 	bl	8005874 <_malloc_r>
 800610a:	b948      	cbnz	r0, 8006120 <__smakebuf_r+0x44>
 800610c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006110:	059a      	lsls	r2, r3, #22
 8006112:	d4ef      	bmi.n	80060f4 <__smakebuf_r+0x18>
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	f043 0302 	orr.w	r3, r3, #2
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	e7e3      	b.n	80060e8 <__smakebuf_r+0xc>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	6020      	str	r0, [r4, #0]
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	9b00      	ldr	r3, [sp, #0]
 800612c:	6163      	str	r3, [r4, #20]
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	6120      	str	r0, [r4, #16]
 8006132:	b15b      	cbz	r3, 800614c <__smakebuf_r+0x70>
 8006134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006138:	4630      	mov	r0, r6
 800613a:	f000 f81d 	bl	8006178 <_isatty_r>
 800613e:	b128      	cbz	r0, 800614c <__smakebuf_r+0x70>
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	431d      	orrs	r5, r3
 8006150:	81a5      	strh	r5, [r4, #12]
 8006152:	e7cf      	b.n	80060f4 <__smakebuf_r+0x18>

08006154 <_fstat_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_fstat_r+0x20>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	f7fb f988 	bl	8001476 <_fstat>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d102      	bne.n	8006170 <_fstat_r+0x1c>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	b103      	cbz	r3, 8006170 <_fstat_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	200003fc 	.word	0x200003fc

08006178 <_isatty_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d06      	ldr	r5, [pc, #24]	; (8006194 <_isatty_r+0x1c>)
 800617c:	2300      	movs	r3, #0
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	f7fb f987 	bl	8001496 <_isatty>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_isatty_r+0x1a>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_isatty_r+0x1a>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	200003fc 	.word	0x200003fc

08006198 <_sbrk_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d06      	ldr	r5, [pc, #24]	; (80061b4 <_sbrk_r+0x1c>)
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	f7fb f990 	bl	80014c8 <_sbrk>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_sbrk_r+0x1a>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_sbrk_r+0x1a>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	200003fc 	.word	0x200003fc

080061b8 <_init>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr

080061c4 <_fini>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	bf00      	nop
 80061c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ca:	bc08      	pop	{r3}
 80061cc:	469e      	mov	lr, r3
 80061ce:	4770      	bx	lr
